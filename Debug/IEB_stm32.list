
IEB_stm32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a84  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001814  08007b44  08007b44  00017b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009358  08009358  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009358  08009358  00019358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009360  08009360  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009360  08009360  00019360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009364  08009364  00019364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  080093e0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  080093e0  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a04  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ce0  00000000  00000000  00034aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e98  00000000  00000000  00037788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d70  00000000  00000000  00038620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b93  00000000  00000000  00039390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000132eb  00000000  00000000  0004df23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007576b  00000000  00000000  0006120e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d6979  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000d69cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007b2c 	.word	0x08007b2c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08007b2c 	.word	0x08007b2c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8d8 	bl	80004a8 <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8d3 	bl	80004a8 <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <__clzdi2>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d103      	bne.n	80004b6 <__clzdi2+0xe>
 80004ae:	f7ff ffdd 	bl	800046c <__clzsi2>
 80004b2:	3020      	adds	r0, #32
 80004b4:	e002      	b.n	80004bc <__clzdi2+0x14>
 80004b6:	1c08      	adds	r0, r1, #0
 80004b8:	f7ff ffd8 	bl	800046c <__clzsi2>
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <wrSensorReg16_8>:
#define SCCB_READ 1

static uint16_t VIS_ADDRESS = 0x78;
static uint16_t NIR_ADDRESS = 0x7C;
// arducam functions
int wrSensorReg16_8(uint16_t regID, uint8_t regDat, uint8_t sensor) {
 80004c0:	b5b0      	push	{r4, r5, r7, lr}
 80004c2:	b098      	sub	sp, #96	; 0x60
 80004c4:	af04      	add	r7, sp, #16
 80004c6:	0004      	movs	r4, r0
 80004c8:	0008      	movs	r0, r1
 80004ca:	0011      	movs	r1, r2
 80004cc:	1dbb      	adds	r3, r7, #6
 80004ce:	1c22      	adds	r2, r4, #0
 80004d0:	801a      	strh	r2, [r3, #0]
 80004d2:	1d7b      	adds	r3, r7, #5
 80004d4:	1c02      	adds	r2, r0, #0
 80004d6:	701a      	strb	r2, [r3, #0]
 80004d8:	1d3b      	adds	r3, r7, #4
 80004da:	1c0a      	adds	r2, r1, #0
 80004dc:	701a      	strb	r2, [r3, #0]
    uint8_t data = regDat;
 80004de:	254e      	movs	r5, #78	; 0x4e
 80004e0:	197b      	adds	r3, r7, r5
 80004e2:	1d7a      	adds	r2, r7, #5
 80004e4:	7812      	ldrb	r2, [r2, #0]
 80004e6:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef rc;
    if (sensor == VIS_SENSOR){
 80004e8:	1d3b      	adds	r3, r7, #4
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	2b00      	cmp	r3, #0
 80004ee:	d112      	bne.n	8000516 <wrSensorReg16_8+0x56>
        rc = HAL_I2C_Mem_Write(&hi2c2, VIS_ADDRESS, regID, I2C_MEMADD_SIZE_16BIT, &data, 1, 100);
 80004f0:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <wrSensorReg16_8+0xb0>)
 80004f2:	8819      	ldrh	r1, [r3, #0]
 80004f4:	234f      	movs	r3, #79	; 0x4f
 80004f6:	18fc      	adds	r4, r7, r3
 80004f8:	1dbb      	adds	r3, r7, #6
 80004fa:	881a      	ldrh	r2, [r3, #0]
 80004fc:	481d      	ldr	r0, [pc, #116]	; (8000574 <wrSensorReg16_8+0xb4>)
 80004fe:	2364      	movs	r3, #100	; 0x64
 8000500:	9302      	str	r3, [sp, #8]
 8000502:	2301      	movs	r3, #1
 8000504:	9301      	str	r3, [sp, #4]
 8000506:	197b      	adds	r3, r7, r5
 8000508:	9300      	str	r3, [sp, #0]
 800050a:	2302      	movs	r3, #2
 800050c:	f002 ffd4 	bl	80034b8 <HAL_I2C_Mem_Write>
 8000510:	0003      	movs	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
 8000514:	e012      	b.n	800053c <wrSensorReg16_8+0x7c>
    }
    else{
        rc = HAL_I2C_Mem_Write(&hi2c2, NIR_ADDRESS, regID, I2C_MEMADD_SIZE_16BIT, &data, 1, 100);
 8000516:	4b18      	ldr	r3, [pc, #96]	; (8000578 <wrSensorReg16_8+0xb8>)
 8000518:	8819      	ldrh	r1, [r3, #0]
 800051a:	234f      	movs	r3, #79	; 0x4f
 800051c:	18fc      	adds	r4, r7, r3
 800051e:	1dbb      	adds	r3, r7, #6
 8000520:	881a      	ldrh	r2, [r3, #0]
 8000522:	4814      	ldr	r0, [pc, #80]	; (8000574 <wrSensorReg16_8+0xb4>)
 8000524:	2364      	movs	r3, #100	; 0x64
 8000526:	9302      	str	r3, [sp, #8]
 8000528:	2301      	movs	r3, #1
 800052a:	9301      	str	r3, [sp, #4]
 800052c:	234e      	movs	r3, #78	; 0x4e
 800052e:	18fb      	adds	r3, r7, r3
 8000530:	9300      	str	r3, [sp, #0]
 8000532:	2302      	movs	r3, #2
 8000534:	f002 ffc0 	bl	80034b8 <HAL_I2C_Mem_Write>
 8000538:	0003      	movs	r3, r0
 800053a:	7023      	strb	r3, [r4, #0]

    }
    if (rc != HAL_OK) {
 800053c:	214f      	movs	r1, #79	; 0x4f
 800053e:	187b      	adds	r3, r7, r1
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d009      	beq.n	800055a <wrSensorReg16_8+0x9a>
        char buf[64];
        sprintf(buf, "I2C write to 0x%x failed: 0x%x\r\n", regID, rc);
 8000546:	1dbb      	adds	r3, r7, #6
 8000548:	881a      	ldrh	r2, [r3, #0]
 800054a:	187b      	adds	r3, r7, r1
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	490b      	ldr	r1, [pc, #44]	; (800057c <wrSensorReg16_8+0xbc>)
 8000550:	200c      	movs	r0, #12
 8000552:	1838      	adds	r0, r7, r0
 8000554:	f006 f9d2 	bl	80068fc <siprintf>
 8000558:	e002      	b.n	8000560 <wrSensorReg16_8+0xa0>
    }
    else
        HAL_Delay(1);
 800055a:	2001      	movs	r0, #1
 800055c:	f002 fc86 	bl	8002e6c <HAL_Delay>
    return (int) rc;
 8000560:	234f      	movs	r3, #79	; 0x4f
 8000562:	18fb      	adds	r3, r7, r3
 8000564:	781b      	ldrb	r3, [r3, #0]
}
 8000566:	0018      	movs	r0, r3
 8000568:	46bd      	mov	sp, r7
 800056a:	b014      	add	sp, #80	; 0x50
 800056c:	bdb0      	pop	{r4, r5, r7, pc}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	20000000 	.word	0x20000000
 8000574:	20000104 	.word	0x20000104
 8000578:	20000002 	.word	0x20000002
 800057c:	08007b44 	.word	0x08007b44

08000580 <wrSensorRegs16_8>:

int wrSensorRegs16_8(const struct sensor_reg reglist[], uint8_t sensor) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b084      	sub	sp, #16
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
 8000588:	000a      	movs	r2, r1
 800058a:	1cfb      	adds	r3, r7, #3
 800058c:	701a      	strb	r2, [r3, #0]
    const struct sensor_reg *curr = reglist;
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	60fb      	str	r3, [r7, #12]
    for (curr=reglist; curr->reg != 0xffff; curr++) {
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	60fb      	str	r3, [r7, #12]
 8000596:	e00c      	b.n	80005b2 <wrSensorRegs16_8+0x32>
        wrSensorReg16_8(curr->reg, curr->val, sensor);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	8818      	ldrh	r0, [r3, #0]
 800059c:	68fb      	ldr	r3, [r7, #12]
 800059e:	885b      	ldrh	r3, [r3, #2]
 80005a0:	b2d9      	uxtb	r1, r3
 80005a2:	1cfb      	adds	r3, r7, #3
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	001a      	movs	r2, r3
 80005a8:	f7ff ff8a 	bl	80004c0 <wrSensorReg16_8>
    for (curr=reglist; curr->reg != 0xffff; curr++) {
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	3304      	adds	r3, #4
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	881b      	ldrh	r3, [r3, #0]
 80005b6:	4a04      	ldr	r2, [pc, #16]	; (80005c8 <wrSensorRegs16_8+0x48>)
 80005b8:	4293      	cmp	r3, r2
 80005ba:	d1ed      	bne.n	8000598 <wrSensorRegs16_8+0x18>
    }
    return 0;
 80005bc:	2300      	movs	r3, #0
}
 80005be:	0018      	movs	r0, r3
 80005c0:	46bd      	mov	sp, r7
 80005c2:	b004      	add	sp, #16
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	0000ffff 	.word	0x0000ffff

080005cc <rdSensorReg16_8>:

int rdSensorReg16_8(uint16_t regID, uint8_t *regDat, uint8_t sensor) {
 80005cc:	b590      	push	{r4, r7, lr}
 80005ce:	b099      	sub	sp, #100	; 0x64
 80005d0:	af04      	add	r7, sp, #16
 80005d2:	6039      	str	r1, [r7, #0]
 80005d4:	0011      	movs	r1, r2
 80005d6:	1dbb      	adds	r3, r7, #6
 80005d8:	1c02      	adds	r2, r0, #0
 80005da:	801a      	strh	r2, [r3, #0]
 80005dc:	1d7b      	adds	r3, r7, #5
 80005de:	1c0a      	adds	r2, r1, #0
 80005e0:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef rc;
    if (sensor == VIS_SENSOR){
 80005e2:	1d7b      	adds	r3, r7, #5
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d112      	bne.n	8000610 <rdSensorReg16_8+0x44>
        rc = HAL_I2C_Mem_Read(&hi2c2, VIS_ADDRESS, regID, I2C_MEMADD_SIZE_16BIT, regDat, 1, 100);
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <rdSensorReg16_8+0x94>)
 80005ec:	8819      	ldrh	r1, [r3, #0]
 80005ee:	234f      	movs	r3, #79	; 0x4f
 80005f0:	18fc      	adds	r4, r7, r3
 80005f2:	1dbb      	adds	r3, r7, #6
 80005f4:	881a      	ldrh	r2, [r3, #0]
 80005f6:	481b      	ldr	r0, [pc, #108]	; (8000664 <rdSensorReg16_8+0x98>)
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	9302      	str	r3, [sp, #8]
 80005fc:	2301      	movs	r3, #1
 80005fe:	9301      	str	r3, [sp, #4]
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2302      	movs	r3, #2
 8000606:	f003 f885 	bl	8003714 <HAL_I2C_Mem_Read>
 800060a:	0003      	movs	r3, r0
 800060c:	7023      	strb	r3, [r4, #0]
 800060e:	e011      	b.n	8000634 <rdSensorReg16_8+0x68>

    }
    else{
        rc = HAL_I2C_Mem_Read(&hi2c2, NIR_ADDRESS, regID, I2C_MEMADD_SIZE_16BIT, regDat, 1, 100);
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <rdSensorReg16_8+0x9c>)
 8000612:	8819      	ldrh	r1, [r3, #0]
 8000614:	234f      	movs	r3, #79	; 0x4f
 8000616:	18fc      	adds	r4, r7, r3
 8000618:	1dbb      	adds	r3, r7, #6
 800061a:	881a      	ldrh	r2, [r3, #0]
 800061c:	4811      	ldr	r0, [pc, #68]	; (8000664 <rdSensorReg16_8+0x98>)
 800061e:	2364      	movs	r3, #100	; 0x64
 8000620:	9302      	str	r3, [sp, #8]
 8000622:	2301      	movs	r3, #1
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	683b      	ldr	r3, [r7, #0]
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2302      	movs	r3, #2
 800062c:	f003 f872 	bl	8003714 <HAL_I2C_Mem_Read>
 8000630:	0003      	movs	r3, r0
 8000632:	7023      	strb	r3, [r4, #0]

    }
    if (rc != HAL_OK) {
 8000634:	214f      	movs	r1, #79	; 0x4f
 8000636:	187b      	adds	r3, r7, r1
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d008      	beq.n	8000650 <rdSensorReg16_8+0x84>
        char buf[64];
        sprintf(buf, "I2C read xmit to 0x%x failed: 0x%x\r\n", regID, rc);
 800063e:	1dbb      	adds	r3, r7, #6
 8000640:	881a      	ldrh	r2, [r3, #0]
 8000642:	187b      	adds	r3, r7, r1
 8000644:	781b      	ldrb	r3, [r3, #0]
 8000646:	4909      	ldr	r1, [pc, #36]	; (800066c <rdSensorReg16_8+0xa0>)
 8000648:	200c      	movs	r0, #12
 800064a:	1838      	adds	r0, r7, r0
 800064c:	f006 f956 	bl	80068fc <siprintf>
    }
    return (int) rc;
 8000650:	234f      	movs	r3, #79	; 0x4f
 8000652:	18fb      	adds	r3, r7, r3
 8000654:	781b      	ldrb	r3, [r3, #0]
}
 8000656:	0018      	movs	r0, r3
 8000658:	46bd      	mov	sp, r7
 800065a:	b015      	add	sp, #84	; 0x54
 800065c:	bd90      	pop	{r4, r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	20000000 	.word	0x20000000
 8000664:	20000104 	.word	0x20000104
 8000668:	20000002 	.word	0x20000002
 800066c:	08007b68 	.word	0x08007b68

08000670 <DBG_PUT>:
#include <stdio.h>
#include <string.h>

extern UART_HandleTypeDef huart1;

static inline void DBG_PUT(char *str) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	0018      	movs	r0, r3
 800067c:	f7ff fd44 	bl	8000108 <strlen>
 8000680:	0003      	movs	r3, r0
 8000682:	b29a      	uxth	r2, r3
 8000684:	6879      	ldr	r1, [r7, #4]
 8000686:	4804      	ldr	r0, [pc, #16]	; (8000698 <DBG_PUT+0x28>)
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	f005 fae7 	bl	8005c5c <HAL_UART_Transmit>
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b002      	add	sp, #8
 8000694:	bd80      	pop	{r7, pc}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	20000150 	.word	0x20000150

0800069c <arducam_delay_ms>:
#include "debug.h"
#include "I2C.h"

#define BUFFER_MAX_SIZE 4096

void arducam_delay_ms(int ms) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 fbe0 	bl	8002e6c <HAL_Delay>
}
 80006ac:	46c0      	nop			; (mov r8, r8)
 80006ae:	46bd      	mov	sp, r7
 80006b0:	b002      	add	sp, #8
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <Arduino_init>:

void Arduino_init(int m_fmt, int sensor) {
 80006b4:	b590      	push	{r4, r7, lr}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
 80006bc:	6039      	str	r1, [r7, #0]
    if (m_fmt == RAW){
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	2b02      	cmp	r3, #2
 80006c2:	d109      	bne.n	80006d8 <Arduino_init+0x24>
        arducam_raw_init(1280, 960, sensor);
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	23f0      	movs	r3, #240	; 0xf0
 80006ca:	0099      	lsls	r1, r3, #2
 80006cc:	23a0      	movs	r3, #160	; 0xa0
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 f8bd 	bl	8000850 <arducam_raw_init>
            wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff, sensor);
            rdSensorReg16_8(0x3621, &reg_val, sensor); // Array Ctl 01 = Horizontal bin
            wrSensorReg16_8(0x3621, reg_val & 0xdf, sensor);
        }
    }
}
 80006d6:	e09c      	b.n	8000812 <Arduino_init+0x15e>
        wrSensorReg16_8(REG_SYS_CTL0, 0x82, sensor); // software reset
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	484f      	ldr	r0, [pc, #316]	; (800081c <Arduino_init+0x168>)
 80006de:	001a      	movs	r2, r3
 80006e0:	2182      	movs	r1, #130	; 0x82
 80006e2:	f7ff feed 	bl	80004c0 <wrSensorReg16_8>
        wrSensorRegs16_8(OV5642_QVGA_Preview, sensor);
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b4d      	ldr	r3, [pc, #308]	; (8000820 <Arduino_init+0x16c>)
 80006ec:	0011      	movs	r1, r2
 80006ee:	0018      	movs	r0, r3
 80006f0:	f7ff ff46 	bl	8000580 <wrSensorRegs16_8>
        arducam_delay_ms(100);
 80006f4:	2064      	movs	r0, #100	; 0x64
 80006f6:	f7ff ffd1 	bl	800069c <arducam_delay_ms>
        if (m_fmt == JPEG) {
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	2b01      	cmp	r3, #1
 80006fe:	d13f      	bne.n	8000780 <Arduino_init+0xcc>
            arducam_delay_ms(100);
 8000700:	2064      	movs	r0, #100	; 0x64
 8000702:	f7ff ffcb 	bl	800069c <arducam_delay_ms>
            wrSensorRegs16_8(OV5642_JPEG_Capture_QSXGA, sensor);
 8000706:	683b      	ldr	r3, [r7, #0]
 8000708:	b2da      	uxtb	r2, r3
 800070a:	4b46      	ldr	r3, [pc, #280]	; (8000824 <Arduino_init+0x170>)
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f7ff ff36 	bl	8000580 <wrSensorRegs16_8>
            wrSensorRegs16_8(ov5642_320x240, sensor);
 8000714:	683b      	ldr	r3, [r7, #0]
 8000716:	b2da      	uxtb	r2, r3
 8000718:	4b43      	ldr	r3, [pc, #268]	; (8000828 <Arduino_init+0x174>)
 800071a:	0011      	movs	r1, r2
 800071c:	0018      	movs	r0, r3
 800071e:	f7ff ff2f 	bl	8000580 <wrSensorRegs16_8>
            arducam_delay_ms(100);
 8000722:	2064      	movs	r0, #100	; 0x64
 8000724:	f7ff ffba 	bl	800069c <arducam_delay_ms>
            wrSensorReg16_8(0x3818, 0xa8, sensor);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2db      	uxtb	r3, r3
 800072c:	483f      	ldr	r0, [pc, #252]	; (800082c <Arduino_init+0x178>)
 800072e:	001a      	movs	r2, r3
 8000730:	21a8      	movs	r1, #168	; 0xa8
 8000732:	f7ff fec5 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x3621, 0x10, sensor);
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	b2db      	uxtb	r3, r3
 800073a:	483d      	ldr	r0, [pc, #244]	; (8000830 <Arduino_init+0x17c>)
 800073c:	001a      	movs	r2, r3
 800073e:	2110      	movs	r1, #16
 8000740:	f7ff febe 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x3801, 0xb0, sensor);
 8000744:	683b      	ldr	r3, [r7, #0]
 8000746:	b2db      	uxtb	r3, r3
 8000748:	483a      	ldr	r0, [pc, #232]	; (8000834 <Arduino_init+0x180>)
 800074a:	001a      	movs	r2, r3
 800074c:	21b0      	movs	r1, #176	; 0xb0
 800074e:	f7ff feb7 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x4407, 0x0C, sensor);
 8000752:	683b      	ldr	r3, [r7, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	4838      	ldr	r0, [pc, #224]	; (8000838 <Arduino_init+0x184>)
 8000758:	001a      	movs	r2, r3
 800075a:	210c      	movs	r1, #12
 800075c:	f7ff feb0 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x5888, 0x00, sensor);
 8000760:	683b      	ldr	r3, [r7, #0]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4835      	ldr	r0, [pc, #212]	; (800083c <Arduino_init+0x188>)
 8000766:	001a      	movs	r2, r3
 8000768:	2100      	movs	r1, #0
 800076a:	f7ff fea9 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x5000, 0xFF, sensor);
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	b2da      	uxtb	r2, r3
 8000772:	23a0      	movs	r3, #160	; 0xa0
 8000774:	01db      	lsls	r3, r3, #7
 8000776:	21ff      	movs	r1, #255	; 0xff
 8000778:	0018      	movs	r0, r3
 800077a:	f7ff fea1 	bl	80004c0 <wrSensorReg16_8>
}
 800077e:	e048      	b.n	8000812 <Arduino_init+0x15e>
            wrSensorReg16_8(0x4740, 0x21, sensor);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	482e      	ldr	r0, [pc, #184]	; (8000840 <Arduino_init+0x18c>)
 8000786:	001a      	movs	r2, r3
 8000788:	2121      	movs	r1, #33	; 0x21
 800078a:	f7ff fe99 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x501e, 0x2a, sensor); // RGB Dither Ctl = RGB565/555
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	b2db      	uxtb	r3, r3
 8000792:	482c      	ldr	r0, [pc, #176]	; (8000844 <Arduino_init+0x190>)
 8000794:	001a      	movs	r2, r3
 8000796:	212a      	movs	r1, #42	; 0x2a
 8000798:	f7ff fe92 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x5002, 0xf8, sensor); // ISP Ctl 2 = Dither enable
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	4829      	ldr	r0, [pc, #164]	; (8000848 <Arduino_init+0x194>)
 80007a2:	001a      	movs	r2, r3
 80007a4:	21f8      	movs	r1, #248	; 0xf8
 80007a6:	f7ff fe8b 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x501f, 0x01, sensor); // Format MUX Ctl = ISP RGB
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	b2db      	uxtb	r3, r3
 80007ae:	4827      	ldr	r0, [pc, #156]	; (800084c <Arduino_init+0x198>)
 80007b0:	001a      	movs	r2, r3
 80007b2:	2101      	movs	r1, #1
 80007b4:	f7ff fe84 	bl	80004c0 <wrSensorReg16_8>
            wrSensorReg16_8(0x4300, 0x61, sensor); // Format Ctl = RGB565
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	b2da      	uxtb	r2, r3
 80007bc:	2386      	movs	r3, #134	; 0x86
 80007be:	01db      	lsls	r3, r3, #7
 80007c0:	2161      	movs	r1, #97	; 0x61
 80007c2:	0018      	movs	r0, r3
 80007c4:	f7ff fe7c 	bl	80004c0 <wrSensorReg16_8>
            rdSensorReg16_8(0x3818, &reg_val, sensor); // Timing Ctl = Mirror/Vertical flip
 80007c8:	683b      	ldr	r3, [r7, #0]
 80007ca:	b2da      	uxtb	r2, r3
 80007cc:	240f      	movs	r4, #15
 80007ce:	193b      	adds	r3, r7, r4
 80007d0:	4816      	ldr	r0, [pc, #88]	; (800082c <Arduino_init+0x178>)
 80007d2:	0019      	movs	r1, r3
 80007d4:	f7ff fefa 	bl	80005cc <rdSensorReg16_8>
            wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff, sensor);
 80007d8:	193b      	adds	r3, r7, r4
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2260      	movs	r2, #96	; 0x60
 80007de:	4313      	orrs	r3, r2
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	b2d2      	uxtb	r2, r2
 80007e6:	4811      	ldr	r0, [pc, #68]	; (800082c <Arduino_init+0x178>)
 80007e8:	0019      	movs	r1, r3
 80007ea:	f7ff fe69 	bl	80004c0 <wrSensorReg16_8>
            rdSensorReg16_8(0x3621, &reg_val, sensor); // Array Ctl 01 = Horizontal bin
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	b2da      	uxtb	r2, r3
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	480e      	ldr	r0, [pc, #56]	; (8000830 <Arduino_init+0x17c>)
 80007f6:	0019      	movs	r1, r3
 80007f8:	f7ff fee8 	bl	80005cc <rdSensorReg16_8>
            wrSensorReg16_8(0x3621, reg_val & 0xdf, sensor);
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	2220      	movs	r2, #32
 8000802:	4393      	bics	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	683a      	ldr	r2, [r7, #0]
 8000808:	b2d2      	uxtb	r2, r2
 800080a:	4809      	ldr	r0, [pc, #36]	; (8000830 <Arduino_init+0x17c>)
 800080c:	0019      	movs	r1, r3
 800080e:	f7ff fe57 	bl	80004c0 <wrSensorReg16_8>
}
 8000812:	46c0      	nop			; (mov r8, r8)
 8000814:	46bd      	mov	sp, r7
 8000816:	b005      	add	sp, #20
 8000818:	bd90      	pop	{r4, r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	00003008 	.word	0x00003008
 8000820:	080086b8 	.word	0x080086b8
 8000824:	08008fd8 	.word	0x08008fd8
 8000828:	08008510 	.word	0x08008510
 800082c:	00003818 	.word	0x00003818
 8000830:	00003621 	.word	0x00003621
 8000834:	00003801 	.word	0x00003801
 8000838:	00004407 	.word	0x00004407
 800083c:	00005888 	.word	0x00005888
 8000840:	00004740 	.word	0x00004740
 8000844:	0000501e 	.word	0x0000501e
 8000848:	00005002 	.word	0x00005002
 800084c:	0000501f 	.word	0x0000501f

08000850 <arducam_raw_init>:

void arducam_raw_init(int width, int depth, uint8_t sensor) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	1dfb      	adds	r3, r7, #7
 800085c:	701a      	strb	r2, [r3, #0]
     * you change the resolution, but that's what all the examples do.
     *
     * I also don't know if the order of programming the registers matters, but
     * all the examples set the resolution in exactly the same place.
     */
    wrSensorRegs16_8(OV5642_RAW_Init_start, sensor);
 800085e:	1dfb      	adds	r3, r7, #7
 8000860:	781a      	ldrb	r2, [r3, #0]
 8000862:	4b19      	ldr	r3, [pc, #100]	; (80008c8 <arducam_raw_init+0x78>)
 8000864:	0011      	movs	r1, r2
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff fe8a 	bl	8000580 <wrSensorRegs16_8>

    wrSensorReg16_8(REG_DVPHO_HI, (uint8_t) (width >> 8), sensor);
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	121b      	asrs	r3, r3, #8
 8000870:	b2d9      	uxtb	r1, r3
 8000872:	1dfb      	adds	r3, r7, #7
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4815      	ldr	r0, [pc, #84]	; (80008cc <arducam_raw_init+0x7c>)
 8000878:	001a      	movs	r2, r3
 800087a:	f7ff fe21 	bl	80004c0 <wrSensorReg16_8>
    wrSensorReg16_8(REG_DVPHO_LO, (uint8_t) (width & 0x0ff), sensor);
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	b2d9      	uxtb	r1, r3
 8000882:	1dfb      	adds	r3, r7, #7
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	4812      	ldr	r0, [pc, #72]	; (80008d0 <arducam_raw_init+0x80>)
 8000888:	001a      	movs	r2, r3
 800088a:	f7ff fe19 	bl	80004c0 <wrSensorReg16_8>
    wrSensorReg16_8(REG_DVPVO_HI, (uint8_t) (depth >> 8), sensor);
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	121b      	asrs	r3, r3, #8
 8000892:	b2d9      	uxtb	r1, r3
 8000894:	1dfb      	adds	r3, r7, #7
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	480e      	ldr	r0, [pc, #56]	; (80008d4 <arducam_raw_init+0x84>)
 800089a:	001a      	movs	r2, r3
 800089c:	f7ff fe10 	bl	80004c0 <wrSensorReg16_8>
    wrSensorReg16_8(REG_DVPVO_LO, (uint8_t) (depth & 0x0ff), sensor);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	b2d9      	uxtb	r1, r3
 80008a4:	1dfb      	adds	r3, r7, #7
 80008a6:	781b      	ldrb	r3, [r3, #0]
 80008a8:	480b      	ldr	r0, [pc, #44]	; (80008d8 <arducam_raw_init+0x88>)
 80008aa:	001a      	movs	r2, r3
 80008ac:	f7ff fe08 	bl	80004c0 <wrSensorReg16_8>

    wrSensorRegs16_8(OV5642_RAW_Init_finish, sensor);
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	781a      	ldrb	r2, [r3, #0]
 80008b4:	4b09      	ldr	r3, [pc, #36]	; (80008dc <arducam_raw_init+0x8c>)
 80008b6:	0011      	movs	r1, r2
 80008b8:	0018      	movs	r0, r3
 80008ba:	f7ff fe61 	bl	8000580 <wrSensorRegs16_8>
}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	46bd      	mov	sp, r7
 80008c2:	b004      	add	sp, #16
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	46c0      	nop			; (mov r8, r8)
 80008c8:	08008360 	.word	0x08008360
 80008cc:	00003808 	.word	0x00003808
 80008d0:	00003809 	.word	0x00003809
 80008d4:	0000380a 	.word	0x0000380a
 80008d8:	0000380b 	.word	0x0000380b
 80008dc:	08008418 	.word	0x08008418

080008e0 <arducam_get_resolution>:

void arducam_get_resolution(int *width, int *depth, uint8_t sensor) {
 80008e0:	b590      	push	{r4, r7, lr}
 80008e2:	b087      	sub	sp, #28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	701a      	strb	r2, [r3, #0]
    if (!width || !depth)
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d044      	beq.n	800097e <arducam_get_resolution+0x9e>
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d041      	beq.n	800097e <arducam_get_resolution+0x9e>
        return;
    *width = 0;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
    *depth = 0;
 8000900:	68bb      	ldr	r3, [r7, #8]
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]

    uint8_t reg_val;
    rdSensorReg16_8(REG_DVPHO_HI, &reg_val, sensor);
 8000906:	1dfb      	adds	r3, r7, #7
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	2417      	movs	r4, #23
 800090c:	193b      	adds	r3, r7, r4
 800090e:	481e      	ldr	r0, [pc, #120]	; (8000988 <arducam_get_resolution+0xa8>)
 8000910:	0019      	movs	r1, r3
 8000912:	f7ff fe5b 	bl	80005cc <rdSensorReg16_8>
    *width = reg_val << 8;
 8000916:	0021      	movs	r1, r4
 8000918:	187b      	adds	r3, r7, r1
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	021a      	lsls	r2, r3, #8
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	601a      	str	r2, [r3, #0]
    rdSensorReg16_8(REG_DVPHO_LO, &reg_val, sensor);
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	781a      	ldrb	r2, [r3, #0]
 8000926:	000c      	movs	r4, r1
 8000928:	187b      	adds	r3, r7, r1
 800092a:	4818      	ldr	r0, [pc, #96]	; (800098c <arducam_get_resolution+0xac>)
 800092c:	0019      	movs	r1, r3
 800092e:	f7ff fe4d 	bl	80005cc <rdSensorReg16_8>
    *width |= reg_val;
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	0021      	movs	r1, r4
 8000938:	187a      	adds	r2, r7, r1
 800093a:	7812      	ldrb	r2, [r2, #0]
 800093c:	431a      	orrs	r2, r3
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	601a      	str	r2, [r3, #0]
    rdSensorReg16_8(REG_DVPVO_HI, &reg_val, sensor);
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781a      	ldrb	r2, [r3, #0]
 8000946:	000c      	movs	r4, r1
 8000948:	187b      	adds	r3, r7, r1
 800094a:	4811      	ldr	r0, [pc, #68]	; (8000990 <arducam_get_resolution+0xb0>)
 800094c:	0019      	movs	r1, r3
 800094e:	f7ff fe3d 	bl	80005cc <rdSensorReg16_8>
    *depth = reg_val << 8;
 8000952:	0021      	movs	r1, r4
 8000954:	187b      	adds	r3, r7, r1
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	021a      	lsls	r2, r3, #8
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	601a      	str	r2, [r3, #0]
    rdSensorReg16_8(REG_DVPVO_LO, &reg_val, sensor);
 800095e:	1dfb      	adds	r3, r7, #7
 8000960:	781a      	ldrb	r2, [r3, #0]
 8000962:	000c      	movs	r4, r1
 8000964:	187b      	adds	r3, r7, r1
 8000966:	480b      	ldr	r0, [pc, #44]	; (8000994 <arducam_get_resolution+0xb4>)
 8000968:	0019      	movs	r1, r3
 800096a:	f7ff fe2f 	bl	80005cc <rdSensorReg16_8>
    *depth |= reg_val;
 800096e:	68bb      	ldr	r3, [r7, #8]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	193a      	adds	r2, r7, r4
 8000974:	7812      	ldrb	r2, [r2, #0]
 8000976:	431a      	orrs	r2, r3
 8000978:	68bb      	ldr	r3, [r7, #8]
 800097a:	601a      	str	r2, [r3, #0]
 800097c:	e000      	b.n	8000980 <arducam_get_resolution+0xa0>
        return;
 800097e:	46c0      	nop			; (mov r8, r8)
}
 8000980:	46bd      	mov	sp, r7
 8000982:	b007      	add	sp, #28
 8000984:	bd90      	pop	{r4, r7, pc}
 8000986:	46c0      	nop			; (mov r8, r8)
 8000988:	00003808 	.word	0x00003808
 800098c:	00003809 	.word	0x00003809
 8000990:	0000380a 	.word	0x0000380a
 8000994:	0000380b 	.word	0x0000380b

08000998 <arducam_set_resolution>:

int arducam_set_resolution(int format, int width, uint8_t sensor) {
 8000998:	b580      	push	{r7, lr}
 800099a:	b086      	sub	sp, #24
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	60b9      	str	r1, [r7, #8]
 80009a2:	1dfb      	adds	r3, r7, #7
 80009a4:	701a      	strb	r2, [r3, #0]
    int rc = width;
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	617b      	str	r3, [r7, #20]
    switch(width) {
 80009aa:	68ba      	ldr	r2, [r7, #8]
 80009ac:	23a2      	movs	r3, #162	; 0xa2
 80009ae:	011b      	lsls	r3, r3, #4
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d100      	bne.n	80009b6 <arducam_set_resolution+0x1e>
 80009b4:	e094      	b.n	8000ae0 <arducam_set_resolution+0x148>
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	23a2      	movs	r3, #162	; 0xa2
 80009ba:	011b      	lsls	r3, r3, #4
 80009bc:	429a      	cmp	r2, r3
 80009be:	dd00      	ble.n	80009c2 <arducam_set_resolution+0x2a>
 80009c0:	e0a2      	b.n	8000b08 <arducam_set_resolution+0x170>
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	23f0      	movs	r3, #240	; 0xf0
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d100      	bne.n	80009ce <arducam_set_resolution+0x36>
 80009cc:	e074      	b.n	8000ab8 <arducam_set_resolution+0x120>
 80009ce:	68ba      	ldr	r2, [r7, #8]
 80009d0:	23f0      	movs	r3, #240	; 0xf0
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	429a      	cmp	r2, r3
 80009d6:	dd00      	ble.n	80009da <arducam_set_resolution+0x42>
 80009d8:	e096      	b.n	8000b08 <arducam_set_resolution+0x170>
 80009da:	68ba      	ldr	r2, [r7, #8]
 80009dc:	23a0      	movs	r3, #160	; 0xa0
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	429a      	cmp	r2, r3
 80009e2:	d054      	beq.n	8000a8e <arducam_set_resolution+0xf6>
 80009e4:	68ba      	ldr	r2, [r7, #8]
 80009e6:	23a0      	movs	r3, #160	; 0xa0
 80009e8:	00db      	lsls	r3, r3, #3
 80009ea:	429a      	cmp	r2, r3
 80009ec:	dd00      	ble.n	80009f0 <arducam_set_resolution+0x58>
 80009ee:	e08b      	b.n	8000b08 <arducam_set_resolution+0x170>
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	00db      	lsls	r3, r3, #3
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d037      	beq.n	8000a6a <arducam_set_resolution+0xd2>
 80009fa:	68ba      	ldr	r2, [r7, #8]
 80009fc:	2380      	movs	r3, #128	; 0x80
 80009fe:	00db      	lsls	r3, r3, #3
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dd00      	ble.n	8000a06 <arducam_set_resolution+0x6e>
 8000a04:	e080      	b.n	8000b08 <arducam_set_resolution+0x170>
 8000a06:	68ba      	ldr	r2, [r7, #8]
 8000a08:	23a0      	movs	r3, #160	; 0xa0
 8000a0a:	005b      	lsls	r3, r3, #1
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d005      	beq.n	8000a1c <arducam_set_resolution+0x84>
 8000a10:	68ba      	ldr	r2, [r7, #8]
 8000a12:	23a0      	movs	r3, #160	; 0xa0
 8000a14:	009b      	lsls	r3, r3, #2
 8000a16:	429a      	cmp	r2, r3
 8000a18:	d012      	beq.n	8000a40 <arducam_set_resolution+0xa8>
 8000a1a:	e075      	b.n	8000b08 <arducam_set_resolution+0x170>
    case 320:
        if (format == RAW) {
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	2b02      	cmp	r3, #2
 8000a20:	d106      	bne.n	8000a30 <arducam_set_resolution+0x98>
            DBG_PUT("320x240 not supported for RAW");
 8000a22:	4b42      	ldr	r3, [pc, #264]	; (8000b2c <arducam_set_resolution+0x194>)
 8000a24:	0018      	movs	r0, r3
 8000a26:	f7ff fe23 	bl	8000670 <DBG_PUT>
            rc = 0;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
        }
        else
            wrSensorRegs16_8(ov5642_320x240, sensor);
        break;
 8000a2e:	e072      	b.n	8000b16 <arducam_set_resolution+0x17e>
            wrSensorRegs16_8(ov5642_320x240, sensor);
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	4b3e      	ldr	r3, [pc, #248]	; (8000b30 <arducam_set_resolution+0x198>)
 8000a36:	0011      	movs	r1, r2
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f7ff fda1 	bl	8000580 <wrSensorRegs16_8>
        break;
 8000a3e:	e06a      	b.n	8000b16 <arducam_set_resolution+0x17e>
    case 640:
        if (format == RAW)
 8000a40:	68fb      	ldr	r3, [r7, #12]
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d109      	bne.n	8000a5a <arducam_set_resolution+0xc2>
            arducam_raw_init(640, 480, sensor);
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	781a      	ldrb	r2, [r3, #0]
 8000a4a:	23f0      	movs	r3, #240	; 0xf0
 8000a4c:	0059      	lsls	r1, r3, #1
 8000a4e:	23a0      	movs	r3, #160	; 0xa0
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	0018      	movs	r0, r3
 8000a54:	f7ff fefc 	bl	8000850 <arducam_raw_init>
        else
            wrSensorRegs16_8(ov5642_640x480, sensor);
        break;
 8000a58:	e05d      	b.n	8000b16 <arducam_set_resolution+0x17e>
            wrSensorRegs16_8(ov5642_640x480, sensor);
 8000a5a:	1dfb      	adds	r3, r7, #7
 8000a5c:	781a      	ldrb	r2, [r3, #0]
 8000a5e:	4b35      	ldr	r3, [pc, #212]	; (8000b34 <arducam_set_resolution+0x19c>)
 8000a60:	0011      	movs	r1, r2
 8000a62:	0018      	movs	r0, r3
 8000a64:	f7ff fd8c 	bl	8000580 <wrSensorRegs16_8>
        break;
 8000a68:	e055      	b.n	8000b16 <arducam_set_resolution+0x17e>
    case 1024:
        if (format == RAW) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	2b02      	cmp	r3, #2
 8000a6e:	d106      	bne.n	8000a7e <arducam_set_resolution+0xe6>
            DBG_PUT("1024x768 not supported for RAW");
 8000a70:	4b31      	ldr	r3, [pc, #196]	; (8000b38 <arducam_set_resolution+0x1a0>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff fdfc 	bl	8000670 <DBG_PUT>
            rc = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
        }
        else
            wrSensorRegs16_8(ov5642_1024x768, sensor);
        break;
 8000a7c:	e04b      	b.n	8000b16 <arducam_set_resolution+0x17e>
            wrSensorRegs16_8(ov5642_1024x768, sensor);
 8000a7e:	1dfb      	adds	r3, r7, #7
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <arducam_set_resolution+0x1a4>)
 8000a84:	0011      	movs	r1, r2
 8000a86:	0018      	movs	r0, r3
 8000a88:	f7ff fd7a 	bl	8000580 <wrSensorRegs16_8>
        break;
 8000a8c:	e043      	b.n	8000b16 <arducam_set_resolution+0x17e>
    case 1280:
        if (format == RAW)
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2b02      	cmp	r3, #2
 8000a92:	d109      	bne.n	8000aa8 <arducam_set_resolution+0x110>
            arducam_raw_init(1280, 960, sensor);
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	781a      	ldrb	r2, [r3, #0]
 8000a98:	23f0      	movs	r3, #240	; 0xf0
 8000a9a:	0099      	lsls	r1, r3, #2
 8000a9c:	23a0      	movs	r3, #160	; 0xa0
 8000a9e:	00db      	lsls	r3, r3, #3
 8000aa0:	0018      	movs	r0, r3
 8000aa2:	f7ff fed5 	bl	8000850 <arducam_raw_init>
        else
            wrSensorRegs16_8(ov5642_1280x960, sensor);
      break;
 8000aa6:	e036      	b.n	8000b16 <arducam_set_resolution+0x17e>
            wrSensorRegs16_8(ov5642_1280x960, sensor);
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b24      	ldr	r3, [pc, #144]	; (8000b40 <arducam_set_resolution+0x1a8>)
 8000aae:	0011      	movs	r1, r2
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f7ff fd65 	bl	8000580 <wrSensorRegs16_8>
      break;
 8000ab6:	e02e      	b.n	8000b16 <arducam_set_resolution+0x17e>
    case 1600:
      wrSensorRegs16_8(ov5642_1600x1200, sensor);
      break;
#endif
    case 1920:
        if (format == RAW)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	2b02      	cmp	r3, #2
 8000abc:	d109      	bne.n	8000ad2 <arducam_set_resolution+0x13a>
            arducam_raw_init(1920, 1080, sensor);
 8000abe:	1dfb      	adds	r3, r7, #7
 8000ac0:	781a      	ldrb	r2, [r3, #0]
 8000ac2:	2387      	movs	r3, #135	; 0x87
 8000ac4:	00d9      	lsls	r1, r3, #3
 8000ac6:	23f0      	movs	r3, #240	; 0xf0
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	0018      	movs	r0, r3
 8000acc:	f7ff fec0 	bl	8000850 <arducam_raw_init>
        else {
            DBG_PUT("1920X1080 not supported");
            rc = 0;
        }
        break;
 8000ad0:	e021      	b.n	8000b16 <arducam_set_resolution+0x17e>
            DBG_PUT("1920X1080 not supported");
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <arducam_set_resolution+0x1ac>)
 8000ad4:	0018      	movs	r0, r3
 8000ad6:	f7ff fdcb 	bl	8000670 <DBG_PUT>
            rc = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]
        break;
 8000ade:	e01a      	b.n	8000b16 <arducam_set_resolution+0x17e>
    case 2048:
      wrSensorRegs16_8(ov5642_2048x1536, sensor);
      break;
#endif
    case 2592:
        if (format == RAW)
 8000ae0:	68fb      	ldr	r3, [r7, #12]
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d109      	bne.n	8000afa <arducam_set_resolution+0x162>
            arducam_raw_init(2592, 1944, sensor);
 8000ae6:	1dfb      	adds	r3, r7, #7
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	23f3      	movs	r3, #243	; 0xf3
 8000aec:	00d9      	lsls	r1, r3, #3
 8000aee:	23a2      	movs	r3, #162	; 0xa2
 8000af0:	011b      	lsls	r3, r3, #4
 8000af2:	0018      	movs	r0, r3
 8000af4:	f7ff feac 	bl	8000850 <arducam_raw_init>
#else
            DBG_PUT("2592x1944 not supported");
            rc = 0;
#endif
        }
      break;
 8000af8:	e00d      	b.n	8000b16 <arducam_set_resolution+0x17e>
            DBG_PUT("2592x1944 not supported");
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <arducam_set_resolution+0x1b0>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f7ff fdb7 	bl	8000670 <DBG_PUT>
            rc = 0;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
      break;
 8000b06:	e006      	b.n	8000b16 <arducam_set_resolution+0x17e>
    default:
        DBG_PUT("unsupported width\r\n");
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <arducam_set_resolution+0x1b4>)
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f7ff fdb0 	bl	8000670 <DBG_PUT>
        rc = 0;
 8000b10:	2300      	movs	r3, #0
 8000b12:	617b      	str	r3, [r7, #20]
        break;
 8000b14:	46c0      	nop			; (mov r8, r8)
    }
    HAL_Delay(1000);
 8000b16:	23fa      	movs	r3, #250	; 0xfa
 8000b18:	009b      	lsls	r3, r3, #2
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f002 f9a6 	bl	8002e6c <HAL_Delay>
    return rc;
 8000b20:	697b      	ldr	r3, [r7, #20]
}
 8000b22:	0018      	movs	r0, r3
 8000b24:	46bd      	mov	sp, r7
 8000b26:	b006      	add	sp, #24
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	08007b90 	.word	0x08007b90
 8000b30:	08008510 	.word	0x08008510
 8000b34:	0800857c 	.word	0x0800857c
 8000b38:	08007bb0 	.word	0x08007bb0
 8000b3c:	08008650 	.word	0x08008650
 8000b40:	080085e8 	.word	0x080085e8
 8000b44:	08007bd0 	.word	0x08007bd0
 8000b48:	08007be8 	.word	0x08007be8
 8000b4c:	08007c00 	.word	0x08007c00

08000b50 <arducam_wait_for_ready>:

#define READY_MAGIC 0x55

bool arducam_wait_for_ready(uint8_t sensor) {
 8000b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	0002      	movs	r2, r0
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	701a      	strb	r2, [r3, #0]
    /* Workaround for the Arducam thinking the first write is a read from 0x40 */
    uint8_t wval;
    uint8_t rval;
    for (int i=0; i<10; i++) {
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
 8000b60:	e027      	b.n	8000bb2 <arducam_wait_for_ready+0x62>
        wval = READY_MAGIC + i;
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	b2da      	uxtb	r2, r3
 8000b66:	250f      	movs	r5, #15
 8000b68:	197b      	adds	r3, r7, r5
 8000b6a:	3255      	adds	r2, #85	; 0x55
 8000b6c:	701a      	strb	r2, [r3, #0]
        rval = 0;
 8000b6e:	240e      	movs	r4, #14
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	2200      	movs	r2, #0
 8000b74:	701a      	strb	r2, [r3, #0]
        write_reg(AC_REG_TEST, wval, sensor);
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781a      	ldrb	r2, [r3, #0]
 8000b7a:	197b      	adds	r3, r7, r5
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	0019      	movs	r1, r3
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f844 	bl	8000c0e <write_reg>
        rval = read_reg(AC_REG_TEST, sensor);
 8000b86:	0026      	movs	r6, r4
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	0019      	movs	r1, r3
 8000b90:	2000      	movs	r0, #0
 8000b92:	f000 f821 	bl	8000bd8 <read_reg>
 8000b96:	0003      	movs	r3, r0
 8000b98:	7023      	strb	r3, [r4, #0]
        if (rval == wval)
 8000b9a:	19ba      	adds	r2, r7, r6
 8000b9c:	197b      	adds	r3, r7, r5
 8000b9e:	7812      	ldrb	r2, [r2, #0]
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d009      	beq.n	8000bba <arducam_wait_for_ready+0x6a>
            break;

        HAL_Delay(100);
 8000ba6:	2064      	movs	r0, #100	; 0x64
 8000ba8:	f002 f960 	bl	8002e6c <HAL_Delay>
    for (int i=0; i<10; i++) {
 8000bac:	68bb      	ldr	r3, [r7, #8]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	ddd4      	ble.n	8000b62 <arducam_wait_for_ready+0x12>
 8000bb8:	e000      	b.n	8000bbc <arducam_wait_for_ready+0x6c>
            break;
 8000bba:	46c0      	nop			; (mov r8, r8)
    }

    return (rval == wval);
 8000bbc:	230e      	movs	r3, #14
 8000bbe:	18fa      	adds	r2, r7, r3
 8000bc0:	230f      	movs	r3, #15
 8000bc2:	18fb      	adds	r3, r7, r3
 8000bc4:	7812      	ldrb	r2, [r2, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	425a      	negs	r2, r3
 8000bcc:	4153      	adcs	r3, r2
 8000bce:	b2db      	uxtb	r3, r3
}
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	b005      	add	sp, #20
 8000bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000bd8 <read_reg>:

uint8_t read_reg(uint8_t addr, uint8_t sensor) {
 8000bd8:	b5b0      	push	{r4, r5, r7, lr}
 8000bda:	b084      	sub	sp, #16
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	1dbb      	adds	r3, r7, #6
 8000be6:	1c0a      	adds	r2, r1, #0
 8000be8:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    data = read_spi_reg(addr, sensor);
 8000bea:	250f      	movs	r5, #15
 8000bec:	197c      	adds	r4, r7, r5
 8000bee:	1dbb      	adds	r3, r7, #6
 8000bf0:	781a      	ldrb	r2, [r3, #0]
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	0011      	movs	r1, r2
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f001 fde1 	bl	80027c0 <read_spi_reg>
 8000bfe:	0003      	movs	r3, r0
 8000c00:	7023      	strb	r3, [r4, #0]
    return data;
 8000c02:	197b      	adds	r3, r7, r5
 8000c04:	781b      	ldrb	r3, [r3, #0]
}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b004      	add	sp, #16
 8000c0c:	bdb0      	pop	{r4, r5, r7, pc}

08000c0e <write_reg>:

void write_reg(uint8_t addr, uint8_t data, uint8_t sensor) {
 8000c0e:	b590      	push	{r4, r7, lr}
 8000c10:	b083      	sub	sp, #12
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	0004      	movs	r4, r0
 8000c16:	0008      	movs	r0, r1
 8000c18:	0011      	movs	r1, r2
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	1c22      	adds	r2, r4, #0
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	1dbb      	adds	r3, r7, #6
 8000c22:	1c02      	adds	r2, r0, #0
 8000c24:	701a      	strb	r2, [r3, #0]
 8000c26:	1d7b      	adds	r3, r7, #5
 8000c28:	1c0a      	adds	r2, r1, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
    write_spi_reg(addr, data, sensor);
 8000c2c:	1d7b      	adds	r3, r7, #5
 8000c2e:	781a      	ldrb	r2, [r3, #0]
 8000c30:	1dbb      	adds	r3, r7, #6
 8000c32:	7819      	ldrb	r1, [r3, #0]
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	0018      	movs	r0, r3
 8000c3a:	f001 fe40 	bl	80028be <write_spi_reg>
}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	46bd      	mov	sp, r7
 8000c42:	b003      	add	sp, #12
 8000c44:	bd90      	pop	{r4, r7, pc}

08000c46 <read_fifo>:

uint8_t read_fifo(uint8_t sensor)
{
 8000c46:	b5b0      	push	{r4, r5, r7, lr}
 8000c48:	b084      	sub	sp, #16
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	0002      	movs	r2, r0
 8000c4e:	1dfb      	adds	r3, r7, #7
 8000c50:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    data = read_reg(SINGLE_FIFO_READ, sensor);
 8000c52:	250f      	movs	r5, #15
 8000c54:	197c      	adds	r4, r7, r5
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	0019      	movs	r1, r3
 8000c5c:	203d      	movs	r0, #61	; 0x3d
 8000c5e:	f7ff ffbb 	bl	8000bd8 <read_reg>
 8000c62:	0003      	movs	r3, r0
 8000c64:	7023      	strb	r3, [r4, #0]
    return data;
 8000c66:	197b      	adds	r3, r7, r5
 8000c68:	781b      	ldrb	r3, [r3, #0]
}
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bdb0      	pop	{r4, r5, r7, pc}

08000c72 <flush_fifo>:

void flush_fifo(uint8_t sensor)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	0002      	movs	r2, r0
 8000c7a:	1dfb      	adds	r3, r7, #7
 8000c7c:	701a      	strb	r2, [r3, #0]
    write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK, sensor);
 8000c7e:	1dfb      	adds	r3, r7, #7
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	001a      	movs	r2, r3
 8000c84:	2101      	movs	r1, #1
 8000c86:	2004      	movs	r0, #4
 8000c88:	f7ff ffc1 	bl	8000c0e <write_reg>
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	b002      	add	sp, #8
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <start_capture>:

void start_capture(uint8_t sensor)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	0002      	movs	r2, r0
 8000c9c:	1dfb      	adds	r3, r7, #7
 8000c9e:	701a      	strb	r2, [r3, #0]
    write_reg(ARDUCHIP_FIFO, FIFO_START_MASK, sensor);
 8000ca0:	1dfb      	adds	r3, r7, #7
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	001a      	movs	r2, r3
 8000ca6:	2102      	movs	r1, #2
 8000ca8:	2004      	movs	r0, #4
 8000caa:	f7ff ffb0 	bl	8000c0e <write_reg>
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <clear_fifo_flag>:

void clear_fifo_flag(uint8_t sensor)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
    write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK, sensor);
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	001a      	movs	r2, r3
 8000cc8:	2101      	movs	r1, #1
 8000cca:	2004      	movs	r0, #4
 8000ccc:	f7ff ff9f 	bl	8000c0e <write_reg>
}
 8000cd0:	46c0      	nop			; (mov r8, r8)
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	b002      	add	sp, #8
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <read_fifo_length>:
    write_reg(AC_REG_TEST_MODE, mode, sensor);
    HAL_Delay(1000);
}

uint32_t read_fifo_length(uint8_t sensor)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	0002      	movs	r2, r0
 8000ce0:	1dfb      	adds	r3, r7, #7
 8000ce2:	701a      	strb	r2, [r3, #0]
    uint32_t len1,len2,len3,len=0;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
    len1 = read_reg(FIFO_SIZE1, sensor);
 8000ce8:	1dfb      	adds	r3, r7, #7
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	0019      	movs	r1, r3
 8000cee:	2042      	movs	r0, #66	; 0x42
 8000cf0:	f7ff ff72 	bl	8000bd8 <read_reg>
 8000cf4:	0003      	movs	r3, r0
 8000cf6:	613b      	str	r3, [r7, #16]
    len2 = read_reg(FIFO_SIZE2, sensor);
 8000cf8:	1dfb      	adds	r3, r7, #7
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	0019      	movs	r1, r3
 8000cfe:	2043      	movs	r0, #67	; 0x43
 8000d00:	f7ff ff6a 	bl	8000bd8 <read_reg>
 8000d04:	0003      	movs	r3, r0
 8000d06:	60fb      	str	r3, [r7, #12]
    len3 = read_reg(FIFO_SIZE3, sensor) & 0x7f;
 8000d08:	1dfb      	adds	r3, r7, #7
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	2044      	movs	r0, #68	; 0x44
 8000d10:	f7ff ff62 	bl	8000bd8 <read_reg>
 8000d14:	0003      	movs	r3, r0
 8000d16:	001a      	movs	r2, r3
 8000d18:	237f      	movs	r3, #127	; 0x7f
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	60bb      	str	r3, [r7, #8]
    len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	041a      	lsls	r2, r3, #16
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	021b      	lsls	r3, r3, #8
 8000d26:	431a      	orrs	r2, r3
 8000d28:	693b      	ldr	r3, [r7, #16]
 8000d2a:	4313      	orrs	r3, r2
 8000d2c:	025b      	lsls	r3, r3, #9
 8000d2e:	0a5b      	lsrs	r3, r3, #9
 8000d30:	617b      	str	r3, [r7, #20]
    return len;
 8000d32:	697b      	ldr	r3, [r7, #20]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b006      	add	sp, #24
 8000d3a:	bd80      	pop	{r7, pc}

08000d3c <get_bit>:
    write_reg(addr, temp & (~bit), sensor);
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit, uint8_t sensor)
{
 8000d3c:	b5b0      	push	{r4, r5, r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	0004      	movs	r4, r0
 8000d44:	0008      	movs	r0, r1
 8000d46:	0011      	movs	r1, r2
 8000d48:	1dfb      	adds	r3, r7, #7
 8000d4a:	1c22      	adds	r2, r4, #0
 8000d4c:	701a      	strb	r2, [r3, #0]
 8000d4e:	1dbb      	adds	r3, r7, #6
 8000d50:	1c02      	adds	r2, r0, #0
 8000d52:	701a      	strb	r2, [r3, #0]
 8000d54:	1d7b      	adds	r3, r7, #5
 8000d56:	1c0a      	adds	r2, r1, #0
 8000d58:	701a      	strb	r2, [r3, #0]
    uint8_t temp;
    temp = read_reg(addr, sensor);
 8000d5a:	250f      	movs	r5, #15
 8000d5c:	197c      	adds	r4, r7, r5
 8000d5e:	1d7b      	adds	r3, r7, #5
 8000d60:	781a      	ldrb	r2, [r3, #0]
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	0011      	movs	r1, r2
 8000d68:	0018      	movs	r0, r3
 8000d6a:	f7ff ff35 	bl	8000bd8 <read_reg>
 8000d6e:	0003      	movs	r3, r0
 8000d70:	7023      	strb	r3, [r4, #0]
    temp = temp & bit;
 8000d72:	0028      	movs	r0, r5
 8000d74:	183b      	adds	r3, r7, r0
 8000d76:	183a      	adds	r2, r7, r0
 8000d78:	1db9      	adds	r1, r7, #6
 8000d7a:	7812      	ldrb	r2, [r2, #0]
 8000d7c:	7809      	ldrb	r1, [r1, #0]
 8000d7e:	400a      	ands	r2, r1
 8000d80:	701a      	strb	r2, [r3, #0]
    return temp;
 8000d82:	183b      	adds	r3, r7, r0
 8000d84:	781b      	ldrb	r3, [r3, #0]
}
 8000d86:	0018      	movs	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	b004      	add	sp, #16
 8000d8c:	bdb0      	pop	{r4, r5, r7, pc}

08000d8e <hex_2_ascii>:

char hex_2_ascii(uint8_t hex) {
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	0002      	movs	r2, r0
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	701a      	strb	r2, [r3, #0]
    return (hex < 10) ? '0' + hex : 'a' + (hex - 10);
 8000d9a:	1dfb      	adds	r3, r7, #7
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	2b09      	cmp	r3, #9
 8000da0:	d804      	bhi.n	8000dac <hex_2_ascii+0x1e>
 8000da2:	1dfb      	adds	r3, r7, #7
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	3330      	adds	r3, #48	; 0x30
 8000da8:	b2db      	uxtb	r3, r3
 8000daa:	e003      	b.n	8000db4 <hex_2_ascii+0x26>
 8000dac:	1dfb      	adds	r3, r7, #7
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	3357      	adds	r3, #87	; 0x57
 8000db2:	b2db      	uxtb	r3, r3
}
 8000db4:	0018      	movs	r0, r3
 8000db6:	46bd      	mov	sp, r7
 8000db8:	b002      	add	sp, #8
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <dump_uart_bmp>:
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x1F, 0x00,
  0x00, 0x00
};


static void dump_uart_bmp(uint8_t sensor) {
 8000dbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dbe:	b0ab      	sub	sp, #172	; 0xac
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	0002      	movs	r2, r0
 8000dc4:	1dfb      	adds	r3, r7, #7
 8000dc6:	701a      	strb	r2, [r3, #0]
    uint32_t width = 320;
 8000dc8:	23a0      	movs	r3, #160	; 0xa0
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	229c      	movs	r2, #156	; 0x9c
 8000dce:	18b9      	adds	r1, r7, r2
 8000dd0:	600b      	str	r3, [r1, #0]
    uint32_t depth = 240;
 8000dd2:	23f0      	movs	r3, #240	; 0xf0
 8000dd4:	2198      	movs	r1, #152	; 0x98
 8000dd6:	1878      	adds	r0, r7, r1
 8000dd8:	6003      	str	r3, [r0, #0]
    uint32_t length = width*depth;
 8000dda:	18bb      	adds	r3, r7, r2
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	187a      	adds	r2, r7, r1
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	4353      	muls	r3, r2
 8000de4:	2594      	movs	r5, #148	; 0x94
 8000de6:	197a      	adds	r2, r7, r5
 8000de8:	6013      	str	r3, [r2, #0]
    char buf[64];
    buf[2] = ' ';
 8000dea:	214c      	movs	r1, #76	; 0x4c
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2220      	movs	r2, #32
 8000df0:	709a      	strb	r2, [r3, #2]
    buf[3] = 0;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2200      	movs	r2, #0
 8000df6:	70da      	strb	r2, [r3, #3]

    char BMP_hdr[BMP_HDR_LEN] = { 0 };
 8000df8:	243c      	movs	r4, #60	; 0x3c
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	3304      	adds	r3, #4
 8000e02:	220a      	movs	r2, #10
 8000e04:	2100      	movs	r1, #0
 8000e06:	0018      	movs	r0, r3
 8000e08:	f005 fd6f 	bl	80068ea <memset>
    char info_hdr[INFO_HDR_LEN] = { 0 };
 8000e0c:	2308      	movs	r3, #8
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	3304      	adds	r3, #4
 8000e16:	2230      	movs	r2, #48	; 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	0018      	movs	r0, r3
 8000e1c:	f005 fd65 	bl	80068ea <memset>
    BMP_hdr[0] = 'B';
 8000e20:	0021      	movs	r1, r4
 8000e22:	187b      	adds	r3, r7, r1
 8000e24:	2242      	movs	r2, #66	; 0x42
 8000e26:	701a      	strb	r2, [r3, #0]
    BMP_hdr[1] = 'M';
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	224d      	movs	r2, #77	; 0x4d
 8000e2c:	705a      	strb	r2, [r3, #1]
    uint32_t filesize = length*2 + BMP_HDR_LEN + INFO_HDR_LEN;
 8000e2e:	197b      	adds	r3, r7, r5
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	3321      	adds	r3, #33	; 0x21
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2090      	movs	r0, #144	; 0x90
 8000e38:	183a      	adds	r2, r7, r0
 8000e3a:	6013      	str	r3, [r2, #0]
    BMP_hdr[2] = filesize;
 8000e3c:	183b      	adds	r3, r7, r0
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	b2da      	uxtb	r2, r3
 8000e42:	187b      	adds	r3, r7, r1
 8000e44:	709a      	strb	r2, [r3, #2]
    BMP_hdr[3] = filesize >> 8;
 8000e46:	183b      	adds	r3, r7, r0
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	0a1b      	lsrs	r3, r3, #8
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	187b      	adds	r3, r7, r1
 8000e50:	70da      	strb	r2, [r3, #3]
    BMP_hdr[4] = filesize >> 16;
 8000e52:	183b      	adds	r3, r7, r0
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	0c1b      	lsrs	r3, r3, #16
 8000e58:	b2da      	uxtb	r2, r3
 8000e5a:	187b      	adds	r3, r7, r1
 8000e5c:	711a      	strb	r2, [r3, #4]
    BMP_hdr[5] = filesize >> 24;
 8000e5e:	183b      	adds	r3, r7, r0
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	0e1b      	lsrs	r3, r3, #24
 8000e64:	b2da      	uxtb	r2, r3
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	715a      	strb	r2, [r3, #5]
    BMP_hdr[10] = BMP_HDR_LEN + INFO_HDR_LEN;
 8000e6a:	187b      	adds	r3, r7, r1
 8000e6c:	2242      	movs	r2, #66	; 0x42
 8000e6e:	729a      	strb	r2, [r3, #10]

    // write the header
    int i;
    for (i=0; i<BMP_HDR_LEN; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	22a4      	movs	r2, #164	; 0xa4
 8000e74:	18ba      	adds	r2, r7, r2
 8000e76:	6013      	str	r3, [r2, #0]
 8000e78:	e028      	b.n	8000ecc <dump_uart_bmp+0x110>
        buf[0] = hex_2_ascii(BMP_hdr[i] >> 4);
 8000e7a:	263c      	movs	r6, #60	; 0x3c
 8000e7c:	19ba      	adds	r2, r7, r6
 8000e7e:	24a4      	movs	r4, #164	; 0xa4
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	18d3      	adds	r3, r2, r3
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	091b      	lsrs	r3, r3, #4
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	f7ff ff7e 	bl	8000d8e <hex_2_ascii>
 8000e92:	0003      	movs	r3, r0
 8000e94:	001a      	movs	r2, r3
 8000e96:	254c      	movs	r5, #76	; 0x4c
 8000e98:	197b      	adds	r3, r7, r5
 8000e9a:	701a      	strb	r2, [r3, #0]
        buf[1] = hex_2_ascii(BMP_hdr[i] & 0x0f);
 8000e9c:	19ba      	adds	r2, r7, r6
 8000e9e:	193b      	adds	r3, r7, r4
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	18d3      	adds	r3, r2, r3
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	220f      	movs	r2, #15
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	0018      	movs	r0, r3
 8000eae:	f7ff ff6e 	bl	8000d8e <hex_2_ascii>
 8000eb2:	0003      	movs	r3, r0
 8000eb4:	001a      	movs	r2, r3
 8000eb6:	197b      	adds	r3, r7, r5
 8000eb8:	705a      	strb	r2, [r3, #1]
        DBG_PUT(buf);
 8000eba:	197b      	adds	r3, r7, r5
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	f7ff fbd7 	bl	8000670 <DBG_PUT>
    for (i=0; i<BMP_HDR_LEN; i++) {
 8000ec2:	193b      	adds	r3, r7, r4
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	193a      	adds	r2, r7, r4
 8000eca:	6013      	str	r3, [r2, #0]
 8000ecc:	24a4      	movs	r4, #164	; 0xa4
 8000ece:	193b      	adds	r3, r7, r4
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b0d      	cmp	r3, #13
 8000ed4:	ddd1      	ble.n	8000e7a <dump_uart_bmp+0xbe>
    }

    info_hdr[0] = INFO_HDR_LEN;
 8000ed6:	2108      	movs	r1, #8
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2234      	movs	r2, #52	; 0x34
 8000edc:	701a      	strb	r2, [r3, #0]
    info_hdr[4] = width;
 8000ede:	209c      	movs	r0, #156	; 0x9c
 8000ee0:	183b      	adds	r3, r7, r0
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	187b      	adds	r3, r7, r1
 8000ee8:	711a      	strb	r2, [r3, #4]
    info_hdr[5] = width >> 8;
 8000eea:	183b      	adds	r3, r7, r0
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	0a1b      	lsrs	r3, r3, #8
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	715a      	strb	r2, [r3, #5]
    info_hdr[6] = width >> 16;
 8000ef6:	183b      	adds	r3, r7, r0
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	0c1b      	lsrs	r3, r3, #16
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	187b      	adds	r3, r7, r1
 8000f00:	719a      	strb	r2, [r3, #6]
    info_hdr[7] = width >> 24;
 8000f02:	183b      	adds	r3, r7, r0
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0e1b      	lsrs	r3, r3, #24
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	71da      	strb	r2, [r3, #7]
    info_hdr[8] = depth;
 8000f0e:	2098      	movs	r0, #152	; 0x98
 8000f10:	183b      	adds	r3, r7, r0
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	721a      	strb	r2, [r3, #8]
    info_hdr[9] = depth >> 8;
 8000f1a:	183b      	adds	r3, r7, r0
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	725a      	strb	r2, [r3, #9]
    info_hdr[10] = depth >> 16;
 8000f26:	183b      	adds	r3, r7, r0
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	0c1b      	lsrs	r3, r3, #16
 8000f2c:	b2da      	uxtb	r2, r3
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	729a      	strb	r2, [r3, #10]
    info_hdr[11] = depth >> 24;
 8000f32:	183b      	adds	r3, r7, r0
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	0e1b      	lsrs	r3, r3, #24
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	72da      	strb	r2, [r3, #11]
    info_hdr[12] = 1; // # of color planes
 8000f3e:	187b      	adds	r3, r7, r1
 8000f40:	2201      	movs	r2, #1
 8000f42:	731a      	strb	r2, [r3, #12]
    info_hdr[14] = 16; // # of bits per pixel
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	2210      	movs	r2, #16
 8000f48:	739a      	strb	r2, [r3, #14]
    info_hdr[16] = 3; // BI_BITFIELDS
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	741a      	strb	r2, [r3, #16]
    info_hdr[20] = (length * 2);
 8000f50:	2094      	movs	r0, #148	; 0x94
 8000f52:	183b      	adds	r3, r7, r0
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	18db      	adds	r3, r3, r3
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	751a      	strb	r2, [r3, #20]
    info_hdr[21] = (length * 2) >> 8;
 8000f60:	183b      	adds	r3, r7, r0
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	755a      	strb	r2, [r3, #21]
    info_hdr[22] = (length * 2) >> 16;
 8000f6e:	183b      	adds	r3, r7, r0
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	0c1b      	lsrs	r3, r3, #16
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	187b      	adds	r3, r7, r1
 8000f7a:	759a      	strb	r2, [r3, #22]
    info_hdr[23] = (length * 2) >> 24;
 8000f7c:	183b      	adds	r3, r7, r0
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	0e1b      	lsrs	r3, r3, #24
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	0008      	movs	r0, r1
 8000f88:	183b      	adds	r3, r7, r0
 8000f8a:	75da      	strb	r2, [r3, #23]
    info_hdr[24] = info_hdr[28] = 0xc4; // print resolution
 8000f8c:	183b      	adds	r3, r7, r0
 8000f8e:	22c4      	movs	r2, #196	; 0xc4
 8000f90:	771a      	strb	r2, [r3, #28]
 8000f92:	183b      	adds	r3, r7, r0
 8000f94:	7f1a      	ldrb	r2, [r3, #28]
 8000f96:	183b      	adds	r3, r7, r0
 8000f98:	761a      	strb	r2, [r3, #24]
    info_hdr[25] = info_hdr[29] = 0x0e;
 8000f9a:	183b      	adds	r3, r7, r0
 8000f9c:	220e      	movs	r2, #14
 8000f9e:	775a      	strb	r2, [r3, #29]
 8000fa0:	183b      	adds	r3, r7, r0
 8000fa2:	7f5a      	ldrb	r2, [r3, #29]
 8000fa4:	183b      	adds	r3, r7, r0
 8000fa6:	765a      	strb	r2, [r3, #25]
    info_hdr[40] = 0; // Red channel bitmask - in big-endian
 8000fa8:	183b      	adds	r3, r7, r0
 8000faa:	2228      	movs	r2, #40	; 0x28
 8000fac:	2100      	movs	r1, #0
 8000fae:	5499      	strb	r1, [r3, r2]
    info_hdr[41] = 0xf8;
 8000fb0:	183b      	adds	r3, r7, r0
 8000fb2:	2229      	movs	r2, #41	; 0x29
 8000fb4:	21f8      	movs	r1, #248	; 0xf8
 8000fb6:	5499      	strb	r1, [r3, r2]
    info_hdr[44] = 0xe0; // Green channel bitmask
 8000fb8:	183b      	adds	r3, r7, r0
 8000fba:	222c      	movs	r2, #44	; 0x2c
 8000fbc:	21e0      	movs	r1, #224	; 0xe0
 8000fbe:	5499      	strb	r1, [r3, r2]
    info_hdr[45] = 0x07;
 8000fc0:	183b      	adds	r3, r7, r0
 8000fc2:	222d      	movs	r2, #45	; 0x2d
 8000fc4:	2107      	movs	r1, #7
 8000fc6:	5499      	strb	r1, [r3, r2]
    info_hdr[48] = 0x1f; // Blue channel bitmask in big-endian
 8000fc8:	183b      	adds	r3, r7, r0
 8000fca:	2230      	movs	r2, #48	; 0x30
 8000fcc:	211f      	movs	r1, #31
 8000fce:	5499      	strb	r1, [r3, r2]

    // write the info
    for (i=0; i<INFO_HDR_LEN; i++) {
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	193a      	adds	r2, r7, r4
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e028      	b.n	800102a <dump_uart_bmp+0x26e>
        buf[0] = hex_2_ascii(info_hdr[i] >> 4);
 8000fd8:	2608      	movs	r6, #8
 8000fda:	19ba      	adds	r2, r7, r6
 8000fdc:	24a4      	movs	r4, #164	; 0xa4
 8000fde:	193b      	adds	r3, r7, r4
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	18d3      	adds	r3, r2, r3
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	091b      	lsrs	r3, r3, #4
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	0018      	movs	r0, r3
 8000fec:	f7ff fecf 	bl	8000d8e <hex_2_ascii>
 8000ff0:	0003      	movs	r3, r0
 8000ff2:	001a      	movs	r2, r3
 8000ff4:	254c      	movs	r5, #76	; 0x4c
 8000ff6:	197b      	adds	r3, r7, r5
 8000ff8:	701a      	strb	r2, [r3, #0]
        buf[1] = hex_2_ascii(info_hdr[i] & 0x0f);
 8000ffa:	19ba      	adds	r2, r7, r6
 8000ffc:	193b      	adds	r3, r7, r4
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	18d3      	adds	r3, r2, r3
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	220f      	movs	r2, #15
 8001006:	4013      	ands	r3, r2
 8001008:	b2db      	uxtb	r3, r3
 800100a:	0018      	movs	r0, r3
 800100c:	f7ff febf 	bl	8000d8e <hex_2_ascii>
 8001010:	0003      	movs	r3, r0
 8001012:	001a      	movs	r2, r3
 8001014:	197b      	adds	r3, r7, r5
 8001016:	705a      	strb	r2, [r3, #1]
        DBG_PUT(buf);
 8001018:	197b      	adds	r3, r7, r5
 800101a:	0018      	movs	r0, r3
 800101c:	f7ff fb28 	bl	8000670 <DBG_PUT>
    for (i=0; i<INFO_HDR_LEN; i++) {
 8001020:	193b      	adds	r3, r7, r4
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	3301      	adds	r3, #1
 8001026:	193a      	adds	r2, r7, r4
 8001028:	6013      	str	r3, [r2, #0]
 800102a:	23a4      	movs	r3, #164	; 0xa4
 800102c:	18fb      	adds	r3, r7, r3
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b33      	cmp	r3, #51	; 0x33
 8001032:	ddd1      	ble.n	8000fd8 <dump_uart_bmp+0x21c>
    }

    for (int i=0; i<length; i++) {
 8001034:	2300      	movs	r3, #0
 8001036:	22a0      	movs	r2, #160	; 0xa0
 8001038:	18ba      	adds	r2, r7, r2
 800103a:	6013      	str	r3, [r2, #0]
 800103c:	e024      	b.n	8001088 <dump_uart_bmp+0x2cc>
        uint8_t VH = read_fifo(sensor);
 800103e:	258f      	movs	r5, #143	; 0x8f
 8001040:	197c      	adds	r4, r7, r5
 8001042:	1dfb      	adds	r3, r7, #7
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	0018      	movs	r0, r3
 8001048:	f7ff fdfd 	bl	8000c46 <read_fifo>
 800104c:	0003      	movs	r3, r0
 800104e:	7023      	strb	r3, [r4, #0]
        uint8_t VL = read_fifo(sensor);
 8001050:	268e      	movs	r6, #142	; 0x8e
 8001052:	19bc      	adds	r4, r7, r6
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	0018      	movs	r0, r3
 800105a:	f7ff fdf4 	bl	8000c46 <read_fifo>
 800105e:	0003      	movs	r3, r0
 8001060:	7023      	strb	r3, [r4, #0]
        sprintf(buf, "%02x %02x ", VH, VL);
 8001062:	197b      	adds	r3, r7, r5
 8001064:	781a      	ldrb	r2, [r3, #0]
 8001066:	19bb      	adds	r3, r7, r6
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <dump_uart_bmp+0x2e8>)
 800106c:	244c      	movs	r4, #76	; 0x4c
 800106e:	1938      	adds	r0, r7, r4
 8001070:	f005 fc44 	bl	80068fc <siprintf>
        DBG_PUT(buf);
 8001074:	193b      	adds	r3, r7, r4
 8001076:	0018      	movs	r0, r3
 8001078:	f7ff fafa 	bl	8000670 <DBG_PUT>
    for (int i=0; i<length; i++) {
 800107c:	22a0      	movs	r2, #160	; 0xa0
 800107e:	18bb      	adds	r3, r7, r2
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	3301      	adds	r3, #1
 8001084:	18ba      	adds	r2, r7, r2
 8001086:	6013      	str	r3, [r2, #0]
 8001088:	23a0      	movs	r3, #160	; 0xa0
 800108a:	18fb      	adds	r3, r7, r3
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2294      	movs	r2, #148	; 0x94
 8001090:	18ba      	adds	r2, r7, r2
 8001092:	6812      	ldr	r2, [r2, #0]
 8001094:	429a      	cmp	r2, r3
 8001096:	d8d2      	bhi.n	800103e <dump_uart_bmp+0x282>
    }
}
 8001098:	46c0      	nop			; (mov r8, r8)
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	46bd      	mov	sp, r7
 800109e:	b02b      	add	sp, #172	; 0xac
 80010a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	08007c14 	.word	0x08007c14

080010a8 <dump_uart_jpg>:

static void dump_uart_jpg(uint32_t length, uint8_t sensor) {
 80010a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010aa:	b097      	sub	sp, #92	; 0x5c
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
 80010b0:	000a      	movs	r2, r1
 80010b2:	1cfb      	adds	r3, r7, #3
 80010b4:	701a      	strb	r2, [r3, #0]
    uint8_t prev = 0, curr = 0;
 80010b6:	234f      	movs	r3, #79	; 0x4f
 80010b8:	18fb      	adds	r3, r7, r3
 80010ba:	2200      	movs	r2, #0
 80010bc:	701a      	strb	r2, [r3, #0]
 80010be:	2357      	movs	r3, #87	; 0x57
 80010c0:	18fb      	adds	r3, r7, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	701a      	strb	r2, [r3, #0]
    bool found_header = false;
 80010c6:	2356      	movs	r3, #86	; 0x56
 80010c8:	18fb      	adds	r3, r7, r3
 80010ca:	2200      	movs	r2, #0
 80010cc:	701a      	strb	r2, [r3, #0]
    uint32_t i;
    char buf[64];

    for (i=0; i<length; i++) {
 80010ce:	2300      	movs	r3, #0
 80010d0:	653b      	str	r3, [r7, #80]	; 0x50
 80010d2:	e057      	b.n	8001184 <dump_uart_jpg+0xdc>
        prev = curr;
 80010d4:	264f      	movs	r6, #79	; 0x4f
 80010d6:	19bb      	adds	r3, r7, r6
 80010d8:	2557      	movs	r5, #87	; 0x57
 80010da:	197a      	adds	r2, r7, r5
 80010dc:	7812      	ldrb	r2, [r2, #0]
 80010de:	701a      	strb	r2, [r3, #0]
        curr = read_fifo(sensor);
 80010e0:	197c      	adds	r4, r7, r5
 80010e2:	1cfb      	adds	r3, r7, #3
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fdad 	bl	8000c46 <read_fifo>
 80010ec:	0003      	movs	r3, r0
 80010ee:	7023      	strb	r3, [r4, #0]
        if ((curr == 0xd9) && (prev == 0xff)) {
 80010f0:	002a      	movs	r2, r5
 80010f2:	18bb      	adds	r3, r7, r2
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2bd9      	cmp	r3, #217	; 0xd9
 80010f8:	d114      	bne.n	8001124 <dump_uart_jpg+0x7c>
 80010fa:	19bb      	adds	r3, r7, r6
 80010fc:	781b      	ldrb	r3, [r3, #0]
 80010fe:	2bff      	cmp	r3, #255	; 0xff
 8001100:	d110      	bne.n	8001124 <dump_uart_jpg+0x7c>
            // found the footer - break
            sprintf(buf, "%02x ", curr);
 8001102:	18bb      	adds	r3, r7, r2
 8001104:	781a      	ldrb	r2, [r3, #0]
 8001106:	492b      	ldr	r1, [pc, #172]	; (80011b4 <dump_uart_jpg+0x10c>)
 8001108:	240c      	movs	r4, #12
 800110a:	193b      	adds	r3, r7, r4
 800110c:	0018      	movs	r0, r3
 800110e:	f005 fbf5 	bl	80068fc <siprintf>
            DBG_PUT(buf);
 8001112:	193b      	adds	r3, r7, r4
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff faab 	bl	8000670 <DBG_PUT>
            found_header = false;
 800111a:	2356      	movs	r3, #86	; 0x56
 800111c:	18fb      	adds	r3, r7, r3
 800111e:	2200      	movs	r2, #0
 8001120:	701a      	strb	r2, [r3, #0]
            break;
 8001122:	e033      	b.n	800118c <dump_uart_jpg+0xe4>
        }

        if (found_header) {
 8001124:	2356      	movs	r3, #86	; 0x56
 8001126:	18fb      	adds	r3, r7, r3
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d00d      	beq.n	800114a <dump_uart_jpg+0xa2>
            sprintf(buf, "%02x ", curr);
 800112e:	2357      	movs	r3, #87	; 0x57
 8001130:	18fb      	adds	r3, r7, r3
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	491f      	ldr	r1, [pc, #124]	; (80011b4 <dump_uart_jpg+0x10c>)
 8001136:	240c      	movs	r4, #12
 8001138:	193b      	adds	r3, r7, r4
 800113a:	0018      	movs	r0, r3
 800113c:	f005 fbde 	bl	80068fc <siprintf>
            DBG_PUT(buf);
 8001140:	193b      	adds	r3, r7, r4
 8001142:	0018      	movs	r0, r3
 8001144:	f7ff fa94 	bl	8000670 <DBG_PUT>
 8001148:	e019      	b.n	800117e <dump_uart_jpg+0xd6>
        }
        else if ((curr == 0xd8) && (prev = 0xff)) {
 800114a:	2157      	movs	r1, #87	; 0x57
 800114c:	187b      	adds	r3, r7, r1
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	2bd8      	cmp	r3, #216	; 0xd8
 8001152:	d114      	bne.n	800117e <dump_uart_jpg+0xd6>
 8001154:	204f      	movs	r0, #79	; 0x4f
 8001156:	183b      	adds	r3, r7, r0
 8001158:	22ff      	movs	r2, #255	; 0xff
 800115a:	701a      	strb	r2, [r3, #0]
            found_header = true;
 800115c:	2356      	movs	r3, #86	; 0x56
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
            sprintf(buf, "%02x %02x ", prev, curr);
 8001164:	183b      	adds	r3, r7, r0
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	187b      	adds	r3, r7, r1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	4912      	ldr	r1, [pc, #72]	; (80011b8 <dump_uart_jpg+0x110>)
 800116e:	240c      	movs	r4, #12
 8001170:	1938      	adds	r0, r7, r4
 8001172:	f005 fbc3 	bl	80068fc <siprintf>
            DBG_PUT(buf);
 8001176:	193b      	adds	r3, r7, r4
 8001178:	0018      	movs	r0, r3
 800117a:	f7ff fa79 	bl	8000670 <DBG_PUT>
    for (i=0; i<length; i++) {
 800117e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001180:	3301      	adds	r3, #1
 8001182:	653b      	str	r3, [r7, #80]	; 0x50
 8001184:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	429a      	cmp	r2, r3
 800118a:	d3a3      	bcc.n	80010d4 <dump_uart_jpg+0x2c>
        }
    }

    if (found_header) {
 800118c:	2356      	movs	r3, #86	; 0x56
 800118e:	18fb      	adds	r3, r7, r3
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00a      	beq.n	80011ac <dump_uart_jpg+0x104>
        // We found the header but not the footer :-(
        sprintf(buf, "ff d9 ");
 8001196:	4a09      	ldr	r2, [pc, #36]	; (80011bc <dump_uart_jpg+0x114>)
 8001198:	240c      	movs	r4, #12
 800119a:	193b      	adds	r3, r7, r4
 800119c:	0011      	movs	r1, r2
 800119e:	0018      	movs	r0, r3
 80011a0:	f005 fbac 	bl	80068fc <siprintf>
        DBG_PUT(buf);
 80011a4:	193b      	adds	r3, r7, r4
 80011a6:	0018      	movs	r0, r3
 80011a8:	f7ff fa62 	bl	8000670 <DBG_PUT>
    }
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	b017      	add	sp, #92	; 0x5c
 80011b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b4:	08007c20 	.word	0x08007c20
 80011b8:	08007c14 	.word	0x08007c14
 80011bc:	08007c28 	.word	0x08007c28

080011c0 <dump_uart_raw>:

static void dump_uart_raw(uint32_t length, uint8_t sensor) {
 80011c0:	b5b0      	push	{r4, r5, r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	000a      	movs	r2, r1
 80011ca:	1cfb      	adds	r3, r7, #3
 80011cc:	701a      	strb	r2, [r3, #0]
    char buf[4];
    buf[2] = ' ';
 80011ce:	210c      	movs	r1, #12
 80011d0:	187b      	adds	r3, r7, r1
 80011d2:	2220      	movs	r2, #32
 80011d4:	709a      	strb	r2, [r3, #2]
    buf[3] = '\0';
 80011d6:	187b      	adds	r3, r7, r1
 80011d8:	2200      	movs	r2, #0
 80011da:	70da      	strb	r2, [r3, #3]

    for (int i=0; i<length/2; i++) {
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e028      	b.n	8001234 <dump_uart_raw+0x74>
        uint8_t rgb = read_fifo(sensor);
 80011e2:	2513      	movs	r5, #19
 80011e4:	197c      	adds	r4, r7, r5
 80011e6:	1cfb      	adds	r3, r7, #3
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff fd2b 	bl	8000c46 <read_fifo>
 80011f0:	0003      	movs	r3, r0
 80011f2:	7023      	strb	r3, [r4, #0]
        buf[0] = hex_2_ascii(rgb >> 4);
 80011f4:	002c      	movs	r4, r5
 80011f6:	193b      	adds	r3, r7, r4
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	091b      	lsrs	r3, r3, #4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	0018      	movs	r0, r3
 8001200:	f7ff fdc5 	bl	8000d8e <hex_2_ascii>
 8001204:	0003      	movs	r3, r0
 8001206:	001a      	movs	r2, r3
 8001208:	250c      	movs	r5, #12
 800120a:	197b      	adds	r3, r7, r5
 800120c:	701a      	strb	r2, [r3, #0]
        buf[1] = hex_2_ascii(rgb & 0x0f);
 800120e:	193b      	adds	r3, r7, r4
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	220f      	movs	r2, #15
 8001214:	4013      	ands	r3, r2
 8001216:	b2db      	uxtb	r3, r3
 8001218:	0018      	movs	r0, r3
 800121a:	f7ff fdb8 	bl	8000d8e <hex_2_ascii>
 800121e:	0003      	movs	r3, r0
 8001220:	001a      	movs	r2, r3
 8001222:	197b      	adds	r3, r7, r5
 8001224:	705a      	strb	r2, [r3, #1]
        DBG_PUT(buf);
 8001226:	197b      	adds	r3, r7, r5
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff fa21 	bl	8000670 <DBG_PUT>
    for (int i=0; i<length/2; i++) {
 800122e:	697b      	ldr	r3, [r7, #20]
 8001230:	3301      	adds	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	085a      	lsrs	r2, r3, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	429a      	cmp	r2, r3
 800123c:	d8d1      	bhi.n	80011e2 <dump_uart_raw+0x22>
    }
}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46c0      	nop			; (mov r8, r8)
 8001242:	46bd      	mov	sp, r7
 8001244:	b006      	add	sp, #24
 8001246:	bdb0      	pop	{r4, r5, r7, pc}

08001248 <SingleCapTransfer>:

void SingleCapTransfer(int format, uint8_t sensor) {
 8001248:	b5b0      	push	{r4, r5, r7, lr}
 800124a:	b094      	sub	sp, #80	; 0x50
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	000a      	movs	r2, r1
 8001252:	1cfb      	adds	r3, r7, #3
 8001254:	701a      	strb	r2, [r3, #0]
    char buf[64];

    write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK, sensor);   //VSYNC is active HIGH
 8001256:	1cfb      	adds	r3, r7, #3
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	001a      	movs	r2, r3
 800125c:	2102      	movs	r1, #2
 800125e:	2003      	movs	r0, #3
 8001260:	f7ff fcd5 	bl	8000c0e <write_reg>

    sprintf(buf, "Single Capture Transfer type %x\r\n", format);
 8001264:	687a      	ldr	r2, [r7, #4]
 8001266:	493d      	ldr	r1, [pc, #244]	; (800135c <SingleCapTransfer+0x114>)
 8001268:	240c      	movs	r4, #12
 800126a:	193b      	adds	r3, r7, r4
 800126c:	0018      	movs	r0, r3
 800126e:	f005 fb45 	bl	80068fc <siprintf>
    DBG_PUT(buf);
 8001272:	193b      	adds	r3, r7, r4
 8001274:	0018      	movs	r0, r3
 8001276:	f7ff f9fb 	bl	8000670 <DBG_PUT>

    uint8_t val;
    rdSensorReg16_8(REG_FORMAT_CTL, &val, sensor);
 800127a:	1cfb      	adds	r3, r7, #3
 800127c:	781a      	ldrb	r2, [r3, #0]
 800127e:	250b      	movs	r5, #11
 8001280:	1979      	adds	r1, r7, r5
 8001282:	2386      	movs	r3, #134	; 0x86
 8001284:	01db      	lsls	r3, r3, #7
 8001286:	0018      	movs	r0, r3
 8001288:	f7ff f9a0 	bl	80005cc <rdSensorReg16_8>
    sprintf(buf, "format reg: 0x%02x\r\n", val);
 800128c:	197b      	adds	r3, r7, r5
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	001a      	movs	r2, r3
 8001292:	4933      	ldr	r1, [pc, #204]	; (8001360 <SingleCapTransfer+0x118>)
 8001294:	193b      	adds	r3, r7, r4
 8001296:	0018      	movs	r0, r3
 8001298:	f005 fb30 	bl	80068fc <siprintf>
    DBG_PUT(buf);
 800129c:	193b      	adds	r3, r7, r4
 800129e:	0018      	movs	r0, r3
 80012a0:	f7ff f9e6 	bl	8000670 <DBG_PUT>

    flush_fifo(sensor);
 80012a4:	1cfb      	adds	r3, r7, #3
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	0018      	movs	r0, r3
 80012aa:	f7ff fce2 	bl	8000c72 <flush_fifo>
    clear_fifo_flag(sensor);
 80012ae:	1cfb      	adds	r3, r7, #3
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0018      	movs	r0, r3
 80012b4:	f7ff fcff 	bl	8000cb6 <clear_fifo_flag>
    start_capture(sensor);
 80012b8:	1cfb      	adds	r3, r7, #3
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff fce9 	bl	8000c94 <start_capture>
    while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK, sensor)){}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	1cfb      	adds	r3, r7, #3
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	001a      	movs	r2, r3
 80012ca:	2108      	movs	r1, #8
 80012cc:	2041      	movs	r0, #65	; 0x41
 80012ce:	f7ff fd35 	bl	8000d3c <get_bit>
 80012d2:	1e03      	subs	r3, r0, #0
 80012d4:	d0f6      	beq.n	80012c4 <SingleCapTransfer+0x7c>

    uint32_t length = read_fifo_length(sensor);
 80012d6:	1cfb      	adds	r3, r7, #3
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	0018      	movs	r0, r3
 80012dc:	f7ff fcfc 	bl	8000cd8 <read_fifo_length>
 80012e0:	0003      	movs	r3, r0
 80012e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    sprintf(buf, "Capture complete! FIFO len 0x%lx\r\n", length);
 80012e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012e6:	491f      	ldr	r1, [pc, #124]	; (8001364 <SingleCapTransfer+0x11c>)
 80012e8:	240c      	movs	r4, #12
 80012ea:	193b      	adds	r3, r7, r4
 80012ec:	0018      	movs	r0, r3
 80012ee:	f005 fb05 	bl	80068fc <siprintf>
    DBG_PUT(buf);
 80012f2:	193b      	adds	r3, r7, r4
 80012f4:	0018      	movs	r0, r3
 80012f6:	f7ff f9bb 	bl	8000670 <DBG_PUT>
    DBG_PUT("JPG");
 80012fa:	4b1b      	ldr	r3, [pc, #108]	; (8001368 <SingleCapTransfer+0x120>)
 80012fc:	0018      	movs	r0, r3
 80012fe:	f7ff f9b7 	bl	8000670 <DBG_PUT>

    switch(format) {
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d017      	beq.n	8001338 <SingleCapTransfer+0xf0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b02      	cmp	r3, #2
 800130c:	dc1d      	bgt.n	800134a <SingleCapTransfer+0x102>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <SingleCapTransfer+0xd4>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b01      	cmp	r3, #1
 8001318:	d006      	beq.n	8001328 <SingleCapTransfer+0xe0>
        break;
    case RAW:
        dump_uart_raw(length*2, sensor);
        break;
    default:
        break;
 800131a:	e016      	b.n	800134a <SingleCapTransfer+0x102>
        dump_uart_bmp(sensor);
 800131c:	1cfb      	adds	r3, r7, #3
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	0018      	movs	r0, r3
 8001322:	f7ff fd4b 	bl	8000dbc <dump_uart_bmp>
        break;
 8001326:	e011      	b.n	800134c <SingleCapTransfer+0x104>
        dump_uart_jpg(length, sensor);
 8001328:	1cfb      	adds	r3, r7, #3
 800132a:	781a      	ldrb	r2, [r3, #0]
 800132c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800132e:	0011      	movs	r1, r2
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff feb9 	bl	80010a8 <dump_uart_jpg>
        break;
 8001336:	e009      	b.n	800134c <SingleCapTransfer+0x104>
        dump_uart_raw(length*2, sensor);
 8001338:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800133a:	005a      	lsls	r2, r3, #1
 800133c:	1cfb      	adds	r3, r7, #3
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	0019      	movs	r1, r3
 8001342:	0010      	movs	r0, r2
 8001344:	f7ff ff3c 	bl	80011c0 <dump_uart_raw>
        break;
 8001348:	e000      	b.n	800134c <SingleCapTransfer+0x104>
        break;
 800134a:	46c0      	nop			; (mov r8, r8)
    }

    DBG_PUT("\04");
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <SingleCapTransfer+0x124>)
 800134e:	0018      	movs	r0, r3
 8001350:	f7ff f98e 	bl	8000670 <DBG_PUT>
}
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b014      	add	sp, #80	; 0x50
 800135a:	bdb0      	pop	{r4, r5, r7, pc}
 800135c:	08007c30 	.word	0x08007c30
 8001360:	08007c54 	.word	0x08007c54
 8001364:	08007c6c 	.word	0x08007c6c
 8001368:	08007c90 	.word	0x08007c90
 800136c:	08007c94 	.word	0x08007c94

08001370 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	0018      	movs	r0, r3
 800137c:	f7fe fec4 	bl	8000108 <strlen>
 8001380:	0003      	movs	r3, r0
 8001382:	b29a      	uxth	r2, r3
 8001384:	6879      	ldr	r1, [r7, #4]
 8001386:	4804      	ldr	r0, [pc, #16]	; (8001398 <DBG_PUT+0x28>)
 8001388:	2364      	movs	r3, #100	; 0x64
 800138a:	f004 fc67 	bl	8005c5c <HAL_UART_Transmit>
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b002      	add	sp, #8
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20000150 	.word	0x20000150

0800139c <next_token>:
extern I2C_HandleTypeDef hi2c2;


int VIS_DETECTED = 0;
int NIR_DETECTED = 0;
static inline const char* next_token(const char *ptr) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
    /* move to the next space */
    while(*ptr && *ptr != ' ') ptr++;
 80013a4:	e002      	b.n	80013ac <next_token+0x10>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	3301      	adds	r3, #1
 80013aa:	607b      	str	r3, [r7, #4]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d007      	beq.n	80013c4 <next_token+0x28>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b20      	cmp	r3, #32
 80013ba:	d1f4      	bne.n	80013a6 <next_token+0xa>
    /* move past any whitespace */
    while(*ptr && isspace(*ptr)) ptr++;
 80013bc:	e002      	b.n	80013c4 <next_token+0x28>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	3301      	adds	r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d009      	beq.n	80013e0 <next_token+0x44>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	1c5a      	adds	r2, r3, #1
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <next_token+0x5c>)
 80013d4:	18d3      	adds	r3, r2, r3
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	001a      	movs	r2, r3
 80013da:	2308      	movs	r3, #8
 80013dc:	4013      	ands	r3, r2
 80013de:	d1ee      	bne.n	80013be <next_token+0x22>

    return (*ptr) ? ptr : NULL;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <next_token+0x50>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	e000      	b.n	80013ee <next_token+0x52>
 80013ec:	2300      	movs	r3, #0
}
 80013ee:	0018      	movs	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	b002      	add	sp, #8
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	080091a8 	.word	0x080091a8

080013fc <help>:

static void help() {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
    DBG_PUT("Commands:\r\n");
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <help+0x64>)
 8001402:	0018      	movs	r0, r3
 8001404:	f7ff ffb4 	bl	8001370 <DBG_PUT>
    DBG_PUT("\tWorking/Tested:\r\n");
 8001408:	4b16      	ldr	r3, [pc, #88]	; (8001464 <help+0x68>)
 800140a:	0018      	movs	r0, r3
 800140c:	f7ff ffb0 	bl	8001370 <DBG_PUT>
    DBG_PUT("\t\tcapture <vis/nir>\r\n");
 8001410:	4b15      	ldr	r3, [pc, #84]	; (8001468 <help+0x6c>)
 8001412:	0018      	movs	r0, r3
 8001414:	f7ff ffac 	bl	8001370 <DBG_PUT>
    DBG_PUT("\t\tformat<vis/nir> [JPEG|BMP|RAW]\r\n");
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <help+0x70>)
 800141a:	0018      	movs	r0, r3
 800141c:	f7ff ffa8 	bl	8001370 <DBG_PUT>
    DBG_PUT("\t\treg <vis/nir> read <regnum>\r\n\treg write <regnum> <val>\r\n");
 8001420:	4b13      	ldr	r3, [pc, #76]	; (8001470 <help+0x74>)
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff ffa4 	bl	8001370 <DBG_PUT>
    DBG_PUT("\t\twidth  <vis/nir> [<pixels>]\r\n");
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <help+0x78>)
 800142a:	0018      	movs	r0, r3
 800142c:	f7ff ffa0 	bl	8001370 <DBG_PUT>
    DBG_PUT("\tscan Scan I2C bus 2\r\n");
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <help+0x7c>)
 8001432:	0018      	movs	r0, r3
 8001434:	f7ff ff9c 	bl	8001370 <DBG_PUT>
    DBG_PUT("\tNeeds work\r\n:");
 8001438:	4b10      	ldr	r3, [pc, #64]	; (800147c <help+0x80>)
 800143a:	0018      	movs	r0, r3
 800143c:	f7ff ff98 	bl	8001370 <DBG_PUT>
    DBG_PUT("\t\tinit sensor Resets arducam modules to default\r\n");
 8001440:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <help+0x84>)
 8001442:	0018      	movs	r0, r3
 8001444:	f7ff ff94 	bl	8001370 <DBG_PUT>
    DBG_PUT("\t\tinit nand Initialize NAND Flash\r\n");
 8001448:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <help+0x88>)
 800144a:	0018      	movs	r0, r3
 800144c:	f7ff ff90 	bl	8001370 <DBG_PUT>
    DBG_PUT("\tNot tested/partially implemented:\r\n");
 8001450:	4b0d      	ldr	r3, [pc, #52]	; (8001488 <help+0x8c>)
 8001452:	0018      	movs	r0, r3
 8001454:	f7ff ff8c 	bl	8001370 <DBG_PUT>
}
 8001458:	46c0      	nop			; (mov r8, r8)
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	08007ca8 	.word	0x08007ca8
 8001464:	08007cb4 	.word	0x08007cb4
 8001468:	08007cc8 	.word	0x08007cc8
 800146c:	08007ce0 	.word	0x08007ce0
 8001470:	08007d04 	.word	0x08007d04
 8001474:	08007d40 	.word	0x08007d40
 8001478:	08007d60 	.word	0x08007d60
 800147c:	08007d78 	.word	0x08007d78
 8001480:	08007d88 	.word	0x08007d88
 8001484:	08007dbc 	.word	0x08007dbc
 8001488:	08007de0 	.word	0x08007de0

0800148c <handle_format_cmd>:

static void handle_format_cmd(const char *cmd) {
 800148c:	b590      	push	{r4, r7, lr}
 800148e:	b09b      	sub	sp, #108	; 0x6c
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	// TODO: Needs to handle sensor input
    const char* format_names[3] = { "BMP", "JPEG", "RAW" };
 8001494:	234c      	movs	r3, #76	; 0x4c
 8001496:	18fb      	adds	r3, r7, r3
 8001498:	4a3d      	ldr	r2, [pc, #244]	; (8001590 <handle_format_cmd+0x104>)
 800149a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800149c:	c313      	stmia	r3!, {r0, r1, r4}
    char buf[64];

    const char *wptr = next_token(cmd);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f7ff ff7b 	bl	800139c <next_token>
 80014a6:	0003      	movs	r3, r0
 80014a8:	663b      	str	r3, [r7, #96]	; 0x60

    int target_sensor;
    switch(*wptr){
 80014aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b6e      	cmp	r3, #110	; 0x6e
 80014b0:	d00d      	beq.n	80014ce <handle_format_cmd+0x42>
 80014b2:	2b76      	cmp	r3, #118	; 0x76
 80014b4:	d117      	bne.n	80014e6 <handle_format_cmd+0x5a>
    case 'v':
    	if (VIS_DETECTED == 0){
 80014b6:	4b37      	ldr	r3, [pc, #220]	; (8001594 <handle_format_cmd+0x108>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d104      	bne.n	80014c8 <handle_format_cmd+0x3c>
    		DBG_PUT("VIS Unavailable.\r\n");
 80014be:	4b36      	ldr	r3, [pc, #216]	; (8001598 <handle_format_cmd+0x10c>)
 80014c0:	0018      	movs	r0, r3
 80014c2:	f7ff ff55 	bl	8001370 <DBG_PUT>
    		return;
 80014c6:	e05f      	b.n	8001588 <handle_format_cmd+0xfc>
    	}
    	target_sensor = VIS_SENSOR; // vis = 0
 80014c8:	2300      	movs	r3, #0
 80014ca:	667b      	str	r3, [r7, #100]	; 0x64
		break;
 80014cc:	e010      	b.n	80014f0 <handle_format_cmd+0x64>

    case 'n':
    	if (NIR_DETECTED == 0){
 80014ce:	4b33      	ldr	r3, [pc, #204]	; (800159c <handle_format_cmd+0x110>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d104      	bne.n	80014e0 <handle_format_cmd+0x54>
    		DBG_PUT("NIR Unavailable.\r\n");
 80014d6:	4b32      	ldr	r3, [pc, #200]	; (80015a0 <handle_format_cmd+0x114>)
 80014d8:	0018      	movs	r0, r3
 80014da:	f7ff ff49 	bl	8001370 <DBG_PUT>
    		return;
 80014de:	e053      	b.n	8001588 <handle_format_cmd+0xfc>
    	}
    	target_sensor = NIR_SENSOR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	667b      	str	r3, [r7, #100]	; 0x64
    	break;
 80014e4:	e004      	b.n	80014f0 <handle_format_cmd+0x64>
    default:
    	DBG_PUT("Target Error.\r\n");
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <handle_format_cmd+0x118>)
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff ff41 	bl	8001370 <DBG_PUT>
    	return;
 80014ee:	e04b      	b.n	8001588 <handle_format_cmd+0xfc>
    }

    const char *fmtarg = next_token(wptr);
 80014f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80014f2:	0018      	movs	r0, r3
 80014f4:	f7ff ff52 	bl	800139c <next_token>
 80014f8:	0003      	movs	r3, r0
 80014fa:	65fb      	str	r3, [r7, #92]	; 0x5c
    int old_format = format;
 80014fc:	4b2a      	ldr	r3, [pc, #168]	; (80015a8 <handle_format_cmd+0x11c>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	65bb      	str	r3, [r7, #88]	; 0x58

    if (fmtarg) {
 8001502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001504:	2b00      	cmp	r3, #0
 8001506:	d021      	beq.n	800154c <handle_format_cmd+0xc0>
        switch(*fmtarg) {
 8001508:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b52      	cmp	r3, #82	; 0x52
 800150e:	d00d      	beq.n	800152c <handle_format_cmd+0xa0>
 8001510:	dc10      	bgt.n	8001534 <handle_format_cmd+0xa8>
 8001512:	2b42      	cmp	r3, #66	; 0x42
 8001514:	d002      	beq.n	800151c <handle_format_cmd+0x90>
 8001516:	2b4a      	cmp	r3, #74	; 0x4a
 8001518:	d004      	beq.n	8001524 <handle_format_cmd+0x98>
 800151a:	e00b      	b.n	8001534 <handle_format_cmd+0xa8>
        case 'B':
            format = BMP;
 800151c:	4b22      	ldr	r3, [pc, #136]	; (80015a8 <handle_format_cmd+0x11c>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
            break;
 8001522:	e014      	b.n	800154e <handle_format_cmd+0xc2>
        case 'J':
            format = JPEG;
 8001524:	4b20      	ldr	r3, [pc, #128]	; (80015a8 <handle_format_cmd+0x11c>)
 8001526:	2201      	movs	r2, #1
 8001528:	601a      	str	r2, [r3, #0]
            break;
 800152a:	e010      	b.n	800154e <handle_format_cmd+0xc2>
        case 'R':
            format = RAW;
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <handle_format_cmd+0x11c>)
 800152e:	2202      	movs	r2, #2
 8001530:	601a      	str	r2, [r3, #0]
            break;
 8001532:	e00c      	b.n	800154e <handle_format_cmd+0xc2>
        default:
            sprintf(buf, "unknown format: <%s>\r\n", fmtarg);
 8001534:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001536:	491d      	ldr	r1, [pc, #116]	; (80015ac <handle_format_cmd+0x120>)
 8001538:	240c      	movs	r4, #12
 800153a:	193b      	adds	r3, r7, r4
 800153c:	0018      	movs	r0, r3
 800153e:	f005 f9dd 	bl	80068fc <siprintf>
            DBG_PUT(buf);
 8001542:	193b      	adds	r3, r7, r4
 8001544:	0018      	movs	r0, r3
 8001546:	f7ff ff13 	bl	8001370 <DBG_PUT>
            return;
 800154a:	e01d      	b.n	8001588 <handle_format_cmd+0xfc>
        }
    }
 800154c:	46c0      	nop			; (mov r8, r8)

    if (format != old_format) {
 800154e:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <handle_format_cmd+0x11c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001554:	429a      	cmp	r2, r3
 8001556:	d006      	beq.n	8001566 <handle_format_cmd+0xda>
        Arduino_init(format, target_sensor);
 8001558:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <handle_format_cmd+0x11c>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800155e:	0011      	movs	r1, r2
 8001560:	0018      	movs	r0, r3
 8001562:	f7ff f8a7 	bl	80006b4 <Arduino_init>
    }
    DBG_PUT("current format: ");
 8001566:	4b12      	ldr	r3, [pc, #72]	; (80015b0 <handle_format_cmd+0x124>)
 8001568:	0018      	movs	r0, r3
 800156a:	f7ff ff01 	bl	8001370 <DBG_PUT>
    DBG_PUT(format_names[format]);
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <handle_format_cmd+0x11c>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	234c      	movs	r3, #76	; 0x4c
 8001574:	18fb      	adds	r3, r7, r3
 8001576:	0092      	lsls	r2, r2, #2
 8001578:	58d3      	ldr	r3, [r2, r3]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff fef8 	bl	8001370 <DBG_PUT>
    DBG_PUT("\r\n");
 8001580:	4b0c      	ldr	r3, [pc, #48]	; (80015b4 <handle_format_cmd+0x128>)
 8001582:	0018      	movs	r0, r3
 8001584:	f7ff fef4 	bl	8001370 <DBG_PUT>
}
 8001588:	46bd      	mov	sp, r7
 800158a:	b01b      	add	sp, #108	; 0x6c
 800158c:	bd90      	pop	{r4, r7, pc}
 800158e:	46c0      	nop			; (mov r8, r8)
 8001590:	08007e70 	.word	0x08007e70
 8001594:	20000094 	.word	0x20000094
 8001598:	08007e08 	.word	0x08007e08
 800159c:	20000098 	.word	0x20000098
 80015a0:	08007e1c 	.word	0x08007e1c
 80015a4:	08007e30 	.word	0x08007e30
 80015a8:	20000004 	.word	0x20000004
 80015ac:	08007e40 	.word	0x08007e40
 80015b0:	08007e58 	.word	0x08007e58
 80015b4:	08007e6c 	.word	0x08007e6c

080015b8 <handle_reg_cmd>:

static void handle_reg_cmd(const char *cmd) {
 80015b8:	b590      	push	{r4, r7, lr}
 80015ba:	b09b      	sub	sp, #108	; 0x6c
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
    char buf[64];
    const char *wptr = next_token(cmd);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	0018      	movs	r0, r3
 80015c4:	f7ff feea 	bl	800139c <next_token>
 80015c8:	0003      	movs	r3, r0
 80015ca:	663b      	str	r3, [r7, #96]	; 0x60

    int target_sensor;
    switch(*wptr){
 80015cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b6e      	cmp	r3, #110	; 0x6e
 80015d2:	d00d      	beq.n	80015f0 <handle_reg_cmd+0x38>
 80015d4:	2b76      	cmp	r3, #118	; 0x76
 80015d6:	d117      	bne.n	8001608 <handle_reg_cmd+0x50>
    case 'v':
    	if (VIS_DETECTED == 0){
 80015d8:	4b4f      	ldr	r3, [pc, #316]	; (8001718 <handle_reg_cmd+0x160>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d104      	bne.n	80015ea <handle_reg_cmd+0x32>
    		DBG_PUT("VIS Unavailable.\r\n");
 80015e0:	4b4e      	ldr	r3, [pc, #312]	; (800171c <handle_reg_cmd+0x164>)
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7ff fec4 	bl	8001370 <DBG_PUT>
    		return;
 80015e8:	e092      	b.n	8001710 <handle_reg_cmd+0x158>
    	}
    	target_sensor = VIS_SENSOR; // vis = 0
 80015ea:	2300      	movs	r3, #0
 80015ec:	667b      	str	r3, [r7, #100]	; 0x64
		break;
 80015ee:	e010      	b.n	8001612 <handle_reg_cmd+0x5a>

    case 'n':
    	if (NIR_DETECTED == 0){
 80015f0:	4b4b      	ldr	r3, [pc, #300]	; (8001720 <handle_reg_cmd+0x168>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d104      	bne.n	8001602 <handle_reg_cmd+0x4a>
    		DBG_PUT("NIR Unavailable.\r\n");
 80015f8:	4b4a      	ldr	r3, [pc, #296]	; (8001724 <handle_reg_cmd+0x16c>)
 80015fa:	0018      	movs	r0, r3
 80015fc:	f7ff feb8 	bl	8001370 <DBG_PUT>
    		return;
 8001600:	e086      	b.n	8001710 <handle_reg_cmd+0x158>
    	}
    	target_sensor = NIR_SENSOR;
 8001602:	2301      	movs	r3, #1
 8001604:	667b      	str	r3, [r7, #100]	; 0x64
    	break;
 8001606:	e004      	b.n	8001612 <handle_reg_cmd+0x5a>
    default:
    	DBG_PUT("Target Error.\r\n");
 8001608:	4b47      	ldr	r3, [pc, #284]	; (8001728 <handle_reg_cmd+0x170>)
 800160a:	0018      	movs	r0, r3
 800160c:	f7ff feb0 	bl	8001370 <DBG_PUT>
    	return;
 8001610:	e07e      	b.n	8001710 <handle_reg_cmd+0x158>
    }

    const char *rwarg = next_token(wptr);
 8001612:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff fec1 	bl	800139c <next_token>
 800161a:	0003      	movs	r3, r0
 800161c:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (!rwarg) {
 800161e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001620:	2b00      	cmp	r3, #0
 8001622:	d102      	bne.n	800162a <handle_reg_cmd+0x72>
        help();
 8001624:	f7ff feea 	bl	80013fc <help>
        return;
 8001628:	e072      	b.n	8001710 <handle_reg_cmd+0x158>
    }

    const char *regptr = next_token(rwarg);
 800162a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800162c:	0018      	movs	r0, r3
 800162e:	f7ff feb5 	bl	800139c <next_token>
 8001632:	0003      	movs	r3, r0
 8001634:	65bb      	str	r3, [r7, #88]	; 0x58
    if (!regptr) {
 8001636:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <handle_reg_cmd+0x8a>
        help();
 800163c:	f7ff fede 	bl	80013fc <help>
        return;
 8001640:	e066      	b.n	8001710 <handle_reg_cmd+0x158>
    }

    uint32_t reg;
    if (sscanf(regptr, "%lx", &reg) != 1) {
 8001642:	2310      	movs	r3, #16
 8001644:	18fa      	adds	r2, r7, r3
 8001646:	4939      	ldr	r1, [pc, #228]	; (800172c <handle_reg_cmd+0x174>)
 8001648:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800164a:	0018      	movs	r0, r3
 800164c:	f005 f976 	bl	800693c <siscanf>
 8001650:	0003      	movs	r3, r0
 8001652:	2b01      	cmp	r3, #1
 8001654:	d002      	beq.n	800165c <handle_reg_cmd+0xa4>
        help();
 8001656:	f7ff fed1 	bl	80013fc <help>
        return;
 800165a:	e059      	b.n	8001710 <handle_reg_cmd+0x158>
    }

    switch(*rwarg) {
 800165c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b72      	cmp	r3, #114	; 0x72
 8001662:	d002      	beq.n	800166a <handle_reg_cmd+0xb2>
 8001664:	2b77      	cmp	r3, #119	; 0x77
 8001666:	d012      	beq.n	800168e <handle_reg_cmd+0xd6>
 8001668:	e045      	b.n	80016f6 <handle_reg_cmd+0x13e>
    case 'r':
        {
            uint8_t val;
            rdSensorReg16_8(reg, &val, target_sensor);
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	b29b      	uxth	r3, r3
 800166e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8001670:	b2d2      	uxtb	r2, r2
 8001672:	240f      	movs	r4, #15
 8001674:	1939      	adds	r1, r7, r4
 8001676:	0018      	movs	r0, r3
 8001678:	f7fe ffa8 	bl	80005cc <rdSensorReg16_8>
            sprintf(buf, "register 0x%lx = 0x%02x\r\n", reg, val);
 800167c:	693a      	ldr	r2, [r7, #16]
 800167e:	193b      	adds	r3, r7, r4
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	492b      	ldr	r1, [pc, #172]	; (8001730 <handle_reg_cmd+0x178>)
 8001684:	2014      	movs	r0, #20
 8001686:	1838      	adds	r0, r7, r0
 8001688:	f005 f938 	bl	80068fc <siprintf>
        }
        break;
 800168c:	e03b      	b.n	8001706 <handle_reg_cmd+0x14e>

    case 'w':
        {
            const char *valptr = next_token(regptr);
 800168e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff fe83 	bl	800139c <next_token>
 8001696:	0003      	movs	r3, r0
 8001698:	657b      	str	r3, [r7, #84]	; 0x54
            if (!valptr) {
 800169a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800169c:	2b00      	cmp	r3, #0
 800169e:	d107      	bne.n	80016b0 <handle_reg_cmd+0xf8>
                sprintf(buf, "reg write 0x%lx: missing reg value\r\n", reg);
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	4924      	ldr	r1, [pc, #144]	; (8001734 <handle_reg_cmd+0x17c>)
 80016a4:	2314      	movs	r3, #20
 80016a6:	18fb      	adds	r3, r7, r3
 80016a8:	0018      	movs	r0, r3
 80016aa:	f005 f927 	bl	80068fc <siprintf>
                break;
 80016ae:	e02a      	b.n	8001706 <handle_reg_cmd+0x14e>
            }
            uint32_t val;
            if (sscanf(valptr, "%lx", &val) != 1) {
 80016b0:	2308      	movs	r3, #8
 80016b2:	18fa      	adds	r2, r7, r3
 80016b4:	491d      	ldr	r1, [pc, #116]	; (800172c <handle_reg_cmd+0x174>)
 80016b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016b8:	0018      	movs	r0, r3
 80016ba:	f005 f93f 	bl	800693c <siscanf>
 80016be:	0003      	movs	r3, r0
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d007      	beq.n	80016d4 <handle_reg_cmd+0x11c>
                sprintf(buf, "reg write 0x%lx: bad val '%s'\r\n", reg, valptr);
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80016c8:	491b      	ldr	r1, [pc, #108]	; (8001738 <handle_reg_cmd+0x180>)
 80016ca:	2014      	movs	r0, #20
 80016cc:	1838      	adds	r0, r7, r0
 80016ce:	f005 f915 	bl	80068fc <siprintf>
                break;
 80016d2:	e018      	b.n	8001706 <handle_reg_cmd+0x14e>
            }
            wrSensorReg16_8(reg, val, target_sensor);
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	68ba      	ldr	r2, [r7, #8]
 80016da:	b2d1      	uxtb	r1, r2
 80016dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80016de:	b2d2      	uxtb	r2, r2
 80016e0:	0018      	movs	r0, r3
 80016e2:	f7fe feed 	bl	80004c0 <wrSensorReg16_8>
            sprintf(buf, "register 0x%lx wrote 0x%02lx\r\n", reg, val);
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4914      	ldr	r1, [pc, #80]	; (800173c <handle_reg_cmd+0x184>)
 80016ec:	2014      	movs	r0, #20
 80016ee:	1838      	adds	r0, r7, r0
 80016f0:	f005 f904 	bl	80068fc <siprintf>
        }
        break;
 80016f4:	e007      	b.n	8001706 <handle_reg_cmd+0x14e>
    default:
        sprintf(buf, "reg op must be read or write, '%s' not supported\r\n", rwarg);
 80016f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016f8:	4911      	ldr	r1, [pc, #68]	; (8001740 <handle_reg_cmd+0x188>)
 80016fa:	2314      	movs	r3, #20
 80016fc:	18fb      	adds	r3, r7, r3
 80016fe:	0018      	movs	r0, r3
 8001700:	f005 f8fc 	bl	80068fc <siprintf>
        break;
 8001704:	46c0      	nop			; (mov r8, r8)
    }
    DBG_PUT(buf);
 8001706:	2314      	movs	r3, #20
 8001708:	18fb      	adds	r3, r7, r3
 800170a:	0018      	movs	r0, r3
 800170c:	f7ff fe30 	bl	8001370 <DBG_PUT>
}
 8001710:	46bd      	mov	sp, r7
 8001712:	b01b      	add	sp, #108	; 0x6c
 8001714:	bd90      	pop	{r4, r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	20000094 	.word	0x20000094
 800171c:	08007e08 	.word	0x08007e08
 8001720:	20000098 	.word	0x20000098
 8001724:	08007e1c 	.word	0x08007e1c
 8001728:	08007e30 	.word	0x08007e30
 800172c:	08007e7c 	.word	0x08007e7c
 8001730:	08007e80 	.word	0x08007e80
 8001734:	08007e9c 	.word	0x08007e9c
 8001738:	08007ec4 	.word	0x08007ec4
 800173c:	08007ee4 	.word	0x08007ee4
 8001740:	08007f04 	.word	0x08007f04

08001744 <handle_width_cmd>:

static void handle_width_cmd(const char *cmd) {
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b099      	sub	sp, #100	; 0x64
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
    char buf[64];
    const char *wptr = next_token(cmd);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	0018      	movs	r0, r3
 8001750:	f7ff fe24 	bl	800139c <next_token>
 8001754:	0003      	movs	r3, r0
 8001756:	65bb      	str	r3, [r7, #88]	; 0x58
    if (!wptr) {
 8001758:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800175a:	2b00      	cmp	r3, #0
 800175c:	d12f      	bne.n	80017be <handle_width_cmd+0x7a>
        int width, depth;
        if (VIS_DETECTED){
 800175e:	4b7f      	ldr	r3, [pc, #508]	; (800195c <handle_width_cmd+0x218>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d012      	beq.n	800178c <handle_width_cmd+0x48>
            arducam_get_resolution(&width, &depth, VIS_SENSOR);
 8001766:	230c      	movs	r3, #12
 8001768:	18f9      	adds	r1, r7, r3
 800176a:	2310      	movs	r3, #16
 800176c:	18fb      	adds	r3, r7, r3
 800176e:	2200      	movs	r2, #0
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff f8b5 	bl	80008e0 <arducam_get_resolution>
            sprintf(buf, "VIS Camera Resolution: %d by %d\r\n", width, depth);
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	4979      	ldr	r1, [pc, #484]	; (8001960 <handle_width_cmd+0x21c>)
 800177c:	2414      	movs	r4, #20
 800177e:	1938      	adds	r0, r7, r4
 8001780:	f005 f8bc 	bl	80068fc <siprintf>
            DBG_PUT(buf);
 8001784:	193b      	adds	r3, r7, r4
 8001786:	0018      	movs	r0, r3
 8001788:	f7ff fdf2 	bl	8001370 <DBG_PUT>
        }
        if (NIR_DETECTED){
 800178c:	4b75      	ldr	r3, [pc, #468]	; (8001964 <handle_width_cmd+0x220>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d100      	bne.n	8001796 <handle_width_cmd+0x52>
 8001794:	e0df      	b.n	8001956 <handle_width_cmd+0x212>
            arducam_get_resolution(&width, &depth, NIR_SENSOR);
 8001796:	230c      	movs	r3, #12
 8001798:	18f9      	adds	r1, r7, r3
 800179a:	2310      	movs	r3, #16
 800179c:	18fb      	adds	r3, r7, r3
 800179e:	2201      	movs	r2, #1
 80017a0:	0018      	movs	r0, r3
 80017a2:	f7ff f89d 	bl	80008e0 <arducam_get_resolution>
            sprintf(buf, "NIR Camera Resolution: %d by %d\r\n", width, depth);
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	496f      	ldr	r1, [pc, #444]	; (8001968 <handle_width_cmd+0x224>)
 80017ac:	2414      	movs	r4, #20
 80017ae:	1938      	adds	r0, r7, r4
 80017b0:	f005 f8a4 	bl	80068fc <siprintf>
            DBG_PUT(buf);
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	0018      	movs	r0, r3
 80017b8:	f7ff fdda 	bl	8001370 <DBG_PUT>
 80017bc:	e0cb      	b.n	8001956 <handle_width_cmd+0x212>
        }
        return;
    }
    buf[0] = 0;
 80017be:	2314      	movs	r3, #20
 80017c0:	18fb      	adds	r3, r7, r3
 80017c2:	2200      	movs	r2, #0
 80017c4:	701a      	strb	r2, [r3, #0]
    int target_sensor;
    switch(*wptr){
 80017c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b6e      	cmp	r3, #110	; 0x6e
 80017cc:	d00d      	beq.n	80017ea <handle_width_cmd+0xa6>
 80017ce:	2b76      	cmp	r3, #118	; 0x76
 80017d0:	d117      	bne.n	8001802 <handle_width_cmd+0xbe>
    case 'v':
    	if (VIS_DETECTED == 0){
 80017d2:	4b62      	ldr	r3, [pc, #392]	; (800195c <handle_width_cmd+0x218>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d104      	bne.n	80017e4 <handle_width_cmd+0xa0>
    		DBG_PUT("VIS Unavailable.\r\n");
 80017da:	4b64      	ldr	r3, [pc, #400]	; (800196c <handle_width_cmd+0x228>)
 80017dc:	0018      	movs	r0, r3
 80017de:	f7ff fdc7 	bl	8001370 <DBG_PUT>
    		return;
 80017e2:	e0b8      	b.n	8001956 <handle_width_cmd+0x212>
    	}
    	target_sensor = VIS_SENSOR; // vis = 0
 80017e4:	2300      	movs	r3, #0
 80017e6:	65fb      	str	r3, [r7, #92]	; 0x5c
		break;
 80017e8:	e010      	b.n	800180c <handle_width_cmd+0xc8>
    case 'n':
    	if (NIR_DETECTED == 0){
 80017ea:	4b5e      	ldr	r3, [pc, #376]	; (8001964 <handle_width_cmd+0x220>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d104      	bne.n	80017fc <handle_width_cmd+0xb8>
    		DBG_PUT("NIR Unavailable.\r\n");
 80017f2:	4b5f      	ldr	r3, [pc, #380]	; (8001970 <handle_width_cmd+0x22c>)
 80017f4:	0018      	movs	r0, r3
 80017f6:	f7ff fdbb 	bl	8001370 <DBG_PUT>
    		return;
 80017fa:	e0ac      	b.n	8001956 <handle_width_cmd+0x212>
    	}
    	target_sensor = NIR_SENSOR;
 80017fc:	2301      	movs	r3, #1
 80017fe:	65fb      	str	r3, [r7, #92]	; 0x5c
    	break;
 8001800:	e004      	b.n	800180c <handle_width_cmd+0xc8>
    default:
    	DBG_PUT("Target Error.\r\n");
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <handle_width_cmd+0x230>)
 8001804:	0018      	movs	r0, r3
 8001806:	f7ff fdb3 	bl	8001370 <DBG_PUT>
    	return;
 800180a:	e0a4      	b.n	8001956 <handle_width_cmd+0x212>
    }
    const char *res = next_token(wptr);
 800180c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800180e:	0018      	movs	r0, r3
 8001810:	f7ff fdc4 	bl	800139c <next_token>
 8001814:	0003      	movs	r3, r0
 8001816:	657b      	str	r3, [r7, #84]	; 0x54

    switch(*res) {
 8001818:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b36      	cmp	r3, #54	; 0x36
 800181e:	d007      	beq.n	8001830 <handle_width_cmd+0xec>
 8001820:	dd00      	ble.n	8001824 <handle_width_cmd+0xe0>
 8001822:	e086      	b.n	8001932 <handle_width_cmd+0x1ee>
 8001824:	2b31      	cmp	r3, #49	; 0x31
 8001826:	d017      	beq.n	8001858 <handle_width_cmd+0x114>
 8001828:	2b33      	cmp	r3, #51	; 0x33
 800182a:	d100      	bne.n	800182e <handle_width_cmd+0xea>
 800182c:	e06c      	b.n	8001908 <handle_width_cmd+0x1c4>
 800182e:	e080      	b.n	8001932 <handle_width_cmd+0x1ee>
    case '6':
        if (arducam_set_resolution(format, 640, target_sensor))
 8001830:	4b51      	ldr	r3, [pc, #324]	; (8001978 <handle_width_cmd+0x234>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	21a0      	movs	r1, #160	; 0xa0
 800183a:	0089      	lsls	r1, r1, #2
 800183c:	0018      	movs	r0, r3
 800183e:	f7ff f8ab 	bl	8000998 <arducam_set_resolution>
 8001842:	1e03      	subs	r3, r0, #0
 8001844:	d008      	beq.n	8001858 <handle_width_cmd+0x114>
            strcpy(buf, "resolution is now 640x480\r\n");
 8001846:	2314      	movs	r3, #20
 8001848:	18fb      	adds	r3, r7, r3
 800184a:	4a4c      	ldr	r2, [pc, #304]	; (800197c <handle_width_cmd+0x238>)
 800184c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800184e:	c313      	stmia	r3!, {r0, r1, r4}
 8001850:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001852:	c313      	stmia	r3!, {r0, r1, r4}
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	601a      	str	r2, [r3, #0]
    case '1':
        switch(*(res + 1)) {
 8001858:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800185a:	3301      	adds	r3, #1
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b39      	cmp	r3, #57	; 0x39
 8001860:	d033      	beq.n	80018ca <handle_width_cmd+0x186>
 8001862:	dc49      	bgt.n	80018f8 <handle_width_cmd+0x1b4>
 8001864:	2b30      	cmp	r3, #48	; 0x30
 8001866:	d002      	beq.n	800186e <handle_width_cmd+0x12a>
 8001868:	2b32      	cmp	r3, #50	; 0x32
 800186a:	d017      	beq.n	800189c <handle_width_cmd+0x158>
        case '9':
            if (arducam_set_resolution(format, 1920, target_sensor))
                strcpy(buf, "resolution is now 1920x1080\r\n");
            break;
        default:
            break;
 800186c:	e044      	b.n	80018f8 <handle_width_cmd+0x1b4>
            if (arducam_set_resolution(format, 1024, target_sensor))
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <handle_width_cmd+0x234>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	00c9      	lsls	r1, r1, #3
 800187a:	0018      	movs	r0, r3
 800187c:	f7ff f88c 	bl	8000998 <arducam_set_resolution>
 8001880:	1e03      	subs	r3, r0, #0
 8001882:	d03b      	beq.n	80018fc <handle_width_cmd+0x1b8>
                strcpy(buf, "resolution is now 1024x768\r\n");
 8001884:	2314      	movs	r3, #20
 8001886:	18fb      	adds	r3, r7, r3
 8001888:	4a3d      	ldr	r2, [pc, #244]	; (8001980 <handle_width_cmd+0x23c>)
 800188a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800188c:	c313      	stmia	r3!, {r0, r1, r4}
 800188e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001890:	c313      	stmia	r3!, {r0, r1, r4}
 8001892:	6811      	ldr	r1, [r2, #0]
 8001894:	6019      	str	r1, [r3, #0]
 8001896:	7912      	ldrb	r2, [r2, #4]
 8001898:	711a      	strb	r2, [r3, #4]
            break;
 800189a:	e02f      	b.n	80018fc <handle_width_cmd+0x1b8>
            if (arducam_set_resolution(format, 1280, target_sensor))
 800189c:	4b36      	ldr	r3, [pc, #216]	; (8001978 <handle_width_cmd+0x234>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	21a0      	movs	r1, #160	; 0xa0
 80018a6:	00c9      	lsls	r1, r1, #3
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff f875 	bl	8000998 <arducam_set_resolution>
 80018ae:	1e03      	subs	r3, r0, #0
 80018b0:	d026      	beq.n	8001900 <handle_width_cmd+0x1bc>
                strcpy(buf, "resolution is now 1280x960\r\n");
 80018b2:	2314      	movs	r3, #20
 80018b4:	18fb      	adds	r3, r7, r3
 80018b6:	4a33      	ldr	r2, [pc, #204]	; (8001984 <handle_width_cmd+0x240>)
 80018b8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018ba:	c313      	stmia	r3!, {r0, r1, r4}
 80018bc:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018be:	c313      	stmia	r3!, {r0, r1, r4}
 80018c0:	6811      	ldr	r1, [r2, #0]
 80018c2:	6019      	str	r1, [r3, #0]
 80018c4:	7912      	ldrb	r2, [r2, #4]
 80018c6:	711a      	strb	r2, [r3, #4]
            break;
 80018c8:	e01a      	b.n	8001900 <handle_width_cmd+0x1bc>
            if (arducam_set_resolution(format, 1920, target_sensor))
 80018ca:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <handle_width_cmd+0x234>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80018d0:	b2d2      	uxtb	r2, r2
 80018d2:	21f0      	movs	r1, #240	; 0xf0
 80018d4:	00c9      	lsls	r1, r1, #3
 80018d6:	0018      	movs	r0, r3
 80018d8:	f7ff f85e 	bl	8000998 <arducam_set_resolution>
 80018dc:	1e03      	subs	r3, r0, #0
 80018de:	d011      	beq.n	8001904 <handle_width_cmd+0x1c0>
                strcpy(buf, "resolution is now 1920x1080\r\n");
 80018e0:	2314      	movs	r3, #20
 80018e2:	18fb      	adds	r3, r7, r3
 80018e4:	4a28      	ldr	r2, [pc, #160]	; (8001988 <handle_width_cmd+0x244>)
 80018e6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018e8:	c313      	stmia	r3!, {r0, r1, r4}
 80018ea:	ca13      	ldmia	r2!, {r0, r1, r4}
 80018ec:	c313      	stmia	r3!, {r0, r1, r4}
 80018ee:	6811      	ldr	r1, [r2, #0]
 80018f0:	6019      	str	r1, [r3, #0]
 80018f2:	8892      	ldrh	r2, [r2, #4]
 80018f4:	809a      	strh	r2, [r3, #4]
            break;
 80018f6:	e005      	b.n	8001904 <handle_width_cmd+0x1c0>
            break;
 80018f8:	46c0      	nop			; (mov r8, r8)
 80018fa:	e023      	b.n	8001944 <handle_width_cmd+0x200>
            break;
 80018fc:	46c0      	nop			; (mov r8, r8)
 80018fe:	e021      	b.n	8001944 <handle_width_cmd+0x200>
            break;
 8001900:	46c0      	nop			; (mov r8, r8)
 8001902:	e01f      	b.n	8001944 <handle_width_cmd+0x200>
            break;
 8001904:	46c0      	nop			; (mov r8, r8)
        }
        break;
 8001906:	e01d      	b.n	8001944 <handle_width_cmd+0x200>
    case '3':
        if (arducam_set_resolution(format, 320, target_sensor))
 8001908:	4b1b      	ldr	r3, [pc, #108]	; (8001978 <handle_width_cmd+0x234>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	21a0      	movs	r1, #160	; 0xa0
 8001912:	0049      	lsls	r1, r1, #1
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff f83f 	bl	8000998 <arducam_set_resolution>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d011      	beq.n	8001942 <handle_width_cmd+0x1fe>
            strcpy(buf, "resolution is now 320x240\r\n");
 800191e:	2314      	movs	r3, #20
 8001920:	18fb      	adds	r3, r7, r3
 8001922:	4a1a      	ldr	r2, [pc, #104]	; (800198c <handle_width_cmd+0x248>)
 8001924:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001926:	c313      	stmia	r3!, {r0, r1, r4}
 8001928:	ca13      	ldmia	r2!, {r0, r1, r4}
 800192a:	c313      	stmia	r3!, {r0, r1, r4}
 800192c:	6812      	ldr	r2, [r2, #0]
 800192e:	601a      	str	r2, [r3, #0]
        break;
 8001930:	e007      	b.n	8001942 <handle_width_cmd+0x1fe>
    default:
        sprintf(buf, "unsupported width: <%s>\r\n", res);
 8001932:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001934:	4916      	ldr	r1, [pc, #88]	; (8001990 <handle_width_cmd+0x24c>)
 8001936:	2314      	movs	r3, #20
 8001938:	18fb      	adds	r3, r7, r3
 800193a:	0018      	movs	r0, r3
 800193c:	f004 ffde 	bl	80068fc <siprintf>
        break;
 8001940:	e000      	b.n	8001944 <handle_width_cmd+0x200>
        break;
 8001942:	46c0      	nop			; (mov r8, r8)
    }

    if (buf[0])
 8001944:	2214      	movs	r2, #20
 8001946:	18bb      	adds	r3, r7, r2
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d003      	beq.n	8001956 <handle_width_cmd+0x212>
        DBG_PUT(buf);
 800194e:	18bb      	adds	r3, r7, r2
 8001950:	0018      	movs	r0, r3
 8001952:	f7ff fd0d 	bl	8001370 <DBG_PUT>
}
 8001956:	46bd      	mov	sp, r7
 8001958:	b019      	add	sp, #100	; 0x64
 800195a:	bd90      	pop	{r4, r7, pc}
 800195c:	20000094 	.word	0x20000094
 8001960:	08007f38 	.word	0x08007f38
 8001964:	20000098 	.word	0x20000098
 8001968:	08007f5c 	.word	0x08007f5c
 800196c:	08007e08 	.word	0x08007e08
 8001970:	08007e1c 	.word	0x08007e1c
 8001974:	08007e30 	.word	0x08007e30
 8001978:	20000004 	.word	0x20000004
 800197c:	08007f80 	.word	0x08007f80
 8001980:	08007f9c 	.word	0x08007f9c
 8001984:	08007fbc 	.word	0x08007fbc
 8001988:	08007fdc 	.word	0x08007fdc
 800198c:	08007ffc 	.word	0x08007ffc
 8001990:	08008018 	.word	0x08008018

08001994 <handle_capture_cmd>:

static void handle_capture_cmd(const char *cmd) {
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
    const char *wptr = next_token(cmd);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	0018      	movs	r0, r3
 80019a0:	f7ff fcfc 	bl	800139c <next_token>
 80019a4:	0003      	movs	r3, r0
 80019a6:	60bb      	str	r3, [r7, #8]

    int target_sensor;
    switch(*wptr){
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b6e      	cmp	r3, #110	; 0x6e
 80019ae:	d00d      	beq.n	80019cc <handle_capture_cmd+0x38>
 80019b0:	2b76      	cmp	r3, #118	; 0x76
 80019b2:	d117      	bne.n	80019e4 <handle_capture_cmd+0x50>
    case 'v':
    	if (VIS_DETECTED == 0){
 80019b4:	4b13      	ldr	r3, [pc, #76]	; (8001a04 <handle_capture_cmd+0x70>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d104      	bne.n	80019c6 <handle_capture_cmd+0x32>
    		DBG_PUT("VIS Unavailable.\r\n");
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <handle_capture_cmd+0x74>)
 80019be:	0018      	movs	r0, r3
 80019c0:	f7ff fcd6 	bl	8001370 <DBG_PUT>
    		return;
 80019c4:	e01b      	b.n	80019fe <handle_capture_cmd+0x6a>
    	}
    	target_sensor = VIS_SENSOR; // vis = 0
 80019c6:	2300      	movs	r3, #0
 80019c8:	60fb      	str	r3, [r7, #12]
		break;
 80019ca:	e010      	b.n	80019ee <handle_capture_cmd+0x5a>

    case 'n':
    	if (NIR_DETECTED == 0){
 80019cc:	4b0f      	ldr	r3, [pc, #60]	; (8001a0c <handle_capture_cmd+0x78>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d104      	bne.n	80019de <handle_capture_cmd+0x4a>
    		DBG_PUT("NIR Unavailable.\r\n");
 80019d4:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <handle_capture_cmd+0x7c>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f7ff fcca 	bl	8001370 <DBG_PUT>
    		return;
 80019dc:	e00f      	b.n	80019fe <handle_capture_cmd+0x6a>
    	}
    	target_sensor = NIR_SENSOR;
 80019de:	2301      	movs	r3, #1
 80019e0:	60fb      	str	r3, [r7, #12]
    	break;
 80019e2:	e004      	b.n	80019ee <handle_capture_cmd+0x5a>
    default:
    	DBG_PUT("Target Error.\r\n");
 80019e4:	4b0b      	ldr	r3, [pc, #44]	; (8001a14 <handle_capture_cmd+0x80>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7ff fcc2 	bl	8001370 <DBG_PUT>
    	return;
 80019ec:	e007      	b.n	80019fe <handle_capture_cmd+0x6a>
    }

    SingleCapTransfer(format, target_sensor); // also needs to be changed to handle sensor cmd
 80019ee:	4b0a      	ldr	r3, [pc, #40]	; (8001a18 <handle_capture_cmd+0x84>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	0011      	movs	r1, r2
 80019f8:	0018      	movs	r0, r3
 80019fa:	f7ff fc25 	bl	8001248 <SingleCapTransfer>

}
 80019fe:	46bd      	mov	sp, r7
 8001a00:	b004      	add	sp, #16
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000094 	.word	0x20000094
 8001a08:	08007e08 	.word	0x08007e08
 8001a0c:	20000098 	.word	0x20000098
 8001a10:	08007e1c 	.word	0x08007e1c
 8001a14:	08007e30 	.word	0x08007e30
 8001a18:	20000004 	.word	0x20000004

08001a1c <reset_sensors>:

void reset_sensors(void){
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b093      	sub	sp, #76	; 0x4c
 8001a20:	af00      	add	r7, sp, #0
	char buf[64];
	  // Reset the CPLD

	  arducam_wait_for_ready(VIS_SENSOR);
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff f894 	bl	8000b50 <arducam_wait_for_ready>
	  write_reg(AC_REG_RESET, 1, VIS_SENSOR);
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2101      	movs	r1, #1
 8001a2c:	2007      	movs	r0, #7
 8001a2e:	f7ff f8ee 	bl	8000c0e <write_reg>
	  write_reg(AC_REG_RESET, 1, VIS_SENSOR);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2101      	movs	r1, #1
 8001a36:	2007      	movs	r0, #7
 8001a38:	f7ff f8e9 	bl	8000c0e <write_reg>
	  HAL_Delay(100);
 8001a3c:	2064      	movs	r0, #100	; 0x64
 8001a3e:	f001 fa15 	bl	8002e6c <HAL_Delay>
	  write_reg(AC_REG_RESET, 0, VIS_SENSOR);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	2007      	movs	r0, #7
 8001a48:	f7ff f8e1 	bl	8000c0e <write_reg>
	  HAL_Delay(100);
 8001a4c:	2064      	movs	r0, #100	; 0x64
 8001a4e:	f001 fa0d 	bl	8002e6c <HAL_Delay>

	  if (!arducam_wait_for_ready(VIS_SENSOR)) {
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff f87c 	bl	8000b50 <arducam_wait_for_ready>
 8001a58:	0003      	movs	r3, r0
 8001a5a:	001a      	movs	r2, r3
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	4053      	eors	r3, r2
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d004      	beq.n	8001a70 <reset_sensors+0x54>
	      DBG_PUT("VIS Camera: SPI Unavailable\r\n");
 8001a66:	4b6e      	ldr	r3, [pc, #440]	; (8001c20 <reset_sensors+0x204>)
 8001a68:	0018      	movs	r0, r3
 8001a6a:	f7ff fc81 	bl	8001370 <DBG_PUT>
 8001a6e:	e003      	b.n	8001a78 <reset_sensors+0x5c>
	  }
	  else{
		  DBG_PUT("VIS Camera: SPI Initialized\r\n");
 8001a70:	4b6c      	ldr	r3, [pc, #432]	; (8001c24 <reset_sensors+0x208>)
 8001a72:	0018      	movs	r0, r3
 8001a74:	f7ff fc7c 	bl	8001370 <DBG_PUT>

	  }

	  // Change MCU mode
	    write_reg(ARDUCHIP_MODE, 0x0, VIS_SENSOR);
 8001a78:	2200      	movs	r2, #0
 8001a7a:	2100      	movs	r1, #0
 8001a7c:	2002      	movs	r0, #2
 8001a7e:	f7ff f8c6 	bl	8000c0e <write_reg>
	    wrSensorReg16_8(0xff, 0x01, VIS_SENSOR);
 8001a82:	2200      	movs	r2, #0
 8001a84:	2101      	movs	r1, #1
 8001a86:	20ff      	movs	r0, #255	; 0xff
 8001a88:	f7fe fd1a 	bl	80004c0 <wrSensorReg16_8>

	    uint8_t vid = 0, pid = 0;
 8001a8c:	1dfb      	adds	r3, r7, #7
 8001a8e:	2200      	movs	r2, #0
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	1dbb      	adds	r3, r7, #6
 8001a94:	2200      	movs	r2, #0
 8001a96:	701a      	strb	r2, [r3, #0]
	    rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid, VIS_SENSOR);
 8001a98:	1dfb      	adds	r3, r7, #7
 8001a9a:	4863      	ldr	r0, [pc, #396]	; (8001c28 <reset_sensors+0x20c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	f7fe fd94 	bl	80005cc <rdSensorReg16_8>
	    rdSensorReg16_8(OV5642_CHIPID_LOW, &pid, VIS_SENSOR);
 8001aa4:	1dbb      	adds	r3, r7, #6
 8001aa6:	4861      	ldr	r0, [pc, #388]	; (8001c2c <reset_sensors+0x210>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	0019      	movs	r1, r3
 8001aac:	f7fe fd8e 	bl	80005cc <rdSensorReg16_8>

	    if (vid != 0x56 || pid != 0x42) {
 8001ab0:	1dfb      	adds	r3, r7, #7
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b56      	cmp	r3, #86	; 0x56
 8001ab6:	d103      	bne.n	8001ac0 <reset_sensors+0xa4>
 8001ab8:	1dbb      	adds	r3, r7, #6
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b42      	cmp	r3, #66	; 0x42
 8001abe:	d00e      	beq.n	8001ade <reset_sensors+0xc2>
	        sprintf(buf, "VIS Camera I2C Address: Unknown\r\nVIS not available\r\n\n");
 8001ac0:	4a5b      	ldr	r2, [pc, #364]	; (8001c30 <reset_sensors+0x214>)
 8001ac2:	2408      	movs	r4, #8
 8001ac4:	193b      	adds	r3, r7, r4
 8001ac6:	0011      	movs	r1, r2
 8001ac8:	0018      	movs	r0, r3
 8001aca:	f004 ff17 	bl	80068fc <siprintf>
	        DBG_PUT(buf);
 8001ace:	193b      	adds	r3, r7, r4
 8001ad0:	0018      	movs	r0, r3
 8001ad2:	f7ff fc4d 	bl	8001370 <DBG_PUT>
	    	VIS_DETECTED = 0;
 8001ad6:	4b57      	ldr	r3, [pc, #348]	; (8001c34 <reset_sensors+0x218>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	e006      	b.n	8001aec <reset_sensors+0xd0>

	    }
	    else{
	    	DBG_PUT("VIS Camera I2C Address: 0x3C\r\n");
 8001ade:	4b56      	ldr	r3, [pc, #344]	; (8001c38 <reset_sensors+0x21c>)
 8001ae0:	0018      	movs	r0, r3
 8001ae2:	f7ff fc45 	bl	8001370 <DBG_PUT>
	    	VIS_DETECTED = 1;
 8001ae6:	4b53      	ldr	r3, [pc, #332]	; (8001c34 <reset_sensors+0x218>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
	    }
	    if (VIS_DETECTED==1){
 8001aec:	4b51      	ldr	r3, [pc, #324]	; (8001c34 <reset_sensors+0x218>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d113      	bne.n	8001b1c <reset_sensors+0x100>
			format = JPEG;
 8001af4:	4b51      	ldr	r3, [pc, #324]	; (8001c3c <reset_sensors+0x220>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	601a      	str	r2, [r3, #0]
			Arduino_init(format, VIS_SENSOR);
 8001afa:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <reset_sensors+0x220>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2100      	movs	r1, #0
 8001b00:	0018      	movs	r0, r3
 8001b02:	f7fe fdd7 	bl	80006b4 <Arduino_init>
			sprintf(buf, "VIS Camera Mode: JPEG\r\n\n");
 8001b06:	4a4e      	ldr	r2, [pc, #312]	; (8001c40 <reset_sensors+0x224>)
 8001b08:	2408      	movs	r4, #8
 8001b0a:	193b      	adds	r3, r7, r4
 8001b0c:	0011      	movs	r1, r2
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f004 fef4 	bl	80068fc <siprintf>
			DBG_PUT(buf);
 8001b14:	193b      	adds	r3, r7, r4
 8001b16:	0018      	movs	r0, r3
 8001b18:	f7ff fc2a 	bl	8001370 <DBG_PUT>
	    }
	    // Test NIR Sensor
		  arducam_wait_for_ready(NIR_SENSOR);
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	f7ff f817 	bl	8000b50 <arducam_wait_for_ready>

		  // Reset the CPLD
		  write_reg(AC_REG_RESET, 1, NIR_SENSOR);
 8001b22:	2201      	movs	r2, #1
 8001b24:	2101      	movs	r1, #1
 8001b26:	2007      	movs	r0, #7
 8001b28:	f7ff f871 	bl	8000c0e <write_reg>
		  HAL_Delay(100);
 8001b2c:	2064      	movs	r0, #100	; 0x64
 8001b2e:	f001 f99d 	bl	8002e6c <HAL_Delay>
		  write_reg(AC_REG_RESET, 0, NIR_SENSOR);
 8001b32:	2201      	movs	r2, #1
 8001b34:	2100      	movs	r1, #0
 8001b36:	2007      	movs	r0, #7
 8001b38:	f7ff f869 	bl	8000c0e <write_reg>
		  HAL_Delay(100);
 8001b3c:	2064      	movs	r0, #100	; 0x64
 8001b3e:	f001 f995 	bl	8002e6c <HAL_Delay>

		  if (!arducam_wait_for_ready(NIR_SENSOR)) {
 8001b42:	2001      	movs	r0, #1
 8001b44:	f7ff f804 	bl	8000b50 <arducam_wait_for_ready>
 8001b48:	0003      	movs	r3, r0
 8001b4a:	001a      	movs	r2, r3
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	4053      	eors	r3, r2
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d004      	beq.n	8001b60 <reset_sensors+0x144>
		      DBG_PUT("NIR Camera: SPI Unavailable\r\n");
 8001b56:	4b3b      	ldr	r3, [pc, #236]	; (8001c44 <reset_sensors+0x228>)
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff fc09 	bl	8001370 <DBG_PUT>
 8001b5e:	e003      	b.n	8001b68 <reset_sensors+0x14c>
		  }
		  else{
			  DBG_PUT("NIR Camera: SPI available\r\n");
 8001b60:	4b39      	ldr	r3, [pc, #228]	; (8001c48 <reset_sensors+0x22c>)
 8001b62:	0018      	movs	r0, r3
 8001b64:	f7ff fc04 	bl	8001370 <DBG_PUT>
		  }

		  // Change MCU mode
		    write_reg(ARDUCHIP_MODE, 0x0, NIR_SENSOR);
 8001b68:	2201      	movs	r2, #1
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	2002      	movs	r0, #2
 8001b6e:	f7ff f84e 	bl	8000c0e <write_reg>
		    wrSensorReg16_8(0xff, 0x01, NIR_SENSOR);
 8001b72:	2201      	movs	r2, #1
 8001b74:	2101      	movs	r1, #1
 8001b76:	20ff      	movs	r0, #255	; 0xff
 8001b78:	f7fe fca2 	bl	80004c0 <wrSensorReg16_8>

		    vid = 0;
 8001b7c:	1dfb      	adds	r3, r7, #7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
		    pid = 0;
 8001b82:	1dbb      	adds	r3, r7, #6
 8001b84:	2200      	movs	r2, #0
 8001b86:	701a      	strb	r2, [r3, #0]
		    rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid, NIR_SENSOR);
 8001b88:	1dfb      	adds	r3, r7, #7
 8001b8a:	4827      	ldr	r0, [pc, #156]	; (8001c28 <reset_sensors+0x20c>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	0019      	movs	r1, r3
 8001b90:	f7fe fd1c 	bl	80005cc <rdSensorReg16_8>
		    rdSensorReg16_8(OV5642_CHIPID_LOW, &pid, NIR_SENSOR);
 8001b94:	1dbb      	adds	r3, r7, #6
 8001b96:	4825      	ldr	r0, [pc, #148]	; (8001c2c <reset_sensors+0x210>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	0019      	movs	r1, r3
 8001b9c:	f7fe fd16 	bl	80005cc <rdSensorReg16_8>

		    if (vid != 0x56 || pid != 0x42) {
 8001ba0:	1dfb      	adds	r3, r7, #7
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	2b56      	cmp	r3, #86	; 0x56
 8001ba6:	d103      	bne.n	8001bb0 <reset_sensors+0x194>
 8001ba8:	1dbb      	adds	r3, r7, #6
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b42      	cmp	r3, #66	; 0x42
 8001bae:	d00e      	beq.n	8001bce <reset_sensors+0x1b2>
		        sprintf(buf, "NIR Camera I2C Address: Unknown\r\nCamera not available\r\n\n");
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <reset_sensors+0x230>)
 8001bb2:	2408      	movs	r4, #8
 8001bb4:	193b      	adds	r3, r7, r4
 8001bb6:	0011      	movs	r1, r2
 8001bb8:	0018      	movs	r0, r3
 8001bba:	f004 fe9f 	bl	80068fc <siprintf>
		        DBG_PUT(buf);
 8001bbe:	193b      	adds	r3, r7, r4
 8001bc0:	0018      	movs	r0, r3
 8001bc2:	f7ff fbd5 	bl	8001370 <DBG_PUT>
		    	NIR_DETECTED = 0;
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <reset_sensors+0x234>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	e006      	b.n	8001bdc <reset_sensors+0x1c0>

		    }
		    else{
		    	DBG_PUT("NIR Camera I2C Address: 0x3E\r\n");
 8001bce:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <reset_sensors+0x238>)
 8001bd0:	0018      	movs	r0, r3
 8001bd2:	f7ff fbcd 	bl	8001370 <DBG_PUT>
		    	NIR_DETECTED = 1;
 8001bd6:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <reset_sensors+0x234>)
 8001bd8:	2201      	movs	r2, #1
 8001bda:	601a      	str	r2, [r3, #0]
		    }
		    if (NIR_DETECTED == 1){
 8001bdc:	4b1c      	ldr	r3, [pc, #112]	; (8001c50 <reset_sensors+0x234>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d113      	bne.n	8001c0c <reset_sensors+0x1f0>
				format = JPEG;
 8001be4:	4b15      	ldr	r3, [pc, #84]	; (8001c3c <reset_sensors+0x220>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	601a      	str	r2, [r3, #0]
				Arduino_init(format, NIR_SENSOR);
 8001bea:	4b14      	ldr	r3, [pc, #80]	; (8001c3c <reset_sensors+0x220>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	2101      	movs	r1, #1
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f7fe fd5f 	bl	80006b4 <Arduino_init>
				sprintf(buf, "NIR Camera Mode: JPEG\r\n\n");
 8001bf6:	4a18      	ldr	r2, [pc, #96]	; (8001c58 <reset_sensors+0x23c>)
 8001bf8:	2408      	movs	r4, #8
 8001bfa:	193b      	adds	r3, r7, r4
 8001bfc:	0011      	movs	r1, r2
 8001bfe:	0018      	movs	r0, r3
 8001c00:	f004 fe7c 	bl	80068fc <siprintf>
				DBG_PUT(buf);
 8001c04:	193b      	adds	r3, r7, r4
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff fbb2 	bl	8001370 <DBG_PUT>
		    }
		    HAL_Delay(1000);
 8001c0c:	23fa      	movs	r3, #250	; 0xfa
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	0018      	movs	r0, r3
 8001c12:	f001 f92b 	bl	8002e6c <HAL_Delay>
}
 8001c16:	46c0      	nop			; (mov r8, r8)
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b013      	add	sp, #76	; 0x4c
 8001c1c:	bd90      	pop	{r4, r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	08008034 	.word	0x08008034
 8001c24:	08008054 	.word	0x08008054
 8001c28:	0000300a 	.word	0x0000300a
 8001c2c:	0000300b 	.word	0x0000300b
 8001c30:	08008074 	.word	0x08008074
 8001c34:	20000094 	.word	0x20000094
 8001c38:	080080ac 	.word	0x080080ac
 8001c3c:	20000004 	.word	0x20000004
 8001c40:	080080cc 	.word	0x080080cc
 8001c44:	080080e8 	.word	0x080080e8
 8001c48:	08008108 	.word	0x08008108
 8001c4c:	08008124 	.word	0x08008124
 8001c50:	20000098 	.word	0x20000098
 8001c54:	08008160 	.word	0x08008160
 8001c58:	08008180 	.word	0x08008180

08001c5c <scan_i2c>:

void scan_i2c(){
 8001c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c5e:	b093      	sub	sp, #76	; 0x4c
 8001c60:	af00      	add	r7, sp, #0
	 HAL_StatusTypeDef result;
	 uint8_t i;
	 char buf[64];
	 DBG_PUT("Scanning I2C bus 2...\r\n");
 8001c62:	4b1d      	ldr	r3, [pc, #116]	; (8001cd8 <scan_i2c+0x7c>)
 8001c64:	0018      	movs	r0, r3
 8001c66:	f7ff fb83 	bl	8001370 <DBG_PUT>
	 for (i=1; i<128; i++){
 8001c6a:	2347      	movs	r3, #71	; 0x47
 8001c6c:	18fb      	adds	r3, r7, r3
 8001c6e:	2201      	movs	r2, #1
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	e023      	b.n	8001cbc <scan_i2c+0x60>
		 result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 2, 2);
 8001c74:	2547      	movs	r5, #71	; 0x47
 8001c76:	197b      	adds	r3, r7, r5
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	18db      	adds	r3, r3, r3
 8001c7e:	b299      	uxth	r1, r3
 8001c80:	2646      	movs	r6, #70	; 0x46
 8001c82:	19bc      	adds	r4, r7, r6
 8001c84:	4815      	ldr	r0, [pc, #84]	; (8001cdc <scan_i2c+0x80>)
 8001c86:	2302      	movs	r3, #2
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f001 fe77 	bl	800397c <HAL_I2C_IsDeviceReady>
 8001c8e:	0003      	movs	r3, r0
 8001c90:	7023      	strb	r3, [r4, #0]
		 if (result == HAL_OK){
 8001c92:	19bb      	adds	r3, r7, r6
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10a      	bne.n	8001cb0 <scan_i2c+0x54>
			 sprintf(buf,"I2C address found: 0x%X\r\n", (uint16_t)(i));
 8001c9a:	197b      	adds	r3, r7, r5
 8001c9c:	781a      	ldrb	r2, [r3, #0]
 8001c9e:	4910      	ldr	r1, [pc, #64]	; (8001ce0 <scan_i2c+0x84>)
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	f004 fe2a 	bl	80068fc <siprintf>
			 DBG_PUT(buf);
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	0018      	movs	r0, r3
 8001cac:	f7ff fb60 	bl	8001370 <DBG_PUT>
	 for (i=1; i<128; i++){
 8001cb0:	2147      	movs	r1, #71	; 0x47
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	781a      	ldrb	r2, [r3, #0]
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	3201      	adds	r2, #1
 8001cba:	701a      	strb	r2, [r3, #0]
 8001cbc:	2347      	movs	r3, #71	; 0x47
 8001cbe:	18fb      	adds	r3, r7, r3
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	dad5      	bge.n	8001c74 <scan_i2c+0x18>
		 	 }
	  	}
	 DBG_PUT("Scan Complete.\r\n");
 8001cc8:	4b06      	ldr	r3, [pc, #24]	; (8001ce4 <scan_i2c+0x88>)
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f7ff fb50 	bl	8001370 <DBG_PUT>
}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b013      	add	sp, #76	; 0x4c
 8001cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cd8:	0800819c 	.word	0x0800819c
 8001cdc:	20000104 	.word	0x20000104
 8001ce0:	080081b4 	.word	0x080081b4
 8001ce4:	080081d0 	.word	0x080081d0

08001ce8 <sensor_togglepower>:

static void sensor_togglepower(int i){
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
	if (i == 1){
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d10b      	bne.n	8001d0e <sensor_togglepower+0x26>
		HAL_GPIO_WritePin(CAM_EN_GPIO_Port, CAM_EN_Pin, GPIO_PIN_SET);
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	480c      	ldr	r0, [pc, #48]	; (8001d2c <sensor_togglepower+0x44>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	0019      	movs	r1, r3
 8001d00:	f001 fb27 	bl	8003352 <HAL_GPIO_WritePin>
		DBG_PUT("Sensor Power Enabled.\r\n");
 8001d04:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <sensor_togglepower+0x48>)
 8001d06:	0018      	movs	r0, r3
 8001d08:	f7ff fb32 	bl	8001370 <DBG_PUT>
		return;
 8001d0c:	e00a      	b.n	8001d24 <sensor_togglepower+0x3c>
	}
	HAL_GPIO_WritePin(CAM_EN_GPIO_Port, CAM_EN_Pin, GPIO_PIN_RESET);
 8001d0e:	2380      	movs	r3, #128	; 0x80
 8001d10:	005b      	lsls	r3, r3, #1
 8001d12:	4806      	ldr	r0, [pc, #24]	; (8001d2c <sensor_togglepower+0x44>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	0019      	movs	r1, r3
 8001d18:	f001 fb1b 	bl	8003352 <HAL_GPIO_WritePin>
	DBG_PUT("Sensor Power Disabled.\r\n");
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <sensor_togglepower+0x4c>)
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f7ff fb26 	bl	8001370 <DBG_PUT>


}
 8001d24:	46bd      	mov	sp, r7
 8001d26:	b002      	add	sp, #8
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	46c0      	nop			; (mov r8, r8)
 8001d2c:	50000400 	.word	0x50000400
 8001d30:	080081e4 	.word	0x080081e4
 8001d34:	080081fc 	.word	0x080081fc

08001d38 <init_nand_flash>:

void init_nand_flash(){
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
		NAND_ReturnType res = NAND_Init();
 8001d3e:	1dfc      	adds	r4, r7, #7
 8001d40:	f000 fb55 	bl	80023ee <NAND_Init>
 8001d44:	0003      	movs	r3, r0
 8001d46:	7023      	strb	r3, [r4, #0]
		if (res == Ret_Success){
 8001d48:	1dfb      	adds	r3, r7, #7
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d104      	bne.n	8001d5a <init_nand_flash+0x22>
			DBG_PUT("NAND Flash Initialized Successfully\r\n");
 8001d50:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <init_nand_flash+0x58>)
 8001d52:	0018      	movs	r0, r3
 8001d54:	f7ff fb0c 	bl	8001370 <DBG_PUT>
		else{
			DBG_PUT("Something else is wrong wit the NAND Flash\r\n");
		}


}
 8001d58:	e015      	b.n	8001d86 <init_nand_flash+0x4e>
		else if(res == Ret_ResetFailed){
 8001d5a:	1dfb      	adds	r3, r7, #7
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d104      	bne.n	8001d6c <init_nand_flash+0x34>
			DBG_PUT("NAND Reset Failed\r\n");
 8001d62:	4b0c      	ldr	r3, [pc, #48]	; (8001d94 <init_nand_flash+0x5c>)
 8001d64:	0018      	movs	r0, r3
 8001d66:	f7ff fb03 	bl	8001370 <DBG_PUT>
}
 8001d6a:	e00c      	b.n	8001d86 <init_nand_flash+0x4e>
		else if(res == Ret_WrongID){
 8001d6c:	1dfb      	adds	r3, r7, #7
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d104      	bne.n	8001d7e <init_nand_flash+0x46>
			DBG_PUT("NAND ID is wrong\r\n");
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <init_nand_flash+0x60>)
 8001d76:	0018      	movs	r0, r3
 8001d78:	f7ff fafa 	bl	8001370 <DBG_PUT>
}
 8001d7c:	e003      	b.n	8001d86 <init_nand_flash+0x4e>
			DBG_PUT("Something else is wrong wit the NAND Flash\r\n");
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <init_nand_flash+0x64>)
 8001d80:	0018      	movs	r0, r3
 8001d82:	f7ff faf5 	bl	8001370 <DBG_PUT>
}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	b003      	add	sp, #12
 8001d8c:	bd90      	pop	{r4, r7, pc}
 8001d8e:	46c0      	nop			; (mov r8, r8)
 8001d90:	08008218 	.word	0x08008218
 8001d94:	08008240 	.word	0x08008240
 8001d98:	08008254 	.word	0x08008254
 8001d9c:	08008268 	.word	0x08008268

08001da0 <handle_command>:
	}
	DBG_PUT(buf);

}

void handle_command(char *cmd) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	char *c;
    switch(*cmd) {
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	3b63      	subs	r3, #99	; 0x63
 8001dae:	2b14      	cmp	r3, #20
 8001db0:	d853      	bhi.n	8001e5a <handle_command+0xba>
 8001db2:	009a      	lsls	r2, r3, #2
 8001db4:	4b2d      	ldr	r3, [pc, #180]	; (8001e6c <handle_command+0xcc>)
 8001db6:	18d3      	adds	r3, r2, r3
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	469f      	mov	pc, r3
    case 'c':
    	handle_capture_cmd(cmd);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f7ff fde8 	bl	8001994 <handle_capture_cmd>
    	break;
 8001dc4:	e04d      	b.n	8001e62 <handle_command+0xc2>
    case 'f':
        handle_format_cmd(cmd);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	0018      	movs	r0, r3
 8001dca:	f7ff fb5f 	bl	800148c <handle_format_cmd>
        break;
 8001dce:	e048      	b.n	8001e62 <handle_command+0xc2>

    case 'r':	;
    	switch(*(cmd+2)){
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	781b      	ldrb	r3, [r3, #0]
 8001dd6:	2b61      	cmp	r3, #97	; 0x61
 8001dd8:	d006      	beq.n	8001de8 <handle_command+0x48>
 8001dda:	2b67      	cmp	r3, #103	; 0x67
 8001ddc:	d140      	bne.n	8001e60 <handle_command+0xc0>
    	case 'a':	// third char is the identifier between reg and read
    		break; // needs to handle 16 / 8 bit stuff
    	case 'g':
            handle_reg_cmd(cmd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	0018      	movs	r0, r3
 8001de2:	f7ff fbe9 	bl	80015b8 <handle_reg_cmd>
            break;
 8001de6:	e000      	b.n	8001dea <handle_command+0x4a>
    		break; // needs to handle 16 / 8 bit stuff
 8001de8:	46c0      	nop			; (mov r8, r8)
    	}
    	break;
 8001dea:	e039      	b.n	8001e60 <handle_command+0xc0>

    case 'w':
        handle_width_cmd(cmd);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	0018      	movs	r0, r3
 8001df0:	f7ff fca8 	bl	8001744 <handle_width_cmd>
        break;
 8001df4:	e035      	b.n	8001e62 <handle_command+0xc2>

    case 's':
    	scan_i2c();
 8001df6:	f7ff ff31 	bl	8001c5c <scan_i2c>
    	break;
 8001dfa:	e032      	b.n	8001e62 <handle_command+0xc2>

    case 'p':	; //janky use of semicolon??
    	const char *p = next_token(cmd);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f7ff facc 	bl	800139c <next_token>
 8001e04:	0003      	movs	r3, r0
 8001e06:	60fb      	str	r3, [r7, #12]
    	switch(*(p+1)){
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b66      	cmp	r3, #102	; 0x66
 8001e10:	d005      	beq.n	8001e1e <handle_command+0x7e>
 8001e12:	2b6e      	cmp	r3, #110	; 0x6e
 8001e14:	d107      	bne.n	8001e26 <handle_command+0x86>
    		case 'n':
    			sensor_togglepower(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7ff ff66 	bl	8001ce8 <sensor_togglepower>
    			break;
 8001e1c:	e008      	b.n	8001e30 <handle_command+0x90>
    		case 'f':
    			sensor_togglepower(0);
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff ff62 	bl	8001ce8 <sensor_togglepower>
    			break;
 8001e24:	e004      	b.n	8001e30 <handle_command+0x90>
    		default:
    			DBG_PUT("Use either on or off\r\n");
 8001e26:	4b12      	ldr	r3, [pc, #72]	; (8001e70 <handle_command+0xd0>)
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f7ff faa1 	bl	8001370 <DBG_PUT>
    			break;
 8001e2e:	46c0      	nop			; (mov r8, r8)
    	}
    	break;
 8001e30:	e017      	b.n	8001e62 <handle_command+0xc2>
	case 'i':;
		const char *i = next_token(cmd);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	0018      	movs	r0, r3
 8001e36:	f7ff fab1 	bl	800139c <next_token>
 8001e3a:	0003      	movs	r3, r0
 8001e3c:	60bb      	str	r3, [r7, #8]
		switch(*i){
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b6e      	cmp	r3, #110	; 0x6e
 8001e44:	d002      	beq.n	8001e4c <handle_command+0xac>
 8001e46:	2b73      	cmp	r3, #115	; 0x73
 8001e48:	d003      	beq.n	8001e52 <handle_command+0xb2>
				break;
			case 's':
				reset_sensors();
				break;
		}
		break;
 8001e4a:	e00a      	b.n	8001e62 <handle_command+0xc2>
				init_nand_flash();
 8001e4c:	f7ff ff74 	bl	8001d38 <init_nand_flash>
				break;
 8001e50:	e002      	b.n	8001e58 <handle_command+0xb8>
				reset_sensors();
 8001e52:	f7ff fde3 	bl	8001a1c <reset_sensors>
				break;
 8001e56:	46c0      	nop			; (mov r8, r8)
		break;
 8001e58:	e003      	b.n	8001e62 <handle_command+0xc2>

    case 'h':
    default:
        help();
 8001e5a:	f7ff facf 	bl	80013fc <help>
        break;
 8001e5e:	e000      	b.n	8001e62 <handle_command+0xc2>
    	break;
 8001e60:	46c0      	nop			; (mov r8, r8)
    }
}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	46bd      	mov	sp, r7
 8001e66:	b004      	add	sp, #16
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	080090e8 	.word	0x080090e8
 8001e70:	080082ec 	.word	0x080082ec

08001e74 <DBG_PUT>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static inline void DBG_PUT(char *str) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7fe f942 	bl	8000108 <strlen>
 8001e84:	0003      	movs	r3, r0
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	6879      	ldr	r1, [r7, #4]
 8001e8a:	4804      	ldr	r0, [pc, #16]	; (8001e9c <DBG_PUT+0x28>)
 8001e8c:	2364      	movs	r3, #100	; 0x64
 8001e8e:	f003 fee5 	bl	8005c5c <HAL_UART_Transmit>
}
 8001e92:	46c0      	nop			; (mov r8, r8)
 8001e94:	46bd      	mov	sp, r7
 8001e96:	b002      	add	sp, #8
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	20000150 	.word	0x20000150

08001ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ea0:	b5b0      	push	{r4, r5, r7, lr}
 8001ea2:	b0a2      	sub	sp, #136	; 0x88
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ea6:	f000 ff71 	bl	8002d8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001eaa:	f000 f885 	bl	8001fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001eae:	f000 f99f 	bl	80021f0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001eb2:	f000 f96d 	bl	8002190 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001eb6:	f000 f8f3 	bl	80020a0 <MX_I2C2_Init>
  MX_SPI2_Init();
 8001eba:	f000 f931 	bl	8002120 <MX_SPI2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   char cmd[64];
   char *ptr = cmd;
 8001ebe:	003b      	movs	r3, r7
 8001ec0:	2284      	movs	r2, #132	; 0x84
 8001ec2:	18ba      	adds	r2, r7, r2
 8001ec4:	6013      	str	r3, [r2, #0]
   DBG_PUT("----------------------\r\nBooting...\r\n");
 8001ec6:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <main+0x100>)
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff ffd3 	bl	8001e74 <DBG_PUT>
   DBG_PUT("Ready!\r\n");
 8001ece:	4b35      	ldr	r3, [pc, #212]	; (8001fa4 <main+0x104>)
 8001ed0:	0018      	movs	r0, r3
 8001ed2:	f7ff ffcf 	bl	8001e74 <DBG_PUT>
   while (1)
   {
       HAL_StatusTypeDef rc = HAL_UART_Receive(&huart1, (uint8_t *) ptr, 1, 20000);
 8001ed6:	2583      	movs	r5, #131	; 0x83
 8001ed8:	197c      	adds	r4, r7, r5
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <main+0x108>)
 8001edc:	2284      	movs	r2, #132	; 0x84
 8001ede:	18ba      	adds	r2, r7, r2
 8001ee0:	6811      	ldr	r1, [r2, #0]
 8001ee2:	4832      	ldr	r0, [pc, #200]	; (8001fac <main+0x10c>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f003 ff61 	bl	8005dac <HAL_UART_Receive>
 8001eea:	0003      	movs	r3, r0
 8001eec:	7023      	strb	r3, [r4, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
       /* Build up the command one byte at a time */
       if (rc != HAL_OK) {
 8001eee:	197b      	adds	r3, r7, r5
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d010      	beq.n	8001f18 <main+0x78>
           if (rc != HAL_TIMEOUT) {
 8001ef6:	197b      	adds	r3, r7, r5
 8001ef8:	781b      	ldrb	r3, [r3, #0]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d04e      	beq.n	8001f9c <main+0xfc>
               sprintf(buf, "UART read error: %x\r\n", rc);
 8001efe:	197b      	adds	r3, r7, r5
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	492b      	ldr	r1, [pc, #172]	; (8001fb0 <main+0x110>)
 8001f04:	2440      	movs	r4, #64	; 0x40
 8001f06:	193b      	adds	r3, r7, r4
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f004 fcf7 	bl	80068fc <siprintf>
               DBG_PUT(buf);
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	0018      	movs	r0, r3
 8001f12:	f7ff ffaf 	bl	8001e74 <DBG_PUT>
           }
           continue;
 8001f16:	e041      	b.n	8001f9c <main+0xfc>
       }
       /* Command is complete when we get EOL of some sort */
       if (*ptr == '\n' || *ptr == '\r') {
 8001f18:	2284      	movs	r2, #132	; 0x84
 8001f1a:	18bb      	adds	r3, r7, r2
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b0a      	cmp	r3, #10
 8001f22:	d004      	beq.n	8001f2e <main+0x8e>
 8001f24:	18bb      	adds	r3, r7, r2
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	2b0d      	cmp	r3, #13
 8001f2c:	d110      	bne.n	8001f50 <main+0xb0>
           *ptr = 0;
 8001f2e:	2484      	movs	r4, #132	; 0x84
 8001f30:	193b      	adds	r3, r7, r4
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2200      	movs	r2, #0
 8001f36:	701a      	strb	r2, [r3, #0]
           DBG_PUT("\r\n");
 8001f38:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <main+0x114>)
 8001f3a:	0018      	movs	r0, r3
 8001f3c:	f7ff ff9a 	bl	8001e74 <DBG_PUT>
           handle_command(cmd);
 8001f40:	003b      	movs	r3, r7
 8001f42:	0018      	movs	r0, r3
 8001f44:	f7ff ff2c 	bl	8001da0 <handle_command>
           ptr = cmd;
 8001f48:	003b      	movs	r3, r7
 8001f4a:	193a      	adds	r2, r7, r4
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e026      	b.n	8001f9e <main+0xfe>
       }
       else {
           *(ptr + 1) = 0;
 8001f50:	2184      	movs	r1, #132	; 0x84
 8001f52:	187b      	adds	r3, r7, r1
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	3301      	adds	r3, #1
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
           DBG_PUT(ptr);
 8001f5c:	000c      	movs	r4, r1
 8001f5e:	187b      	adds	r3, r7, r1
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f7ff ff86 	bl	8001e74 <DBG_PUT>

           if (*ptr == 0x7f) { // handle backspace
 8001f68:	0022      	movs	r2, r4
 8001f6a:	18bb      	adds	r3, r7, r2
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b7f      	cmp	r3, #127	; 0x7f
 8001f72:	d10c      	bne.n	8001f8e <main+0xee>
               if (ptr > cmd)
 8001f74:	003b      	movs	r3, r7
 8001f76:	0011      	movs	r1, r2
 8001f78:	18ba      	adds	r2, r7, r2
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d9aa      	bls.n	8001ed6 <main+0x36>
                   --ptr;
 8001f80:	000a      	movs	r2, r1
 8001f82:	18bb      	adds	r3, r7, r2
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	3b01      	subs	r3, #1
 8001f88:	18ba      	adds	r2, r7, r2
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	e7a3      	b.n	8001ed6 <main+0x36>
           }
           else
               ++ptr;
 8001f8e:	2284      	movs	r2, #132	; 0x84
 8001f90:	18bb      	adds	r3, r7, r2
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	3301      	adds	r3, #1
 8001f96:	18ba      	adds	r2, r7, r2
 8001f98:	6013      	str	r3, [r2, #0]
 8001f9a:	e79c      	b.n	8001ed6 <main+0x36>
           continue;
 8001f9c:	46c0      	nop			; (mov r8, r8)
   {
 8001f9e:	e79a      	b.n	8001ed6 <main+0x36>
 8001fa0:	08008304 	.word	0x08008304
 8001fa4:	0800832c 	.word	0x0800832c
 8001fa8:	00004e20 	.word	0x00004e20
 8001fac:	20000150 	.word	0x20000150
 8001fb0:	08008338 	.word	0x08008338
 8001fb4:	08008350 	.word	0x08008350

08001fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b09b      	sub	sp, #108	; 0x6c
 8001fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fbe:	2434      	movs	r4, #52	; 0x34
 8001fc0:	193b      	adds	r3, r7, r4
 8001fc2:	0018      	movs	r0, r3
 8001fc4:	2334      	movs	r3, #52	; 0x34
 8001fc6:	001a      	movs	r2, r3
 8001fc8:	2100      	movs	r1, #0
 8001fca:	f004 fc8e 	bl	80068ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fce:	2320      	movs	r3, #32
 8001fd0:	18fb      	adds	r3, r7, r3
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	2314      	movs	r3, #20
 8001fd6:	001a      	movs	r2, r3
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f004 fc86 	bl	80068ea <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fde:	003b      	movs	r3, r7
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	2320      	movs	r3, #32
 8001fe4:	001a      	movs	r2, r3
 8001fe6:	2100      	movs	r1, #0
 8001fe8:	f004 fc7f 	bl	80068ea <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fec:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <SystemClock_Config+0xe0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <SystemClock_Config+0xe4>)
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <SystemClock_Config+0xe0>)
 8001ff6:	2180      	movs	r1, #128	; 0x80
 8001ff8:	0109      	lsls	r1, r1, #4
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ffe:	0021      	movs	r1, r4
 8002000:	187b      	adds	r3, r7, r1
 8002002:	2201      	movs	r2, #1
 8002004:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002006:	187b      	adds	r3, r7, r1
 8002008:	22a0      	movs	r2, #160	; 0xa0
 800200a:	02d2      	lsls	r2, r2, #11
 800200c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800200e:	187b      	adds	r3, r7, r1
 8002010:	2202      	movs	r2, #2
 8002012:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002014:	187b      	adds	r3, r7, r1
 8002016:	2280      	movs	r2, #128	; 0x80
 8002018:	0252      	lsls	r2, r2, #9
 800201a:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 800201c:	187b      	adds	r3, r7, r1
 800201e:	2280      	movs	r2, #128	; 0x80
 8002020:	02d2      	lsls	r2, r2, #11
 8002022:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_4;
 8002024:	187b      	adds	r3, r7, r1
 8002026:	22c0      	movs	r2, #192	; 0xc0
 8002028:	0412      	lsls	r2, r2, #16
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800202c:	187b      	adds	r3, r7, r1
 800202e:	0018      	movs	r0, r3
 8002030:	f002 f8a8 	bl	8004184 <HAL_RCC_OscConfig>
 8002034:	1e03      	subs	r3, r0, #0
 8002036:	d001      	beq.n	800203c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002038:	f000 f9d4 	bl	80023e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800203c:	2120      	movs	r1, #32
 800203e:	187b      	adds	r3, r7, r1
 8002040:	220f      	movs	r2, #15
 8002042:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002044:	187b      	adds	r3, r7, r1
 8002046:	2203      	movs	r2, #3
 8002048:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800204a:	187b      	adds	r3, r7, r1
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002050:	187b      	adds	r3, r7, r1
 8002052:	2200      	movs	r2, #0
 8002054:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002056:	187b      	adds	r3, r7, r1
 8002058:	2200      	movs	r2, #0
 800205a:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800205c:	187b      	adds	r3, r7, r1
 800205e:	2100      	movs	r1, #0
 8002060:	0018      	movs	r0, r3
 8002062:	f002 fc0b 	bl	800487c <HAL_RCC_ClockConfig>
 8002066:	1e03      	subs	r3, r0, #0
 8002068:	d001      	beq.n	800206e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800206a:	f000 f9bb 	bl	80023e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800206e:	003b      	movs	r3, r7
 8002070:	2201      	movs	r2, #1
 8002072:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8002074:	003b      	movs	r3, r7
 8002076:	2201      	movs	r2, #1
 8002078:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800207a:	003b      	movs	r3, r7
 800207c:	0018      	movs	r0, r3
 800207e:	f002 fe49 	bl	8004d14 <HAL_RCCEx_PeriphCLKConfig>
 8002082:	1e03      	subs	r3, r0, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002086:	f000 f9ad 	bl	80023e4 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800208a:	f002 fd3f 	bl	8004b0c <HAL_RCC_EnableCSS>
}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	46bd      	mov	sp, r7
 8002092:	b01b      	add	sp, #108	; 0x6c
 8002094:	bd90      	pop	{r4, r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	40007000 	.word	0x40007000
 800209c:	ffffe7ff 	.word	0xffffe7ff

080020a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	; (8002114 <MX_I2C2_Init+0x74>)
 80020a6:	4a1c      	ldr	r2, [pc, #112]	; (8002118 <MX_I2C2_Init+0x78>)
 80020a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <MX_I2C2_Init+0x74>)
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <MX_I2C2_Init+0x7c>)
 80020ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <MX_I2C2_Init+0x74>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020b6:	4b17      	ldr	r3, [pc, #92]	; (8002114 <MX_I2C2_Init+0x74>)
 80020b8:	2201      	movs	r2, #1
 80020ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020bc:	4b15      	ldr	r3, [pc, #84]	; (8002114 <MX_I2C2_Init+0x74>)
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80020c2:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_I2C2_Init+0x74>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80020c8:	4b12      	ldr	r3, [pc, #72]	; (8002114 <MX_I2C2_Init+0x74>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_I2C2_Init+0x74>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_I2C2_Init+0x74>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_I2C2_Init+0x74>)
 80020dc:	0018      	movs	r0, r3
 80020de:	f001 f955 	bl	800338c <HAL_I2C_Init>
 80020e2:	1e03      	subs	r3, r0, #0
 80020e4:	d001      	beq.n	80020ea <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80020e6:	f000 f97d 	bl	80023e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80020ea:	4b0a      	ldr	r3, [pc, #40]	; (8002114 <MX_I2C2_Init+0x74>)
 80020ec:	2100      	movs	r1, #0
 80020ee:	0018      	movs	r0, r3
 80020f0:	f001 ffb0 	bl	8004054 <HAL_I2CEx_ConfigAnalogFilter>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d001      	beq.n	80020fc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80020f8:	f000 f974 	bl	80023e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80020fc:	4b05      	ldr	r3, [pc, #20]	; (8002114 <MX_I2C2_Init+0x74>)
 80020fe:	2100      	movs	r1, #0
 8002100:	0018      	movs	r0, r3
 8002102:	f001 fff3 	bl	80040ec <HAL_I2CEx_ConfigDigitalFilter>
 8002106:	1e03      	subs	r3, r0, #0
 8002108:	d001      	beq.n	800210e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800210a:	f000 f96b 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800210e:	46c0      	nop			; (mov r8, r8)
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000104 	.word	0x20000104
 8002118:	40005800 	.word	0x40005800
 800211c:	00303d5b 	.word	0x00303d5b

08002120 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002124:	4b18      	ldr	r3, [pc, #96]	; (8002188 <MX_SPI2_Init+0x68>)
 8002126:	4a19      	ldr	r2, [pc, #100]	; (800218c <MX_SPI2_Init+0x6c>)
 8002128:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800212a:	4b17      	ldr	r3, [pc, #92]	; (8002188 <MX_SPI2_Init+0x68>)
 800212c:	2282      	movs	r2, #130	; 0x82
 800212e:	0052      	lsls	r2, r2, #1
 8002130:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002132:	4b15      	ldr	r3, [pc, #84]	; (8002188 <MX_SPI2_Init+0x68>)
 8002134:	2200      	movs	r2, #0
 8002136:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002138:	4b13      	ldr	r3, [pc, #76]	; (8002188 <MX_SPI2_Init+0x68>)
 800213a:	2200      	movs	r2, #0
 800213c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800213e:	4b12      	ldr	r3, [pc, #72]	; (8002188 <MX_SPI2_Init+0x68>)
 8002140:	2200      	movs	r2, #0
 8002142:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <MX_SPI2_Init+0x68>)
 8002146:	2200      	movs	r2, #0
 8002148:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800214a:	4b0f      	ldr	r3, [pc, #60]	; (8002188 <MX_SPI2_Init+0x68>)
 800214c:	2280      	movs	r2, #128	; 0x80
 800214e:	0092      	lsls	r2, r2, #2
 8002150:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <MX_SPI2_Init+0x68>)
 8002154:	2200      	movs	r2, #0
 8002156:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <MX_SPI2_Init+0x68>)
 800215a:	2200      	movs	r2, #0
 800215c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800215e:	4b0a      	ldr	r3, [pc, #40]	; (8002188 <MX_SPI2_Init+0x68>)
 8002160:	2200      	movs	r2, #0
 8002162:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002164:	4b08      	ldr	r3, [pc, #32]	; (8002188 <MX_SPI2_Init+0x68>)
 8002166:	2200      	movs	r2, #0
 8002168:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800216a:	4b07      	ldr	r3, [pc, #28]	; (8002188 <MX_SPI2_Init+0x68>)
 800216c:	2207      	movs	r2, #7
 800216e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <MX_SPI2_Init+0x68>)
 8002172:	0018      	movs	r0, r3
 8002174:	f002 ff14 	bl	8004fa0 <HAL_SPI_Init>
 8002178:	1e03      	subs	r3, r0, #0
 800217a:	d001      	beq.n	8002180 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800217c:	f000 f932 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002180:	46c0      	nop			; (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	46c0      	nop			; (mov r8, r8)
 8002188:	200000ac 	.word	0x200000ac
 800218c:	40003800 	.word	0x40003800

08002190 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002194:	4b14      	ldr	r3, [pc, #80]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 8002196:	4a15      	ldr	r2, [pc, #84]	; (80021ec <MX_USART1_UART_Init+0x5c>)
 8002198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800219a:	4b13      	ldr	r3, [pc, #76]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 800219c:	22e1      	movs	r2, #225	; 0xe1
 800219e:	0252      	lsls	r2, r2, #9
 80021a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a2:	4b11      	ldr	r3, [pc, #68]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a8:	4b0f      	ldr	r3, [pc, #60]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021ae:	4b0e      	ldr	r3, [pc, #56]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b4:	4b0c      	ldr	r3, [pc, #48]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021b6:	220c      	movs	r2, #12
 80021b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ba:	4b0b      	ldr	r3, [pc, #44]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021bc:	2200      	movs	r2, #0
 80021be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c0:	4b09      	ldr	r3, [pc, #36]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021c6:	4b08      	ldr	r3, [pc, #32]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021cc:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d2:	4b05      	ldr	r3, [pc, #20]	; (80021e8 <MX_USART1_UART_Init+0x58>)
 80021d4:	0018      	movs	r0, r3
 80021d6:	f003 fced 	bl	8005bb4 <HAL_UART_Init>
 80021da:	1e03      	subs	r3, r0, #0
 80021dc:	d001      	beq.n	80021e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021de:	f000 f901 	bl	80023e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021e2:	46c0      	nop			; (mov r8, r8)
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	20000150 	.word	0x20000150
 80021ec:	40013800 	.word	0x40013800

080021f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80021f0:	b590      	push	{r4, r7, lr}
 80021f2:	b08b      	sub	sp, #44	; 0x2c
 80021f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f6:	2414      	movs	r4, #20
 80021f8:	193b      	adds	r3, r7, r4
 80021fa:	0018      	movs	r0, r3
 80021fc:	2314      	movs	r3, #20
 80021fe:	001a      	movs	r2, r3
 8002200:	2100      	movs	r1, #0
 8002202:	f004 fb72 	bl	80068ea <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002206:	4b72      	ldr	r3, [pc, #456]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	4b71      	ldr	r3, [pc, #452]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 800220c:	2104      	movs	r1, #4
 800220e:	430a      	orrs	r2, r1
 8002210:	62da      	str	r2, [r3, #44]	; 0x2c
 8002212:	4b6f      	ldr	r3, [pc, #444]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	2204      	movs	r2, #4
 8002218:	4013      	ands	r3, r2
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800221e:	4b6c      	ldr	r3, [pc, #432]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 8002220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002222:	4b6b      	ldr	r3, [pc, #428]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 8002224:	2180      	movs	r1, #128	; 0x80
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
 800222a:	4b69      	ldr	r3, [pc, #420]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 800222c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222e:	2280      	movs	r2, #128	; 0x80
 8002230:	4013      	ands	r3, r2
 8002232:	60fb      	str	r3, [r7, #12]
 8002234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	4b66      	ldr	r3, [pc, #408]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 8002238:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223a:	4b65      	ldr	r3, [pc, #404]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 800223c:	2101      	movs	r1, #1
 800223e:	430a      	orrs	r2, r1
 8002240:	62da      	str	r2, [r3, #44]	; 0x2c
 8002242:	4b63      	ldr	r3, [pc, #396]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 8002244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002246:	2201      	movs	r2, #1
 8002248:	4013      	ands	r3, r2
 800224a:	60bb      	str	r3, [r7, #8]
 800224c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800224e:	4b60      	ldr	r3, [pc, #384]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 8002250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002252:	4b5f      	ldr	r3, [pc, #380]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 8002254:	2102      	movs	r1, #2
 8002256:	430a      	orrs	r2, r1
 8002258:	62da      	str	r2, [r3, #44]	; 0x2c
 800225a:	4b5d      	ldr	r3, [pc, #372]	; (80023d0 <MX_GPIO_Init+0x1e0>)
 800225c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800225e:	2202      	movs	r2, #2
 8002260:	4013      	ands	r3, r2
 8002262:	607b      	str	r3, [r7, #4]
 8002264:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8002266:	495b      	ldr	r1, [pc, #364]	; (80023d4 <MX_GPIO_Init+0x1e4>)
 8002268:	23a0      	movs	r3, #160	; 0xa0
 800226a:	05db      	lsls	r3, r3, #23
 800226c:	2200      	movs	r2, #0
 800226e:	0018      	movs	r0, r3
 8002270:	f001 f86f 	bl	8003352 <HAL_GPIO_WritePin>
                          |NAND_NWP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_OUT1_Pin|NAND_NCS_Pin|CAM_EN_Pin, GPIO_PIN_RESET);
 8002274:	4958      	ldr	r1, [pc, #352]	; (80023d8 <MX_GPIO_Init+0x1e8>)
 8002276:	4b59      	ldr	r3, [pc, #356]	; (80023dc <MX_GPIO_Init+0x1ec>)
 8002278:	2200      	movs	r2, #0
 800227a:	0018      	movs	r0, r3
 800227c:	f001 f869 	bl	8003352 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_IN2_Pin */
  GPIO_InitStruct.Pin = TEST_IN2_Pin;
 8002280:	193b      	adds	r3, r7, r4
 8002282:	2280      	movs	r2, #128	; 0x80
 8002284:	0192      	lsls	r2, r2, #6
 8002286:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002288:	193b      	adds	r3, r7, r4
 800228a:	2200      	movs	r2, #0
 800228c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	193b      	adds	r3, r7, r4
 8002290:	2200      	movs	r2, #0
 8002292:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_IN2_GPIO_Port, &GPIO_InitStruct);
 8002294:	193b      	adds	r3, r7, r4
 8002296:	4a52      	ldr	r2, [pc, #328]	; (80023e0 <MX_GPIO_Init+0x1f0>)
 8002298:	0019      	movs	r1, r3
 800229a:	0010      	movs	r0, r2
 800229c:	f000 febe 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_CS1_Pin USART2_CS2_Pin */
  GPIO_InitStruct.Pin = USART2_CS1_Pin|USART2_CS2_Pin;
 80022a0:	193b      	adds	r3, r7, r4
 80022a2:	2203      	movs	r2, #3
 80022a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022a6:	193b      	adds	r3, r7, r4
 80022a8:	2201      	movs	r2, #1
 80022aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80022ac:	193b      	adds	r3, r7, r4
 80022ae:	2201      	movs	r2, #1
 80022b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b2:	193b      	adds	r3, r7, r4
 80022b4:	2203      	movs	r2, #3
 80022b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022b8:	193a      	adds	r2, r7, r4
 80022ba:	23a0      	movs	r3, #160	; 0xa0
 80022bc:	05db      	lsls	r3, r3, #23
 80022be:	0011      	movs	r1, r2
 80022c0:	0018      	movs	r0, r3
 80022c2:	f000 feab 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_MISO_Pin */
  GPIO_InitStruct.Pin = USART2_MISO_Pin;
 80022c6:	193b      	adds	r3, r7, r4
 80022c8:	2204      	movs	r2, #4
 80022ca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022cc:	193b      	adds	r3, r7, r4
 80022ce:	2200      	movs	r2, #0
 80022d0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d2:	193b      	adds	r3, r7, r4
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USART2_MISO_GPIO_Port, &GPIO_InitStruct);
 80022d8:	193a      	adds	r2, r7, r4
 80022da:	23a0      	movs	r3, #160	; 0xa0
 80022dc:	05db      	lsls	r3, r3, #23
 80022de:	0011      	movs	r1, r2
 80022e0:	0018      	movs	r0, r3
 80022e2:	f000 fe9b 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_MOSI_Pin USART2_CLK_Pin */
  GPIO_InitStruct.Pin = USART2_MOSI_Pin|USART2_CLK_Pin;
 80022e6:	193b      	adds	r3, r7, r4
 80022e8:	2218      	movs	r2, #24
 80022ea:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022ec:	193b      	adds	r3, r7, r4
 80022ee:	2201      	movs	r2, #1
 80022f0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80022f2:	193b      	adds	r3, r7, r4
 80022f4:	2202      	movs	r2, #2
 80022f6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022f8:	193b      	adds	r3, r7, r4
 80022fa:	2203      	movs	r2, #3
 80022fc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022fe:	193a      	adds	r2, r7, r4
 8002300:	23a0      	movs	r3, #160	; 0xa0
 8002302:	05db      	lsls	r3, r3, #23
 8002304:	0011      	movs	r1, r2
 8002306:	0018      	movs	r0, r3
 8002308:	f000 fe88 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_OUT1_Pin CAM_EN_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin|CAM_EN_Pin;
 800230c:	0021      	movs	r1, r4
 800230e:	187b      	adds	r3, r7, r1
 8002310:	2202      	movs	r2, #2
 8002312:	32ff      	adds	r2, #255	; 0xff
 8002314:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002316:	000c      	movs	r4, r1
 8002318:	193b      	adds	r3, r7, r4
 800231a:	2201      	movs	r2, #1
 800231c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	193b      	adds	r3, r7, r4
 8002320:	2200      	movs	r2, #0
 8002322:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002324:	193b      	adds	r3, r7, r4
 8002326:	2200      	movs	r2, #0
 8002328:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800232a:	193b      	adds	r3, r7, r4
 800232c:	4a2b      	ldr	r2, [pc, #172]	; (80023dc <MX_GPIO_Init+0x1ec>)
 800232e:	0019      	movs	r1, r3
 8002330:	0010      	movs	r0, r2
 8002332:	f000 fe73 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT2_Pin */
  GPIO_InitStruct.Pin = TEST_OUT2_Pin;
 8002336:	193b      	adds	r3, r7, r4
 8002338:	2202      	movs	r2, #2
 800233a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800233c:	193b      	adds	r3, r7, r4
 800233e:	2203      	movs	r2, #3
 8002340:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002342:	193b      	adds	r3, r7, r4
 8002344:	2200      	movs	r2, #0
 8002346:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_OUT2_GPIO_Port, &GPIO_InitStruct);
 8002348:	193b      	adds	r3, r7, r4
 800234a:	4a24      	ldr	r2, [pc, #144]	; (80023dc <MX_GPIO_Init+0x1ec>)
 800234c:	0019      	movs	r1, r3
 800234e:	0010      	movs	r0, r2
 8002350:	f000 fe64 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_IN1_Pin */
  GPIO_InitStruct.Pin = TEST_IN1_Pin;
 8002354:	193b      	adds	r3, r7, r4
 8002356:	2204      	movs	r2, #4
 8002358:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800235a:	193b      	adds	r3, r7, r4
 800235c:	2200      	movs	r2, #0
 800235e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	193b      	adds	r3, r7, r4
 8002362:	2200      	movs	r2, #0
 8002364:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_IN1_GPIO_Port, &GPIO_InitStruct);
 8002366:	193b      	adds	r3, r7, r4
 8002368:	4a1c      	ldr	r2, [pc, #112]	; (80023dc <MX_GPIO_Init+0x1ec>)
 800236a:	0019      	movs	r1, r3
 800236c:	0010      	movs	r0, r2
 800236e:	f000 fe55 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : NAND_NCS_Pin */
  GPIO_InitStruct.Pin = NAND_NCS_Pin;
 8002372:	0021      	movs	r1, r4
 8002374:	187b      	adds	r3, r7, r1
 8002376:	2280      	movs	r2, #128	; 0x80
 8002378:	0152      	lsls	r2, r2, #5
 800237a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800237c:	000c      	movs	r4, r1
 800237e:	193b      	adds	r3, r7, r4
 8002380:	2201      	movs	r2, #1
 8002382:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002384:	193b      	adds	r3, r7, r4
 8002386:	2201      	movs	r2, #1
 8002388:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	193b      	adds	r3, r7, r4
 800238c:	2200      	movs	r2, #0
 800238e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NAND_NCS_GPIO_Port, &GPIO_InitStruct);
 8002390:	193b      	adds	r3, r7, r4
 8002392:	4a12      	ldr	r2, [pc, #72]	; (80023dc <MX_GPIO_Init+0x1ec>)
 8002394:	0019      	movs	r1, r3
 8002396:	0010      	movs	r0, r2
 8002398:	f000 fe40 	bl	800301c <HAL_GPIO_Init>

  /*Configure GPIO pin : NAND_NWP_Pin */
  GPIO_InitStruct.Pin = NAND_NWP_Pin;
 800239c:	0021      	movs	r1, r4
 800239e:	187b      	adds	r3, r7, r1
 80023a0:	2280      	movs	r2, #128	; 0x80
 80023a2:	0112      	lsls	r2, r2, #4
 80023a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023a6:	187b      	adds	r3, r7, r1
 80023a8:	2201      	movs	r2, #1
 80023aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ac:	187b      	adds	r3, r7, r1
 80023ae:	2201      	movs	r2, #1
 80023b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	187b      	adds	r3, r7, r1
 80023b4:	2200      	movs	r2, #0
 80023b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NAND_NWP_GPIO_Port, &GPIO_InitStruct);
 80023b8:	187a      	adds	r2, r7, r1
 80023ba:	23a0      	movs	r3, #160	; 0xa0
 80023bc:	05db      	lsls	r3, r3, #23
 80023be:	0011      	movs	r1, r2
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 fe2b 	bl	800301c <HAL_GPIO_Init>

}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	46bd      	mov	sp, r7
 80023ca:	b00b      	add	sp, #44	; 0x2c
 80023cc:	bd90      	pop	{r4, r7, pc}
 80023ce:	46c0      	nop			; (mov r8, r8)
 80023d0:	40021000 	.word	0x40021000
 80023d4:	0000081b 	.word	0x0000081b
 80023d8:	00001101 	.word	0x00001101
 80023dc:	50000400 	.word	0x50000400
 80023e0:	50000800 	.word	0x50000800

080023e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023e8:	b672      	cpsid	i
}
 80023ea:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023ec:	e7fe      	b.n	80023ec <Error_Handler+0x8>

080023ee <NAND_Init>:
 * @note  This function must be called first when powered on.
 * 
 * @param[in] None
 * @return NAND_ReturnType
 */
NAND_ReturnType NAND_Init(void) {
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
    NAND_ID dev_ID;

    NAND_Wait(T_POR);       /* Wait for T_POR = 1.25ms after power on */
 80023f4:	2002      	movs	r0, #2
 80023f6:	f000 f912 	bl	800261e <NAND_Wait>
    NAND_Send_Dummy_Byte(); /* Initializes SPI clock settings */
 80023fa:	f000 f87e 	bl	80024fa <NAND_Send_Dummy_Byte>

    /* Reset NAND flash after power on. May not be necessary though (page 50) */
    if (NAND_Reset() != Ret_Success) {
 80023fe:	f000 f817 	bl	8002430 <NAND_Reset>
 8002402:	1e03      	subs	r3, r0, #0
 8002404:	d001      	beq.n	800240a <NAND_Init+0x1c>
        return Ret_ResetFailed;
 8002406:	2302      	movs	r3, #2
 8002408:	e00e      	b.n	8002428 <NAND_Init+0x3a>
    } 

    /* check if device ID is same as expected */
    NAND_Read_ID(&dev_ID);
 800240a:	1d3b      	adds	r3, r7, #4
 800240c:	0018      	movs	r0, r3
 800240e:	f000 f894 	bl	800253a <NAND_Read_ID>
    if (dev_ID.manufacturer_ID != NAND_ID_MANUFACTURER || dev_ID.device_ID != NAND_ID_DEVICE) {
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b2c      	cmp	r3, #44	; 0x2c
 8002418:	d103      	bne.n	8002422 <NAND_Init+0x34>
 800241a:	1d3b      	adds	r3, r7, #4
 800241c:	785b      	ldrb	r3, [r3, #1]
 800241e:	2b24      	cmp	r3, #36	; 0x24
 8002420:	d001      	beq.n	8002426 <NAND_Init+0x38>
        return Ret_WrongID;
 8002422:	2303      	movs	r3, #3
 8002424:	e000      	b.n	8002428 <NAND_Init+0x3a>

    // TODO:
    // run power on self test (POST)
    // build bad block table

    return Ret_Success;
 8002426:	2300      	movs	r3, #0

}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b002      	add	sp, #8
 800242e:	bd80      	pop	{r7, pc}

08002430 <NAND_Reset>:
 * @note Transaction length: 1 byte; Returns success when Flash is ready for further instructions.
 * 
 * @param[in] None
 * @return NAND_ReturnType
 */
NAND_ReturnType NAND_Reset(void) {
 8002430:	b5b0      	push	{r4, r5, r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0

    uint8_t command = SPI_NAND_RESET;
 8002436:	210e      	movs	r1, #14
 8002438:	187b      	adds	r3, r7, r1
 800243a:	22ff      	movs	r2, #255	; 0xff
 800243c:	701a      	strb	r2, [r3, #0]
    SPI_Params transmit = { .buffer = &command, .length = 1 };
 800243e:	1d3b      	adds	r3, r7, #4
 8002440:	187a      	adds	r2, r7, r1
 8002442:	601a      	str	r2, [r3, #0]
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	2201      	movs	r2, #1
 8002448:	809a      	strh	r2, [r3, #4]

    NAND_SPI_ReturnType SPI_Status = NAND_SPI_Send(&transmit);
 800244a:	250f      	movs	r5, #15
 800244c:	197c      	adds	r4, r7, r5
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	0018      	movs	r0, r3
 8002452:	f000 f8f3 	bl	800263c <NAND_SPI_Send>
 8002456:	0003      	movs	r3, r0
 8002458:	7023      	strb	r3, [r4, #0]
    NAND_Wait(T_POR);	// wait for T_POR = 1.25 ms after reset
 800245a:	2002      	movs	r0, #2
 800245c:	f000 f8df 	bl	800261e <NAND_Wait>

    if (SPI_Status != SPI_OK) {
 8002460:	197b      	adds	r3, r7, r5
 8002462:	781b      	ldrb	r3, [r3, #0]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <NAND_Reset+0x3c>
        return Ret_ResetFailed;
 8002468:	2302      	movs	r3, #2
 800246a:	e002      	b.n	8002472 <NAND_Reset+0x42>
    } else {
        // wait until OIP bit resets again (Flash is ready for further instructions)
        return NAND_Wait_Until_Ready();
 800246c:	f000 f805 	bl	800247a <NAND_Wait_Until_Ready>
 8002470:	0003      	movs	r3, r0
    }
}
 8002472:	0018      	movs	r0, r3
 8002474:	46bd      	mov	sp, r7
 8002476:	b004      	add	sp, #16
 8002478:	bdb0      	pop	{r4, r5, r7, pc}

0800247a <NAND_Wait_Until_Ready>:
 *  TODO: confirm with an oscilloscope.
 * 
 * @param[in] None
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Wait_Until_Ready(void) {
 800247a:	b5b0      	push	{r4, r5, r7, lr}
 800247c:	b084      	sub	sp, #16
 800247e:	af00      	add	r7, sp, #0
    uint8_t timeout_counter = 0;
 8002480:	230f      	movs	r3, #15
 8002482:	18fb      	adds	r3, r7, r3
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
    uint8_t max_attempts = 2;
 8002488:	230e      	movs	r3, #14
 800248a:	18fb      	adds	r3, r7, r3
 800248c:	2202      	movs	r2, #2
 800248e:	701a      	strb	r2, [r3, #0]

    /* SPI Transaction set up */
    uint8_t data_rx;
    SPI_Params rx = { .buffer = &data_rx, .length = 1 };
 8002490:	1d3b      	adds	r3, r7, #4
 8002492:	220c      	movs	r2, #12
 8002494:	18ba      	adds	r2, r7, r2
 8002496:	601a      	str	r2, [r3, #0]
 8002498:	1d3b      	adds	r3, r7, #4
 800249a:	2201      	movs	r2, #1
 800249c:	809a      	strh	r2, [r3, #4]

    /* check once if any operations in progress */
    NAND_ReturnType status = NAND_Check_Busy();
 800249e:	250d      	movs	r5, #13
 80024a0:	197c      	adds	r4, r7, r5
 80024a2:	f000 f874 	bl	800258e <NAND_Check_Busy>
 80024a6:	0003      	movs	r3, r0
 80024a8:	7023      	strb	r3, [r4, #0]

    /* if busy, keep polling for until reaching max_attempts. if still busy, return busy */
    if (status == Ret_NANDBusy) {
 80024aa:	197b      	adds	r3, r7, r5
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d11e      	bne.n	80024f0 <NAND_Wait_Until_Ready+0x76>
        while (CHECK_OIP(data_rx)) {
 80024b2:	e016      	b.n	80024e2 <NAND_Wait_Until_Ready+0x68>
            if (timeout_counter < max_attempts) {
 80024b4:	240f      	movs	r4, #15
 80024b6:	193a      	adds	r2, r7, r4
 80024b8:	230e      	movs	r3, #14
 80024ba:	18fb      	adds	r3, r7, r3
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d20c      	bcs.n	80024de <NAND_Wait_Until_Ready+0x64>
                NAND_SPI_Receive(&rx);
 80024c4:	1d3b      	adds	r3, r7, #4
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 f8ee 	bl	80026a8 <NAND_SPI_Receive>
                NAND_Wait(1);
 80024cc:	2001      	movs	r0, #1
 80024ce:	f000 f8a6 	bl	800261e <NAND_Wait>
                timeout_counter += 1;
 80024d2:	193b      	adds	r3, r7, r4
 80024d4:	193a      	adds	r2, r7, r4
 80024d6:	7812      	ldrb	r2, [r2, #0]
 80024d8:	3201      	adds	r2, #1
 80024da:	701a      	strb	r2, [r3, #0]
 80024dc:	e001      	b.n	80024e2 <NAND_Wait_Until_Ready+0x68>
            } else {
                return Ret_NANDBusy;
 80024de:	2304      	movs	r3, #4
 80024e0:	e007      	b.n	80024f2 <NAND_Wait_Until_Ready+0x78>
        while (CHECK_OIP(data_rx)) {
 80024e2:	230c      	movs	r3, #12
 80024e4:	18fb      	adds	r3, r7, r3
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	001a      	movs	r2, r3
 80024ea:	2301      	movs	r3, #1
 80024ec:	4013      	ands	r3, r2
 80024ee:	d1e1      	bne.n	80024b4 <NAND_Wait_Until_Ready+0x3a>
            }
        }
    }
    return Ret_Success;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	0018      	movs	r0, r3
 80024f4:	46bd      	mov	sp, r7
 80024f6:	b004      	add	sp, #16
 80024f8:	bdb0      	pop	{r4, r5, r7, pc}

080024fa <NAND_Send_Dummy_Byte>:
/**
 * @brief Send a dummy byte to NAND via SPI
 * 
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Send_Dummy_Byte(void) {
 80024fa:	b5b0      	push	{r4, r5, r7, lr}
 80024fc:	b084      	sub	sp, #16
 80024fe:	af00      	add	r7, sp, #0
    uint8_t dummy = DUMMY_BYTE;
 8002500:	210e      	movs	r1, #14
 8002502:	187b      	adds	r3, r7, r1
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
    
    SPI_Params tx = { .buffer = &dummy, .length = 1 };
 8002508:	1d3b      	adds	r3, r7, #4
 800250a:	187a      	adds	r2, r7, r1
 800250c:	601a      	str	r2, [r3, #0]
 800250e:	1d3b      	adds	r3, r7, #4
 8002510:	2201      	movs	r2, #1
 8002512:	809a      	strh	r2, [r3, #4]
    NAND_SPI_ReturnType status = NAND_SPI_Send(&tx);
 8002514:	250f      	movs	r5, #15
 8002516:	197c      	adds	r4, r7, r5
 8002518:	1d3b      	adds	r3, r7, #4
 800251a:	0018      	movs	r0, r3
 800251c:	f000 f88e 	bl	800263c <NAND_SPI_Send>
 8002520:	0003      	movs	r3, r0
 8002522:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 8002524:	197b      	adds	r3, r7, r5
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d001      	beq.n	8002530 <NAND_Send_Dummy_Byte+0x36>
        return Ret_Failed;
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <NAND_Send_Dummy_Byte+0x38>
    } else {
        return Ret_Success;
 8002530:	2300      	movs	r3, #0
    }
}
 8002532:	0018      	movs	r0, r3
 8002534:	46bd      	mov	sp, r7
 8002536:	b004      	add	sp, #16
 8002538:	bdb0      	pop	{r4, r5, r7, pc}

0800253a <NAND_Read_ID>:
 * @note Transaction length: 4 bytes (2 each way)
 * 
 * @param nand_ID[out]  Pointer to ID structure
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Read_ID(NAND_ID *nand_ID) {
 800253a:	b590      	push	{r4, r7, lr}
 800253c:	b089      	sub	sp, #36	; 0x24
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]

    uint8_t data_tx[] = {SPI_NAND_READ_ID, 0}; // second byte is dummy byte
 8002542:	201c      	movs	r0, #28
 8002544:	183b      	adds	r3, r7, r0
 8002546:	229f      	movs	r2, #159	; 0x9f
 8002548:	801a      	strh	r2, [r3, #0]
    uint8_t data_rx[2]; // data buffer for received data

    SPI_Params tx = { .buffer = data_tx, .length = 2 };
 800254a:	2110      	movs	r1, #16
 800254c:	187b      	adds	r3, r7, r1
 800254e:	183a      	adds	r2, r7, r0
 8002550:	601a      	str	r2, [r3, #0]
 8002552:	187b      	adds	r3, r7, r1
 8002554:	2202      	movs	r2, #2
 8002556:	809a      	strh	r2, [r3, #4]
    SPI_Params rx = { .buffer = data_rx, .length = 2 };
 8002558:	2008      	movs	r0, #8
 800255a:	183b      	adds	r3, r7, r0
 800255c:	2418      	movs	r4, #24
 800255e:	193a      	adds	r2, r7, r4
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	183b      	adds	r3, r7, r0
 8002564:	2202      	movs	r2, #2
 8002566:	809a      	strh	r2, [r3, #4]

    NAND_SPI_SendReceive(&tx, &rx);
 8002568:	183a      	adds	r2, r7, r0
 800256a:	187b      	adds	r3, r7, r1
 800256c:	0011      	movs	r1, r2
 800256e:	0018      	movs	r0, r3
 8002570:	f000 f872 	bl	8002658 <NAND_SPI_SendReceive>

    nand_ID -> manufacturer_ID = data_rx[0]; // second last byte from transmission
 8002574:	193b      	adds	r3, r7, r4
 8002576:	781a      	ldrb	r2, [r3, #0]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	701a      	strb	r2, [r3, #0]
    nand_ID -> device_ID       = data_rx[1]; // last byte
 800257c:	193b      	adds	r3, r7, r4
 800257e:	785a      	ldrb	r2, [r3, #1]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	705a      	strb	r2, [r3, #1]

    return Ret_Success;
 8002584:	2300      	movs	r3, #0
}
 8002586:	0018      	movs	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	b009      	add	sp, #36	; 0x24
 800258c:	bd90      	pop	{r4, r7, pc}

0800258e <NAND_Check_Busy>:
 *      Transaction length: 3 bytes (2 to transmit, 1 to receive)
 * 
 * @param[in] None
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Check_Busy(void) {
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
    uint8_t status_reg;
    
    NAND_Get_Features(SPI_NAND_STATUS_REG_ADDR, &status_reg);
 8002594:	1dfb      	adds	r3, r7, #7
 8002596:	0019      	movs	r1, r3
 8002598:	20c0      	movs	r0, #192	; 0xc0
 800259a:	f000 f80d 	bl	80025b8 <NAND_Get_Features>
    if (CHECK_OIP(status_reg)) { // if OIP bit is set
 800259e:	1dfb      	adds	r3, r7, #7
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	001a      	movs	r2, r3
 80025a4:	2301      	movs	r3, #1
 80025a6:	4013      	ands	r3, r2
 80025a8:	d001      	beq.n	80025ae <NAND_Check_Busy+0x20>
        return Ret_NANDBusy;
 80025aa:	2304      	movs	r3, #4
 80025ac:	e000      	b.n	80025b0 <NAND_Check_Busy+0x22>
    } else {
        return Ret_Success;
 80025ae:	2300      	movs	r3, #0
    }
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	b002      	add	sp, #8
 80025b6:	bd80      	pop	{r7, pc}

080025b8 <NAND_Get_Features>:
 *
 * @param reg_addr[in]  Address of type RegisterAddr
 * @param reg[out]      Pointer to register contents
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Get_Features(RegisterAddr reg_addr, uint8_t *reg) {
 80025b8:	b5b0      	push	{r4, r5, r7, lr}
 80025ba:	b088      	sub	sp, #32
 80025bc:	af00      	add	r7, sp, #0
 80025be:	0002      	movs	r2, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	1dfb      	adds	r3, r7, #7
 80025c4:	701a      	strb	r2, [r3, #0]
    uint8_t command[] = {SPI_NAND_GET_FEATURES, reg_addr};
 80025c6:	211c      	movs	r1, #28
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	220f      	movs	r2, #15
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	187b      	adds	r3, r7, r1
 80025d0:	1dfa      	adds	r2, r7, #7
 80025d2:	7812      	ldrb	r2, [r2, #0]
 80025d4:	705a      	strb	r2, [r3, #1]
    SPI_Params tx = { .buffer = command, .length = 2 };
 80025d6:	2014      	movs	r0, #20
 80025d8:	183b      	adds	r3, r7, r0
 80025da:	187a      	adds	r2, r7, r1
 80025dc:	601a      	str	r2, [r3, #0]
 80025de:	0001      	movs	r1, r0
 80025e0:	187b      	adds	r3, r7, r1
 80025e2:	2202      	movs	r2, #2
 80025e4:	809a      	strh	r2, [r3, #4]
    SPI_Params rx = { .buffer = reg,     .length = 1 };
 80025e6:	200c      	movs	r0, #12
 80025e8:	183b      	adds	r3, r7, r0
 80025ea:	683a      	ldr	r2, [r7, #0]
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	183b      	adds	r3, r7, r0
 80025f0:	2201      	movs	r2, #1
 80025f2:	809a      	strh	r2, [r3, #4]

    NAND_SPI_ReturnType status = NAND_SPI_SendReceive(&tx, &rx);
 80025f4:	251f      	movs	r5, #31
 80025f6:	197c      	adds	r4, r7, r5
 80025f8:	183a      	adds	r2, r7, r0
 80025fa:	187b      	adds	r3, r7, r1
 80025fc:	0011      	movs	r1, r2
 80025fe:	0018      	movs	r0, r3
 8002600:	f000 f82a 	bl	8002658 <NAND_SPI_SendReceive>
 8002604:	0003      	movs	r3, r0
 8002606:	7023      	strb	r3, [r4, #0]

    if (status == SPI_OK) {
 8002608:	197b      	adds	r3, r7, r5
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d101      	bne.n	8002614 <NAND_Get_Features+0x5c>
        return Ret_Success;
 8002610:	2300      	movs	r3, #0
 8002612:	e000      	b.n	8002616 <NAND_Get_Features+0x5e>
    } else {
        return Ret_Failed;
 8002614:	2301      	movs	r3, #1
    }
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b008      	add	sp, #32
 800261c:	bdb0      	pop	{r4, r5, r7, pc}

0800261e <NAND_Wait>:
/**
 * @brief Calls HAL_Delay() for stated number of milliseconds
 * 
 * @param[in] milliseconds Number of milliseconds to delay
 */
void NAND_Wait(uint8_t milliseconds){
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	0002      	movs	r2, r0
 8002626:	1dfb      	adds	r3, r7, #7
 8002628:	701a      	strb	r2, [r3, #0]
    HAL_Delay(milliseconds);
 800262a:	1dfb      	adds	r3, r7, #7
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	0018      	movs	r0, r3
 8002630:	f000 fc1c 	bl	8002e6c <HAL_Delay>
};
 8002634:	46c0      	nop			; (mov r8, r8)
 8002636:	46bd      	mov	sp, r7
 8002638:	b002      	add	sp, #8
 800263a:	bd80      	pop	{r7, pc}

0800263c <NAND_SPI_Send>:
 * @brief Write data to NAND.
 * 
 * @param data_send[in]    Pointer to struct with data and length
 * @return NAND_SPI_ReturnType 
 */
NAND_SPI_ReturnType NAND_SPI_Send(SPI_Params *data_send) {
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
//    HAL_StatusTypeDef send_status;

    //__nand_spi_NAND_CS_LOW();
//    send_status = HAL_SPI_Transmit(hspi_nand, data_send->buffer, data_send->length, NAND_SPI_TIMEOUT);
    NAND_SPI_Transmit(data_send->buffer);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	0018      	movs	r0, r3
 800264a:	f000 f84b 	bl	80026e4 <NAND_SPI_Transmit>
    return SPI_OK;
 800264e:	2300      	movs	r3, #0
//        return SPI_Fail;
//    } else {
//        return SPI_OK;
//    }

}
 8002650:	0018      	movs	r0, r3
 8002652:	46bd      	mov	sp, r7
 8002654:	b002      	add	sp, #8
 8002656:	bd80      	pop	{r7, pc}

08002658 <NAND_SPI_SendReceive>:
 * 
 * @param data_send[in]    Pointer to struct with sending data buffer and length of buffer
 * @param data_recv[out]    Pointer to struct with receive data buffer and length of buffer
 * @return NAND_SPI_ReturnType 
 */
NAND_SPI_ReturnType NAND_SPI_SendReceive(SPI_Params *data_send, SPI_Params *data_recv) {
 8002658:	b5b0      	push	{r4, r5, r7, lr}
 800265a:	b084      	sub	sp, #16
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef recv_status;

    //__nand_spi_NAND_CS_LOW();
    HAL_SPI_Transmit(hspi_nand, data_send->buffer, data_send->length, NAND_SPI_TIMEOUT);
 8002662:	4b10      	ldr	r3, [pc, #64]	; (80026a4 <NAND_SPI_SendReceive+0x4c>)
 8002664:	6818      	ldr	r0, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	889a      	ldrh	r2, [r3, #4]
 800266e:	2364      	movs	r3, #100	; 0x64
 8002670:	f002 fd2a 	bl	80050c8 <HAL_SPI_Transmit>
    recv_status = HAL_SPI_Receive(hspi_nand, data_recv->buffer, data_recv->length, NAND_SPI_TIMEOUT);
 8002674:	4b0b      	ldr	r3, [pc, #44]	; (80026a4 <NAND_SPI_SendReceive+0x4c>)
 8002676:	6818      	ldr	r0, [r3, #0]
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	6819      	ldr	r1, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	889a      	ldrh	r2, [r3, #4]
 8002680:	250f      	movs	r5, #15
 8002682:	197c      	adds	r4, r7, r5
 8002684:	2364      	movs	r3, #100	; 0x64
 8002686:	f002 fe75 	bl	8005374 <HAL_SPI_Receive>
 800268a:	0003      	movs	r3, r0
 800268c:	7023      	strb	r3, [r4, #0]
    //__nand_spi_NAND_CS_HIGH();

    if (recv_status != HAL_OK) {
 800268e:	197b      	adds	r3, r7, r5
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d001      	beq.n	800269a <NAND_SPI_SendReceive+0x42>
        return SPI_Fail; 
 8002696:	2301      	movs	r3, #1
 8002698:	e000      	b.n	800269c <NAND_SPI_SendReceive+0x44>
    } else {
        return SPI_OK;
 800269a:	2300      	movs	r3, #0
    }
};
 800269c:	0018      	movs	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	b004      	add	sp, #16
 80026a2:	bdb0      	pop	{r4, r5, r7, pc}
 80026a4:	2000009c 	.word	0x2000009c

080026a8 <NAND_SPI_Receive>:
 * @brief Read data from NAND.
 * 
 * @param data_recv[in]    Pointer to struct with read data buffer and length of receive data
 * @return NAND_SPI_ReturnType 
 */
NAND_SPI_ReturnType NAND_SPI_Receive(SPI_Params *data_recv) {
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef receive_status;

    //__nand_spi_NAND_CS_LOW();
    receive_status = HAL_SPI_Receive(hspi_nand, data_recv->buffer, data_recv->length, NAND_SPI_TIMEOUT);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <NAND_SPI_Receive+0x38>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6819      	ldr	r1, [r3, #0]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	889a      	ldrh	r2, [r3, #4]
 80026bc:	250f      	movs	r5, #15
 80026be:	197c      	adds	r4, r7, r5
 80026c0:	2364      	movs	r3, #100	; 0x64
 80026c2:	f002 fe57 	bl	8005374 <HAL_SPI_Receive>
 80026c6:	0003      	movs	r3, r0
 80026c8:	7023      	strb	r3, [r4, #0]
    //__nand_spi_NAND_CS_HIGH();

    if (receive_status != HAL_OK) {
 80026ca:	197b      	adds	r3, r7, r5
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <NAND_SPI_Receive+0x2e>
        return SPI_Fail; 
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <NAND_SPI_Receive+0x30>
    } else {
        return SPI_OK;
 80026d6:	2300      	movs	r3, #0
    }
};
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b004      	add	sp, #16
 80026de:	bdb0      	pop	{r4, r5, r7, pc}
 80026e0:	2000009c 	.word	0x2000009c

080026e4 <NAND_SPI_Transmit>:
//		return GPIO_PIN_SET;
//	}
//	return GPIO_PIN_RESET;
//}

void NAND_SPI_Transmit(addr){
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
	// CS Low
	_NAND_CS_LOW();
 80026ec:	f000 f830 	bl	8002750 <_NAND_CS_LOW>
	// Send Phase
	for (int i=0; i<8; i++){
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	e01a      	b.n	800272c <NAND_SPI_Transmit+0x48>
		HAL_GPIO_WritePin(NAND_MOSI_Port, NAND_MOSI_Pin, bit_read(addr, i));
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	0011      	movs	r1, r2
 80026fc:	0018      	movs	r0, r3
 80026fe:	f000 f953 	bl	80029a8 <bit_read>
 8002702:	0003      	movs	r3, r0
 8002704:	b2da      	uxtb	r2, r3
 8002706:	2380      	movs	r3, #128	; 0x80
 8002708:	01db      	lsls	r3, r3, #7
 800270a:	4810      	ldr	r0, [pc, #64]	; (800274c <NAND_SPI_Transmit+0x68>)
 800270c:	0019      	movs	r1, r3
 800270e:	f000 fe20 	bl	8003352 <HAL_GPIO_WritePin>
		_NAND_CLK_HIGH();
 8002712:	f000 f847 	bl	80027a4 <_NAND_CLK_HIGH>
		HAL_GPIO_ReadPin(NAND_MISO_Port, NAND_MISO_Pin);
 8002716:	23a0      	movs	r3, #160	; 0xa0
 8002718:	05db      	lsls	r3, r3, #23
 800271a:	2110      	movs	r1, #16
 800271c:	0018      	movs	r0, r3
 800271e:	f000 fdfb 	bl	8003318 <HAL_GPIO_ReadPin>
		_NAND_CLK_LOW();
 8002722:	f000 f831 	bl	8002788 <_NAND_CLK_LOW>
	for (int i=0; i<8; i++){
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	3301      	adds	r3, #1
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2b07      	cmp	r3, #7
 8002730:	dde1      	ble.n	80026f6 <NAND_SPI_Transmit+0x12>
	}
	_NAND_CS_HIGH();
 8002732:	f000 f81b 	bl	800276c <_NAND_CS_HIGH>
	HAL_GPIO_WritePin(NAND_MOSI_Port, NAND_MOSI_Pin, GPIO_PIN_RESET);
 8002736:	2380      	movs	r3, #128	; 0x80
 8002738:	01db      	lsls	r3, r3, #7
 800273a:	4804      	ldr	r0, [pc, #16]	; (800274c <NAND_SPI_Transmit+0x68>)
 800273c:	2200      	movs	r2, #0
 800273e:	0019      	movs	r1, r3
 8002740:	f000 fe07 	bl	8003352 <HAL_GPIO_WritePin>
}
 8002744:	46c0      	nop			; (mov r8, r8)
 8002746:	46bd      	mov	sp, r7
 8002748:	b004      	add	sp, #16
 800274a:	bd80      	pop	{r7, pc}
 800274c:	50000400 	.word	0x50000400

08002750 <_NAND_CS_LOW>:

void _NAND_CS_LOW(){
 8002750:	b580      	push	{r7, lr}
 8002752:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NAND_NSS_Port, NAND_NSS_Pin, GPIO_PIN_RESET);
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	015b      	lsls	r3, r3, #5
 8002758:	4803      	ldr	r0, [pc, #12]	; (8002768 <_NAND_CS_LOW+0x18>)
 800275a:	2200      	movs	r2, #0
 800275c:	0019      	movs	r1, r3
 800275e:	f000 fdf8 	bl	8003352 <HAL_GPIO_WritePin>
}
 8002762:	46c0      	nop			; (mov r8, r8)
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	50000400 	.word	0x50000400

0800276c <_NAND_CS_HIGH>:
void _NAND_CS_HIGH(){
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NAND_NSS_Port, NAND_NSS_Pin, GPIO_PIN_SET);
 8002770:	2380      	movs	r3, #128	; 0x80
 8002772:	015b      	lsls	r3, r3, #5
 8002774:	4803      	ldr	r0, [pc, #12]	; (8002784 <_NAND_CS_HIGH+0x18>)
 8002776:	2201      	movs	r2, #1
 8002778:	0019      	movs	r1, r3
 800277a:	f000 fdea 	bl	8003352 <HAL_GPIO_WritePin>
}
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	50000400 	.word	0x50000400

08002788 <_NAND_CLK_LOW>:

void _NAND_CLK_LOW(){
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NAND_CLK_Port, NAND_CLK_Pin, GPIO_PIN_RESET);
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <_NAND_CLK_LOW+0x18>)
 800278e:	2200      	movs	r2, #0
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fddd 	bl	8003352 <HAL_GPIO_WritePin>
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
 800279e:	46c0      	nop			; (mov r8, r8)
 80027a0:	50000400 	.word	0x50000400

080027a4 <_NAND_CLK_HIGH>:
void _NAND_CLK_HIGH(){
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NAND_CLK_Port, NAND_CLK_Pin, GPIO_PIN_SET);
 80027a8:	4b04      	ldr	r3, [pc, #16]	; (80027bc <_NAND_CLK_HIGH+0x18>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	2180      	movs	r1, #128	; 0x80
 80027ae:	0018      	movs	r0, r3
 80027b0:	f000 fdcf 	bl	8003352 <HAL_GPIO_WritePin>
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	46c0      	nop			; (mov r8, r8)
 80027bc:	50000400 	.word	0x50000400

080027c0 <read_spi_reg>:
//  HAL_GPIO_WritePin(GPIOA, SPI2_CS_Pin, GPIO_PIN_RESET);
//
//  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(GPIOB, SPI_B_MOSI_Pin|SPI_B_NSS_Pin|SPI_B_CLK_Pin, GPIO_PIN_RESET);

uint8_t read_spi_reg(uint8_t addr, uint8_t sensor){
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b086      	sub	sp, #24
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	0002      	movs	r2, r0
 80027c8:	1dfb      	adds	r3, r7, #7
 80027ca:	701a      	strb	r2, [r3, #0]
 80027cc:	1dbb      	adds	r3, r7, #6
 80027ce:	1c0a      	adds	r2, r1, #0
 80027d0:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	// CS Low
	if (sensor == 0){
 80027d2:	1dbb      	adds	r3, r7, #6
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d102      	bne.n	80027e0 <read_spi_reg+0x20>
		_CS1_LOW(); // VIS sensor is CS1
 80027da:	f000 f8fe 	bl	80029da <_CS1_LOW>
 80027de:	e001      	b.n	80027e4 <read_spi_reg+0x24>
	}
	else{
		_CS2_LOW(); // NIR sensor is CS2
 80027e0:	f000 f913 	bl	8002a0a <_CS2_LOW>
	}
	// Send Phase
	for (int i=0; i<8; i++){
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
 80027e8:	e01b      	b.n	8002822 <read_spi_reg+0x62>
		HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, bit_read(addr, i));
 80027ea:	693a      	ldr	r2, [r7, #16]
 80027ec:	1dfb      	adds	r3, r7, #7
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	0011      	movs	r1, r2
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 f8d8 	bl	80029a8 <bit_read>
 80027f8:	0003      	movs	r3, r0
 80027fa:	001a      	movs	r2, r3
 80027fc:	23a0      	movs	r3, #160	; 0xa0
 80027fe:	05db      	lsls	r3, r3, #23
 8002800:	2108      	movs	r1, #8
 8002802:	0018      	movs	r0, r3
 8002804:	f000 fda5 	bl	8003352 <HAL_GPIO_WritePin>
		_CLK_HIGH();
 8002808:	f000 f923 	bl	8002a52 <_CLK_HIGH>
		HAL_GPIO_ReadPin(MISO_Port, MISO_Pin);
 800280c:	23a0      	movs	r3, #160	; 0xa0
 800280e:	05db      	lsls	r3, r3, #23
 8002810:	2104      	movs	r1, #4
 8002812:	0018      	movs	r0, r3
 8002814:	f000 fd80 	bl	8003318 <HAL_GPIO_ReadPin>
		_CLK_LOW();
 8002818:	f000 f90f 	bl	8002a3a <_CLK_LOW>
	for (int i=0; i<8; i++){
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	3301      	adds	r3, #1
 8002820:	613b      	str	r3, [r7, #16]
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	2b07      	cmp	r3, #7
 8002826:	dde0      	ble.n	80027ea <read_spi_reg+0x2a>
	}

	// Recieve phase
	for (int i=0; i<8; i++){
 8002828:	2300      	movs	r3, #0
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	e02d      	b.n	800288a <read_spi_reg+0xca>
		HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, bit_read(0x00, i));
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	0019      	movs	r1, r3
 8002832:	2000      	movs	r0, #0
 8002834:	f000 f8b8 	bl	80029a8 <bit_read>
 8002838:	0003      	movs	r3, r0
 800283a:	001a      	movs	r2, r3
 800283c:	23a0      	movs	r3, #160	; 0xa0
 800283e:	05db      	lsls	r3, r3, #23
 8002840:	2108      	movs	r1, #8
 8002842:	0018      	movs	r0, r3
 8002844:	f000 fd85 	bl	8003352 <HAL_GPIO_WritePin>
		_CLK_HIGH();
 8002848:	f000 f903 	bl	8002a52 <_CLK_HIGH>
		if (HAL_GPIO_ReadPin(MISO_Port, MISO_Pin) == GPIO_PIN_SET){
 800284c:	23a0      	movs	r3, #160	; 0xa0
 800284e:	05db      	lsls	r3, r3, #23
 8002850:	2104      	movs	r1, #4
 8002852:	0018      	movs	r0, r3
 8002854:	f000 fd60 	bl	8003318 <HAL_GPIO_ReadPin>
 8002858:	0003      	movs	r3, r0
 800285a:	2b01      	cmp	r3, #1
 800285c:	d10a      	bne.n	8002874 <read_spi_reg+0xb4>
			rec = rec << 1 | 0b1;
 800285e:	2117      	movs	r1, #23
 8002860:	187b      	adds	r3, r7, r1
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	b25b      	sxtb	r3, r3
 8002868:	2201      	movs	r2, #1
 800286a:	4313      	orrs	r3, r2
 800286c:	b25a      	sxtb	r2, r3
 800286e:	187b      	adds	r3, r7, r1
 8002870:	701a      	strb	r2, [r3, #0]
 8002872:	e005      	b.n	8002880 <read_spi_reg+0xc0>
		}
		else{
			rec = rec << 1 | 0b0;
 8002874:	2317      	movs	r3, #23
 8002876:	18fa      	adds	r2, r7, r3
 8002878:	18fb      	adds	r3, r7, r3
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	18db      	adds	r3, r3, r3
 800287e:	7013      	strb	r3, [r2, #0]
		}
		_CLK_LOW();
 8002880:	f000 f8db 	bl	8002a3a <_CLK_LOW>
	for (int i=0; i<8; i++){
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	3301      	adds	r3, #1
 8002888:	60fb      	str	r3, [r7, #12]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2b07      	cmp	r3, #7
 800288e:	ddce      	ble.n	800282e <read_spi_reg+0x6e>
	}

	if (sensor == 0){
 8002890:	1dbb      	adds	r3, r7, #6
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <read_spi_reg+0xde>
		_CS1_HIGH();
 8002898:	f000 f8ab 	bl	80029f2 <_CS1_HIGH>
 800289c:	e001      	b.n	80028a2 <read_spi_reg+0xe2>
	}
	else{
		_CS2_HIGH();
 800289e:	f000 f8c0 	bl	8002a22 <_CS2_HIGH>
	}
	HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, GPIO_PIN_RESET);
 80028a2:	23a0      	movs	r3, #160	; 0xa0
 80028a4:	05db      	lsls	r3, r3, #23
 80028a6:	2200      	movs	r2, #0
 80028a8:	2108      	movs	r1, #8
 80028aa:	0018      	movs	r0, r3
 80028ac:	f000 fd51 	bl	8003352 <HAL_GPIO_WritePin>
	return rec;
 80028b0:	2317      	movs	r3, #23
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	781b      	ldrb	r3, [r3, #0]
}
 80028b6:	0018      	movs	r0, r3
 80028b8:	46bd      	mov	sp, r7
 80028ba:	b006      	add	sp, #24
 80028bc:	bd80      	pop	{r7, pc}

080028be <write_spi_reg>:

bool write_spi_reg(uint8_t addr, uint8_t packet, uint8_t sensor){
 80028be:	b590      	push	{r4, r7, lr}
 80028c0:	b085      	sub	sp, #20
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	0004      	movs	r4, r0
 80028c6:	0008      	movs	r0, r1
 80028c8:	0011      	movs	r1, r2
 80028ca:	1dfb      	adds	r3, r7, #7
 80028cc:	1c22      	adds	r2, r4, #0
 80028ce:	701a      	strb	r2, [r3, #0]
 80028d0:	1dbb      	adds	r3, r7, #6
 80028d2:	1c02      	adds	r2, r0, #0
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	1d7b      	adds	r3, r7, #5
 80028d8:	1c0a      	adds	r2, r1, #0
 80028da:	701a      	strb	r2, [r3, #0]
	// CS Low
	if (sensor == 0){
 80028dc:	1d7b      	adds	r3, r7, #5
 80028de:	781b      	ldrb	r3, [r3, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d102      	bne.n	80028ea <write_spi_reg+0x2c>
		_CS1_LOW(); // VIS sensor is CS1
 80028e4:	f000 f879 	bl	80029da <_CS1_LOW>
 80028e8:	e001      	b.n	80028ee <write_spi_reg+0x30>
	}
	else{
		_CS2_LOW(); // NIR sensor is CS2
 80028ea:	f000 f88e 	bl	8002a0a <_CS2_LOW>
	}
	// Send Phase
	for (int i=0; i<8; i++){
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
 80028f2:	e01f      	b.n	8002934 <write_spi_reg+0x76>
		HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, bit_read((addr | 0x80), i));
 80028f4:	1dfb      	adds	r3, r7, #7
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2280      	movs	r2, #128	; 0x80
 80028fa:	4252      	negs	r2, r2
 80028fc:	4313      	orrs	r3, r2
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	0011      	movs	r1, r2
 8002904:	0018      	movs	r0, r3
 8002906:	f000 f84f 	bl	80029a8 <bit_read>
 800290a:	0003      	movs	r3, r0
 800290c:	001a      	movs	r2, r3
 800290e:	23a0      	movs	r3, #160	; 0xa0
 8002910:	05db      	lsls	r3, r3, #23
 8002912:	2108      	movs	r1, #8
 8002914:	0018      	movs	r0, r3
 8002916:	f000 fd1c 	bl	8003352 <HAL_GPIO_WritePin>
		_CLK_HIGH();
 800291a:	f000 f89a 	bl	8002a52 <_CLK_HIGH>
		HAL_GPIO_ReadPin(MISO_Port, MISO_Pin);
 800291e:	23a0      	movs	r3, #160	; 0xa0
 8002920:	05db      	lsls	r3, r3, #23
 8002922:	2104      	movs	r1, #4
 8002924:	0018      	movs	r0, r3
 8002926:	f000 fcf7 	bl	8003318 <HAL_GPIO_ReadPin>
		_CLK_LOW();
 800292a:	f000 f886 	bl	8002a3a <_CLK_LOW>
	for (int i=0; i<8; i++){
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3301      	adds	r3, #1
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2b07      	cmp	r3, #7
 8002938:	dddc      	ble.n	80028f4 <write_spi_reg+0x36>
	}

	// Write phase
	for (int i=0; i<8; i++){
 800293a:	2300      	movs	r3, #0
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	e01b      	b.n	8002978 <write_spi_reg+0xba>
		HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, bit_read(packet, i));
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	1dbb      	adds	r3, r7, #6
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	0011      	movs	r1, r2
 8002948:	0018      	movs	r0, r3
 800294a:	f000 f82d 	bl	80029a8 <bit_read>
 800294e:	0003      	movs	r3, r0
 8002950:	001a      	movs	r2, r3
 8002952:	23a0      	movs	r3, #160	; 0xa0
 8002954:	05db      	lsls	r3, r3, #23
 8002956:	2108      	movs	r1, #8
 8002958:	0018      	movs	r0, r3
 800295a:	f000 fcfa 	bl	8003352 <HAL_GPIO_WritePin>
		_CLK_HIGH();
 800295e:	f000 f878 	bl	8002a52 <_CLK_HIGH>
		HAL_GPIO_ReadPin(MISO_Port, MISO_Pin);
 8002962:	23a0      	movs	r3, #160	; 0xa0
 8002964:	05db      	lsls	r3, r3, #23
 8002966:	2104      	movs	r1, #4
 8002968:	0018      	movs	r0, r3
 800296a:	f000 fcd5 	bl	8003318 <HAL_GPIO_ReadPin>
		_CLK_LOW();
 800296e:	f000 f864 	bl	8002a3a <_CLK_LOW>
	for (int i=0; i<8; i++){
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	3301      	adds	r3, #1
 8002976:	60bb      	str	r3, [r7, #8]
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	2b07      	cmp	r3, #7
 800297c:	dde0      	ble.n	8002940 <write_spi_reg+0x82>
	}

	if (sensor == 0){
 800297e:	1d7b      	adds	r3, r7, #5
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d102      	bne.n	800298c <write_spi_reg+0xce>
		_CS1_HIGH();
 8002986:	f000 f834 	bl	80029f2 <_CS1_HIGH>
 800298a:	e001      	b.n	8002990 <write_spi_reg+0xd2>
	}
	else{
		_CS2_HIGH();
 800298c:	f000 f849 	bl	8002a22 <_CS2_HIGH>
	}
	HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, GPIO_PIN_RESET);
 8002990:	23a0      	movs	r3, #160	; 0xa0
 8002992:	05db      	lsls	r3, r3, #23
 8002994:	2200      	movs	r2, #0
 8002996:	2108      	movs	r1, #8
 8002998:	0018      	movs	r0, r3
 800299a:	f000 fcda 	bl	8003352 <HAL_GPIO_WritePin>

	return true;
 800299e:	2301      	movs	r3, #1
}
 80029a0:	0018      	movs	r0, r3
 80029a2:	46bd      	mov	sp, r7
 80029a4:	b005      	add	sp, #20
 80029a6:	bd90      	pop	{r4, r7, pc}

080029a8 <bit_read>:
	}
	HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, GPIO_PIN_RESET);

}

GPIO_PinState bit_read(uint8_t byte, int j){
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	0002      	movs	r2, r0
 80029b0:	6039      	str	r1, [r7, #0]
 80029b2:	1dfb      	adds	r3, r7, #7
 80029b4:	701a      	strb	r2, [r3, #0]
	byte = byte << j;
 80029b6:	1dfb      	adds	r3, r7, #7
 80029b8:	781a      	ldrb	r2, [r3, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	409a      	lsls	r2, r3
 80029be:	1dfb      	adds	r3, r7, #7
 80029c0:	701a      	strb	r2, [r3, #0]
	if (byte & 0x80){
 80029c2:	1dfb      	adds	r3, r7, #7
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	b25b      	sxtb	r3, r3
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da01      	bge.n	80029d0 <bit_read+0x28>
		return GPIO_PIN_SET;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e000      	b.n	80029d2 <bit_read+0x2a>
	}
	return GPIO_PIN_RESET;
 80029d0:	2300      	movs	r3, #0
}
 80029d2:	0018      	movs	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	b002      	add	sp, #8
 80029d8:	bd80      	pop	{r7, pc}

080029da <_CS1_LOW>:

void _CS1_LOW(){
 80029da:	b580      	push	{r7, lr}
 80029dc:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS1_Port, NSS1_Pin, GPIO_PIN_RESET);
 80029de:	23a0      	movs	r3, #160	; 0xa0
 80029e0:	05db      	lsls	r3, r3, #23
 80029e2:	2200      	movs	r2, #0
 80029e4:	2101      	movs	r1, #1
 80029e6:	0018      	movs	r0, r3
 80029e8:	f000 fcb3 	bl	8003352 <HAL_GPIO_WritePin>
}
 80029ec:	46c0      	nop			; (mov r8, r8)
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <_CS1_HIGH>:
void _CS1_HIGH(){
 80029f2:	b580      	push	{r7, lr}
 80029f4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS1_Port, NSS1_Pin, GPIO_PIN_SET);
 80029f6:	23a0      	movs	r3, #160	; 0xa0
 80029f8:	05db      	lsls	r3, r3, #23
 80029fa:	2201      	movs	r2, #1
 80029fc:	2101      	movs	r1, #1
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 fca7 	bl	8003352 <HAL_GPIO_WritePin>
}
 8002a04:	46c0      	nop			; (mov r8, r8)
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <_CS2_LOW>:

void _CS2_LOW(){
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS2_Port, NSS2_Pin, GPIO_PIN_RESET);
 8002a0e:	23a0      	movs	r3, #160	; 0xa0
 8002a10:	05db      	lsls	r3, r3, #23
 8002a12:	2200      	movs	r2, #0
 8002a14:	2102      	movs	r1, #2
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 fc9b 	bl	8003352 <HAL_GPIO_WritePin>
}
 8002a1c:	46c0      	nop			; (mov r8, r8)
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}

08002a22 <_CS2_HIGH>:
void _CS2_HIGH(){
 8002a22:	b580      	push	{r7, lr}
 8002a24:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS2_Port, NSS2_Pin, GPIO_PIN_SET);
 8002a26:	23a0      	movs	r3, #160	; 0xa0
 8002a28:	05db      	lsls	r3, r3, #23
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	0018      	movs	r0, r3
 8002a30:	f000 fc8f 	bl	8003352 <HAL_GPIO_WritePin>
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}

08002a3a <_CLK_LOW>:

void _CLK_LOW(){
 8002a3a:	b580      	push	{r7, lr}
 8002a3c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_RESET);
 8002a3e:	23a0      	movs	r3, #160	; 0xa0
 8002a40:	05db      	lsls	r3, r3, #23
 8002a42:	2200      	movs	r2, #0
 8002a44:	2110      	movs	r1, #16
 8002a46:	0018      	movs	r0, r3
 8002a48:	f000 fc83 	bl	8003352 <HAL_GPIO_WritePin>
}
 8002a4c:	46c0      	nop			; (mov r8, r8)
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}

08002a52 <_CLK_HIGH>:
void _CLK_HIGH(){
 8002a52:	b580      	push	{r7, lr}
 8002a54:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_SET);
 8002a56:	23a0      	movs	r3, #160	; 0xa0
 8002a58:	05db      	lsls	r3, r3, #23
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	2110      	movs	r1, #16
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 fc77 	bl	8003352 <HAL_GPIO_WritePin>
}
 8002a64:	46c0      	nop			; (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
	...

08002a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a70:	4b07      	ldr	r3, [pc, #28]	; (8002a90 <HAL_MspInit+0x24>)
 8002a72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a74:	4b06      	ldr	r3, [pc, #24]	; (8002a90 <HAL_MspInit+0x24>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a7c:	4b04      	ldr	r3, [pc, #16]	; (8002a90 <HAL_MspInit+0x24>)
 8002a7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a80:	4b03      	ldr	r3, [pc, #12]	; (8002a90 <HAL_MspInit+0x24>)
 8002a82:	2180      	movs	r1, #128	; 0x80
 8002a84:	0549      	lsls	r1, r1, #21
 8002a86:	430a      	orrs	r2, r1
 8002a88:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a8a:	46c0      	nop			; (mov r8, r8)
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40021000 	.word	0x40021000

08002a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a94:	b590      	push	{r4, r7, lr}
 8002a96:	b089      	sub	sp, #36	; 0x24
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	240c      	movs	r4, #12
 8002a9e:	193b      	adds	r3, r7, r4
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	2314      	movs	r3, #20
 8002aa4:	001a      	movs	r2, r3
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f003 ff1f 	bl	80068ea <memset>
  if(hi2c->Instance==I2C2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a23      	ldr	r2, [pc, #140]	; (8002b40 <HAL_I2C_MspInit+0xac>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d13f      	bne.n	8002b36 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab6:	4b23      	ldr	r3, [pc, #140]	; (8002b44 <HAL_I2C_MspInit+0xb0>)
 8002ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002aba:	4b22      	ldr	r3, [pc, #136]	; (8002b44 <HAL_I2C_MspInit+0xb0>)
 8002abc:	2102      	movs	r1, #2
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ac2:	4b20      	ldr	r3, [pc, #128]	; (8002b44 <HAL_I2C_MspInit+0xb0>)
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	4013      	ands	r3, r2
 8002aca:	60bb      	str	r3, [r7, #8]
 8002acc:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	2280      	movs	r2, #128	; 0x80
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad6:	193b      	adds	r3, r7, r4
 8002ad8:	2212      	movs	r2, #18
 8002ada:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002adc:	193b      	adds	r3, r7, r4
 8002ade:	2201      	movs	r2, #1
 8002ae0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae2:	193b      	adds	r3, r7, r4
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002ae8:	193b      	adds	r3, r7, r4
 8002aea:	2206      	movs	r2, #6
 8002aec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aee:	193b      	adds	r3, r7, r4
 8002af0:	4a15      	ldr	r2, [pc, #84]	; (8002b48 <HAL_I2C_MspInit+0xb4>)
 8002af2:	0019      	movs	r1, r3
 8002af4:	0010      	movs	r0, r2
 8002af6:	f000 fa91 	bl	800301c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002afa:	0021      	movs	r1, r4
 8002afc:	187b      	adds	r3, r7, r1
 8002afe:	2280      	movs	r2, #128	; 0x80
 8002b00:	0192      	lsls	r2, r2, #6
 8002b02:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b04:	187b      	adds	r3, r7, r1
 8002b06:	2212      	movs	r2, #18
 8002b08:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002b0a:	187b      	adds	r3, r7, r1
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b10:	187b      	adds	r3, r7, r1
 8002b12:	2203      	movs	r2, #3
 8002b14:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8002b16:	187b      	adds	r3, r7, r1
 8002b18:	2205      	movs	r2, #5
 8002b1a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b1c:	187b      	adds	r3, r7, r1
 8002b1e:	4a0a      	ldr	r2, [pc, #40]	; (8002b48 <HAL_I2C_MspInit+0xb4>)
 8002b20:	0019      	movs	r1, r3
 8002b22:	0010      	movs	r0, r2
 8002b24:	f000 fa7a 	bl	800301c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <HAL_I2C_MspInit+0xb0>)
 8002b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2c:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <HAL_I2C_MspInit+0xb0>)
 8002b2e:	2180      	movs	r1, #128	; 0x80
 8002b30:	03c9      	lsls	r1, r1, #15
 8002b32:	430a      	orrs	r2, r1
 8002b34:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002b36:	46c0      	nop			; (mov r8, r8)
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b009      	add	sp, #36	; 0x24
 8002b3c:	bd90      	pop	{r4, r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	40005800 	.word	0x40005800
 8002b44:	40021000 	.word	0x40021000
 8002b48:	50000400 	.word	0x50000400

08002b4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b4c:	b590      	push	{r4, r7, lr}
 8002b4e:	b089      	sub	sp, #36	; 0x24
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b54:	240c      	movs	r4, #12
 8002b56:	193b      	adds	r3, r7, r4
 8002b58:	0018      	movs	r0, r3
 8002b5a:	2314      	movs	r3, #20
 8002b5c:	001a      	movs	r2, r3
 8002b5e:	2100      	movs	r1, #0
 8002b60:	f003 fec3 	bl	80068ea <memset>
  if(hspi->Instance==SPI2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a23      	ldr	r2, [pc, #140]	; (8002bf8 <HAL_SPI_MspInit+0xac>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d13f      	bne.n	8002bee <HAL_SPI_MspInit+0xa2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002b6e:	4b23      	ldr	r3, [pc, #140]	; (8002bfc <HAL_SPI_MspInit+0xb0>)
 8002b70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b72:	4b22      	ldr	r3, [pc, #136]	; (8002bfc <HAL_SPI_MspInit+0xb0>)
 8002b74:	2180      	movs	r1, #128	; 0x80
 8002b76:	01c9      	lsls	r1, r1, #7
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7c:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <HAL_SPI_MspInit+0xb0>)
 8002b7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b80:	4b1e      	ldr	r3, [pc, #120]	; (8002bfc <HAL_SPI_MspInit+0xb0>)
 8002b82:	2102      	movs	r1, #2
 8002b84:	430a      	orrs	r2, r1
 8002b86:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b88:	4b1c      	ldr	r3, [pc, #112]	; (8002bfc <HAL_SPI_MspInit+0xb0>)
 8002b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	4013      	ands	r3, r2
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b94:	193b      	adds	r3, r7, r4
 8002b96:	2280      	movs	r2, #128	; 0x80
 8002b98:	00d2      	lsls	r2, r2, #3
 8002b9a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9c:	193b      	adds	r3, r7, r4
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	193b      	adds	r3, r7, r4
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba8:	193b      	adds	r3, r7, r4
 8002baa:	2203      	movs	r2, #3
 8002bac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bae:	193b      	adds	r3, r7, r4
 8002bb0:	2205      	movs	r2, #5
 8002bb2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bb4:	193b      	adds	r3, r7, r4
 8002bb6:	4a12      	ldr	r2, [pc, #72]	; (8002c00 <HAL_SPI_MspInit+0xb4>)
 8002bb8:	0019      	movs	r1, r3
 8002bba:	0010      	movs	r0, r2
 8002bbc:	f000 fa2e 	bl	800301c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002bc0:	0021      	movs	r1, r4
 8002bc2:	187b      	adds	r3, r7, r1
 8002bc4:	22c0      	movs	r2, #192	; 0xc0
 8002bc6:	0212      	lsls	r2, r2, #8
 8002bc8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	187b      	adds	r3, r7, r1
 8002bcc:	2202      	movs	r2, #2
 8002bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd6:	187b      	adds	r3, r7, r1
 8002bd8:	2203      	movs	r2, #3
 8002bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002bdc:	187b      	adds	r3, r7, r1
 8002bde:	2200      	movs	r2, #0
 8002be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be2:	187b      	adds	r3, r7, r1
 8002be4:	4a06      	ldr	r2, [pc, #24]	; (8002c00 <HAL_SPI_MspInit+0xb4>)
 8002be6:	0019      	movs	r1, r3
 8002be8:	0010      	movs	r0, r2
 8002bea:	f000 fa17 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002bee:	46c0      	nop			; (mov r8, r8)
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	b009      	add	sp, #36	; 0x24
 8002bf4:	bd90      	pop	{r4, r7, pc}
 8002bf6:	46c0      	nop			; (mov r8, r8)
 8002bf8:	40003800 	.word	0x40003800
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	50000400 	.word	0x50000400

08002c04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c04:	b590      	push	{r4, r7, lr}
 8002c06:	b089      	sub	sp, #36	; 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c0c:	240c      	movs	r4, #12
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	0018      	movs	r0, r3
 8002c12:	2314      	movs	r3, #20
 8002c14:	001a      	movs	r2, r3
 8002c16:	2100      	movs	r1, #0
 8002c18:	f003 fe67 	bl	80068ea <memset>
  if(huart->Instance==USART1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a18      	ldr	r2, [pc, #96]	; (8002c84 <HAL_UART_MspInit+0x80>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d12a      	bne.n	8002c7c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c26:	4b18      	ldr	r3, [pc, #96]	; (8002c88 <HAL_UART_MspInit+0x84>)
 8002c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2a:	4b17      	ldr	r3, [pc, #92]	; (8002c88 <HAL_UART_MspInit+0x84>)
 8002c2c:	2180      	movs	r1, #128	; 0x80
 8002c2e:	01c9      	lsls	r1, r1, #7
 8002c30:	430a      	orrs	r2, r1
 8002c32:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c34:	4b14      	ldr	r3, [pc, #80]	; (8002c88 <HAL_UART_MspInit+0x84>)
 8002c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c38:	4b13      	ldr	r3, [pc, #76]	; (8002c88 <HAL_UART_MspInit+0x84>)
 8002c3a:	2101      	movs	r1, #1
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <HAL_UART_MspInit+0x84>)
 8002c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c44:	2201      	movs	r2, #1
 8002c46:	4013      	ands	r3, r2
 8002c48:	60bb      	str	r3, [r7, #8]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c4c:	193b      	adds	r3, r7, r4
 8002c4e:	22c0      	movs	r2, #192	; 0xc0
 8002c50:	00d2      	lsls	r2, r2, #3
 8002c52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c54:	0021      	movs	r1, r4
 8002c56:	187b      	adds	r3, r7, r1
 8002c58:	2202      	movs	r2, #2
 8002c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5c:	187b      	adds	r3, r7, r1
 8002c5e:	2200      	movs	r2, #0
 8002c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	187b      	adds	r3, r7, r1
 8002c64:	2203      	movs	r2, #3
 8002c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002c68:	187b      	adds	r3, r7, r1
 8002c6a:	2204      	movs	r2, #4
 8002c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6e:	187a      	adds	r2, r7, r1
 8002c70:	23a0      	movs	r3, #160	; 0xa0
 8002c72:	05db      	lsls	r3, r3, #23
 8002c74:	0011      	movs	r1, r2
 8002c76:	0018      	movs	r0, r3
 8002c78:	f000 f9d0 	bl	800301c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c7c:	46c0      	nop			; (mov r8, r8)
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	b009      	add	sp, #36	; 0x24
 8002c82:	bd90      	pop	{r4, r7, pc}
 8002c84:	40013800 	.word	0x40013800
 8002c88:	40021000 	.word	0x40021000

08002c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002c90:	f002 f824 	bl	8004cdc <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c94:	e7fe      	b.n	8002c94 <NMI_Handler+0x8>

08002c96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c9a:	e7fe      	b.n	8002c9a <HardFault_Handler+0x4>

08002c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002ca0:	46c0      	nop			; (mov r8, r8)
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}

08002cb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002cb4:	f000 f8be 	bl	8002e34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <_sbrk+0x5c>)
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <_sbrk+0x60>)
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cd4:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <_sbrk+0x64>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d102      	bne.n	8002ce2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <_sbrk+0x64>)
 8002cde:	4a12      	ldr	r2, [pc, #72]	; (8002d28 <_sbrk+0x68>)
 8002ce0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <_sbrk+0x64>)
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	18d3      	adds	r3, r2, r3
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d207      	bcs.n	8002d00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002cf0:	f003 fdc8 	bl	8006884 <__errno>
 8002cf4:	0003      	movs	r3, r0
 8002cf6:	220c      	movs	r2, #12
 8002cf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	425b      	negs	r3, r3
 8002cfe:	e009      	b.n	8002d14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d00:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <_sbrk+0x64>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d06:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <_sbrk+0x64>)
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	18d2      	adds	r2, r2, r3
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <_sbrk+0x64>)
 8002d10:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002d12:	68fb      	ldr	r3, [r7, #12]
}
 8002d14:	0018      	movs	r0, r3
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b006      	add	sp, #24
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	20005000 	.word	0x20005000
 8002d20:	00000400 	.word	0x00000400
 8002d24:	200000a0 	.word	0x200000a0
 8002d28:	200001e8 	.word	0x200001e8

08002d2c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d30:	46c0      	nop			; (mov r8, r8)
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bd80      	pop	{r7, pc}
	...

08002d38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002d38:	480d      	ldr	r0, [pc, #52]	; (8002d70 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002d3a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d3c:	480d      	ldr	r0, [pc, #52]	; (8002d74 <LoopForever+0x6>)
  ldr r1, =_edata
 8002d3e:	490e      	ldr	r1, [pc, #56]	; (8002d78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002d40:	4a0e      	ldr	r2, [pc, #56]	; (8002d7c <LoopForever+0xe>)
  movs r3, #0
 8002d42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d44:	e002      	b.n	8002d4c <LoopCopyDataInit>

08002d46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d4a:	3304      	adds	r3, #4

08002d4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d50:	d3f9      	bcc.n	8002d46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d52:	4a0b      	ldr	r2, [pc, #44]	; (8002d80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002d54:	4c0b      	ldr	r4, [pc, #44]	; (8002d84 <LoopForever+0x16>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d58:	e001      	b.n	8002d5e <LoopFillZerobss>

08002d5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d5c:	3204      	adds	r2, #4

08002d5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d60:	d3fb      	bcc.n	8002d5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002d62:	f7ff ffe3 	bl	8002d2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d66:	f003 fd93 	bl	8006890 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d6a:	f7ff f899 	bl	8001ea0 <main>

08002d6e <LoopForever>:

LoopForever:
    b LoopForever
 8002d6e:	e7fe      	b.n	8002d6e <LoopForever>
   ldr   r0, =_estack
 8002d70:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002d74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d78:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002d7c:	08009368 	.word	0x08009368
  ldr r2, =_sbss
 8002d80:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002d84:	200001e8 	.word	0x200001e8

08002d88 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d88:	e7fe      	b.n	8002d88 <ADC1_COMP_IRQHandler>
	...

08002d8c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002d92:	1dfb      	adds	r3, r7, #7
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <HAL_Init+0x3c>)
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	4b0a      	ldr	r3, [pc, #40]	; (8002dc8 <HAL_Init+0x3c>)
 8002d9e:	2140      	movs	r1, #64	; 0x40
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002da4:	2001      	movs	r0, #1
 8002da6:	f000 f811 	bl	8002dcc <HAL_InitTick>
 8002daa:	1e03      	subs	r3, r0, #0
 8002dac:	d003      	beq.n	8002db6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002dae:	1dfb      	adds	r3, r7, #7
 8002db0:	2201      	movs	r2, #1
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	e001      	b.n	8002dba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002db6:	f7ff fe59 	bl	8002a6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002dba:	1dfb      	adds	r3, r7, #7
 8002dbc:	781b      	ldrb	r3, [r3, #0]
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b002      	add	sp, #8
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	46c0      	nop			; (mov r8, r8)
 8002dc8:	40022000 	.word	0x40022000

08002dcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dcc:	b590      	push	{r4, r7, lr}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dd4:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_InitTick+0x5c>)
 8002dd6:	681c      	ldr	r4, [r3, #0]
 8002dd8:	4b14      	ldr	r3, [pc, #80]	; (8002e2c <HAL_InitTick+0x60>)
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	0019      	movs	r1, r3
 8002dde:	23fa      	movs	r3, #250	; 0xfa
 8002de0:	0098      	lsls	r0, r3, #2
 8002de2:	f7fd f9a3 	bl	800012c <__udivsi3>
 8002de6:	0003      	movs	r3, r0
 8002de8:	0019      	movs	r1, r3
 8002dea:	0020      	movs	r0, r4
 8002dec:	f7fd f99e 	bl	800012c <__udivsi3>
 8002df0:	0003      	movs	r3, r0
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 f905 	bl	8003002 <HAL_SYSTICK_Config>
 8002df8:	1e03      	subs	r3, r0, #0
 8002dfa:	d001      	beq.n	8002e00 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e00f      	b.n	8002e20 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b03      	cmp	r3, #3
 8002e04:	d80b      	bhi.n	8002e1e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	425b      	negs	r3, r3
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	0018      	movs	r0, r3
 8002e10:	f000 f8e2 	bl	8002fd8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e14:	4b06      	ldr	r3, [pc, #24]	; (8002e30 <HAL_InitTick+0x64>)
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	e000      	b.n	8002e20 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
}
 8002e20:	0018      	movs	r0, r3
 8002e22:	46bd      	mov	sp, r7
 8002e24:	b003      	add	sp, #12
 8002e26:	bd90      	pop	{r4, r7, pc}
 8002e28:	20000008 	.word	0x20000008
 8002e2c:	20000010 	.word	0x20000010
 8002e30:	2000000c 	.word	0x2000000c

08002e34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e38:	4b05      	ldr	r3, [pc, #20]	; (8002e50 <HAL_IncTick+0x1c>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	001a      	movs	r2, r3
 8002e3e:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <HAL_IncTick+0x20>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	18d2      	adds	r2, r2, r3
 8002e44:	4b03      	ldr	r3, [pc, #12]	; (8002e54 <HAL_IncTick+0x20>)
 8002e46:	601a      	str	r2, [r3, #0]
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			; (mov r8, r8)
 8002e50:	20000010 	.word	0x20000010
 8002e54:	200001d4 	.word	0x200001d4

08002e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e5c:	4b02      	ldr	r3, [pc, #8]	; (8002e68 <HAL_GetTick+0x10>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	46c0      	nop			; (mov r8, r8)
 8002e68:	200001d4 	.word	0x200001d4

08002e6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e74:	f7ff fff0 	bl	8002e58 <HAL_GetTick>
 8002e78:	0003      	movs	r3, r0
 8002e7a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	3301      	adds	r3, #1
 8002e84:	d005      	beq.n	8002e92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e86:	4b0a      	ldr	r3, [pc, #40]	; (8002eb0 <HAL_Delay+0x44>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	001a      	movs	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	189b      	adds	r3, r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	f7ff ffe0 	bl	8002e58 <HAL_GetTick>
 8002e98:	0002      	movs	r2, r0
 8002e9a:	68bb      	ldr	r3, [r7, #8]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	429a      	cmp	r2, r3
 8002ea2:	d8f7      	bhi.n	8002e94 <HAL_Delay+0x28>
  {
  }
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b004      	add	sp, #16
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	20000010 	.word	0x20000010

08002eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b083      	sub	sp, #12
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	0002      	movs	r2, r0
 8002ebc:	6039      	str	r1, [r7, #0]
 8002ebe:	1dfb      	adds	r3, r7, #7
 8002ec0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002ec2:	1dfb      	adds	r3, r7, #7
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	2b7f      	cmp	r3, #127	; 0x7f
 8002ec8:	d828      	bhi.n	8002f1c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eca:	4a2f      	ldr	r2, [pc, #188]	; (8002f88 <__NVIC_SetPriority+0xd4>)
 8002ecc:	1dfb      	adds	r3, r7, #7
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b25b      	sxtb	r3, r3
 8002ed2:	089b      	lsrs	r3, r3, #2
 8002ed4:	33c0      	adds	r3, #192	; 0xc0
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	589b      	ldr	r3, [r3, r2]
 8002eda:	1dfa      	adds	r2, r7, #7
 8002edc:	7812      	ldrb	r2, [r2, #0]
 8002ede:	0011      	movs	r1, r2
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	400a      	ands	r2, r1
 8002ee4:	00d2      	lsls	r2, r2, #3
 8002ee6:	21ff      	movs	r1, #255	; 0xff
 8002ee8:	4091      	lsls	r1, r2
 8002eea:	000a      	movs	r2, r1
 8002eec:	43d2      	mvns	r2, r2
 8002eee:	401a      	ands	r2, r3
 8002ef0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	019b      	lsls	r3, r3, #6
 8002ef6:	22ff      	movs	r2, #255	; 0xff
 8002ef8:	401a      	ands	r2, r3
 8002efa:	1dfb      	adds	r3, r7, #7
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	0018      	movs	r0, r3
 8002f00:	2303      	movs	r3, #3
 8002f02:	4003      	ands	r3, r0
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f08:	481f      	ldr	r0, [pc, #124]	; (8002f88 <__NVIC_SetPriority+0xd4>)
 8002f0a:	1dfb      	adds	r3, r7, #7
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	b25b      	sxtb	r3, r3
 8002f10:	089b      	lsrs	r3, r3, #2
 8002f12:	430a      	orrs	r2, r1
 8002f14:	33c0      	adds	r3, #192	; 0xc0
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002f1a:	e031      	b.n	8002f80 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <__NVIC_SetPriority+0xd8>)
 8002f1e:	1dfb      	adds	r3, r7, #7
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	0019      	movs	r1, r3
 8002f24:	230f      	movs	r3, #15
 8002f26:	400b      	ands	r3, r1
 8002f28:	3b08      	subs	r3, #8
 8002f2a:	089b      	lsrs	r3, r3, #2
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	18d3      	adds	r3, r2, r3
 8002f32:	3304      	adds	r3, #4
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	1dfa      	adds	r2, r7, #7
 8002f38:	7812      	ldrb	r2, [r2, #0]
 8002f3a:	0011      	movs	r1, r2
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	400a      	ands	r2, r1
 8002f40:	00d2      	lsls	r2, r2, #3
 8002f42:	21ff      	movs	r1, #255	; 0xff
 8002f44:	4091      	lsls	r1, r2
 8002f46:	000a      	movs	r2, r1
 8002f48:	43d2      	mvns	r2, r2
 8002f4a:	401a      	ands	r2, r3
 8002f4c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	019b      	lsls	r3, r3, #6
 8002f52:	22ff      	movs	r2, #255	; 0xff
 8002f54:	401a      	ands	r2, r3
 8002f56:	1dfb      	adds	r3, r7, #7
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	0018      	movs	r0, r3
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	4003      	ands	r3, r0
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f64:	4809      	ldr	r0, [pc, #36]	; (8002f8c <__NVIC_SetPriority+0xd8>)
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	001c      	movs	r4, r3
 8002f6c:	230f      	movs	r3, #15
 8002f6e:	4023      	ands	r3, r4
 8002f70:	3b08      	subs	r3, #8
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	430a      	orrs	r2, r1
 8002f76:	3306      	adds	r3, #6
 8002f78:	009b      	lsls	r3, r3, #2
 8002f7a:	18c3      	adds	r3, r0, r3
 8002f7c:	3304      	adds	r3, #4
 8002f7e:	601a      	str	r2, [r3, #0]
}
 8002f80:	46c0      	nop			; (mov r8, r8)
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b003      	add	sp, #12
 8002f86:	bd90      	pop	{r4, r7, pc}
 8002f88:	e000e100 	.word	0xe000e100
 8002f8c:	e000ed00 	.word	0xe000ed00

08002f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	1e5a      	subs	r2, r3, #1
 8002f9c:	2380      	movs	r3, #128	; 0x80
 8002f9e:	045b      	lsls	r3, r3, #17
 8002fa0:	429a      	cmp	r2, r3
 8002fa2:	d301      	bcc.n	8002fa8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e010      	b.n	8002fca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fa8:	4b0a      	ldr	r3, [pc, #40]	; (8002fd4 <SysTick_Config+0x44>)
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	3a01      	subs	r2, #1
 8002fae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	425b      	negs	r3, r3
 8002fb4:	2103      	movs	r1, #3
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7ff ff7c 	bl	8002eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <SysTick_Config+0x44>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fc2:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <SysTick_Config+0x44>)
 8002fc4:	2207      	movs	r2, #7
 8002fc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	0018      	movs	r0, r3
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b002      	add	sp, #8
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			; (mov r8, r8)
 8002fd4:	e000e010 	.word	0xe000e010

08002fd8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	210f      	movs	r1, #15
 8002fe4:	187b      	adds	r3, r7, r1
 8002fe6:	1c02      	adds	r2, r0, #0
 8002fe8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	187b      	adds	r3, r7, r1
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	b25b      	sxtb	r3, r3
 8002ff2:	0011      	movs	r1, r2
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f7ff ff5d 	bl	8002eb4 <__NVIC_SetPriority>
}
 8002ffa:	46c0      	nop			; (mov r8, r8)
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}

08003002 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f7ff ffbf 	bl	8002f90 <SysTick_Config>
 8003012:	0003      	movs	r3, r0
}
 8003014:	0018      	movs	r0, r3
 8003016:	46bd      	mov	sp, r7
 8003018:	b002      	add	sp, #8
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800302e:	2300      	movs	r3, #0
 8003030:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8003032:	e155      	b.n	80032e0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2101      	movs	r1, #1
 800303a:	697a      	ldr	r2, [r7, #20]
 800303c:	4091      	lsls	r1, r2
 800303e:	000a      	movs	r2, r1
 8003040:	4013      	ands	r3, r2
 8003042:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d100      	bne.n	800304c <HAL_GPIO_Init+0x30>
 800304a:	e146      	b.n	80032da <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	2203      	movs	r2, #3
 8003052:	4013      	ands	r3, r2
 8003054:	2b01      	cmp	r3, #1
 8003056:	d005      	beq.n	8003064 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	2203      	movs	r2, #3
 800305e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003060:	2b02      	cmp	r3, #2
 8003062:	d130      	bne.n	80030c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	2203      	movs	r2, #3
 8003070:	409a      	lsls	r2, r3
 8003072:	0013      	movs	r3, r2
 8003074:	43da      	mvns	r2, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	409a      	lsls	r2, r3
 8003086:	0013      	movs	r3, r2
 8003088:	693a      	ldr	r2, [r7, #16]
 800308a:	4313      	orrs	r3, r2
 800308c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	693a      	ldr	r2, [r7, #16]
 8003092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800309a:	2201      	movs	r2, #1
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	409a      	lsls	r2, r3
 80030a0:	0013      	movs	r3, r2
 80030a2:	43da      	mvns	r2, r3
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4013      	ands	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	091b      	lsrs	r3, r3, #4
 80030b0:	2201      	movs	r2, #1
 80030b2:	401a      	ands	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	409a      	lsls	r2, r3
 80030b8:	0013      	movs	r3, r2
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2203      	movs	r2, #3
 80030cc:	4013      	ands	r3, r2
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d017      	beq.n	8003102 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	005b      	lsls	r3, r3, #1
 80030dc:	2203      	movs	r2, #3
 80030de:	409a      	lsls	r2, r3
 80030e0:	0013      	movs	r3, r2
 80030e2:	43da      	mvns	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	4013      	ands	r3, r2
 80030e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	005b      	lsls	r3, r3, #1
 80030f2:	409a      	lsls	r2, r3
 80030f4:	0013      	movs	r3, r2
 80030f6:	693a      	ldr	r2, [r7, #16]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	693a      	ldr	r2, [r7, #16]
 8003100:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	2203      	movs	r2, #3
 8003108:	4013      	ands	r3, r2
 800310a:	2b02      	cmp	r3, #2
 800310c:	d123      	bne.n	8003156 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	08da      	lsrs	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	3208      	adds	r2, #8
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	58d3      	ldr	r3, [r2, r3]
 800311a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	2207      	movs	r2, #7
 8003120:	4013      	ands	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	220f      	movs	r2, #15
 8003126:	409a      	lsls	r2, r3
 8003128:	0013      	movs	r3, r2
 800312a:	43da      	mvns	r2, r3
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	4013      	ands	r3, r2
 8003130:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	691a      	ldr	r2, [r3, #16]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2107      	movs	r1, #7
 800313a:	400b      	ands	r3, r1
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	409a      	lsls	r2, r3
 8003140:	0013      	movs	r3, r2
 8003142:	693a      	ldr	r2, [r7, #16]
 8003144:	4313      	orrs	r3, r2
 8003146:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	0092      	lsls	r2, r2, #2
 8003152:	6939      	ldr	r1, [r7, #16]
 8003154:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	2203      	movs	r2, #3
 8003162:	409a      	lsls	r2, r3
 8003164:	0013      	movs	r3, r2
 8003166:	43da      	mvns	r2, r3
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	4013      	ands	r3, r2
 800316c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2203      	movs	r2, #3
 8003174:	401a      	ands	r2, r3
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	409a      	lsls	r2, r3
 800317c:	0013      	movs	r3, r2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	23c0      	movs	r3, #192	; 0xc0
 8003190:	029b      	lsls	r3, r3, #10
 8003192:	4013      	ands	r3, r2
 8003194:	d100      	bne.n	8003198 <HAL_GPIO_Init+0x17c>
 8003196:	e0a0      	b.n	80032da <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003198:	4b57      	ldr	r3, [pc, #348]	; (80032f8 <HAL_GPIO_Init+0x2dc>)
 800319a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319c:	4b56      	ldr	r3, [pc, #344]	; (80032f8 <HAL_GPIO_Init+0x2dc>)
 800319e:	2101      	movs	r1, #1
 80031a0:	430a      	orrs	r2, r1
 80031a2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80031a4:	4a55      	ldr	r2, [pc, #340]	; (80032fc <HAL_GPIO_Init+0x2e0>)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	089b      	lsrs	r3, r3, #2
 80031aa:	3302      	adds	r3, #2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	589b      	ldr	r3, [r3, r2]
 80031b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2203      	movs	r2, #3
 80031b6:	4013      	ands	r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	220f      	movs	r2, #15
 80031bc:	409a      	lsls	r2, r3
 80031be:	0013      	movs	r3, r2
 80031c0:	43da      	mvns	r2, r3
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80031c8:	687a      	ldr	r2, [r7, #4]
 80031ca:	23a0      	movs	r3, #160	; 0xa0
 80031cc:	05db      	lsls	r3, r3, #23
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d01f      	beq.n	8003212 <HAL_GPIO_Init+0x1f6>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4a      	ldr	r2, [pc, #296]	; (8003300 <HAL_GPIO_Init+0x2e4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d019      	beq.n	800320e <HAL_GPIO_Init+0x1f2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a49      	ldr	r2, [pc, #292]	; (8003304 <HAL_GPIO_Init+0x2e8>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d013      	beq.n	800320a <HAL_GPIO_Init+0x1ee>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a48      	ldr	r2, [pc, #288]	; (8003308 <HAL_GPIO_Init+0x2ec>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d00d      	beq.n	8003206 <HAL_GPIO_Init+0x1ea>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a47      	ldr	r2, [pc, #284]	; (800330c <HAL_GPIO_Init+0x2f0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d007      	beq.n	8003202 <HAL_GPIO_Init+0x1e6>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a46      	ldr	r2, [pc, #280]	; (8003310 <HAL_GPIO_Init+0x2f4>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d101      	bne.n	80031fe <HAL_GPIO_Init+0x1e2>
 80031fa:	2305      	movs	r3, #5
 80031fc:	e00a      	b.n	8003214 <HAL_GPIO_Init+0x1f8>
 80031fe:	2306      	movs	r3, #6
 8003200:	e008      	b.n	8003214 <HAL_GPIO_Init+0x1f8>
 8003202:	2304      	movs	r3, #4
 8003204:	e006      	b.n	8003214 <HAL_GPIO_Init+0x1f8>
 8003206:	2303      	movs	r3, #3
 8003208:	e004      	b.n	8003214 <HAL_GPIO_Init+0x1f8>
 800320a:	2302      	movs	r3, #2
 800320c:	e002      	b.n	8003214 <HAL_GPIO_Init+0x1f8>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_GPIO_Init+0x1f8>
 8003212:	2300      	movs	r3, #0
 8003214:	697a      	ldr	r2, [r7, #20]
 8003216:	2103      	movs	r1, #3
 8003218:	400a      	ands	r2, r1
 800321a:	0092      	lsls	r2, r2, #2
 800321c:	4093      	lsls	r3, r2
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003224:	4935      	ldr	r1, [pc, #212]	; (80032fc <HAL_GPIO_Init+0x2e0>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	3302      	adds	r3, #2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003232:	4b38      	ldr	r3, [pc, #224]	; (8003314 <HAL_GPIO_Init+0x2f8>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	43da      	mvns	r2, r3
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	025b      	lsls	r3, r3, #9
 800324a:	4013      	ands	r3, r2
 800324c:	d003      	beq.n	8003256 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800324e:	693a      	ldr	r2, [r7, #16]
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4313      	orrs	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003256:	4b2f      	ldr	r3, [pc, #188]	; (8003314 <HAL_GPIO_Init+0x2f8>)
 8003258:	693a      	ldr	r2, [r7, #16]
 800325a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800325c:	4b2d      	ldr	r3, [pc, #180]	; (8003314 <HAL_GPIO_Init+0x2f8>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	43da      	mvns	r2, r3
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4013      	ands	r3, r2
 800326a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	2380      	movs	r3, #128	; 0x80
 8003272:	029b      	lsls	r3, r3, #10
 8003274:	4013      	ands	r3, r2
 8003276:	d003      	beq.n	8003280 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8003280:	4b24      	ldr	r3, [pc, #144]	; (8003314 <HAL_GPIO_Init+0x2f8>)
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003286:	4b23      	ldr	r3, [pc, #140]	; (8003314 <HAL_GPIO_Init+0x2f8>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	43da      	mvns	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	4013      	ands	r3, r2
 8003294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	685a      	ldr	r2, [r3, #4]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	035b      	lsls	r3, r3, #13
 800329e:	4013      	ands	r3, r2
 80032a0:	d003      	beq.n	80032aa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80032a2:	693a      	ldr	r2, [r7, #16]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80032aa:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <HAL_GPIO_Init+0x2f8>)
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80032b0:	4b18      	ldr	r3, [pc, #96]	; (8003314 <HAL_GPIO_Init+0x2f8>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	43da      	mvns	r2, r3
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	4013      	ands	r3, r2
 80032be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685a      	ldr	r2, [r3, #4]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	039b      	lsls	r3, r3, #14
 80032c8:	4013      	ands	r3, r2
 80032ca:	d003      	beq.n	80032d4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80032cc:	693a      	ldr	r2, [r7, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80032d4:	4b0f      	ldr	r3, [pc, #60]	; (8003314 <HAL_GPIO_Init+0x2f8>)
 80032d6:	693a      	ldr	r2, [r7, #16]
 80032d8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	3301      	adds	r3, #1
 80032de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	40da      	lsrs	r2, r3
 80032e8:	1e13      	subs	r3, r2, #0
 80032ea:	d000      	beq.n	80032ee <HAL_GPIO_Init+0x2d2>
 80032ec:	e6a2      	b.n	8003034 <HAL_GPIO_Init+0x18>
  }
}
 80032ee:	46c0      	nop			; (mov r8, r8)
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b006      	add	sp, #24
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40010000 	.word	0x40010000
 8003300:	50000400 	.word	0x50000400
 8003304:	50000800 	.word	0x50000800
 8003308:	50000c00 	.word	0x50000c00
 800330c:	50001000 	.word	0x50001000
 8003310:	50001c00 	.word	0x50001c00
 8003314:	40010400 	.word	0x40010400

08003318 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
 8003320:	000a      	movs	r2, r1
 8003322:	1cbb      	adds	r3, r7, #2
 8003324:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	1cba      	adds	r2, r7, #2
 800332c:	8812      	ldrh	r2, [r2, #0]
 800332e:	4013      	ands	r3, r2
 8003330:	d004      	beq.n	800333c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003332:	230f      	movs	r3, #15
 8003334:	18fb      	adds	r3, r7, r3
 8003336:	2201      	movs	r2, #1
 8003338:	701a      	strb	r2, [r3, #0]
 800333a:	e003      	b.n	8003344 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800333c:	230f      	movs	r3, #15
 800333e:	18fb      	adds	r3, r7, r3
 8003340:	2200      	movs	r2, #0
 8003342:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003344:	230f      	movs	r3, #15
 8003346:	18fb      	adds	r3, r7, r3
 8003348:	781b      	ldrb	r3, [r3, #0]
}
 800334a:	0018      	movs	r0, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	b004      	add	sp, #16
 8003350:	bd80      	pop	{r7, pc}

08003352 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003352:	b580      	push	{r7, lr}
 8003354:	b082      	sub	sp, #8
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
 800335a:	0008      	movs	r0, r1
 800335c:	0011      	movs	r1, r2
 800335e:	1cbb      	adds	r3, r7, #2
 8003360:	1c02      	adds	r2, r0, #0
 8003362:	801a      	strh	r2, [r3, #0]
 8003364:	1c7b      	adds	r3, r7, #1
 8003366:	1c0a      	adds	r2, r1, #0
 8003368:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800336a:	1c7b      	adds	r3, r7, #1
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d004      	beq.n	800337c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003372:	1cbb      	adds	r3, r7, #2
 8003374:	881a      	ldrh	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800337a:	e003      	b.n	8003384 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800337c:	1cbb      	adds	r3, r7, #2
 800337e:	881a      	ldrh	r2, [r3, #0]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003384:	46c0      	nop			; (mov r8, r8)
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}

0800338c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e082      	b.n	80034a4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2241      	movs	r2, #65	; 0x41
 80033a2:	5c9b      	ldrb	r3, [r3, r2]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2240      	movs	r2, #64	; 0x40
 80033ae:	2100      	movs	r1, #0
 80033b0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	0018      	movs	r0, r3
 80033b6:	f7ff fb6d 	bl	8002a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2241      	movs	r2, #65	; 0x41
 80033be:	2124      	movs	r1, #36	; 0x24
 80033c0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	2101      	movs	r1, #1
 80033ce:	438a      	bics	r2, r1
 80033d0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	685a      	ldr	r2, [r3, #4]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4934      	ldr	r1, [pc, #208]	; (80034ac <HAL_I2C_Init+0x120>)
 80033dc:	400a      	ands	r2, r1
 80033de:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4931      	ldr	r1, [pc, #196]	; (80034b0 <HAL_I2C_Init+0x124>)
 80033ec:	400a      	ands	r2, r1
 80033ee:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d108      	bne.n	800340a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	2180      	movs	r1, #128	; 0x80
 8003402:	0209      	lsls	r1, r1, #8
 8003404:	430a      	orrs	r2, r1
 8003406:	609a      	str	r2, [r3, #8]
 8003408:	e007      	b.n	800341a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689a      	ldr	r2, [r3, #8]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2184      	movs	r1, #132	; 0x84
 8003414:	0209      	lsls	r1, r1, #8
 8003416:	430a      	orrs	r2, r1
 8003418:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d104      	bne.n	800342c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2280      	movs	r2, #128	; 0x80
 8003428:	0112      	lsls	r2, r2, #4
 800342a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	491f      	ldr	r1, [pc, #124]	; (80034b4 <HAL_I2C_Init+0x128>)
 8003438:	430a      	orrs	r2, r1
 800343a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68da      	ldr	r2, [r3, #12]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	491a      	ldr	r1, [pc, #104]	; (80034b0 <HAL_I2C_Init+0x124>)
 8003448:	400a      	ands	r2, r1
 800344a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691a      	ldr	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	695b      	ldr	r3, [r3, #20]
 8003454:	431a      	orrs	r2, r3
 8003456:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	699b      	ldr	r3, [r3, #24]
 800345c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	430a      	orrs	r2, r1
 8003464:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69d9      	ldr	r1, [r3, #28]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6a1a      	ldr	r2, [r3, #32]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	430a      	orrs	r2, r1
 8003474:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2101      	movs	r1, #1
 8003482:	430a      	orrs	r2, r1
 8003484:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2241      	movs	r2, #65	; 0x41
 8003490:	2120      	movs	r1, #32
 8003492:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2242      	movs	r2, #66	; 0x42
 800349e:	2100      	movs	r1, #0
 80034a0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034a2:	2300      	movs	r3, #0
}
 80034a4:	0018      	movs	r0, r3
 80034a6:	46bd      	mov	sp, r7
 80034a8:	b002      	add	sp, #8
 80034aa:	bd80      	pop	{r7, pc}
 80034ac:	f0ffffff 	.word	0xf0ffffff
 80034b0:	ffff7fff 	.word	0xffff7fff
 80034b4:	02008000 	.word	0x02008000

080034b8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af02      	add	r7, sp, #8
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	000c      	movs	r4, r1
 80034c2:	0010      	movs	r0, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	230a      	movs	r3, #10
 80034c8:	18fb      	adds	r3, r7, r3
 80034ca:	1c22      	adds	r2, r4, #0
 80034cc:	801a      	strh	r2, [r3, #0]
 80034ce:	2308      	movs	r3, #8
 80034d0:	18fb      	adds	r3, r7, r3
 80034d2:	1c02      	adds	r2, r0, #0
 80034d4:	801a      	strh	r2, [r3, #0]
 80034d6:	1dbb      	adds	r3, r7, #6
 80034d8:	1c0a      	adds	r2, r1, #0
 80034da:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2241      	movs	r2, #65	; 0x41
 80034e0:	5c9b      	ldrb	r3, [r3, r2]
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b20      	cmp	r3, #32
 80034e6:	d000      	beq.n	80034ea <HAL_I2C_Mem_Write+0x32>
 80034e8:	e10c      	b.n	8003704 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d004      	beq.n	80034fa <HAL_I2C_Mem_Write+0x42>
 80034f0:	232c      	movs	r3, #44	; 0x2c
 80034f2:	18fb      	adds	r3, r7, r3
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d105      	bne.n	8003506 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2280      	movs	r2, #128	; 0x80
 80034fe:	0092      	lsls	r2, r2, #2
 8003500:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e0ff      	b.n	8003706 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2240      	movs	r2, #64	; 0x40
 800350a:	5c9b      	ldrb	r3, [r3, r2]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d101      	bne.n	8003514 <HAL_I2C_Mem_Write+0x5c>
 8003510:	2302      	movs	r3, #2
 8003512:	e0f8      	b.n	8003706 <HAL_I2C_Mem_Write+0x24e>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2240      	movs	r2, #64	; 0x40
 8003518:	2101      	movs	r1, #1
 800351a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800351c:	f7ff fc9c 	bl	8002e58 <HAL_GetTick>
 8003520:	0003      	movs	r3, r0
 8003522:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003524:	2380      	movs	r3, #128	; 0x80
 8003526:	0219      	lsls	r1, r3, #8
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	9300      	str	r3, [sp, #0]
 800352e:	2319      	movs	r3, #25
 8003530:	2201      	movs	r2, #1
 8003532:	f000 fc25 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e0e3      	b.n	8003706 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2241      	movs	r2, #65	; 0x41
 8003542:	2121      	movs	r1, #33	; 0x21
 8003544:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2242      	movs	r2, #66	; 0x42
 800354a:	2140      	movs	r1, #64	; 0x40
 800354c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2200      	movs	r2, #0
 8003552:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003558:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	222c      	movs	r2, #44	; 0x2c
 800355e:	18ba      	adds	r2, r7, r2
 8003560:	8812      	ldrh	r2, [r2, #0]
 8003562:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800356a:	1dbb      	adds	r3, r7, #6
 800356c:	881c      	ldrh	r4, [r3, #0]
 800356e:	2308      	movs	r3, #8
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	881a      	ldrh	r2, [r3, #0]
 8003574:	230a      	movs	r3, #10
 8003576:	18fb      	adds	r3, r7, r3
 8003578:	8819      	ldrh	r1, [r3, #0]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	0023      	movs	r3, r4
 8003586:	f000 fb13 	bl	8003bb0 <I2C_RequestMemoryWrite>
 800358a:	1e03      	subs	r3, r0, #0
 800358c:	d005      	beq.n	800359a <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2240      	movs	r2, #64	; 0x40
 8003592:	2100      	movs	r1, #0
 8003594:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e0b5      	b.n	8003706 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800359e:	b29b      	uxth	r3, r3
 80035a0:	2bff      	cmp	r3, #255	; 0xff
 80035a2:	d911      	bls.n	80035c8 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	22ff      	movs	r2, #255	; 0xff
 80035a8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	2380      	movs	r3, #128	; 0x80
 80035b2:	045c      	lsls	r4, r3, #17
 80035b4:	230a      	movs	r3, #10
 80035b6:	18fb      	adds	r3, r7, r3
 80035b8:	8819      	ldrh	r1, [r3, #0]
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	2300      	movs	r3, #0
 80035be:	9300      	str	r3, [sp, #0]
 80035c0:	0023      	movs	r3, r4
 80035c2:	f000 fd11 	bl	8003fe8 <I2C_TransferConfig>
 80035c6:	e012      	b.n	80035ee <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035cc:	b29a      	uxth	r2, r3
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035d6:	b2da      	uxtb	r2, r3
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	049c      	lsls	r4, r3, #18
 80035dc:	230a      	movs	r3, #10
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	8819      	ldrh	r1, [r3, #0]
 80035e2:	68f8      	ldr	r0, [r7, #12]
 80035e4:	2300      	movs	r3, #0
 80035e6:	9300      	str	r3, [sp, #0]
 80035e8:	0023      	movs	r3, r4
 80035ea:	f000 fcfd 	bl	8003fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035ee:	697a      	ldr	r2, [r7, #20]
 80035f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	0018      	movs	r0, r3
 80035f6:	f000 fc02 	bl	8003dfe <I2C_WaitOnTXISFlagUntilTimeout>
 80035fa:	1e03      	subs	r3, r0, #0
 80035fc:	d001      	beq.n	8003602 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e081      	b.n	8003706 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003606:	781a      	ldrb	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003612:	1c5a      	adds	r2, r3, #1
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800361c:	b29b      	uxth	r3, r3
 800361e:	3b01      	subs	r3, #1
 8003620:	b29a      	uxth	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003636:	b29b      	uxth	r3, r3
 8003638:	2b00      	cmp	r3, #0
 800363a:	d03a      	beq.n	80036b2 <HAL_I2C_Mem_Write+0x1fa>
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003640:	2b00      	cmp	r3, #0
 8003642:	d136      	bne.n	80036b2 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003644:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	9300      	str	r3, [sp, #0]
 800364c:	0013      	movs	r3, r2
 800364e:	2200      	movs	r2, #0
 8003650:	2180      	movs	r1, #128	; 0x80
 8003652:	f000 fb95 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d001      	beq.n	800365e <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	e053      	b.n	8003706 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003662:	b29b      	uxth	r3, r3
 8003664:	2bff      	cmp	r3, #255	; 0xff
 8003666:	d911      	bls.n	800368c <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	22ff      	movs	r2, #255	; 0xff
 800366c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003672:	b2da      	uxtb	r2, r3
 8003674:	2380      	movs	r3, #128	; 0x80
 8003676:	045c      	lsls	r4, r3, #17
 8003678:	230a      	movs	r3, #10
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	8819      	ldrh	r1, [r3, #0]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	2300      	movs	r3, #0
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	0023      	movs	r3, r4
 8003686:	f000 fcaf 	bl	8003fe8 <I2C_TransferConfig>
 800368a:	e012      	b.n	80036b2 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003690:	b29a      	uxth	r2, r3
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800369a:	b2da      	uxtb	r2, r3
 800369c:	2380      	movs	r3, #128	; 0x80
 800369e:	049c      	lsls	r4, r3, #18
 80036a0:	230a      	movs	r3, #10
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	8819      	ldrh	r1, [r3, #0]
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	2300      	movs	r3, #0
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	0023      	movs	r3, r4
 80036ae:	f000 fc9b 	bl	8003fe8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d198      	bne.n	80035ee <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	0018      	movs	r0, r3
 80036c4:	f000 fbda 	bl	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 80036c8:	1e03      	subs	r3, r0, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e01a      	b.n	8003706 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2220      	movs	r2, #32
 80036d6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	685a      	ldr	r2, [r3, #4]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	490b      	ldr	r1, [pc, #44]	; (8003710 <HAL_I2C_Mem_Write+0x258>)
 80036e4:	400a      	ands	r2, r1
 80036e6:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2241      	movs	r2, #65	; 0x41
 80036ec:	2120      	movs	r1, #32
 80036ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2242      	movs	r2, #66	; 0x42
 80036f4:	2100      	movs	r1, #0
 80036f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2240      	movs	r2, #64	; 0x40
 80036fc:	2100      	movs	r1, #0
 80036fe:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	0018      	movs	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	b007      	add	sp, #28
 800370c:	bd90      	pop	{r4, r7, pc}
 800370e:	46c0      	nop			; (mov r8, r8)
 8003710:	fe00e800 	.word	0xfe00e800

08003714 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003714:	b590      	push	{r4, r7, lr}
 8003716:	b089      	sub	sp, #36	; 0x24
 8003718:	af02      	add	r7, sp, #8
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	000c      	movs	r4, r1
 800371e:	0010      	movs	r0, r2
 8003720:	0019      	movs	r1, r3
 8003722:	230a      	movs	r3, #10
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	1c22      	adds	r2, r4, #0
 8003728:	801a      	strh	r2, [r3, #0]
 800372a:	2308      	movs	r3, #8
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	1c02      	adds	r2, r0, #0
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	1dbb      	adds	r3, r7, #6
 8003734:	1c0a      	adds	r2, r1, #0
 8003736:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2241      	movs	r2, #65	; 0x41
 800373c:	5c9b      	ldrb	r3, [r3, r2]
 800373e:	b2db      	uxtb	r3, r3
 8003740:	2b20      	cmp	r3, #32
 8003742:	d000      	beq.n	8003746 <HAL_I2C_Mem_Read+0x32>
 8003744:	e110      	b.n	8003968 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d004      	beq.n	8003756 <HAL_I2C_Mem_Read+0x42>
 800374c:	232c      	movs	r3, #44	; 0x2c
 800374e:	18fb      	adds	r3, r7, r3
 8003750:	881b      	ldrh	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d105      	bne.n	8003762 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2280      	movs	r2, #128	; 0x80
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e103      	b.n	800396a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2240      	movs	r2, #64	; 0x40
 8003766:	5c9b      	ldrb	r3, [r3, r2]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d101      	bne.n	8003770 <HAL_I2C_Mem_Read+0x5c>
 800376c:	2302      	movs	r3, #2
 800376e:	e0fc      	b.n	800396a <HAL_I2C_Mem_Read+0x256>
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2240      	movs	r2, #64	; 0x40
 8003774:	2101      	movs	r1, #1
 8003776:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003778:	f7ff fb6e 	bl	8002e58 <HAL_GetTick>
 800377c:	0003      	movs	r3, r0
 800377e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	0219      	lsls	r1, r3, #8
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2319      	movs	r3, #25
 800378c:	2201      	movs	r2, #1
 800378e:	f000 faf7 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003792:	1e03      	subs	r3, r0, #0
 8003794:	d001      	beq.n	800379a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e0e7      	b.n	800396a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2241      	movs	r2, #65	; 0x41
 800379e:	2122      	movs	r1, #34	; 0x22
 80037a0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2242      	movs	r2, #66	; 0x42
 80037a6:	2140      	movs	r1, #64	; 0x40
 80037a8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	222c      	movs	r2, #44	; 0x2c
 80037ba:	18ba      	adds	r2, r7, r2
 80037bc:	8812      	ldrh	r2, [r2, #0]
 80037be:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037c6:	1dbb      	adds	r3, r7, #6
 80037c8:	881c      	ldrh	r4, [r3, #0]
 80037ca:	2308      	movs	r3, #8
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	881a      	ldrh	r2, [r3, #0]
 80037d0:	230a      	movs	r3, #10
 80037d2:	18fb      	adds	r3, r7, r3
 80037d4:	8819      	ldrh	r1, [r3, #0]
 80037d6:	68f8      	ldr	r0, [r7, #12]
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	9301      	str	r3, [sp, #4]
 80037dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037de:	9300      	str	r3, [sp, #0]
 80037e0:	0023      	movs	r3, r4
 80037e2:	f000 fa49 	bl	8003c78 <I2C_RequestMemoryRead>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	2240      	movs	r2, #64	; 0x40
 80037ee:	2100      	movs	r1, #0
 80037f0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e0b9      	b.n	800396a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	2bff      	cmp	r3, #255	; 0xff
 80037fe:	d911      	bls.n	8003824 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	22ff      	movs	r2, #255	; 0xff
 8003804:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800380a:	b2da      	uxtb	r2, r3
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	045c      	lsls	r4, r3, #17
 8003810:	230a      	movs	r3, #10
 8003812:	18fb      	adds	r3, r7, r3
 8003814:	8819      	ldrh	r1, [r3, #0]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	4b56      	ldr	r3, [pc, #344]	; (8003974 <HAL_I2C_Mem_Read+0x260>)
 800381a:	9300      	str	r3, [sp, #0]
 800381c:	0023      	movs	r3, r4
 800381e:	f000 fbe3 	bl	8003fe8 <I2C_TransferConfig>
 8003822:	e012      	b.n	800384a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003828:	b29a      	uxth	r2, r3
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003832:	b2da      	uxtb	r2, r3
 8003834:	2380      	movs	r3, #128	; 0x80
 8003836:	049c      	lsls	r4, r3, #18
 8003838:	230a      	movs	r3, #10
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	8819      	ldrh	r1, [r3, #0]
 800383e:	68f8      	ldr	r0, [r7, #12]
 8003840:	4b4c      	ldr	r3, [pc, #304]	; (8003974 <HAL_I2C_Mem_Read+0x260>)
 8003842:	9300      	str	r3, [sp, #0]
 8003844:	0023      	movs	r3, r4
 8003846:	f000 fbcf 	bl	8003fe8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800384a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	9300      	str	r3, [sp, #0]
 8003852:	0013      	movs	r3, r2
 8003854:	2200      	movs	r2, #0
 8003856:	2104      	movs	r1, #4
 8003858:	f000 fa92 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 800385c:	1e03      	subs	r3, r0, #0
 800385e:	d001      	beq.n	8003864 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e082      	b.n	800396a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386e:	b2d2      	uxtb	r2, r2
 8003870:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003876:	1c5a      	adds	r2, r3, #1
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003880:	3b01      	subs	r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29a      	uxth	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d03a      	beq.n	8003916 <HAL_I2C_Mem_Read+0x202>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d136      	bne.n	8003916 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80038a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	0013      	movs	r3, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	2180      	movs	r1, #128	; 0x80
 80038b6:	f000 fa63 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 80038ba:	1e03      	subs	r3, r0, #0
 80038bc:	d001      	beq.n	80038c2 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e053      	b.n	800396a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2bff      	cmp	r3, #255	; 0xff
 80038ca:	d911      	bls.n	80038f0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	22ff      	movs	r2, #255	; 0xff
 80038d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	045c      	lsls	r4, r3, #17
 80038dc:	230a      	movs	r3, #10
 80038de:	18fb      	adds	r3, r7, r3
 80038e0:	8819      	ldrh	r1, [r3, #0]
 80038e2:	68f8      	ldr	r0, [r7, #12]
 80038e4:	2300      	movs	r3, #0
 80038e6:	9300      	str	r3, [sp, #0]
 80038e8:	0023      	movs	r3, r4
 80038ea:	f000 fb7d 	bl	8003fe8 <I2C_TransferConfig>
 80038ee:	e012      	b.n	8003916 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29a      	uxth	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	b2da      	uxtb	r2, r3
 8003900:	2380      	movs	r3, #128	; 0x80
 8003902:	049c      	lsls	r4, r3, #18
 8003904:	230a      	movs	r3, #10
 8003906:	18fb      	adds	r3, r7, r3
 8003908:	8819      	ldrh	r1, [r3, #0]
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	2300      	movs	r3, #0
 800390e:	9300      	str	r3, [sp, #0]
 8003910:	0023      	movs	r3, r4
 8003912:	f000 fb69 	bl	8003fe8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d194      	bne.n	800384a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003920:	697a      	ldr	r2, [r7, #20]
 8003922:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	0018      	movs	r0, r3
 8003928:	f000 faa8 	bl	8003e7c <I2C_WaitOnSTOPFlagUntilTimeout>
 800392c:	1e03      	subs	r3, r0, #0
 800392e:	d001      	beq.n	8003934 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e01a      	b.n	800396a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2220      	movs	r2, #32
 800393a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	490c      	ldr	r1, [pc, #48]	; (8003978 <HAL_I2C_Mem_Read+0x264>)
 8003948:	400a      	ands	r2, r1
 800394a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2241      	movs	r2, #65	; 0x41
 8003950:	2120      	movs	r1, #32
 8003952:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2242      	movs	r2, #66	; 0x42
 8003958:	2100      	movs	r1, #0
 800395a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2240      	movs	r2, #64	; 0x40
 8003960:	2100      	movs	r1, #0
 8003962:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003964:	2300      	movs	r3, #0
 8003966:	e000      	b.n	800396a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8003968:	2302      	movs	r3, #2
  }
}
 800396a:	0018      	movs	r0, r3
 800396c:	46bd      	mov	sp, r7
 800396e:	b007      	add	sp, #28
 8003970:	bd90      	pop	{r4, r7, pc}
 8003972:	46c0      	nop			; (mov r8, r8)
 8003974:	80002400 	.word	0x80002400
 8003978:	fe00e800 	.word	0xfe00e800

0800397c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b08a      	sub	sp, #40	; 0x28
 8003980:	af02      	add	r7, sp, #8
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	607a      	str	r2, [r7, #4]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	230a      	movs	r3, #10
 800398a:	18fb      	adds	r3, r7, r3
 800398c:	1c0a      	adds	r2, r1, #0
 800398e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2241      	movs	r2, #65	; 0x41
 8003998:	5c9b      	ldrb	r3, [r3, r2]
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b20      	cmp	r3, #32
 800399e:	d000      	beq.n	80039a2 <HAL_I2C_IsDeviceReady+0x26>
 80039a0:	e0fe      	b.n	8003ba0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	699a      	ldr	r2, [r3, #24]
 80039a8:	2380      	movs	r3, #128	; 0x80
 80039aa:	021b      	lsls	r3, r3, #8
 80039ac:	401a      	ands	r2, r3
 80039ae:	2380      	movs	r3, #128	; 0x80
 80039b0:	021b      	lsls	r3, r3, #8
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d101      	bne.n	80039ba <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0f3      	b.n	8003ba2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2240      	movs	r2, #64	; 0x40
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_I2C_IsDeviceReady+0x4c>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e0ec      	b.n	8003ba2 <HAL_I2C_IsDeviceReady+0x226>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2240      	movs	r2, #64	; 0x40
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2241      	movs	r2, #65	; 0x41
 80039d4:	2124      	movs	r1, #36	; 0x24
 80039d6:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d107      	bne.n	80039f6 <HAL_I2C_IsDeviceReady+0x7a>
 80039e6:	230a      	movs	r3, #10
 80039e8:	18fb      	adds	r3, r7, r3
 80039ea:	881b      	ldrh	r3, [r3, #0]
 80039ec:	059b      	lsls	r3, r3, #22
 80039ee:	0d9b      	lsrs	r3, r3, #22
 80039f0:	4a6e      	ldr	r2, [pc, #440]	; (8003bac <HAL_I2C_IsDeviceReady+0x230>)
 80039f2:	431a      	orrs	r2, r3
 80039f4:	e007      	b.n	8003a06 <HAL_I2C_IsDeviceReady+0x8a>
 80039f6:	230a      	movs	r3, #10
 80039f8:	18fb      	adds	r3, r7, r3
 80039fa:	881b      	ldrh	r3, [r3, #0]
 80039fc:	059b      	lsls	r3, r3, #22
 80039fe:	0d9b      	lsrs	r3, r3, #22
 8003a00:	22a0      	movs	r2, #160	; 0xa0
 8003a02:	0192      	lsls	r2, r2, #6
 8003a04:	431a      	orrs	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8003a0c:	f7ff fa24 	bl	8002e58 <HAL_GetTick>
 8003a10:	0003      	movs	r3, r0
 8003a12:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699b      	ldr	r3, [r3, #24]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	3b20      	subs	r3, #32
 8003a20:	425a      	negs	r2, r3
 8003a22:	4153      	adcs	r3, r2
 8003a24:	b2da      	uxtb	r2, r3
 8003a26:	231f      	movs	r3, #31
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	2210      	movs	r2, #16
 8003a34:	4013      	ands	r3, r2
 8003a36:	3b10      	subs	r3, #16
 8003a38:	425a      	negs	r2, r3
 8003a3a:	4153      	adcs	r3, r2
 8003a3c:	b2da      	uxtb	r2, r3
 8003a3e:	231e      	movs	r3, #30
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a44:	e035      	b.n	8003ab2 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	d01a      	beq.n	8003a82 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003a4c:	f7ff fa04 	bl	8002e58 <HAL_GetTick>
 8003a50:	0002      	movs	r2, r0
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	683a      	ldr	r2, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d302      	bcc.n	8003a62 <HAL_I2C_IsDeviceReady+0xe6>
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10f      	bne.n	8003a82 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2241      	movs	r2, #65	; 0x41
 8003a66:	2120      	movs	r1, #32
 8003a68:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	2220      	movs	r2, #32
 8003a70:	431a      	orrs	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2240      	movs	r2, #64	; 0x40
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e08f      	b.n	8003ba2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	699b      	ldr	r3, [r3, #24]
 8003a88:	2220      	movs	r2, #32
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	3b20      	subs	r3, #32
 8003a8e:	425a      	negs	r2, r3
 8003a90:	4153      	adcs	r3, r2
 8003a92:	b2da      	uxtb	r2, r3
 8003a94:	231f      	movs	r3, #31
 8003a96:	18fb      	adds	r3, r7, r3
 8003a98:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	2210      	movs	r2, #16
 8003aa2:	4013      	ands	r3, r2
 8003aa4:	3b10      	subs	r3, #16
 8003aa6:	425a      	negs	r2, r3
 8003aa8:	4153      	adcs	r3, r2
 8003aaa:	b2da      	uxtb	r2, r3
 8003aac:	231e      	movs	r3, #30
 8003aae:	18fb      	adds	r3, r7, r3
 8003ab0:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003ab2:	231f      	movs	r3, #31
 8003ab4:	18fb      	adds	r3, r7, r3
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d104      	bne.n	8003ac6 <HAL_I2C_IsDeviceReady+0x14a>
 8003abc:	231e      	movs	r3, #30
 8003abe:	18fb      	adds	r3, r7, r3
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d0bf      	beq.n	8003a46 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	699b      	ldr	r3, [r3, #24]
 8003acc:	2210      	movs	r2, #16
 8003ace:	4013      	ands	r3, r2
 8003ad0:	2b10      	cmp	r3, #16
 8003ad2:	d01a      	beq.n	8003b0a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	69bb      	ldr	r3, [r7, #24]
 8003ada:	9300      	str	r3, [sp, #0]
 8003adc:	0013      	movs	r3, r2
 8003ade:	2200      	movs	r2, #0
 8003ae0:	2120      	movs	r1, #32
 8003ae2:	f000 f94d 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e059      	b.n	8003ba2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2220      	movs	r2, #32
 8003af4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2241      	movs	r2, #65	; 0x41
 8003afa:	2120      	movs	r1, #32
 8003afc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2240      	movs	r2, #64	; 0x40
 8003b02:	2100      	movs	r1, #0
 8003b04:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e04b      	b.n	8003ba2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	69bb      	ldr	r3, [r7, #24]
 8003b10:	9300      	str	r3, [sp, #0]
 8003b12:	0013      	movs	r3, r2
 8003b14:	2200      	movs	r2, #0
 8003b16:	2120      	movs	r1, #32
 8003b18:	f000 f932 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003b1c:	1e03      	subs	r3, r0, #0
 8003b1e:	d001      	beq.n	8003b24 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e03e      	b.n	8003ba2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2220      	movs	r2, #32
 8003b32:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d119      	bne.n	8003b70 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2180      	movs	r1, #128	; 0x80
 8003b48:	01c9      	lsls	r1, r1, #7
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	68f8      	ldr	r0, [r7, #12]
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	9300      	str	r3, [sp, #0]
 8003b56:	0013      	movs	r3, r2
 8003b58:	2200      	movs	r2, #0
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	f000 f910 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d001      	beq.n	8003b68 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e01c      	b.n	8003ba2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2220      	movs	r2, #32
 8003b6e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3301      	adds	r3, #1
 8003b74:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d900      	bls.n	8003b80 <HAL_I2C_IsDeviceReady+0x204>
 8003b7e:	e72e      	b.n	80039de <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2241      	movs	r2, #65	; 0x41
 8003b84:	2120      	movs	r1, #32
 8003b86:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2240      	movs	r2, #64	; 0x40
 8003b98:	2100      	movs	r1, #0
 8003b9a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e000      	b.n	8003ba2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8003ba0:	2302      	movs	r3, #2
  }
}
 8003ba2:	0018      	movs	r0, r3
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	b008      	add	sp, #32
 8003ba8:	bd80      	pop	{r7, pc}
 8003baa:	46c0      	nop			; (mov r8, r8)
 8003bac:	02002000 	.word	0x02002000

08003bb0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003bb0:	b5b0      	push	{r4, r5, r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af02      	add	r7, sp, #8
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	000c      	movs	r4, r1
 8003bba:	0010      	movs	r0, r2
 8003bbc:	0019      	movs	r1, r3
 8003bbe:	250a      	movs	r5, #10
 8003bc0:	197b      	adds	r3, r7, r5
 8003bc2:	1c22      	adds	r2, r4, #0
 8003bc4:	801a      	strh	r2, [r3, #0]
 8003bc6:	2308      	movs	r3, #8
 8003bc8:	18fb      	adds	r3, r7, r3
 8003bca:	1c02      	adds	r2, r0, #0
 8003bcc:	801a      	strh	r2, [r3, #0]
 8003bce:	1dbb      	adds	r3, r7, #6
 8003bd0:	1c0a      	adds	r2, r1, #0
 8003bd2:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003bd4:	1dbb      	adds	r3, r7, #6
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	2380      	movs	r3, #128	; 0x80
 8003bdc:	045c      	lsls	r4, r3, #17
 8003bde:	197b      	adds	r3, r7, r5
 8003be0:	8819      	ldrh	r1, [r3, #0]
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <I2C_RequestMemoryWrite+0xc4>)
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	0023      	movs	r3, r4
 8003bea:	f000 f9fd 	bl	8003fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003bee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf0:	6a39      	ldr	r1, [r7, #32]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f000 f902 	bl	8003dfe <I2C_WaitOnTXISFlagUntilTimeout>
 8003bfa:	1e03      	subs	r3, r0, #0
 8003bfc:	d001      	beq.n	8003c02 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	e033      	b.n	8003c6a <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c02:	1dbb      	adds	r3, r7, #6
 8003c04:	881b      	ldrh	r3, [r3, #0]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d107      	bne.n	8003c1a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	881b      	ldrh	r3, [r3, #0]
 8003c10:	b2da      	uxtb	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	629a      	str	r2, [r3, #40]	; 0x28
 8003c18:	e019      	b.n	8003c4e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	0a1b      	lsrs	r3, r3, #8
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c2e:	6a39      	ldr	r1, [r7, #32]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	0018      	movs	r0, r3
 8003c34:	f000 f8e3 	bl	8003dfe <I2C_WaitOnTXISFlagUntilTimeout>
 8003c38:	1e03      	subs	r3, r0, #0
 8003c3a:	d001      	beq.n	8003c40 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e014      	b.n	8003c6a <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c40:	2308      	movs	r3, #8
 8003c42:	18fb      	adds	r3, r7, r3
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	b2da      	uxtb	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003c4e:	6a3a      	ldr	r2, [r7, #32]
 8003c50:	68f8      	ldr	r0, [r7, #12]
 8003c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c54:	9300      	str	r3, [sp, #0]
 8003c56:	0013      	movs	r3, r2
 8003c58:	2200      	movs	r2, #0
 8003c5a:	2180      	movs	r1, #128	; 0x80
 8003c5c:	f000 f890 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003c60:	1e03      	subs	r3, r0, #0
 8003c62:	d001      	beq.n	8003c68 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e000      	b.n	8003c6a <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	b004      	add	sp, #16
 8003c70:	bdb0      	pop	{r4, r5, r7, pc}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	80002000 	.word	0x80002000

08003c78 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003c78:	b5b0      	push	{r4, r5, r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	000c      	movs	r4, r1
 8003c82:	0010      	movs	r0, r2
 8003c84:	0019      	movs	r1, r3
 8003c86:	250a      	movs	r5, #10
 8003c88:	197b      	adds	r3, r7, r5
 8003c8a:	1c22      	adds	r2, r4, #0
 8003c8c:	801a      	strh	r2, [r3, #0]
 8003c8e:	2308      	movs	r3, #8
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	1c02      	adds	r2, r0, #0
 8003c94:	801a      	strh	r2, [r3, #0]
 8003c96:	1dbb      	adds	r3, r7, #6
 8003c98:	1c0a      	adds	r2, r1, #0
 8003c9a:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003c9c:	1dbb      	adds	r3, r7, #6
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	b2da      	uxtb	r2, r3
 8003ca2:	197b      	adds	r3, r7, r5
 8003ca4:	8819      	ldrh	r1, [r3, #0]
 8003ca6:	68f8      	ldr	r0, [r7, #12]
 8003ca8:	4b23      	ldr	r3, [pc, #140]	; (8003d38 <I2C_RequestMemoryRead+0xc0>)
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	2300      	movs	r3, #0
 8003cae:	f000 f99b 	bl	8003fe8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cb4:	6a39      	ldr	r1, [r7, #32]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f000 f8a0 	bl	8003dfe <I2C_WaitOnTXISFlagUntilTimeout>
 8003cbe:	1e03      	subs	r3, r0, #0
 8003cc0:	d001      	beq.n	8003cc6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e033      	b.n	8003d2e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cc6:	1dbb      	adds	r3, r7, #6
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d107      	bne.n	8003cde <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003cce:	2308      	movs	r3, #8
 8003cd0:	18fb      	adds	r3, r7, r3
 8003cd2:	881b      	ldrh	r3, [r3, #0]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	629a      	str	r2, [r3, #40]	; 0x28
 8003cdc:	e019      	b.n	8003d12 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003cde:	2308      	movs	r3, #8
 8003ce0:	18fb      	adds	r3, r7, r3
 8003ce2:	881b      	ldrh	r3, [r3, #0]
 8003ce4:	0a1b      	lsrs	r3, r3, #8
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	b2da      	uxtb	r2, r3
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf2:	6a39      	ldr	r1, [r7, #32]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	0018      	movs	r0, r3
 8003cf8:	f000 f881 	bl	8003dfe <I2C_WaitOnTXISFlagUntilTimeout>
 8003cfc:	1e03      	subs	r3, r0, #0
 8003cfe:	d001      	beq.n	8003d04 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e014      	b.n	8003d2e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003d04:	2308      	movs	r3, #8
 8003d06:	18fb      	adds	r3, r7, r3
 8003d08:	881b      	ldrh	r3, [r3, #0]
 8003d0a:	b2da      	uxtb	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003d12:	6a3a      	ldr	r2, [r7, #32]
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d18:	9300      	str	r3, [sp, #0]
 8003d1a:	0013      	movs	r3, r2
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2140      	movs	r1, #64	; 0x40
 8003d20:	f000 f82e 	bl	8003d80 <I2C_WaitOnFlagUntilTimeout>
 8003d24:	1e03      	subs	r3, r0, #0
 8003d26:	d001      	beq.n	8003d2c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e000      	b.n	8003d2e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003d2c:	2300      	movs	r3, #0
}
 8003d2e:	0018      	movs	r0, r3
 8003d30:	46bd      	mov	sp, r7
 8003d32:	b004      	add	sp, #16
 8003d34:	bdb0      	pop	{r4, r5, r7, pc}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	80002000 	.word	0x80002000

08003d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	699b      	ldr	r3, [r3, #24]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d103      	bne.n	8003d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2200      	movs	r2, #0
 8003d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2201      	movs	r2, #1
 8003d62:	4013      	ands	r3, r2
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d007      	beq.n	8003d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	699a      	ldr	r2, [r3, #24]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	2101      	movs	r1, #1
 8003d74:	430a      	orrs	r2, r1
 8003d76:	619a      	str	r2, [r3, #24]
  }
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b002      	add	sp, #8
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b084      	sub	sp, #16
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	603b      	str	r3, [r7, #0]
 8003d8c:	1dfb      	adds	r3, r7, #7
 8003d8e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d90:	e021      	b.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	3301      	adds	r3, #1
 8003d96:	d01e      	beq.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d98:	f7ff f85e 	bl	8002e58 <HAL_GetTick>
 8003d9c:	0002      	movs	r2, r0
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d302      	bcc.n	8003dae <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d113      	bne.n	8003dd6 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	2220      	movs	r2, #32
 8003db4:	431a      	orrs	r2, r3
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2241      	movs	r2, #65	; 0x41
 8003dbe:	2120      	movs	r1, #32
 8003dc0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2242      	movs	r2, #66	; 0x42
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2240      	movs	r2, #64	; 0x40
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e00f      	b.n	8003df6 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	4013      	ands	r3, r2
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	425a      	negs	r2, r3
 8003de6:	4153      	adcs	r3, r2
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	001a      	movs	r2, r3
 8003dec:	1dfb      	adds	r3, r7, #7
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d0ce      	beq.n	8003d92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	0018      	movs	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	b004      	add	sp, #16
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e0a:	e02b      	b.n	8003e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	68b9      	ldr	r1, [r7, #8]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	0018      	movs	r0, r3
 8003e14:	f000 f86e 	bl	8003ef4 <I2C_IsAcknowledgeFailed>
 8003e18:	1e03      	subs	r3, r0, #0
 8003e1a:	d001      	beq.n	8003e20 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e029      	b.n	8003e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	3301      	adds	r3, #1
 8003e24:	d01e      	beq.n	8003e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e26:	f7ff f817 	bl	8002e58 <HAL_GetTick>
 8003e2a:	0002      	movs	r2, r0
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	1ad3      	subs	r3, r2, r3
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	d302      	bcc.n	8003e3c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d113      	bne.n	8003e64 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e40:	2220      	movs	r2, #32
 8003e42:	431a      	orrs	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2241      	movs	r2, #65	; 0x41
 8003e4c:	2120      	movs	r1, #32
 8003e4e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2242      	movs	r2, #66	; 0x42
 8003e54:	2100      	movs	r1, #0
 8003e56:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2240      	movs	r2, #64	; 0x40
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e007      	b.n	8003e74 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	699b      	ldr	r3, [r3, #24]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d1cc      	bne.n	8003e0c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b004      	add	sp, #16
 8003e7a:	bd80      	pop	{r7, pc}

08003e7c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	60f8      	str	r0, [r7, #12]
 8003e84:	60b9      	str	r1, [r7, #8]
 8003e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e88:	e028      	b.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e8a:	687a      	ldr	r2, [r7, #4]
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	0018      	movs	r0, r3
 8003e92:	f000 f82f 	bl	8003ef4 <I2C_IsAcknowledgeFailed>
 8003e96:	1e03      	subs	r3, r0, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e026      	b.n	8003eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9e:	f7fe ffdb 	bl	8002e58 <HAL_GetTick>
 8003ea2:	0002      	movs	r2, r0
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d302      	bcc.n	8003eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d113      	bne.n	8003edc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	2220      	movs	r2, #32
 8003eba:	431a      	orrs	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2241      	movs	r2, #65	; 0x41
 8003ec4:	2120      	movs	r1, #32
 8003ec6:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2242      	movs	r2, #66	; 0x42
 8003ecc:	2100      	movs	r1, #0
 8003ece:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2240      	movs	r2, #64	; 0x40
 8003ed4:	2100      	movs	r1, #0
 8003ed6:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e007      	b.n	8003eec <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	699b      	ldr	r3, [r3, #24]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	2b20      	cmp	r3, #32
 8003ee8:	d1cf      	bne.n	8003e8a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	0018      	movs	r0, r3
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b004      	add	sp, #16
 8003ef2:	bd80      	pop	{r7, pc}

08003ef4 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b084      	sub	sp, #16
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	2210      	movs	r2, #16
 8003f08:	4013      	ands	r3, r2
 8003f0a:	2b10      	cmp	r3, #16
 8003f0c:	d164      	bne.n	8003fd8 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
 8003f14:	2380      	movs	r3, #128	; 0x80
 8003f16:	049b      	lsls	r3, r3, #18
 8003f18:	401a      	ands	r2, r3
 8003f1a:	2380      	movs	r3, #128	; 0x80
 8003f1c:	049b      	lsls	r3, r3, #18
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d02b      	beq.n	8003f7a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	685a      	ldr	r2, [r3, #4]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	2180      	movs	r1, #128	; 0x80
 8003f2e:	01c9      	lsls	r1, r1, #7
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f34:	e021      	b.n	8003f7a <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	d01e      	beq.n	8003f7a <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f3c:	f7fe ff8c 	bl	8002e58 <HAL_GetTick>
 8003f40:	0002      	movs	r2, r0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d302      	bcc.n	8003f52 <I2C_IsAcknowledgeFailed+0x5e>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d113      	bne.n	8003f7a <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f56:	2220      	movs	r2, #32
 8003f58:	431a      	orrs	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2241      	movs	r2, #65	; 0x41
 8003f62:	2120      	movs	r1, #32
 8003f64:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2242      	movs	r2, #66	; 0x42
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2240      	movs	r2, #64	; 0x40
 8003f72:	2100      	movs	r1, #0
 8003f74:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e02f      	b.n	8003fda <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2220      	movs	r2, #32
 8003f82:	4013      	ands	r3, r2
 8003f84:	2b20      	cmp	r3, #32
 8003f86:	d1d6      	bne.n	8003f36 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2210      	movs	r2, #16
 8003f8e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2220      	movs	r2, #32
 8003f96:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	f7ff fece 	bl	8003d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	490e      	ldr	r1, [pc, #56]	; (8003fe4 <I2C_IsAcknowledgeFailed+0xf0>)
 8003fac:	400a      	ands	r2, r1
 8003fae:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb4:	2204      	movs	r2, #4
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2241      	movs	r2, #65	; 0x41
 8003fc0:	2120      	movs	r1, #32
 8003fc2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2242      	movs	r2, #66	; 0x42
 8003fc8:	2100      	movs	r1, #0
 8003fca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2240      	movs	r2, #64	; 0x40
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	e000      	b.n	8003fda <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	0018      	movs	r0, r3
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	b004      	add	sp, #16
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	fe00e800 	.word	0xfe00e800

08003fe8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003fe8:	b590      	push	{r4, r7, lr}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	0008      	movs	r0, r1
 8003ff2:	0011      	movs	r1, r2
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	240a      	movs	r4, #10
 8003ff8:	193b      	adds	r3, r7, r4
 8003ffa:	1c02      	adds	r2, r0, #0
 8003ffc:	801a      	strh	r2, [r3, #0]
 8003ffe:	2009      	movs	r0, #9
 8004000:	183b      	adds	r3, r7, r0
 8004002:	1c0a      	adds	r2, r1, #0
 8004004:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	6a3a      	ldr	r2, [r7, #32]
 800400e:	0d51      	lsrs	r1, r2, #21
 8004010:	2280      	movs	r2, #128	; 0x80
 8004012:	00d2      	lsls	r2, r2, #3
 8004014:	400a      	ands	r2, r1
 8004016:	490e      	ldr	r1, [pc, #56]	; (8004050 <I2C_TransferConfig+0x68>)
 8004018:	430a      	orrs	r2, r1
 800401a:	43d2      	mvns	r2, r2
 800401c:	401a      	ands	r2, r3
 800401e:	0011      	movs	r1, r2
 8004020:	193b      	adds	r3, r7, r4
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	059b      	lsls	r3, r3, #22
 8004026:	0d9a      	lsrs	r2, r3, #22
 8004028:	183b      	adds	r3, r7, r0
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	0418      	lsls	r0, r3, #16
 800402e:	23ff      	movs	r3, #255	; 0xff
 8004030:	041b      	lsls	r3, r3, #16
 8004032:	4003      	ands	r3, r0
 8004034:	431a      	orrs	r2, r3
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	431a      	orrs	r2, r3
 800403a:	6a3b      	ldr	r3, [r7, #32]
 800403c:	431a      	orrs	r2, r3
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8004046:	46c0      	nop			; (mov r8, r8)
 8004048:	46bd      	mov	sp, r7
 800404a:	b005      	add	sp, #20
 800404c:	bd90      	pop	{r4, r7, pc}
 800404e:	46c0      	nop			; (mov r8, r8)
 8004050:	03ff63ff 	.word	0x03ff63ff

08004054 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2241      	movs	r2, #65	; 0x41
 8004062:	5c9b      	ldrb	r3, [r3, r2]
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b20      	cmp	r3, #32
 8004068:	d138      	bne.n	80040dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	2240      	movs	r2, #64	; 0x40
 800406e:	5c9b      	ldrb	r3, [r3, r2]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d101      	bne.n	8004078 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004074:	2302      	movs	r3, #2
 8004076:	e032      	b.n	80040de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2240      	movs	r2, #64	; 0x40
 800407c:	2101      	movs	r1, #1
 800407e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2241      	movs	r2, #65	; 0x41
 8004084:	2124      	movs	r1, #36	; 0x24
 8004086:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2101      	movs	r1, #1
 8004094:	438a      	bics	r2, r1
 8004096:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4911      	ldr	r1, [pc, #68]	; (80040e8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80040a4:	400a      	ands	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	6819      	ldr	r1, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2101      	movs	r1, #1
 80040c4:	430a      	orrs	r2, r1
 80040c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2241      	movs	r2, #65	; 0x41
 80040cc:	2120      	movs	r1, #32
 80040ce:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2240      	movs	r2, #64	; 0x40
 80040d4:	2100      	movs	r1, #0
 80040d6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040d8:	2300      	movs	r3, #0
 80040da:	e000      	b.n	80040de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040dc:	2302      	movs	r3, #2
  }
}
 80040de:	0018      	movs	r0, r3
 80040e0:	46bd      	mov	sp, r7
 80040e2:	b002      	add	sp, #8
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	46c0      	nop			; (mov r8, r8)
 80040e8:	ffffefff 	.word	0xffffefff

080040ec <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2241      	movs	r2, #65	; 0x41
 80040fa:	5c9b      	ldrb	r3, [r3, r2]
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b20      	cmp	r3, #32
 8004100:	d139      	bne.n	8004176 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2240      	movs	r2, #64	; 0x40
 8004106:	5c9b      	ldrb	r3, [r3, r2]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d101      	bne.n	8004110 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800410c:	2302      	movs	r3, #2
 800410e:	e033      	b.n	8004178 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2240      	movs	r2, #64	; 0x40
 8004114:	2101      	movs	r1, #1
 8004116:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2241      	movs	r2, #65	; 0x41
 800411c:	2124      	movs	r1, #36	; 0x24
 800411e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2101      	movs	r1, #1
 800412c:	438a      	bics	r2, r1
 800412e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4a11      	ldr	r2, [pc, #68]	; (8004180 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800413c:	4013      	ands	r3, r2
 800413e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	021b      	lsls	r3, r3, #8
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	4313      	orrs	r3, r2
 8004148:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2101      	movs	r1, #1
 800415e:	430a      	orrs	r2, r1
 8004160:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2241      	movs	r2, #65	; 0x41
 8004166:	2120      	movs	r1, #32
 8004168:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2240      	movs	r2, #64	; 0x40
 800416e:	2100      	movs	r1, #0
 8004170:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004172:	2300      	movs	r3, #0
 8004174:	e000      	b.n	8004178 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	0018      	movs	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	b004      	add	sp, #16
 800417e:	bd80      	pop	{r7, pc}
 8004180:	fffff0ff 	.word	0xfffff0ff

08004184 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004184:	b5b0      	push	{r4, r5, r7, lr}
 8004186:	b08a      	sub	sp, #40	; 0x28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d102      	bne.n	8004198 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	f000 fb6c 	bl	8004870 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004198:	4bc8      	ldr	r3, [pc, #800]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	220c      	movs	r2, #12
 800419e:	4013      	ands	r3, r2
 80041a0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80041a2:	4bc6      	ldr	r3, [pc, #792]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80041a4:	68da      	ldr	r2, [r3, #12]
 80041a6:	2380      	movs	r3, #128	; 0x80
 80041a8:	025b      	lsls	r3, r3, #9
 80041aa:	4013      	ands	r3, r2
 80041ac:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	4013      	ands	r3, r2
 80041b6:	d100      	bne.n	80041ba <HAL_RCC_OscConfig+0x36>
 80041b8:	e07d      	b.n	80042b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d007      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	d112      	bne.n	80041ec <HAL_RCC_OscConfig+0x68>
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	2380      	movs	r3, #128	; 0x80
 80041ca:	025b      	lsls	r3, r3, #9
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d10d      	bne.n	80041ec <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d0:	4bba      	ldr	r3, [pc, #744]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80041d2:	681a      	ldr	r2, [r3, #0]
 80041d4:	2380      	movs	r3, #128	; 0x80
 80041d6:	029b      	lsls	r3, r3, #10
 80041d8:	4013      	ands	r3, r2
 80041da:	d100      	bne.n	80041de <HAL_RCC_OscConfig+0x5a>
 80041dc:	e06a      	b.n	80042b4 <HAL_RCC_OscConfig+0x130>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d166      	bne.n	80042b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	f000 fb42 	bl	8004870 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	025b      	lsls	r3, r3, #9
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x84>
 80041f8:	4bb0      	ldr	r3, [pc, #704]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	4baf      	ldr	r3, [pc, #700]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80041fe:	2180      	movs	r1, #128	; 0x80
 8004200:	0249      	lsls	r1, r1, #9
 8004202:	430a      	orrs	r2, r1
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	e027      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685a      	ldr	r2, [r3, #4]
 800420c:	23a0      	movs	r3, #160	; 0xa0
 800420e:	02db      	lsls	r3, r3, #11
 8004210:	429a      	cmp	r2, r3
 8004212:	d10e      	bne.n	8004232 <HAL_RCC_OscConfig+0xae>
 8004214:	4ba9      	ldr	r3, [pc, #676]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	4ba8      	ldr	r3, [pc, #672]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800421a:	2180      	movs	r1, #128	; 0x80
 800421c:	02c9      	lsls	r1, r1, #11
 800421e:	430a      	orrs	r2, r1
 8004220:	601a      	str	r2, [r3, #0]
 8004222:	4ba6      	ldr	r3, [pc, #664]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	4ba5      	ldr	r3, [pc, #660]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004228:	2180      	movs	r1, #128	; 0x80
 800422a:	0249      	lsls	r1, r1, #9
 800422c:	430a      	orrs	r2, r1
 800422e:	601a      	str	r2, [r3, #0]
 8004230:	e012      	b.n	8004258 <HAL_RCC_OscConfig+0xd4>
 8004232:	4ba2      	ldr	r3, [pc, #648]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	4ba1      	ldr	r3, [pc, #644]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004238:	49a1      	ldr	r1, [pc, #644]	; (80044c0 <HAL_RCC_OscConfig+0x33c>)
 800423a:	400a      	ands	r2, r1
 800423c:	601a      	str	r2, [r3, #0]
 800423e:	4b9f      	ldr	r3, [pc, #636]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	2380      	movs	r3, #128	; 0x80
 8004244:	025b      	lsls	r3, r3, #9
 8004246:	4013      	ands	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4b9b      	ldr	r3, [pc, #620]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	4b9a      	ldr	r3, [pc, #616]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004252:	499c      	ldr	r1, [pc, #624]	; (80044c4 <HAL_RCC_OscConfig+0x340>)
 8004254:	400a      	ands	r2, r1
 8004256:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d014      	beq.n	800428a <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004260:	f7fe fdfa 	bl	8002e58 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004268:	e008      	b.n	800427c <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800426a:	f7fe fdf5 	bl	8002e58 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	2b64      	cmp	r3, #100	; 0x64
 8004276:	d901      	bls.n	800427c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e2f9      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800427c:	4b8f      	ldr	r3, [pc, #572]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2380      	movs	r3, #128	; 0x80
 8004282:	029b      	lsls	r3, r3, #10
 8004284:	4013      	ands	r3, r2
 8004286:	d0f0      	beq.n	800426a <HAL_RCC_OscConfig+0xe6>
 8004288:	e015      	b.n	80042b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428a:	f7fe fde5 	bl	8002e58 <HAL_GetTick>
 800428e:	0003      	movs	r3, r0
 8004290:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004294:	f7fe fde0 	bl	8002e58 <HAL_GetTick>
 8004298:	0002      	movs	r2, r0
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e2e4      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80042a6:	4b85      	ldr	r3, [pc, #532]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	2380      	movs	r3, #128	; 0x80
 80042ac:	029b      	lsls	r3, r3, #10
 80042ae:	4013      	ands	r3, r2
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x110>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	2202      	movs	r2, #2
 80042bc:	4013      	ands	r3, r2
 80042be:	d100      	bne.n	80042c2 <HAL_RCC_OscConfig+0x13e>
 80042c0:	e099      	b.n	80043f6 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80042c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ca:	2220      	movs	r2, #32
 80042cc:	4013      	ands	r3, r2
 80042ce:	d009      	beq.n	80042e4 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80042d0:	4b7a      	ldr	r3, [pc, #488]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	4b79      	ldr	r3, [pc, #484]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80042d6:	2120      	movs	r1, #32
 80042d8:	430a      	orrs	r2, r1
 80042da:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	2220      	movs	r2, #32
 80042e0:	4393      	bics	r3, r2
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	2b04      	cmp	r3, #4
 80042e8:	d005      	beq.n	80042f6 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b0c      	cmp	r3, #12
 80042ee:	d13e      	bne.n	800436e <HAL_RCC_OscConfig+0x1ea>
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d13b      	bne.n	800436e <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80042f6:	4b71      	ldr	r3, [pc, #452]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	2204      	movs	r2, #4
 80042fc:	4013      	ands	r3, r2
 80042fe:	d004      	beq.n	800430a <HAL_RCC_OscConfig+0x186>
 8004300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004302:	2b00      	cmp	r3, #0
 8004304:	d101      	bne.n	800430a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e2b2      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800430a:	4b6c      	ldr	r3, [pc, #432]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	4a6e      	ldr	r2, [pc, #440]	; (80044c8 <HAL_RCC_OscConfig+0x344>)
 8004310:	4013      	ands	r3, r2
 8004312:	0019      	movs	r1, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	021a      	lsls	r2, r3, #8
 800431a:	4b68      	ldr	r3, [pc, #416]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800431c:	430a      	orrs	r2, r1
 800431e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004320:	4b66      	ldr	r3, [pc, #408]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2209      	movs	r2, #9
 8004326:	4393      	bics	r3, r2
 8004328:	0019      	movs	r1, r3
 800432a:	4b64      	ldr	r3, [pc, #400]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800432c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800432e:	430a      	orrs	r2, r1
 8004330:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004332:	f000 fbf9 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004336:	0001      	movs	r1, r0
 8004338:	4b60      	ldr	r3, [pc, #384]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	091b      	lsrs	r3, r3, #4
 800433e:	220f      	movs	r2, #15
 8004340:	4013      	ands	r3, r2
 8004342:	4a62      	ldr	r2, [pc, #392]	; (80044cc <HAL_RCC_OscConfig+0x348>)
 8004344:	5cd3      	ldrb	r3, [r2, r3]
 8004346:	000a      	movs	r2, r1
 8004348:	40da      	lsrs	r2, r3
 800434a:	4b61      	ldr	r3, [pc, #388]	; (80044d0 <HAL_RCC_OscConfig+0x34c>)
 800434c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800434e:	4b61      	ldr	r3, [pc, #388]	; (80044d4 <HAL_RCC_OscConfig+0x350>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2513      	movs	r5, #19
 8004354:	197c      	adds	r4, r7, r5
 8004356:	0018      	movs	r0, r3
 8004358:	f7fe fd38 	bl	8002dcc <HAL_InitTick>
 800435c:	0003      	movs	r3, r0
 800435e:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8004360:	197b      	adds	r3, r7, r5
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d046      	beq.n	80043f6 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8004368:	197b      	adds	r3, r7, r5
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	e280      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	2b00      	cmp	r3, #0
 8004372:	d027      	beq.n	80043c4 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004374:	4b51      	ldr	r3, [pc, #324]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2209      	movs	r2, #9
 800437a:	4393      	bics	r3, r2
 800437c:	0019      	movs	r1, r3
 800437e:	4b4f      	ldr	r3, [pc, #316]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004382:	430a      	orrs	r2, r1
 8004384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004386:	f7fe fd67 	bl	8002e58 <HAL_GetTick>
 800438a:	0003      	movs	r3, r0
 800438c:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004390:	f7fe fd62 	bl	8002e58 <HAL_GetTick>
 8004394:	0002      	movs	r2, r0
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e266      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80043a2:	4b46      	ldr	r3, [pc, #280]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2204      	movs	r2, #4
 80043a8:	4013      	ands	r3, r2
 80043aa:	d0f1      	beq.n	8004390 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043ac:	4b43      	ldr	r3, [pc, #268]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a45      	ldr	r2, [pc, #276]	; (80044c8 <HAL_RCC_OscConfig+0x344>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	0019      	movs	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	021a      	lsls	r2, r3, #8
 80043bc:	4b3f      	ldr	r3, [pc, #252]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80043be:	430a      	orrs	r2, r1
 80043c0:	605a      	str	r2, [r3, #4]
 80043c2:	e018      	b.n	80043f6 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043c4:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b3c      	ldr	r3, [pc, #240]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80043ca:	2101      	movs	r1, #1
 80043cc:	438a      	bics	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043d0:	f7fe fd42 	bl	8002e58 <HAL_GetTick>
 80043d4:	0003      	movs	r3, r0
 80043d6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043d8:	e008      	b.n	80043ec <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043da:	f7fe fd3d 	bl	8002e58 <HAL_GetTick>
 80043de:	0002      	movs	r2, r0
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	2b02      	cmp	r3, #2
 80043e6:	d901      	bls.n	80043ec <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e241      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80043ec:	4b33      	ldr	r3, [pc, #204]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2204      	movs	r2, #4
 80043f2:	4013      	ands	r3, r2
 80043f4:	d1f1      	bne.n	80043da <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2210      	movs	r2, #16
 80043fc:	4013      	ands	r3, r2
 80043fe:	d100      	bne.n	8004402 <HAL_RCC_OscConfig+0x27e>
 8004400:	e0a1      	b.n	8004546 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d140      	bne.n	800448a <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004408:	4b2c      	ldr	r3, [pc, #176]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	2380      	movs	r3, #128	; 0x80
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	4013      	ands	r3, r2
 8004412:	d005      	beq.n	8004420 <HAL_RCC_OscConfig+0x29c>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e227      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004420:	4b26      	ldr	r3, [pc, #152]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	4a2c      	ldr	r2, [pc, #176]	; (80044d8 <HAL_RCC_OscConfig+0x354>)
 8004426:	4013      	ands	r3, r2
 8004428:	0019      	movs	r1, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1a      	ldr	r2, [r3, #32]
 800442e:	4b23      	ldr	r3, [pc, #140]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004430:	430a      	orrs	r2, r1
 8004432:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004434:	4b21      	ldr	r3, [pc, #132]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	021b      	lsls	r3, r3, #8
 800443a:	0a19      	lsrs	r1, r3, #8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	061a      	lsls	r2, r3, #24
 8004442:	4b1e      	ldr	r3, [pc, #120]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004444:	430a      	orrs	r2, r1
 8004446:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	0b5b      	lsrs	r3, r3, #13
 800444e:	3301      	adds	r3, #1
 8004450:	2280      	movs	r2, #128	; 0x80
 8004452:	0212      	lsls	r2, r2, #8
 8004454:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8004456:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	210f      	movs	r1, #15
 800445e:	400b      	ands	r3, r1
 8004460:	491a      	ldr	r1, [pc, #104]	; (80044cc <HAL_RCC_OscConfig+0x348>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004466:	4b1a      	ldr	r3, [pc, #104]	; (80044d0 <HAL_RCC_OscConfig+0x34c>)
 8004468:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800446a:	4b1a      	ldr	r3, [pc, #104]	; (80044d4 <HAL_RCC_OscConfig+0x350>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2513      	movs	r5, #19
 8004470:	197c      	adds	r4, r7, r5
 8004472:	0018      	movs	r0, r3
 8004474:	f7fe fcaa 	bl	8002dcc <HAL_InitTick>
 8004478:	0003      	movs	r3, r0
 800447a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800447c:	197b      	adds	r3, r7, r5
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d060      	beq.n	8004546 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8004484:	197b      	adds	r3, r7, r5
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	e1f2      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d03f      	beq.n	8004512 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	4b09      	ldr	r3, [pc, #36]	; (80044bc <HAL_RCC_OscConfig+0x338>)
 8004498:	2180      	movs	r1, #128	; 0x80
 800449a:	0049      	lsls	r1, r1, #1
 800449c:	430a      	orrs	r2, r1
 800449e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044a0:	f7fe fcda 	bl	8002e58 <HAL_GetTick>
 80044a4:	0003      	movs	r3, r0
 80044a6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044a8:	e018      	b.n	80044dc <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80044aa:	f7fe fcd5 	bl	8002e58 <HAL_GetTick>
 80044ae:	0002      	movs	r2, r0
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	2b02      	cmp	r3, #2
 80044b6:	d911      	bls.n	80044dc <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80044b8:	2303      	movs	r3, #3
 80044ba:	e1d9      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
 80044bc:	40021000 	.word	0x40021000
 80044c0:	fffeffff 	.word	0xfffeffff
 80044c4:	fffbffff 	.word	0xfffbffff
 80044c8:	ffffe0ff 	.word	0xffffe0ff
 80044cc:	0800913c 	.word	0x0800913c
 80044d0:	20000008 	.word	0x20000008
 80044d4:	2000000c 	.word	0x2000000c
 80044d8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80044dc:	4bc9      	ldr	r3, [pc, #804]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	2380      	movs	r3, #128	; 0x80
 80044e2:	009b      	lsls	r3, r3, #2
 80044e4:	4013      	ands	r3, r2
 80044e6:	d0e0      	beq.n	80044aa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80044e8:	4bc6      	ldr	r3, [pc, #792]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	4ac6      	ldr	r2, [pc, #792]	; (8004808 <HAL_RCC_OscConfig+0x684>)
 80044ee:	4013      	ands	r3, r2
 80044f0:	0019      	movs	r1, r3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6a1a      	ldr	r2, [r3, #32]
 80044f6:	4bc3      	ldr	r3, [pc, #780]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80044fc:	4bc1      	ldr	r3, [pc, #772]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	021b      	lsls	r3, r3, #8
 8004502:	0a19      	lsrs	r1, r3, #8
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	69db      	ldr	r3, [r3, #28]
 8004508:	061a      	lsls	r2, r3, #24
 800450a:	4bbe      	ldr	r3, [pc, #760]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800450c:	430a      	orrs	r2, r1
 800450e:	605a      	str	r2, [r3, #4]
 8004510:	e019      	b.n	8004546 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004512:	4bbc      	ldr	r3, [pc, #752]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	4bbb      	ldr	r3, [pc, #748]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004518:	49bc      	ldr	r1, [pc, #752]	; (800480c <HAL_RCC_OscConfig+0x688>)
 800451a:	400a      	ands	r2, r1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fe fc9b 	bl	8002e58 <HAL_GetTick>
 8004522:	0003      	movs	r3, r0
 8004524:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004526:	e008      	b.n	800453a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004528:	f7fe fc96 	bl	8002e58 <HAL_GetTick>
 800452c:	0002      	movs	r2, r0
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	1ad3      	subs	r3, r2, r3
 8004532:	2b02      	cmp	r3, #2
 8004534:	d901      	bls.n	800453a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e19a      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800453a:	4bb2      	ldr	r3, [pc, #712]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	009b      	lsls	r3, r3, #2
 8004542:	4013      	ands	r3, r2
 8004544:	d1f0      	bne.n	8004528 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	2208      	movs	r2, #8
 800454c:	4013      	ands	r3, r2
 800454e:	d036      	beq.n	80045be <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d019      	beq.n	800458c <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004558:	4baa      	ldr	r3, [pc, #680]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800455a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800455c:	4ba9      	ldr	r3, [pc, #676]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800455e:	2101      	movs	r1, #1
 8004560:	430a      	orrs	r2, r1
 8004562:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004564:	f7fe fc78 	bl	8002e58 <HAL_GetTick>
 8004568:	0003      	movs	r3, r0
 800456a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800456c:	e008      	b.n	8004580 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800456e:	f7fe fc73 	bl	8002e58 <HAL_GetTick>
 8004572:	0002      	movs	r2, r0
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b02      	cmp	r3, #2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e177      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004580:	4ba0      	ldr	r3, [pc, #640]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004582:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004584:	2202      	movs	r2, #2
 8004586:	4013      	ands	r3, r2
 8004588:	d0f1      	beq.n	800456e <HAL_RCC_OscConfig+0x3ea>
 800458a:	e018      	b.n	80045be <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800458c:	4b9d      	ldr	r3, [pc, #628]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800458e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004590:	4b9c      	ldr	r3, [pc, #624]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004592:	2101      	movs	r1, #1
 8004594:	438a      	bics	r2, r1
 8004596:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004598:	f7fe fc5e 	bl	8002e58 <HAL_GetTick>
 800459c:	0003      	movs	r3, r0
 800459e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a2:	f7fe fc59 	bl	8002e58 <HAL_GetTick>
 80045a6:	0002      	movs	r2, r0
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e15d      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80045b4:	4b93      	ldr	r3, [pc, #588]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	2202      	movs	r2, #2
 80045ba:	4013      	ands	r3, r2
 80045bc:	d1f1      	bne.n	80045a2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	2204      	movs	r2, #4
 80045c4:	4013      	ands	r3, r2
 80045c6:	d100      	bne.n	80045ca <HAL_RCC_OscConfig+0x446>
 80045c8:	e0ae      	b.n	8004728 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045ca:	2023      	movs	r0, #35	; 0x23
 80045cc:	183b      	adds	r3, r7, r0
 80045ce:	2200      	movs	r2, #0
 80045d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045d2:	4b8c      	ldr	r3, [pc, #560]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80045d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	055b      	lsls	r3, r3, #21
 80045da:	4013      	ands	r3, r2
 80045dc:	d109      	bne.n	80045f2 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045de:	4b89      	ldr	r3, [pc, #548]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80045e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e2:	4b88      	ldr	r3, [pc, #544]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80045e4:	2180      	movs	r1, #128	; 0x80
 80045e6:	0549      	lsls	r1, r1, #21
 80045e8:	430a      	orrs	r2, r1
 80045ea:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80045ec:	183b      	adds	r3, r7, r0
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045f2:	4b87      	ldr	r3, [pc, #540]	; (8004810 <HAL_RCC_OscConfig+0x68c>)
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	4013      	ands	r3, r2
 80045fc:	d11a      	bne.n	8004634 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045fe:	4b84      	ldr	r3, [pc, #528]	; (8004810 <HAL_RCC_OscConfig+0x68c>)
 8004600:	681a      	ldr	r2, [r3, #0]
 8004602:	4b83      	ldr	r3, [pc, #524]	; (8004810 <HAL_RCC_OscConfig+0x68c>)
 8004604:	2180      	movs	r1, #128	; 0x80
 8004606:	0049      	lsls	r1, r1, #1
 8004608:	430a      	orrs	r2, r1
 800460a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800460c:	f7fe fc24 	bl	8002e58 <HAL_GetTick>
 8004610:	0003      	movs	r3, r0
 8004612:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004614:	e008      	b.n	8004628 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004616:	f7fe fc1f 	bl	8002e58 <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	2b64      	cmp	r3, #100	; 0x64
 8004622:	d901      	bls.n	8004628 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004624:	2303      	movs	r3, #3
 8004626:	e123      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004628:	4b79      	ldr	r3, [pc, #484]	; (8004810 <HAL_RCC_OscConfig+0x68c>)
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	2380      	movs	r3, #128	; 0x80
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	4013      	ands	r3, r2
 8004632:	d0f0      	beq.n	8004616 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689a      	ldr	r2, [r3, #8]
 8004638:	2380      	movs	r3, #128	; 0x80
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x4cc>
 8004640:	4b70      	ldr	r3, [pc, #448]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004644:	4b6f      	ldr	r3, [pc, #444]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004646:	2180      	movs	r1, #128	; 0x80
 8004648:	0049      	lsls	r1, r1, #1
 800464a:	430a      	orrs	r2, r1
 800464c:	651a      	str	r2, [r3, #80]	; 0x50
 800464e:	e031      	b.n	80046b4 <HAL_RCC_OscConfig+0x530>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d10c      	bne.n	8004672 <HAL_RCC_OscConfig+0x4ee>
 8004658:	4b6a      	ldr	r3, [pc, #424]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800465a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800465c:	4b69      	ldr	r3, [pc, #420]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800465e:	496b      	ldr	r1, [pc, #428]	; (800480c <HAL_RCC_OscConfig+0x688>)
 8004660:	400a      	ands	r2, r1
 8004662:	651a      	str	r2, [r3, #80]	; 0x50
 8004664:	4b67      	ldr	r3, [pc, #412]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004668:	4b66      	ldr	r3, [pc, #408]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800466a:	496a      	ldr	r1, [pc, #424]	; (8004814 <HAL_RCC_OscConfig+0x690>)
 800466c:	400a      	ands	r2, r1
 800466e:	651a      	str	r2, [r3, #80]	; 0x50
 8004670:	e020      	b.n	80046b4 <HAL_RCC_OscConfig+0x530>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689a      	ldr	r2, [r3, #8]
 8004676:	23a0      	movs	r3, #160	; 0xa0
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	429a      	cmp	r2, r3
 800467c:	d10e      	bne.n	800469c <HAL_RCC_OscConfig+0x518>
 800467e:	4b61      	ldr	r3, [pc, #388]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004680:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004682:	4b60      	ldr	r3, [pc, #384]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004684:	2180      	movs	r1, #128	; 0x80
 8004686:	00c9      	lsls	r1, r1, #3
 8004688:	430a      	orrs	r2, r1
 800468a:	651a      	str	r2, [r3, #80]	; 0x50
 800468c:	4b5d      	ldr	r3, [pc, #372]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800468e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004690:	4b5c      	ldr	r3, [pc, #368]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004692:	2180      	movs	r1, #128	; 0x80
 8004694:	0049      	lsls	r1, r1, #1
 8004696:	430a      	orrs	r2, r1
 8004698:	651a      	str	r2, [r3, #80]	; 0x50
 800469a:	e00b      	b.n	80046b4 <HAL_RCC_OscConfig+0x530>
 800469c:	4b59      	ldr	r3, [pc, #356]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800469e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046a0:	4b58      	ldr	r3, [pc, #352]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80046a2:	495a      	ldr	r1, [pc, #360]	; (800480c <HAL_RCC_OscConfig+0x688>)
 80046a4:	400a      	ands	r2, r1
 80046a6:	651a      	str	r2, [r3, #80]	; 0x50
 80046a8:	4b56      	ldr	r3, [pc, #344]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80046aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046ac:	4b55      	ldr	r3, [pc, #340]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80046ae:	4959      	ldr	r1, [pc, #356]	; (8004814 <HAL_RCC_OscConfig+0x690>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d015      	beq.n	80046e8 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046bc:	f7fe fbcc 	bl	8002e58 <HAL_GetTick>
 80046c0:	0003      	movs	r3, r0
 80046c2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046c4:	e009      	b.n	80046da <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046c6:	f7fe fbc7 	bl	8002e58 <HAL_GetTick>
 80046ca:	0002      	movs	r2, r0
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	1ad3      	subs	r3, r2, r3
 80046d0:	4a51      	ldr	r2, [pc, #324]	; (8004818 <HAL_RCC_OscConfig+0x694>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e0ca      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80046da:	4b4a      	ldr	r3, [pc, #296]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80046dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4013      	ands	r3, r2
 80046e4:	d0ef      	beq.n	80046c6 <HAL_RCC_OscConfig+0x542>
 80046e6:	e014      	b.n	8004712 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046e8:	f7fe fbb6 	bl	8002e58 <HAL_GetTick>
 80046ec:	0003      	movs	r3, r0
 80046ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80046f0:	e009      	b.n	8004706 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7fe fbb1 	bl	8002e58 <HAL_GetTick>
 80046f6:	0002      	movs	r2, r0
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	4a46      	ldr	r2, [pc, #280]	; (8004818 <HAL_RCC_OscConfig+0x694>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d901      	bls.n	8004706 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	e0b4      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004706:	4b3f      	ldr	r3, [pc, #252]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004708:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800470a:	2380      	movs	r3, #128	; 0x80
 800470c:	009b      	lsls	r3, r3, #2
 800470e:	4013      	ands	r3, r2
 8004710:	d1ef      	bne.n	80046f2 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004712:	2323      	movs	r3, #35	; 0x23
 8004714:	18fb      	adds	r3, r7, r3
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d105      	bne.n	8004728 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800471c:	4b39      	ldr	r3, [pc, #228]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800471e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004720:	4b38      	ldr	r3, [pc, #224]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004722:	493e      	ldr	r1, [pc, #248]	; (800481c <HAL_RCC_OscConfig+0x698>)
 8004724:	400a      	ands	r2, r1
 8004726:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b00      	cmp	r3, #0
 800472e:	d100      	bne.n	8004732 <HAL_RCC_OscConfig+0x5ae>
 8004730:	e09d      	b.n	800486e <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b0c      	cmp	r3, #12
 8004736:	d100      	bne.n	800473a <HAL_RCC_OscConfig+0x5b6>
 8004738:	e076      	b.n	8004828 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473e:	2b02      	cmp	r3, #2
 8004740:	d145      	bne.n	80047ce <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004742:	4b30      	ldr	r3, [pc, #192]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4b2f      	ldr	r3, [pc, #188]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004748:	4935      	ldr	r1, [pc, #212]	; (8004820 <HAL_RCC_OscConfig+0x69c>)
 800474a:	400a      	ands	r2, r1
 800474c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474e:	f7fe fb83 	bl	8002e58 <HAL_GetTick>
 8004752:	0003      	movs	r3, r0
 8004754:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004756:	e008      	b.n	800476a <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004758:	f7fe fb7e 	bl	8002e58 <HAL_GetTick>
 800475c:	0002      	movs	r2, r0
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	1ad3      	subs	r3, r2, r3
 8004762:	2b02      	cmp	r3, #2
 8004764:	d901      	bls.n	800476a <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8004766:	2303      	movs	r3, #3
 8004768:	e082      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800476a:	4b26      	ldr	r3, [pc, #152]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	2380      	movs	r3, #128	; 0x80
 8004770:	049b      	lsls	r3, r3, #18
 8004772:	4013      	ands	r3, r2
 8004774:	d1f0      	bne.n	8004758 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004776:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004778:	68db      	ldr	r3, [r3, #12]
 800477a:	4a2a      	ldr	r2, [pc, #168]	; (8004824 <HAL_RCC_OscConfig+0x6a0>)
 800477c:	4013      	ands	r3, r2
 800477e:	0019      	movs	r1, r3
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004788:	431a      	orrs	r2, r3
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	431a      	orrs	r2, r3
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004792:	430a      	orrs	r2, r1
 8004794:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004796:	4b1b      	ldr	r3, [pc, #108]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	4b1a      	ldr	r3, [pc, #104]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 800479c:	2180      	movs	r1, #128	; 0x80
 800479e:	0449      	lsls	r1, r1, #17
 80047a0:	430a      	orrs	r2, r1
 80047a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047a4:	f7fe fb58 	bl	8002e58 <HAL_GetTick>
 80047a8:	0003      	movs	r3, r0
 80047aa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047ac:	e008      	b.n	80047c0 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047ae:	f7fe fb53 	bl	8002e58 <HAL_GetTick>
 80047b2:	0002      	movs	r2, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e057      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80047c0:	4b10      	ldr	r3, [pc, #64]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	2380      	movs	r3, #128	; 0x80
 80047c6:	049b      	lsls	r3, r3, #18
 80047c8:	4013      	ands	r3, r2
 80047ca:	d0f0      	beq.n	80047ae <HAL_RCC_OscConfig+0x62a>
 80047cc:	e04f      	b.n	800486e <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80047d4:	4912      	ldr	r1, [pc, #72]	; (8004820 <HAL_RCC_OscConfig+0x69c>)
 80047d6:	400a      	ands	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047da:	f7fe fb3d 	bl	8002e58 <HAL_GetTick>
 80047de:	0003      	movs	r3, r0
 80047e0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80047e2:	e008      	b.n	80047f6 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e4:	f7fe fb38 	bl	8002e58 <HAL_GetTick>
 80047e8:	0002      	movs	r2, r0
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e03c      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80047f6:	4b03      	ldr	r3, [pc, #12]	; (8004804 <HAL_RCC_OscConfig+0x680>)
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	2380      	movs	r3, #128	; 0x80
 80047fc:	049b      	lsls	r3, r3, #18
 80047fe:	4013      	ands	r3, r2
 8004800:	d1f0      	bne.n	80047e4 <HAL_RCC_OscConfig+0x660>
 8004802:	e034      	b.n	800486e <HAL_RCC_OscConfig+0x6ea>
 8004804:	40021000 	.word	0x40021000
 8004808:	ffff1fff 	.word	0xffff1fff
 800480c:	fffffeff 	.word	0xfffffeff
 8004810:	40007000 	.word	0x40007000
 8004814:	fffffbff 	.word	0xfffffbff
 8004818:	00001388 	.word	0x00001388
 800481c:	efffffff 	.word	0xefffffff
 8004820:	feffffff 	.word	0xfeffffff
 8004824:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800482c:	2b01      	cmp	r3, #1
 800482e:	d101      	bne.n	8004834 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e01d      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004834:	4b10      	ldr	r3, [pc, #64]	; (8004878 <HAL_RCC_OscConfig+0x6f4>)
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	2380      	movs	r3, #128	; 0x80
 800483e:	025b      	lsls	r3, r3, #9
 8004840:	401a      	ands	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	429a      	cmp	r2, r3
 8004848:	d10f      	bne.n	800486a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	23f0      	movs	r3, #240	; 0xf0
 800484e:	039b      	lsls	r3, r3, #14
 8004850:	401a      	ands	r2, r3
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004856:	429a      	cmp	r2, r3
 8004858:	d107      	bne.n	800486a <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	23c0      	movs	r3, #192	; 0xc0
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	401a      	ands	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8004866:	429a      	cmp	r2, r3
 8004868:	d001      	beq.n	800486e <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e000      	b.n	8004870 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800486e:	2300      	movs	r3, #0
}
 8004870:	0018      	movs	r0, r3
 8004872:	46bd      	mov	sp, r7
 8004874:	b00a      	add	sp, #40	; 0x28
 8004876:	bdb0      	pop	{r4, r5, r7, pc}
 8004878:	40021000 	.word	0x40021000

0800487c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800487c:	b5b0      	push	{r4, r5, r7, lr}
 800487e:	b084      	sub	sp, #16
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
 8004884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e128      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004890:	4b96      	ldr	r3, [pc, #600]	; (8004aec <HAL_RCC_ClockConfig+0x270>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2201      	movs	r2, #1
 8004896:	4013      	ands	r3, r2
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	429a      	cmp	r2, r3
 800489c:	d91e      	bls.n	80048dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489e:	4b93      	ldr	r3, [pc, #588]	; (8004aec <HAL_RCC_ClockConfig+0x270>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2201      	movs	r2, #1
 80048a4:	4393      	bics	r3, r2
 80048a6:	0019      	movs	r1, r3
 80048a8:	4b90      	ldr	r3, [pc, #576]	; (8004aec <HAL_RCC_ClockConfig+0x270>)
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80048b0:	f7fe fad2 	bl	8002e58 <HAL_GetTick>
 80048b4:	0003      	movs	r3, r0
 80048b6:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048b8:	e009      	b.n	80048ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048ba:	f7fe facd 	bl	8002e58 <HAL_GetTick>
 80048be:	0002      	movs	r2, r0
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	4a8a      	ldr	r2, [pc, #552]	; (8004af0 <HAL_RCC_ClockConfig+0x274>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e109      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048ce:	4b87      	ldr	r3, [pc, #540]	; (8004aec <HAL_RCC_ClockConfig+0x270>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2201      	movs	r2, #1
 80048d4:	4013      	ands	r3, r2
 80048d6:	683a      	ldr	r2, [r7, #0]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d1ee      	bne.n	80048ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2202      	movs	r2, #2
 80048e2:	4013      	ands	r3, r2
 80048e4:	d009      	beq.n	80048fa <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048e6:	4b83      	ldr	r3, [pc, #524]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	22f0      	movs	r2, #240	; 0xf0
 80048ec:	4393      	bics	r3, r2
 80048ee:	0019      	movs	r1, r3
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689a      	ldr	r2, [r3, #8]
 80048f4:	4b7f      	ldr	r3, [pc, #508]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 80048f6:	430a      	orrs	r2, r1
 80048f8:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2201      	movs	r2, #1
 8004900:	4013      	ands	r3, r2
 8004902:	d100      	bne.n	8004906 <HAL_RCC_ClockConfig+0x8a>
 8004904:	e089      	b.n	8004a1a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	2b02      	cmp	r3, #2
 800490c:	d107      	bne.n	800491e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800490e:	4b79      	ldr	r3, [pc, #484]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	2380      	movs	r3, #128	; 0x80
 8004914:	029b      	lsls	r3, r3, #10
 8004916:	4013      	ands	r3, r2
 8004918:	d120      	bne.n	800495c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e0e1      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	2b03      	cmp	r3, #3
 8004924:	d107      	bne.n	8004936 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004926:	4b73      	ldr	r3, [pc, #460]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	2380      	movs	r3, #128	; 0x80
 800492c:	049b      	lsls	r3, r3, #18
 800492e:	4013      	ands	r3, r2
 8004930:	d114      	bne.n	800495c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e0d5      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d106      	bne.n	800494c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800493e:	4b6d      	ldr	r3, [pc, #436]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2204      	movs	r2, #4
 8004944:	4013      	ands	r3, r2
 8004946:	d109      	bne.n	800495c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e0ca      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800494c:	4b69      	ldr	r3, [pc, #420]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	2380      	movs	r3, #128	; 0x80
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4013      	ands	r3, r2
 8004956:	d101      	bne.n	800495c <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e0c2      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800495c:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2203      	movs	r2, #3
 8004962:	4393      	bics	r3, r2
 8004964:	0019      	movs	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685a      	ldr	r2, [r3, #4]
 800496a:	4b62      	ldr	r3, [pc, #392]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 800496c:	430a      	orrs	r2, r1
 800496e:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004970:	f7fe fa72 	bl	8002e58 <HAL_GetTick>
 8004974:	0003      	movs	r3, r0
 8004976:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b02      	cmp	r3, #2
 800497e:	d111      	bne.n	80049a4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004980:	e009      	b.n	8004996 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004982:	f7fe fa69 	bl	8002e58 <HAL_GetTick>
 8004986:	0002      	movs	r2, r0
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	4a58      	ldr	r2, [pc, #352]	; (8004af0 <HAL_RCC_ClockConfig+0x274>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d901      	bls.n	8004996 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e0a5      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004996:	4b57      	ldr	r3, [pc, #348]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	220c      	movs	r2, #12
 800499c:	4013      	ands	r3, r2
 800499e:	2b08      	cmp	r3, #8
 80049a0:	d1ef      	bne.n	8004982 <HAL_RCC_ClockConfig+0x106>
 80049a2:	e03a      	b.n	8004a1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	2b03      	cmp	r3, #3
 80049aa:	d111      	bne.n	80049d0 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049ac:	e009      	b.n	80049c2 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049ae:	f7fe fa53 	bl	8002e58 <HAL_GetTick>
 80049b2:	0002      	movs	r2, r0
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	4a4d      	ldr	r2, [pc, #308]	; (8004af0 <HAL_RCC_ClockConfig+0x274>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e08f      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c2:	4b4c      	ldr	r3, [pc, #304]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	220c      	movs	r2, #12
 80049c8:	4013      	ands	r3, r2
 80049ca:	2b0c      	cmp	r3, #12
 80049cc:	d1ef      	bne.n	80049ae <HAL_RCC_ClockConfig+0x132>
 80049ce:	e024      	b.n	8004a1a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d11b      	bne.n	8004a10 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049d8:	e009      	b.n	80049ee <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049da:	f7fe fa3d 	bl	8002e58 <HAL_GetTick>
 80049de:	0002      	movs	r2, r0
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	1ad3      	subs	r3, r2, r3
 80049e4:	4a42      	ldr	r2, [pc, #264]	; (8004af0 <HAL_RCC_ClockConfig+0x274>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e079      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80049ee:	4b41      	ldr	r3, [pc, #260]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	220c      	movs	r2, #12
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b04      	cmp	r3, #4
 80049f8:	d1ef      	bne.n	80049da <HAL_RCC_ClockConfig+0x15e>
 80049fa:	e00e      	b.n	8004a1a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fc:	f7fe fa2c 	bl	8002e58 <HAL_GetTick>
 8004a00:	0002      	movs	r2, r0
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	4a3a      	ldr	r2, [pc, #232]	; (8004af0 <HAL_RCC_ClockConfig+0x274>)
 8004a08:	4293      	cmp	r3, r2
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e068      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004a10:	4b38      	ldr	r3, [pc, #224]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	220c      	movs	r2, #12
 8004a16:	4013      	ands	r3, r2
 8004a18:	d1f0      	bne.n	80049fc <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a1a:	4b34      	ldr	r3, [pc, #208]	; (8004aec <HAL_RCC_ClockConfig+0x270>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	4013      	ands	r3, r2
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d21e      	bcs.n	8004a66 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a28:	4b30      	ldr	r3, [pc, #192]	; (8004aec <HAL_RCC_ClockConfig+0x270>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	4393      	bics	r3, r2
 8004a30:	0019      	movs	r1, r3
 8004a32:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <HAL_RCC_ClockConfig+0x270>)
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004a3a:	f7fe fa0d 	bl	8002e58 <HAL_GetTick>
 8004a3e:	0003      	movs	r3, r0
 8004a40:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	e009      	b.n	8004a58 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a44:	f7fe fa08 	bl	8002e58 <HAL_GetTick>
 8004a48:	0002      	movs	r2, r0
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	4a28      	ldr	r2, [pc, #160]	; (8004af0 <HAL_RCC_ClockConfig+0x274>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e044      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a58:	4b24      	ldr	r3, [pc, #144]	; (8004aec <HAL_RCC_ClockConfig+0x270>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	4013      	ands	r3, r2
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d1ee      	bne.n	8004a44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2204      	movs	r2, #4
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d009      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a70:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	4a20      	ldr	r2, [pc, #128]	; (8004af8 <HAL_RCC_ClockConfig+0x27c>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	4b1d      	ldr	r3, [pc, #116]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004a80:	430a      	orrs	r2, r1
 8004a82:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2208      	movs	r2, #8
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	d00a      	beq.n	8004aa4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004a8e:	4b19      	ldr	r3, [pc, #100]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	4a1a      	ldr	r2, [pc, #104]	; (8004afc <HAL_RCC_ClockConfig+0x280>)
 8004a94:	4013      	ands	r3, r2
 8004a96:	0019      	movs	r1, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	00da      	lsls	r2, r3, #3
 8004a9e:	4b15      	ldr	r3, [pc, #84]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004aa4:	f000 f840 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8004aa8:	0001      	movs	r1, r0
 8004aaa:	4b12      	ldr	r3, [pc, #72]	; (8004af4 <HAL_RCC_ClockConfig+0x278>)
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	091b      	lsrs	r3, r3, #4
 8004ab0:	220f      	movs	r2, #15
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	4a12      	ldr	r2, [pc, #72]	; (8004b00 <HAL_RCC_ClockConfig+0x284>)
 8004ab6:	5cd3      	ldrb	r3, [r2, r3]
 8004ab8:	000a      	movs	r2, r1
 8004aba:	40da      	lsrs	r2, r3
 8004abc:	4b11      	ldr	r3, [pc, #68]	; (8004b04 <HAL_RCC_ClockConfig+0x288>)
 8004abe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004ac0:	4b11      	ldr	r3, [pc, #68]	; (8004b08 <HAL_RCC_ClockConfig+0x28c>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	250b      	movs	r5, #11
 8004ac6:	197c      	adds	r4, r7, r5
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fe f97f 	bl	8002dcc <HAL_InitTick>
 8004ace:	0003      	movs	r3, r0
 8004ad0:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004ad2:	197b      	adds	r3, r7, r5
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004ada:	197b      	adds	r3, r7, r5
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	e000      	b.n	8004ae2 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	0018      	movs	r0, r3
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	b004      	add	sp, #16
 8004ae8:	bdb0      	pop	{r4, r5, r7, pc}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	40022000 	.word	0x40022000
 8004af0:	00001388 	.word	0x00001388
 8004af4:	40021000 	.word	0x40021000
 8004af8:	fffff8ff 	.word	0xfffff8ff
 8004afc:	ffffc7ff 	.word	0xffffc7ff
 8004b00:	0800913c 	.word	0x0800913c
 8004b04:	20000008 	.word	0x20000008
 8004b08:	2000000c 	.word	0x2000000c

08004b0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004b10:	4b04      	ldr	r3, [pc, #16]	; (8004b24 <HAL_RCC_EnableCSS+0x18>)
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	4b03      	ldr	r3, [pc, #12]	; (8004b24 <HAL_RCC_EnableCSS+0x18>)
 8004b16:	2180      	movs	r1, #128	; 0x80
 8004b18:	0309      	lsls	r1, r1, #12
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]
}
 8004b1e:	46c0      	nop			; (mov r8, r8)
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bd80      	pop	{r7, pc}
 8004b24:	40021000 	.word	0x40021000

08004b28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b28:	b5b0      	push	{r4, r5, r7, lr}
 8004b2a:	b08e      	sub	sp, #56	; 0x38
 8004b2c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004b2e:	4b4c      	ldr	r3, [pc, #304]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004b34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b36:	230c      	movs	r3, #12
 8004b38:	4013      	ands	r3, r2
 8004b3a:	2b0c      	cmp	r3, #12
 8004b3c:	d014      	beq.n	8004b68 <HAL_RCC_GetSysClockFreq+0x40>
 8004b3e:	d900      	bls.n	8004b42 <HAL_RCC_GetSysClockFreq+0x1a>
 8004b40:	e07b      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x112>
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d002      	beq.n	8004b4c <HAL_RCC_GetSysClockFreq+0x24>
 8004b46:	2b08      	cmp	r3, #8
 8004b48:	d00b      	beq.n	8004b62 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b4a:	e076      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b4c:	4b44      	ldr	r3, [pc, #272]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	2210      	movs	r2, #16
 8004b52:	4013      	ands	r3, r2
 8004b54:	d002      	beq.n	8004b5c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004b56:	4b43      	ldr	r3, [pc, #268]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b58:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004b5a:	e07c      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004b5c:	4b42      	ldr	r3, [pc, #264]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b60:	e079      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004b62:	4b41      	ldr	r3, [pc, #260]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b64:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b66:	e076      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b6a:	0c9a      	lsrs	r2, r3, #18
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	401a      	ands	r2, r3
 8004b70:	4b3e      	ldr	r3, [pc, #248]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x144>)
 8004b72:	5c9b      	ldrb	r3, [r3, r2]
 8004b74:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b78:	0d9a      	lsrs	r2, r3, #22
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	3301      	adds	r3, #1
 8004b80:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b82:	4b37      	ldr	r3, [pc, #220]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b84:	68da      	ldr	r2, [r3, #12]
 8004b86:	2380      	movs	r3, #128	; 0x80
 8004b88:	025b      	lsls	r3, r3, #9
 8004b8a:	4013      	ands	r3, r2
 8004b8c:	d01a      	beq.n	8004bc4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	2300      	movs	r3, #0
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	4a34      	ldr	r2, [pc, #208]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b98:	2300      	movs	r3, #0
 8004b9a:	69b8      	ldr	r0, [r7, #24]
 8004b9c:	69f9      	ldr	r1, [r7, #28]
 8004b9e:	f7fb fb71 	bl	8000284 <__aeabi_lmul>
 8004ba2:	0002      	movs	r2, r0
 8004ba4:	000b      	movs	r3, r1
 8004ba6:	0010      	movs	r0, r2
 8004ba8:	0019      	movs	r1, r3
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	613b      	str	r3, [r7, #16]
 8004bae:	2300      	movs	r3, #0
 8004bb0:	617b      	str	r3, [r7, #20]
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f7fb fb45 	bl	8000244 <__aeabi_uldivmod>
 8004bba:	0002      	movs	r2, r0
 8004bbc:	000b      	movs	r3, r1
 8004bbe:	0013      	movs	r3, r2
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
 8004bc2:	e037      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004bc4:	4b26      	ldr	r3, [pc, #152]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	2210      	movs	r2, #16
 8004bca:	4013      	ands	r3, r2
 8004bcc:	d01a      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	60bb      	str	r3, [r7, #8]
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	68b8      	ldr	r0, [r7, #8]
 8004bdc:	68f9      	ldr	r1, [r7, #12]
 8004bde:	f7fb fb51 	bl	8000284 <__aeabi_lmul>
 8004be2:	0002      	movs	r2, r0
 8004be4:	000b      	movs	r3, r1
 8004be6:	0010      	movs	r0, r2
 8004be8:	0019      	movs	r1, r3
 8004bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bec:	603b      	str	r3, [r7, #0]
 8004bee:	2300      	movs	r3, #0
 8004bf0:	607b      	str	r3, [r7, #4]
 8004bf2:	683a      	ldr	r2, [r7, #0]
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f7fb fb25 	bl	8000244 <__aeabi_uldivmod>
 8004bfa:	0002      	movs	r2, r0
 8004bfc:	000b      	movs	r3, r1
 8004bfe:	0013      	movs	r3, r2
 8004c00:	637b      	str	r3, [r7, #52]	; 0x34
 8004c02:	e017      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c06:	0018      	movs	r0, r3
 8004c08:	2300      	movs	r3, #0
 8004c0a:	0019      	movs	r1, r3
 8004c0c:	4a16      	ldr	r2, [pc, #88]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x140>)
 8004c0e:	2300      	movs	r3, #0
 8004c10:	f7fb fb38 	bl	8000284 <__aeabi_lmul>
 8004c14:	0002      	movs	r2, r0
 8004c16:	000b      	movs	r3, r1
 8004c18:	0010      	movs	r0, r2
 8004c1a:	0019      	movs	r1, r3
 8004c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c1e:	001c      	movs	r4, r3
 8004c20:	2300      	movs	r3, #0
 8004c22:	001d      	movs	r5, r3
 8004c24:	0022      	movs	r2, r4
 8004c26:	002b      	movs	r3, r5
 8004c28:	f7fb fb0c 	bl	8000244 <__aeabi_uldivmod>
 8004c2c:	0002      	movs	r2, r0
 8004c2e:	000b      	movs	r3, r1
 8004c30:	0013      	movs	r3, r2
 8004c32:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004c34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c36:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c38:	e00d      	b.n	8004c56 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004c3a:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x138>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	0b5b      	lsrs	r3, r3, #13
 8004c40:	2207      	movs	r2, #7
 8004c42:	4013      	ands	r3, r2
 8004c44:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	3301      	adds	r3, #1
 8004c4a:	2280      	movs	r2, #128	; 0x80
 8004c4c:	0212      	lsls	r2, r2, #8
 8004c4e:	409a      	lsls	r2, r3
 8004c50:	0013      	movs	r3, r2
 8004c52:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004c54:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004c58:	0018      	movs	r0, r3
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	b00e      	add	sp, #56	; 0x38
 8004c5e:	bdb0      	pop	{r4, r5, r7, pc}
 8004c60:	40021000 	.word	0x40021000
 8004c64:	003d0900 	.word	0x003d0900
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	08009154 	.word	0x08009154

08004c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b02      	ldr	r3, [pc, #8]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x10>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	0018      	movs	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	46c0      	nop			; (mov r8, r8)
 8004c80:	20000008 	.word	0x20000008

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c88:	f7ff fff2 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c8c:	0001      	movs	r1, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	2207      	movs	r2, #7
 8004c96:	4013      	ands	r3, r2
 8004c98:	4a04      	ldr	r2, [pc, #16]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c9a:	5cd3      	ldrb	r3, [r2, r3]
 8004c9c:	40d9      	lsrs	r1, r3
 8004c9e:	000b      	movs	r3, r1
}
 8004ca0:	0018      	movs	r0, r3
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	46c0      	nop			; (mov r8, r8)
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	0800914c 	.word	0x0800914c

08004cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004cb4:	f7ff ffdc 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004cb8:	0001      	movs	r1, r0
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	0adb      	lsrs	r3, r3, #11
 8004cc0:	2207      	movs	r2, #7
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	4a04      	ldr	r2, [pc, #16]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cc6:	5cd3      	ldrb	r3, [r2, r3]
 8004cc8:	40d9      	lsrs	r1, r3
 8004cca:	000b      	movs	r3, r1
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	46c0      	nop			; (mov r8, r8)
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	0800914c 	.word	0x0800914c

08004cdc <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004ce0:	4b08      	ldr	r3, [pc, #32]	; (8004d04 <HAL_RCC_NMI_IRQHandler+0x28>)
 8004ce2:	695a      	ldr	r2, [r3, #20]
 8004ce4:	2380      	movs	r3, #128	; 0x80
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	401a      	ands	r2, r3
 8004cea:	2380      	movs	r3, #128	; 0x80
 8004cec:	005b      	lsls	r3, r3, #1
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d105      	bne.n	8004cfe <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004cf2:	f000 f809 	bl	8004d08 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004cf6:	4b03      	ldr	r3, [pc, #12]	; (8004d04 <HAL_RCC_NMI_IRQHandler+0x28>)
 8004cf8:	2280      	movs	r2, #128	; 0x80
 8004cfa:	0052      	lsls	r2, r2, #1
 8004cfc:	619a      	str	r2, [r3, #24]
  }
}
 8004cfe:	46c0      	nop			; (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000

08004d08 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8004d0c:	46c0      	nop			; (mov r8, r8)
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004d1c:	2017      	movs	r0, #23
 8004d1e:	183b      	adds	r3, r7, r0
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2220      	movs	r2, #32
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	d100      	bne.n	8004d30 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004d2e:	e0c2      	b.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d30:	4b91      	ldr	r3, [pc, #580]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d34:	2380      	movs	r3, #128	; 0x80
 8004d36:	055b      	lsls	r3, r3, #21
 8004d38:	4013      	ands	r3, r2
 8004d3a:	d109      	bne.n	8004d50 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d3c:	4b8e      	ldr	r3, [pc, #568]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d40:	4b8d      	ldr	r3, [pc, #564]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d42:	2180      	movs	r1, #128	; 0x80
 8004d44:	0549      	lsls	r1, r1, #21
 8004d46:	430a      	orrs	r2, r1
 8004d48:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004d4a:	183b      	adds	r3, r7, r0
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d50:	4b8a      	ldr	r3, [pc, #552]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	2380      	movs	r3, #128	; 0x80
 8004d56:	005b      	lsls	r3, r3, #1
 8004d58:	4013      	ands	r3, r2
 8004d5a:	d11a      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d5c:	4b87      	ldr	r3, [pc, #540]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	4b86      	ldr	r3, [pc, #536]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	0049      	lsls	r1, r1, #1
 8004d66:	430a      	orrs	r2, r1
 8004d68:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d6a:	f7fe f875 	bl	8002e58 <HAL_GetTick>
 8004d6e:	0003      	movs	r3, r0
 8004d70:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d72:	e008      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d74:	f7fe f870 	bl	8002e58 <HAL_GetTick>
 8004d78:	0002      	movs	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b64      	cmp	r3, #100	; 0x64
 8004d80:	d901      	bls.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e0f3      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d86:	4b7d      	ldr	r3, [pc, #500]	; (8004f7c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	2380      	movs	r3, #128	; 0x80
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	4013      	ands	r3, r2
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004d92:	4b79      	ldr	r3, [pc, #484]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	23c0      	movs	r3, #192	; 0xc0
 8004d98:	039b      	lsls	r3, r3, #14
 8004d9a:	4013      	ands	r3, r2
 8004d9c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	23c0      	movs	r3, #192	; 0xc0
 8004da4:	039b      	lsls	r3, r3, #14
 8004da6:	4013      	ands	r3, r2
 8004da8:	68fa      	ldr	r2, [r7, #12]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d013      	beq.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	23c0      	movs	r3, #192	; 0xc0
 8004db4:	029b      	lsls	r3, r3, #10
 8004db6:	401a      	ands	r2, r3
 8004db8:	23c0      	movs	r3, #192	; 0xc0
 8004dba:	029b      	lsls	r3, r3, #10
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d10a      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004dc0:	4b6d      	ldr	r3, [pc, #436]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	2380      	movs	r3, #128	; 0x80
 8004dc6:	029b      	lsls	r3, r3, #10
 8004dc8:	401a      	ands	r2, r3
 8004dca:	2380      	movs	r3, #128	; 0x80
 8004dcc:	029b      	lsls	r3, r3, #10
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d101      	bne.n	8004dd6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e0cb      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004dd6:	4b68      	ldr	r3, [pc, #416]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004dda:	23c0      	movs	r3, #192	; 0xc0
 8004ddc:	029b      	lsls	r3, r3, #10
 8004dde:	4013      	ands	r3, r2
 8004de0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d03b      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	23c0      	movs	r3, #192	; 0xc0
 8004dee:	029b      	lsls	r3, r3, #10
 8004df0:	4013      	ands	r3, r2
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d033      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	2220      	movs	r2, #32
 8004dfe:	4013      	ands	r3, r2
 8004e00:	d02e      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004e02:	4b5d      	ldr	r3, [pc, #372]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e06:	4a5e      	ldr	r2, [pc, #376]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e0c:	4b5a      	ldr	r3, [pc, #360]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e12:	2180      	movs	r1, #128	; 0x80
 8004e14:	0309      	lsls	r1, r1, #12
 8004e16:	430a      	orrs	r2, r1
 8004e18:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1a:	4b57      	ldr	r3, [pc, #348]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e1e:	4b56      	ldr	r3, [pc, #344]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e20:	4958      	ldr	r1, [pc, #352]	; (8004f84 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004e22:	400a      	ands	r2, r1
 8004e24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004e26:	4b54      	ldr	r3, [pc, #336]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e28:	68fa      	ldr	r2, [r7, #12]
 8004e2a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	4013      	ands	r3, r2
 8004e34:	d014      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e36:	f7fe f80f 	bl	8002e58 <HAL_GetTick>
 8004e3a:	0003      	movs	r3, r0
 8004e3c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e3e:	e009      	b.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e40:	f7fe f80a 	bl	8002e58 <HAL_GetTick>
 8004e44:	0002      	movs	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	4a4f      	ldr	r2, [pc, #316]	; (8004f88 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d901      	bls.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004e50:	2303      	movs	r3, #3
 8004e52:	e08c      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004e54:	4b48      	ldr	r3, [pc, #288]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d0ef      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	685a      	ldr	r2, [r3, #4]
 8004e64:	23c0      	movs	r3, #192	; 0xc0
 8004e66:	029b      	lsls	r3, r3, #10
 8004e68:	401a      	ands	r2, r3
 8004e6a:	23c0      	movs	r3, #192	; 0xc0
 8004e6c:	029b      	lsls	r3, r3, #10
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d10c      	bne.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004e72:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a45      	ldr	r2, [pc, #276]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	0019      	movs	r1, r3
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	23c0      	movs	r3, #192	; 0xc0
 8004e82:	039b      	lsls	r3, r3, #14
 8004e84:	401a      	ands	r2, r3
 8004e86:	4b3c      	ldr	r3, [pc, #240]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	601a      	str	r2, [r3, #0]
 8004e8c:	4b3a      	ldr	r3, [pc, #232]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e8e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	685a      	ldr	r2, [r3, #4]
 8004e94:	23c0      	movs	r3, #192	; 0xc0
 8004e96:	029b      	lsls	r3, r3, #10
 8004e98:	401a      	ands	r2, r3
 8004e9a:	4b37      	ldr	r3, [pc, #220]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e9c:	430a      	orrs	r2, r1
 8004e9e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004ea0:	2317      	movs	r3, #23
 8004ea2:	18fb      	adds	r3, r7, r3
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d105      	bne.n	8004eb6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eaa:	4b33      	ldr	r3, [pc, #204]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eae:	4b32      	ldr	r3, [pc, #200]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eb0:	4937      	ldr	r1, [pc, #220]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004eb2:	400a      	ands	r2, r1
 8004eb4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	d009      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ec0:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ec4:	2203      	movs	r2, #3
 8004ec6:	4393      	bics	r3, r2
 8004ec8:	0019      	movs	r1, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	4b2a      	ldr	r3, [pc, #168]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	2202      	movs	r2, #2
 8004eda:	4013      	ands	r3, r2
 8004edc:	d009      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ede:	4b26      	ldr	r3, [pc, #152]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ee2:	220c      	movs	r2, #12
 8004ee4:	4393      	bics	r3, r2
 8004ee6:	0019      	movs	r1, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	4b22      	ldr	r3, [pc, #136]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	2204      	movs	r2, #4
 8004ef8:	4013      	ands	r3, r2
 8004efa:	d009      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004efc:	4b1e      	ldr	r3, [pc, #120]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004f02:	4013      	ands	r3, r2
 8004f04:	0019      	movs	r1, r3
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	691a      	ldr	r2, [r3, #16]
 8004f0a:	4b1b      	ldr	r3, [pc, #108]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2208      	movs	r2, #8
 8004f16:	4013      	ands	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004f1a:	4b17      	ldr	r3, [pc, #92]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f1e:	4a1e      	ldr	r2, [pc, #120]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004f20:	4013      	ands	r3, r2
 8004f22:	0019      	movs	r1, r3
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	695a      	ldr	r2, [r3, #20]
 8004f28:	4b13      	ldr	r3, [pc, #76]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f2a:	430a      	orrs	r2, r1
 8004f2c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	2380      	movs	r3, #128	; 0x80
 8004f34:	005b      	lsls	r3, r3, #1
 8004f36:	4013      	ands	r3, r2
 8004f38:	d009      	beq.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f3e:	4a10      	ldr	r2, [pc, #64]	; (8004f80 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004f40:	4013      	ands	r3, r2
 8004f42:	0019      	movs	r1, r3
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	699a      	ldr	r2, [r3, #24]
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f4a:	430a      	orrs	r2, r1
 8004f4c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2280      	movs	r2, #128	; 0x80
 8004f54:	4013      	ands	r3, r2
 8004f56:	d009      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004f58:	4b07      	ldr	r3, [pc, #28]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f5c:	4a0f      	ldr	r2, [pc, #60]	; (8004f9c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004f5e:	4013      	ands	r3, r2
 8004f60:	0019      	movs	r1, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69da      	ldr	r2, [r3, #28]
 8004f66:	4b04      	ldr	r3, [pc, #16]	; (8004f78 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	0018      	movs	r0, r3
 8004f70:	46bd      	mov	sp, r7
 8004f72:	b006      	add	sp, #24
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	46c0      	nop			; (mov r8, r8)
 8004f78:	40021000 	.word	0x40021000
 8004f7c:	40007000 	.word	0x40007000
 8004f80:	fffcffff 	.word	0xfffcffff
 8004f84:	fff7ffff 	.word	0xfff7ffff
 8004f88:	00001388 	.word	0x00001388
 8004f8c:	ffcfffff 	.word	0xffcfffff
 8004f90:	efffffff 	.word	0xefffffff
 8004f94:	fffff3ff 	.word	0xfffff3ff
 8004f98:	ffffcfff 	.word	0xffffcfff
 8004f9c:	fff3ffff 	.word	0xfff3ffff

08004fa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b082      	sub	sp, #8
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d101      	bne.n	8004fb2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e083      	b.n	80050ba <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d109      	bne.n	8004fce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685a      	ldr	r2, [r3, #4]
 8004fbe:	2382      	movs	r3, #130	; 0x82
 8004fc0:	005b      	lsls	r3, r3, #1
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d009      	beq.n	8004fda <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2200      	movs	r2, #0
 8004fca:	61da      	str	r2, [r3, #28]
 8004fcc:	e005      	b.n	8004fda <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2251      	movs	r2, #81	; 0x51
 8004fe4:	5c9b      	ldrb	r3, [r3, r2]
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d107      	bne.n	8004ffc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2250      	movs	r2, #80	; 0x50
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	f7fd fda8 	bl	8002b4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2251      	movs	r2, #81	; 0x51
 8005000:	2102      	movs	r1, #2
 8005002:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	2140      	movs	r1, #64	; 0x40
 8005010:	438a      	bics	r2, r1
 8005012:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	2382      	movs	r3, #130	; 0x82
 800501a:	005b      	lsls	r3, r3, #1
 800501c:	401a      	ands	r2, r3
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6899      	ldr	r1, [r3, #8]
 8005022:	2384      	movs	r3, #132	; 0x84
 8005024:	021b      	lsls	r3, r3, #8
 8005026:	400b      	ands	r3, r1
 8005028:	431a      	orrs	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68d9      	ldr	r1, [r3, #12]
 800502e:	2380      	movs	r3, #128	; 0x80
 8005030:	011b      	lsls	r3, r3, #4
 8005032:	400b      	ands	r3, r1
 8005034:	431a      	orrs	r2, r3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	2102      	movs	r1, #2
 800503c:	400b      	ands	r3, r1
 800503e:	431a      	orrs	r2, r3
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	695b      	ldr	r3, [r3, #20]
 8005044:	2101      	movs	r1, #1
 8005046:	400b      	ands	r3, r1
 8005048:	431a      	orrs	r2, r3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6999      	ldr	r1, [r3, #24]
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	400b      	ands	r3, r1
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2138      	movs	r1, #56	; 0x38
 800505c:	400b      	ands	r3, r1
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	2180      	movs	r1, #128	; 0x80
 8005066:	400b      	ands	r3, r1
 8005068:	431a      	orrs	r2, r3
 800506a:	0011      	movs	r1, r2
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005070:	2380      	movs	r3, #128	; 0x80
 8005072:	019b      	lsls	r3, r3, #6
 8005074:	401a      	ands	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	0c1b      	lsrs	r3, r3, #16
 8005084:	2204      	movs	r2, #4
 8005086:	4013      	ands	r3, r2
 8005088:	0019      	movs	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508e:	2210      	movs	r2, #16
 8005090:	401a      	ands	r2, r3
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69da      	ldr	r2, [r3, #28]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4907      	ldr	r1, [pc, #28]	; (80050c4 <HAL_SPI_Init+0x124>)
 80050a6:	400a      	ands	r2, r1
 80050a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	2251      	movs	r2, #81	; 0x51
 80050b4:	2101      	movs	r1, #1
 80050b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	0018      	movs	r0, r3
 80050bc:	46bd      	mov	sp, r7
 80050be:	b002      	add	sp, #8
 80050c0:	bd80      	pop	{r7, pc}
 80050c2:	46c0      	nop			; (mov r8, r8)
 80050c4:	fffff7ff 	.word	0xfffff7ff

080050c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	603b      	str	r3, [r7, #0]
 80050d4:	1dbb      	adds	r3, r7, #6
 80050d6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80050d8:	231f      	movs	r3, #31
 80050da:	18fb      	adds	r3, r7, r3
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2250      	movs	r2, #80	; 0x50
 80050e4:	5c9b      	ldrb	r3, [r3, r2]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d101      	bne.n	80050ee <HAL_SPI_Transmit+0x26>
 80050ea:	2302      	movs	r3, #2
 80050ec:	e13e      	b.n	800536c <HAL_SPI_Transmit+0x2a4>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2250      	movs	r2, #80	; 0x50
 80050f2:	2101      	movs	r1, #1
 80050f4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80050f6:	f7fd feaf 	bl	8002e58 <HAL_GetTick>
 80050fa:	0003      	movs	r3, r0
 80050fc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80050fe:	2316      	movs	r3, #22
 8005100:	18fb      	adds	r3, r7, r3
 8005102:	1dba      	adds	r2, r7, #6
 8005104:	8812      	ldrh	r2, [r2, #0]
 8005106:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2251      	movs	r2, #81	; 0x51
 800510c:	5c9b      	ldrb	r3, [r3, r2]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	d004      	beq.n	800511e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005114:	231f      	movs	r3, #31
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	2202      	movs	r2, #2
 800511a:	701a      	strb	r2, [r3, #0]
    goto error;
 800511c:	e11b      	b.n	8005356 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d003      	beq.n	800512c <HAL_SPI_Transmit+0x64>
 8005124:	1dbb      	adds	r3, r7, #6
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d104      	bne.n	8005136 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800512c:	231f      	movs	r3, #31
 800512e:	18fb      	adds	r3, r7, r3
 8005130:	2201      	movs	r2, #1
 8005132:	701a      	strb	r2, [r3, #0]
    goto error;
 8005134:	e10f      	b.n	8005356 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2251      	movs	r2, #81	; 0x51
 800513a:	2103      	movs	r1, #3
 800513c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	1dba      	adds	r2, r7, #6
 800514e:	8812      	ldrh	r2, [r2, #0]
 8005150:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	1dba      	adds	r2, r7, #6
 8005156:	8812      	ldrh	r2, [r2, #0]
 8005158:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2200      	movs	r2, #0
 800515e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2200      	movs	r2, #0
 8005176:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	689a      	ldr	r2, [r3, #8]
 800517c:	2380      	movs	r3, #128	; 0x80
 800517e:	021b      	lsls	r3, r3, #8
 8005180:	429a      	cmp	r2, r3
 8005182:	d110      	bne.n	80051a6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2140      	movs	r1, #64	; 0x40
 8005190:	438a      	bics	r2, r1
 8005192:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2180      	movs	r1, #128	; 0x80
 80051a0:	01c9      	lsls	r1, r1, #7
 80051a2:	430a      	orrs	r2, r1
 80051a4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2240      	movs	r2, #64	; 0x40
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b40      	cmp	r3, #64	; 0x40
 80051b2:	d007      	beq.n	80051c4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2140      	movs	r1, #64	; 0x40
 80051c0:	430a      	orrs	r2, r1
 80051c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	68da      	ldr	r2, [r3, #12]
 80051c8:	2380      	movs	r3, #128	; 0x80
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d14e      	bne.n	800526e <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <HAL_SPI_Transmit+0x11a>
 80051d8:	2316      	movs	r3, #22
 80051da:	18fb      	adds	r3, r7, r3
 80051dc:	881b      	ldrh	r3, [r3, #0]
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d13f      	bne.n	8005262 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	881a      	ldrh	r2, [r3, #0]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051fc:	b29b      	uxth	r3, r3
 80051fe:	3b01      	subs	r3, #1
 8005200:	b29a      	uxth	r2, r3
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005206:	e02c      	b.n	8005262 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	689b      	ldr	r3, [r3, #8]
 800520e:	2202      	movs	r2, #2
 8005210:	4013      	ands	r3, r2
 8005212:	2b02      	cmp	r3, #2
 8005214:	d112      	bne.n	800523c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800521a:	881a      	ldrh	r2, [r3, #0]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005226:	1c9a      	adds	r2, r3, #2
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005230:	b29b      	uxth	r3, r3
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	86da      	strh	r2, [r3, #54]	; 0x36
 800523a:	e012      	b.n	8005262 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800523c:	f7fd fe0c 	bl	8002e58 <HAL_GetTick>
 8005240:	0002      	movs	r2, r0
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	429a      	cmp	r2, r3
 800524a:	d802      	bhi.n	8005252 <HAL_SPI_Transmit+0x18a>
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	3301      	adds	r3, #1
 8005250:	d102      	bne.n	8005258 <HAL_SPI_Transmit+0x190>
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8005258:	231f      	movs	r3, #31
 800525a:	18fb      	adds	r3, r7, r3
 800525c:	2203      	movs	r2, #3
 800525e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005260:	e079      	b.n	8005356 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005266:	b29b      	uxth	r3, r3
 8005268:	2b00      	cmp	r3, #0
 800526a:	d1cd      	bne.n	8005208 <HAL_SPI_Transmit+0x140>
 800526c:	e04f      	b.n	800530e <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	685b      	ldr	r3, [r3, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d004      	beq.n	8005280 <HAL_SPI_Transmit+0x1b8>
 8005276:	2316      	movs	r3, #22
 8005278:	18fb      	adds	r3, r7, r3
 800527a:	881b      	ldrh	r3, [r3, #0]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d141      	bne.n	8005304 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	330c      	adds	r3, #12
 800528a:	7812      	ldrb	r2, [r2, #0]
 800528c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	1c5a      	adds	r2, r3, #1
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800529c:	b29b      	uxth	r3, r3
 800529e:	3b01      	subs	r3, #1
 80052a0:	b29a      	uxth	r2, r3
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80052a6:	e02d      	b.n	8005304 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	2202      	movs	r2, #2
 80052b0:	4013      	ands	r3, r2
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d113      	bne.n	80052de <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	330c      	adds	r3, #12
 80052c0:	7812      	ldrb	r2, [r2, #0]
 80052c2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c8:	1c5a      	adds	r2, r3, #1
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80052d2:	b29b      	uxth	r3, r3
 80052d4:	3b01      	subs	r3, #1
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	86da      	strh	r2, [r3, #54]	; 0x36
 80052dc:	e012      	b.n	8005304 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80052de:	f7fd fdbb 	bl	8002e58 <HAL_GetTick>
 80052e2:	0002      	movs	r2, r0
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	683a      	ldr	r2, [r7, #0]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d802      	bhi.n	80052f4 <HAL_SPI_Transmit+0x22c>
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	3301      	adds	r3, #1
 80052f2:	d102      	bne.n	80052fa <HAL_SPI_Transmit+0x232>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d104      	bne.n	8005304 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80052fa:	231f      	movs	r3, #31
 80052fc:	18fb      	adds	r3, r7, r3
 80052fe:	2203      	movs	r2, #3
 8005300:	701a      	strb	r2, [r3, #0]
          goto error;
 8005302:	e028      	b.n	8005356 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1cc      	bne.n	80052a8 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800530e:	69ba      	ldr	r2, [r7, #24]
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	0018      	movs	r0, r3
 8005316:	f000 fc07 	bl	8005b28 <SPI_EndRxTxTransaction>
 800531a:	1e03      	subs	r3, r0, #0
 800531c:	d002      	beq.n	8005324 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10a      	bne.n	8005342 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800532c:	2300      	movs	r3, #0
 800532e:	613b      	str	r3, [r7, #16]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	689b      	ldr	r3, [r3, #8]
 800533e:	613b      	str	r3, [r7, #16]
 8005340:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005346:	2b00      	cmp	r3, #0
 8005348:	d004      	beq.n	8005354 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800534a:	231f      	movs	r3, #31
 800534c:	18fb      	adds	r3, r7, r3
 800534e:	2201      	movs	r2, #1
 8005350:	701a      	strb	r2, [r3, #0]
 8005352:	e000      	b.n	8005356 <HAL_SPI_Transmit+0x28e>
  }

error:
 8005354:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2251      	movs	r2, #81	; 0x51
 800535a:	2101      	movs	r1, #1
 800535c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2250      	movs	r2, #80	; 0x50
 8005362:	2100      	movs	r1, #0
 8005364:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005366:	231f      	movs	r3, #31
 8005368:	18fb      	adds	r3, r7, r3
 800536a:	781b      	ldrb	r3, [r3, #0]
}
 800536c:	0018      	movs	r0, r3
 800536e:	46bd      	mov	sp, r7
 8005370:	b008      	add	sp, #32
 8005372:	bd80      	pop	{r7, pc}

08005374 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005374:	b590      	push	{r4, r7, lr}
 8005376:	b089      	sub	sp, #36	; 0x24
 8005378:	af02      	add	r7, sp, #8
 800537a:	60f8      	str	r0, [r7, #12]
 800537c:	60b9      	str	r1, [r7, #8]
 800537e:	603b      	str	r3, [r7, #0]
 8005380:	1dbb      	adds	r3, r7, #6
 8005382:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005384:	2317      	movs	r3, #23
 8005386:	18fb      	adds	r3, r7, r3
 8005388:	2200      	movs	r2, #0
 800538a:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	685a      	ldr	r2, [r3, #4]
 8005390:	2382      	movs	r3, #130	; 0x82
 8005392:	005b      	lsls	r3, r3, #1
 8005394:	429a      	cmp	r2, r3
 8005396:	d113      	bne.n	80053c0 <HAL_SPI_Receive+0x4c>
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10f      	bne.n	80053c0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2251      	movs	r2, #81	; 0x51
 80053a4:	2104      	movs	r1, #4
 80053a6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80053a8:	1dbb      	adds	r3, r7, #6
 80053aa:	881c      	ldrh	r4, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	68b9      	ldr	r1, [r7, #8]
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	0023      	movs	r3, r4
 80053b8:	f000 f902 	bl	80055c0 <HAL_SPI_TransmitReceive>
 80053bc:	0003      	movs	r3, r0
 80053be:	e0f9      	b.n	80055b4 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2250      	movs	r2, #80	; 0x50
 80053c4:	5c9b      	ldrb	r3, [r3, r2]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_SPI_Receive+0x5a>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e0f2      	b.n	80055b4 <HAL_SPI_Receive+0x240>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2250      	movs	r2, #80	; 0x50
 80053d2:	2101      	movs	r1, #1
 80053d4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80053d6:	f7fd fd3f 	bl	8002e58 <HAL_GetTick>
 80053da:	0003      	movs	r3, r0
 80053dc:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2251      	movs	r2, #81	; 0x51
 80053e2:	5c9b      	ldrb	r3, [r3, r2]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d004      	beq.n	80053f4 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 80053ea:	2317      	movs	r3, #23
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	2202      	movs	r2, #2
 80053f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80053f2:	e0d4      	b.n	800559e <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d003      	beq.n	8005402 <HAL_SPI_Receive+0x8e>
 80053fa:	1dbb      	adds	r3, r7, #6
 80053fc:	881b      	ldrh	r3, [r3, #0]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005402:	2317      	movs	r3, #23
 8005404:	18fb      	adds	r3, r7, r3
 8005406:	2201      	movs	r2, #1
 8005408:	701a      	strb	r2, [r3, #0]
    goto error;
 800540a:	e0c8      	b.n	800559e <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2251      	movs	r2, #81	; 0x51
 8005410:	2104      	movs	r1, #4
 8005412:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	68ba      	ldr	r2, [r7, #8]
 800541e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	1dba      	adds	r2, r7, #6
 8005424:	8812      	ldrh	r2, [r2, #0]
 8005426:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1dba      	adds	r2, r7, #6
 800542c:	8812      	ldrh	r2, [r2, #0]
 800542e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2200      	movs	r2, #0
 8005440:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2200      	movs	r2, #0
 800544c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	689a      	ldr	r2, [r3, #8]
 8005452:	2380      	movs	r3, #128	; 0x80
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	429a      	cmp	r2, r3
 8005458:	d10f      	bne.n	800547a <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2140      	movs	r1, #64	; 0x40
 8005466:	438a      	bics	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4951      	ldr	r1, [pc, #324]	; (80055bc <HAL_SPI_Receive+0x248>)
 8005476:	400a      	ands	r2, r1
 8005478:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2240      	movs	r2, #64	; 0x40
 8005482:	4013      	ands	r3, r2
 8005484:	2b40      	cmp	r3, #64	; 0x40
 8005486:	d007      	beq.n	8005498 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	681a      	ldr	r2, [r3, #0]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2140      	movs	r1, #64	; 0x40
 8005494:	430a      	orrs	r2, r1
 8005496:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d164      	bne.n	800556a <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80054a0:	e02f      	b.n	8005502 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	2201      	movs	r2, #1
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d115      	bne.n	80054dc <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	330c      	adds	r3, #12
 80054b6:	001a      	movs	r2, r3
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054bc:	7812      	ldrb	r2, [r2, #0]
 80054be:	b2d2      	uxtb	r2, r2
 80054c0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054c6:	1c5a      	adds	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	3b01      	subs	r3, #1
 80054d4:	b29a      	uxth	r2, r3
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80054da:	e012      	b.n	8005502 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054dc:	f7fd fcbc 	bl	8002e58 <HAL_GetTick>
 80054e0:	0002      	movs	r2, r0
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d802      	bhi.n	80054f2 <HAL_SPI_Receive+0x17e>
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	3301      	adds	r3, #1
 80054f0:	d102      	bne.n	80054f8 <HAL_SPI_Receive+0x184>
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d104      	bne.n	8005502 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 80054f8:	2317      	movs	r3, #23
 80054fa:	18fb      	adds	r3, r7, r3
 80054fc:	2203      	movs	r2, #3
 80054fe:	701a      	strb	r2, [r3, #0]
          goto error;
 8005500:	e04d      	b.n	800559e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005506:	b29b      	uxth	r3, r3
 8005508:	2b00      	cmp	r3, #0
 800550a:	d1ca      	bne.n	80054a2 <HAL_SPI_Receive+0x12e>
 800550c:	e032      	b.n	8005574 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	2201      	movs	r2, #1
 8005516:	4013      	ands	r3, r2
 8005518:	2b01      	cmp	r3, #1
 800551a:	d113      	bne.n	8005544 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68da      	ldr	r2, [r3, #12]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005526:	b292      	uxth	r2, r2
 8005528:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	1c9a      	adds	r2, r3, #2
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005538:	b29b      	uxth	r3, r3
 800553a:	3b01      	subs	r3, #1
 800553c:	b29a      	uxth	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005542:	e012      	b.n	800556a <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005544:	f7fd fc88 	bl	8002e58 <HAL_GetTick>
 8005548:	0002      	movs	r2, r0
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	683a      	ldr	r2, [r7, #0]
 8005550:	429a      	cmp	r2, r3
 8005552:	d802      	bhi.n	800555a <HAL_SPI_Receive+0x1e6>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	3301      	adds	r3, #1
 8005558:	d102      	bne.n	8005560 <HAL_SPI_Receive+0x1ec>
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d104      	bne.n	800556a <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 8005560:	2317      	movs	r3, #23
 8005562:	18fb      	adds	r3, r7, r3
 8005564:	2203      	movs	r2, #3
 8005566:	701a      	strb	r2, [r3, #0]
          goto error;
 8005568:	e019      	b.n	800559e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800556e:	b29b      	uxth	r3, r3
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1cc      	bne.n	800550e <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	6839      	ldr	r1, [r7, #0]
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	0018      	movs	r0, r3
 800557c:	f000 fa6a 	bl	8005a54 <SPI_EndRxTransaction>
 8005580:	1e03      	subs	r3, r0, #0
 8005582:	d002      	beq.n	800558a <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2220      	movs	r2, #32
 8005588:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	2b00      	cmp	r3, #0
 8005590:	d004      	beq.n	800559c <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8005592:	2317      	movs	r3, #23
 8005594:	18fb      	adds	r3, r7, r3
 8005596:	2201      	movs	r2, #1
 8005598:	701a      	strb	r2, [r3, #0]
 800559a:	e000      	b.n	800559e <HAL_SPI_Receive+0x22a>
  }

error :
 800559c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2251      	movs	r2, #81	; 0x51
 80055a2:	2101      	movs	r1, #1
 80055a4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2250      	movs	r2, #80	; 0x50
 80055aa:	2100      	movs	r1, #0
 80055ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80055ae:	2317      	movs	r3, #23
 80055b0:	18fb      	adds	r3, r7, r3
 80055b2:	781b      	ldrb	r3, [r3, #0]
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	b007      	add	sp, #28
 80055ba:	bd90      	pop	{r4, r7, pc}
 80055bc:	ffffbfff 	.word	0xffffbfff

080055c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b08c      	sub	sp, #48	; 0x30
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
 80055cc:	001a      	movs	r2, r3
 80055ce:	1cbb      	adds	r3, r7, #2
 80055d0:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055d2:	2301      	movs	r3, #1
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055d6:	232b      	movs	r3, #43	; 0x2b
 80055d8:	18fb      	adds	r3, r7, r3
 80055da:	2200      	movs	r2, #0
 80055dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2250      	movs	r2, #80	; 0x50
 80055e2:	5c9b      	ldrb	r3, [r3, r2]
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_SPI_TransmitReceive+0x2c>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e1a0      	b.n	800592e <HAL_SPI_TransmitReceive+0x36e>
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	2250      	movs	r2, #80	; 0x50
 80055f0:	2101      	movs	r1, #1
 80055f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055f4:	f7fd fc30 	bl	8002e58 <HAL_GetTick>
 80055f8:	0003      	movs	r3, r0
 80055fa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055fc:	2023      	movs	r0, #35	; 0x23
 80055fe:	183b      	adds	r3, r7, r0
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	2151      	movs	r1, #81	; 0x51
 8005604:	5c52      	ldrb	r2, [r2, r1]
 8005606:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800560e:	231a      	movs	r3, #26
 8005610:	18fb      	adds	r3, r7, r3
 8005612:	1cba      	adds	r2, r7, #2
 8005614:	8812      	ldrh	r2, [r2, #0]
 8005616:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005618:	183b      	adds	r3, r7, r0
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b01      	cmp	r3, #1
 800561e:	d011      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x84>
 8005620:	69fa      	ldr	r2, [r7, #28]
 8005622:	2382      	movs	r3, #130	; 0x82
 8005624:	005b      	lsls	r3, r3, #1
 8005626:	429a      	cmp	r2, r3
 8005628:	d107      	bne.n	800563a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <HAL_SPI_TransmitReceive+0x7a>
 8005632:	183b      	adds	r3, r7, r0
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b04      	cmp	r3, #4
 8005638:	d004      	beq.n	8005644 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800563a:	232b      	movs	r3, #43	; 0x2b
 800563c:	18fb      	adds	r3, r7, r3
 800563e:	2202      	movs	r2, #2
 8005640:	701a      	strb	r2, [r3, #0]
    goto error;
 8005642:	e169      	b.n	8005918 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d006      	beq.n	8005658 <HAL_SPI_TransmitReceive+0x98>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d003      	beq.n	8005658 <HAL_SPI_TransmitReceive+0x98>
 8005650:	1cbb      	adds	r3, r7, #2
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d104      	bne.n	8005662 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005658:	232b      	movs	r3, #43	; 0x2b
 800565a:	18fb      	adds	r3, r7, r3
 800565c:	2201      	movs	r2, #1
 800565e:	701a      	strb	r2, [r3, #0]
    goto error;
 8005660:	e15a      	b.n	8005918 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2251      	movs	r2, #81	; 0x51
 8005666:	5c9b      	ldrb	r3, [r3, r2]
 8005668:	b2db      	uxtb	r3, r3
 800566a:	2b04      	cmp	r3, #4
 800566c:	d003      	beq.n	8005676 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2251      	movs	r2, #81	; 0x51
 8005672:	2105      	movs	r1, #5
 8005674:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2200      	movs	r2, #0
 800567a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	1cba      	adds	r2, r7, #2
 8005686:	8812      	ldrh	r2, [r2, #0]
 8005688:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	1cba      	adds	r2, r7, #2
 800568e:	8812      	ldrh	r2, [r2, #0]
 8005690:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	1cba      	adds	r2, r7, #2
 800569c:	8812      	ldrh	r2, [r2, #0]
 800569e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	1cba      	adds	r2, r7, #2
 80056a4:	8812      	ldrh	r2, [r2, #0]
 80056a6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	2240      	movs	r2, #64	; 0x40
 80056bc:	4013      	ands	r3, r2
 80056be:	2b40      	cmp	r3, #64	; 0x40
 80056c0:	d007      	beq.n	80056d2 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	681a      	ldr	r2, [r3, #0]
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	2140      	movs	r1, #64	; 0x40
 80056ce:	430a      	orrs	r2, r1
 80056d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	2380      	movs	r3, #128	; 0x80
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	429a      	cmp	r2, r3
 80056dc:	d000      	beq.n	80056e0 <HAL_SPI_TransmitReceive+0x120>
 80056de:	e07a      	b.n	80057d6 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d004      	beq.n	80056f2 <HAL_SPI_TransmitReceive+0x132>
 80056e8:	231a      	movs	r3, #26
 80056ea:	18fb      	adds	r3, r7, r3
 80056ec:	881b      	ldrh	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d166      	bne.n	80057c0 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f6:	881a      	ldrh	r2, [r3, #0]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005702:	1c9a      	adds	r2, r3, #2
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570c:	b29b      	uxth	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b29a      	uxth	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005716:	e053      	b.n	80057c0 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2202      	movs	r2, #2
 8005720:	4013      	ands	r3, r2
 8005722:	2b02      	cmp	r3, #2
 8005724:	d11b      	bne.n	800575e <HAL_SPI_TransmitReceive+0x19e>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	d016      	beq.n	800575e <HAL_SPI_TransmitReceive+0x19e>
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	2b01      	cmp	r3, #1
 8005734:	d113      	bne.n	800575e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800573a:	881a      	ldrh	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005746:	1c9a      	adds	r2, r3, #2
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005750:	b29b      	uxth	r3, r3
 8005752:	3b01      	subs	r3, #1
 8005754:	b29a      	uxth	r2, r3
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	689b      	ldr	r3, [r3, #8]
 8005764:	2201      	movs	r2, #1
 8005766:	4013      	ands	r3, r2
 8005768:	2b01      	cmp	r3, #1
 800576a:	d119      	bne.n	80057a0 <HAL_SPI_TransmitReceive+0x1e0>
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005770:	b29b      	uxth	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d014      	beq.n	80057a0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005780:	b292      	uxth	r2, r2
 8005782:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005788:	1c9a      	adds	r2, r3, #2
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005792:	b29b      	uxth	r3, r3
 8005794:	3b01      	subs	r3, #1
 8005796:	b29a      	uxth	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800579c:	2301      	movs	r3, #1
 800579e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057a0:	f7fd fb5a 	bl	8002e58 <HAL_GetTick>
 80057a4:	0002      	movs	r2, r0
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	1ad3      	subs	r3, r2, r3
 80057aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d807      	bhi.n	80057c0 <HAL_SPI_TransmitReceive+0x200>
 80057b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b2:	3301      	adds	r3, #1
 80057b4:	d004      	beq.n	80057c0 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 80057b6:	232b      	movs	r3, #43	; 0x2b
 80057b8:	18fb      	adds	r3, r7, r3
 80057ba:	2203      	movs	r2, #3
 80057bc:	701a      	strb	r2, [r3, #0]
        goto error;
 80057be:	e0ab      	b.n	8005918 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1a6      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x158>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d1a1      	bne.n	8005718 <HAL_SPI_TransmitReceive+0x158>
 80057d4:	e07f      	b.n	80058d6 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d005      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x22a>
 80057de:	231a      	movs	r3, #26
 80057e0:	18fb      	adds	r3, r7, r3
 80057e2:	881b      	ldrh	r3, [r3, #0]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d000      	beq.n	80057ea <HAL_SPI_TransmitReceive+0x22a>
 80057e8:	e06b      	b.n	80058c2 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	330c      	adds	r3, #12
 80057f4:	7812      	ldrb	r2, [r2, #0]
 80057f6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fc:	1c5a      	adds	r2, r3, #1
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005806:	b29b      	uxth	r3, r3
 8005808:	3b01      	subs	r3, #1
 800580a:	b29a      	uxth	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005810:	e057      	b.n	80058c2 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2202      	movs	r2, #2
 800581a:	4013      	ands	r3, r2
 800581c:	2b02      	cmp	r3, #2
 800581e:	d11c      	bne.n	800585a <HAL_SPI_TransmitReceive+0x29a>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	d017      	beq.n	800585a <HAL_SPI_TransmitReceive+0x29a>
 800582a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d114      	bne.n	800585a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	7812      	ldrb	r2, [r2, #0]
 800583c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005842:	1c5a      	adds	r2, r3, #1
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800584c:	b29b      	uxth	r3, r3
 800584e:	3b01      	subs	r3, #1
 8005850:	b29a      	uxth	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005856:	2300      	movs	r3, #0
 8005858:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2201      	movs	r2, #1
 8005862:	4013      	ands	r3, r2
 8005864:	2b01      	cmp	r3, #1
 8005866:	d119      	bne.n	800589c <HAL_SPI_TransmitReceive+0x2dc>
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800586c:	b29b      	uxth	r3, r3
 800586e:	2b00      	cmp	r3, #0
 8005870:	d014      	beq.n	800589c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	1c5a      	adds	r2, r3, #1
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800588e:	b29b      	uxth	r3, r3
 8005890:	3b01      	subs	r3, #1
 8005892:	b29a      	uxth	r2, r3
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005898:	2301      	movs	r3, #1
 800589a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800589c:	f7fd fadc 	bl	8002e58 <HAL_GetTick>
 80058a0:	0002      	movs	r2, r0
 80058a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d802      	bhi.n	80058b2 <HAL_SPI_TransmitReceive+0x2f2>
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	3301      	adds	r3, #1
 80058b0:	d102      	bne.n	80058b8 <HAL_SPI_TransmitReceive+0x2f8>
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d104      	bne.n	80058c2 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 80058b8:	232b      	movs	r3, #43	; 0x2b
 80058ba:	18fb      	adds	r3, r7, r3
 80058bc:	2203      	movs	r2, #3
 80058be:	701a      	strb	r2, [r3, #0]
        goto error;
 80058c0:	e02a      	b.n	8005918 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1a2      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x252>
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058d0:	b29b      	uxth	r3, r3
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d19d      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80058d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	0018      	movs	r0, r3
 80058de:	f000 f923 	bl	8005b28 <SPI_EndRxTxTransaction>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d007      	beq.n	80058f6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80058e6:	232b      	movs	r3, #43	; 0x2b
 80058e8:	18fb      	adds	r3, r7, r3
 80058ea:	2201      	movs	r2, #1
 80058ec:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2220      	movs	r2, #32
 80058f2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80058f4:	e010      	b.n	8005918 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d10b      	bne.n	8005916 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80058fe:	2300      	movs	r3, #0
 8005900:	617b      	str	r3, [r7, #20]
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	617b      	str	r3, [r7, #20]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	617b      	str	r3, [r7, #20]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	e000      	b.n	8005918 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8005916:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	2251      	movs	r2, #81	; 0x51
 800591c:	2101      	movs	r1, #1
 800591e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2250      	movs	r2, #80	; 0x50
 8005924:	2100      	movs	r1, #0
 8005926:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005928:	232b      	movs	r3, #43	; 0x2b
 800592a:	18fb      	adds	r3, r7, r3
 800592c:	781b      	ldrb	r3, [r3, #0]
}
 800592e:	0018      	movs	r0, r3
 8005930:	46bd      	mov	sp, r7
 8005932:	b00c      	add	sp, #48	; 0x30
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	1dfb      	adds	r3, r7, #7
 8005946:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005948:	f7fd fa86 	bl	8002e58 <HAL_GetTick>
 800594c:	0002      	movs	r2, r0
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	1a9b      	subs	r3, r3, r2
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	18d3      	adds	r3, r2, r3
 8005956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005958:	f7fd fa7e 	bl	8002e58 <HAL_GetTick>
 800595c:	0003      	movs	r3, r0
 800595e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005960:	4b3a      	ldr	r3, [pc, #232]	; (8005a4c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	015b      	lsls	r3, r3, #5
 8005966:	0d1b      	lsrs	r3, r3, #20
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	4353      	muls	r3, r2
 800596c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800596e:	e058      	b.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	3301      	adds	r3, #1
 8005974:	d055      	beq.n	8005a22 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005976:	f7fd fa6f 	bl	8002e58 <HAL_GetTick>
 800597a:	0002      	movs	r2, r0
 800597c:	69bb      	ldr	r3, [r7, #24]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	69fa      	ldr	r2, [r7, #28]
 8005982:	429a      	cmp	r2, r3
 8005984:	d902      	bls.n	800598c <SPI_WaitFlagStateUntilTimeout+0x54>
 8005986:	69fb      	ldr	r3, [r7, #28]
 8005988:	2b00      	cmp	r3, #0
 800598a:	d142      	bne.n	8005a12 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	685a      	ldr	r2, [r3, #4]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	21e0      	movs	r1, #224	; 0xe0
 8005998:	438a      	bics	r2, r1
 800599a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	2382      	movs	r3, #130	; 0x82
 80059a2:	005b      	lsls	r3, r3, #1
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d113      	bne.n	80059d0 <SPI_WaitFlagStateUntilTimeout+0x98>
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689a      	ldr	r2, [r3, #8]
 80059ac:	2380      	movs	r3, #128	; 0x80
 80059ae:	021b      	lsls	r3, r3, #8
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d005      	beq.n	80059c0 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	2380      	movs	r3, #128	; 0x80
 80059ba:	00db      	lsls	r3, r3, #3
 80059bc:	429a      	cmp	r2, r3
 80059be:	d107      	bne.n	80059d0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2140      	movs	r1, #64	; 0x40
 80059cc:	438a      	bics	r2, r1
 80059ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059d4:	2380      	movs	r3, #128	; 0x80
 80059d6:	019b      	lsls	r3, r3, #6
 80059d8:	429a      	cmp	r2, r3
 80059da:	d110      	bne.n	80059fe <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	491a      	ldr	r1, [pc, #104]	; (8005a50 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80059e8:	400a      	ands	r2, r1
 80059ea:	601a      	str	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2180      	movs	r1, #128	; 0x80
 80059f8:	0189      	lsls	r1, r1, #6
 80059fa:	430a      	orrs	r2, r1
 80059fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2251      	movs	r2, #81	; 0x51
 8005a02:	2101      	movs	r1, #1
 8005a04:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2250      	movs	r2, #80	; 0x50
 8005a0a:	2100      	movs	r1, #0
 8005a0c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e017      	b.n	8005a42 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	3b01      	subs	r3, #1
 8005a20:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	68ba      	ldr	r2, [r7, #8]
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	425a      	negs	r2, r3
 8005a32:	4153      	adcs	r3, r2
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	001a      	movs	r2, r3
 8005a38:	1dfb      	adds	r3, r7, #7
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	429a      	cmp	r2, r3
 8005a3e:	d197      	bne.n	8005970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a40:	2300      	movs	r3, #0
}
 8005a42:	0018      	movs	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b008      	add	sp, #32
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	46c0      	nop			; (mov r8, r8)
 8005a4c:	20000008 	.word	0x20000008
 8005a50:	ffffdfff 	.word	0xffffdfff

08005a54 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af02      	add	r7, sp, #8
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	2382      	movs	r3, #130	; 0x82
 8005a66:	005b      	lsls	r3, r3, #1
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d113      	bne.n	8005a94 <SPI_EndRxTransaction+0x40>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	021b      	lsls	r3, r3, #8
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d005      	beq.n	8005a84 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689a      	ldr	r2, [r3, #8]
 8005a7c:	2380      	movs	r3, #128	; 0x80
 8005a7e:	00db      	lsls	r3, r3, #3
 8005a80:	429a      	cmp	r2, r3
 8005a82:	d107      	bne.n	8005a94 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	2140      	movs	r1, #64	; 0x40
 8005a90:	438a      	bics	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685a      	ldr	r2, [r3, #4]
 8005a98:	2382      	movs	r3, #130	; 0x82
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d12b      	bne.n	8005af8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	689a      	ldr	r2, [r3, #8]
 8005aa4:	2380      	movs	r3, #128	; 0x80
 8005aa6:	00db      	lsls	r3, r3, #3
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d012      	beq.n	8005ad2 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aac:	68ba      	ldr	r2, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	9300      	str	r3, [sp, #0]
 8005ab4:	0013      	movs	r3, r2
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	2180      	movs	r1, #128	; 0x80
 8005aba:	f7ff ff3d 	bl	8005938 <SPI_WaitFlagStateUntilTimeout>
 8005abe:	1e03      	subs	r3, r0, #0
 8005ac0:	d02d      	beq.n	8005b1e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	431a      	orrs	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e026      	b.n	8005b20 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005ad2:	68ba      	ldr	r2, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	9300      	str	r3, [sp, #0]
 8005ada:	0013      	movs	r3, r2
 8005adc:	2200      	movs	r2, #0
 8005ade:	2101      	movs	r1, #1
 8005ae0:	f7ff ff2a 	bl	8005938 <SPI_WaitFlagStateUntilTimeout>
 8005ae4:	1e03      	subs	r3, r0, #0
 8005ae6:	d01a      	beq.n	8005b1e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aec:	2220      	movs	r2, #32
 8005aee:	431a      	orrs	r2, r3
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e013      	b.n	8005b20 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	0013      	movs	r3, r2
 8005b02:	2200      	movs	r2, #0
 8005b04:	2101      	movs	r1, #1
 8005b06:	f7ff ff17 	bl	8005938 <SPI_WaitFlagStateUntilTimeout>
 8005b0a:	1e03      	subs	r3, r0, #0
 8005b0c:	d007      	beq.n	8005b1e <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	2220      	movs	r2, #32
 8005b14:	431a      	orrs	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b1a:	2303      	movs	r3, #3
 8005b1c:	e000      	b.n	8005b20 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	0018      	movs	r0, r3
 8005b22:	46bd      	mov	sp, r7
 8005b24:	b004      	add	sp, #16
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b088      	sub	sp, #32
 8005b2c:	af02      	add	r7, sp, #8
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005b34:	4b1d      	ldr	r3, [pc, #116]	; (8005bac <SPI_EndRxTxTransaction+0x84>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	491d      	ldr	r1, [pc, #116]	; (8005bb0 <SPI_EndRxTxTransaction+0x88>)
 8005b3a:	0018      	movs	r0, r3
 8005b3c:	f7fa faf6 	bl	800012c <__udivsi3>
 8005b40:	0003      	movs	r3, r0
 8005b42:	001a      	movs	r2, r3
 8005b44:	0013      	movs	r3, r2
 8005b46:	015b      	lsls	r3, r3, #5
 8005b48:	1a9b      	subs	r3, r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	189b      	adds	r3, r3, r2
 8005b4e:	00db      	lsls	r3, r3, #3
 8005b50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	685a      	ldr	r2, [r3, #4]
 8005b56:	2382      	movs	r3, #130	; 0x82
 8005b58:	005b      	lsls	r3, r3, #1
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d112      	bne.n	8005b84 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005b5e:	68ba      	ldr	r2, [r7, #8]
 8005b60:	68f8      	ldr	r0, [r7, #12]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	9300      	str	r3, [sp, #0]
 8005b66:	0013      	movs	r3, r2
 8005b68:	2200      	movs	r2, #0
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	f7ff fee4 	bl	8005938 <SPI_WaitFlagStateUntilTimeout>
 8005b70:	1e03      	subs	r3, r0, #0
 8005b72:	d016      	beq.n	8005ba2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b78:	2220      	movs	r2, #32
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005b80:	2303      	movs	r3, #3
 8005b82:	e00f      	b.n	8005ba4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	689b      	ldr	r3, [r3, #8]
 8005b96:	2280      	movs	r2, #128	; 0x80
 8005b98:	4013      	ands	r3, r2
 8005b9a:	2b80      	cmp	r3, #128	; 0x80
 8005b9c:	d0f2      	beq.n	8005b84 <SPI_EndRxTxTransaction+0x5c>
 8005b9e:	e000      	b.n	8005ba2 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005ba0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005ba2:	2300      	movs	r3, #0
}
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	b006      	add	sp, #24
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000008 	.word	0x20000008
 8005bb0:	016e3600 	.word	0x016e3600

08005bb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e044      	b.n	8005c50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2274      	movs	r2, #116	; 0x74
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	0018      	movs	r0, r3
 8005bda:	f7fd f813 	bl	8002c04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2224      	movs	r2, #36	; 0x24
 8005be2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2101      	movs	r1, #1
 8005bf0:	438a      	bics	r2, r1
 8005bf2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f000 f9c6 	bl	8005f88 <UART_SetConfig>
 8005bfc:	0003      	movs	r3, r0
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e024      	b.n	8005c50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	0018      	movs	r0, r3
 8005c12:	f000 fc77 	bl	8006504 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	685a      	ldr	r2, [r3, #4]
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	490d      	ldr	r1, [pc, #52]	; (8005c58 <HAL_UART_Init+0xa4>)
 8005c22:	400a      	ands	r2, r1
 8005c24:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	689a      	ldr	r2, [r3, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	212a      	movs	r1, #42	; 0x2a
 8005c32:	438a      	bics	r2, r1
 8005c34:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2101      	movs	r1, #1
 8005c42:	430a      	orrs	r2, r1
 8005c44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f000 fd0f 	bl	800666c <UART_CheckIdleState>
 8005c4e:	0003      	movs	r3, r0
}
 8005c50:	0018      	movs	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	b002      	add	sp, #8
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	ffffb7ff 	.word	0xffffb7ff

08005c5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b08a      	sub	sp, #40	; 0x28
 8005c60:	af02      	add	r7, sp, #8
 8005c62:	60f8      	str	r0, [r7, #12]
 8005c64:	60b9      	str	r1, [r7, #8]
 8005c66:	603b      	str	r3, [r7, #0]
 8005c68:	1dbb      	adds	r3, r7, #6
 8005c6a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	d000      	beq.n	8005c76 <HAL_UART_Transmit+0x1a>
 8005c74:	e095      	b.n	8005da2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d003      	beq.n	8005c84 <HAL_UART_Transmit+0x28>
 8005c7c:	1dbb      	adds	r3, r7, #6
 8005c7e:	881b      	ldrh	r3, [r3, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e08d      	b.n	8005da4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	689a      	ldr	r2, [r3, #8]
 8005c8c:	2380      	movs	r3, #128	; 0x80
 8005c8e:	015b      	lsls	r3, r3, #5
 8005c90:	429a      	cmp	r2, r3
 8005c92:	d109      	bne.n	8005ca8 <HAL_UART_Transmit+0x4c>
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	691b      	ldr	r3, [r3, #16]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d105      	bne.n	8005ca8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d001      	beq.n	8005ca8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e07d      	b.n	8005da4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2274      	movs	r2, #116	; 0x74
 8005cac:	5c9b      	ldrb	r3, [r3, r2]
 8005cae:	2b01      	cmp	r3, #1
 8005cb0:	d101      	bne.n	8005cb6 <HAL_UART_Transmit+0x5a>
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	e076      	b.n	8005da4 <HAL_UART_Transmit+0x148>
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2274      	movs	r2, #116	; 0x74
 8005cba:	2101      	movs	r1, #1
 8005cbc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2280      	movs	r2, #128	; 0x80
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2221      	movs	r2, #33	; 0x21
 8005cca:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005ccc:	f7fd f8c4 	bl	8002e58 <HAL_GetTick>
 8005cd0:	0003      	movs	r3, r0
 8005cd2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	1dba      	adds	r2, r7, #6
 8005cd8:	2150      	movs	r1, #80	; 0x50
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1dba      	adds	r2, r7, #6
 8005ce2:	2152      	movs	r1, #82	; 0x52
 8005ce4:	8812      	ldrh	r2, [r2, #0]
 8005ce6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	2380      	movs	r3, #128	; 0x80
 8005cee:	015b      	lsls	r3, r3, #5
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d108      	bne.n	8005d06 <HAL_UART_Transmit+0xaa>
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d104      	bne.n	8005d06 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	61bb      	str	r3, [r7, #24]
 8005d04:	e003      	b.n	8005d0e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2274      	movs	r2, #116	; 0x74
 8005d12:	2100      	movs	r1, #0
 8005d14:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005d16:	e02c      	b.n	8005d72 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	0013      	movs	r3, r2
 8005d22:	2200      	movs	r2, #0
 8005d24:	2180      	movs	r1, #128	; 0x80
 8005d26:	f000 fce9 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 8005d2a:	1e03      	subs	r3, r0, #0
 8005d2c:	d001      	beq.n	8005d32 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e038      	b.n	8005da4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10b      	bne.n	8005d50 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	881b      	ldrh	r3, [r3, #0]
 8005d3c:	001a      	movs	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	05d2      	lsls	r2, r2, #23
 8005d44:	0dd2      	lsrs	r2, r2, #23
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	3302      	adds	r3, #2
 8005d4c:	61bb      	str	r3, [r7, #24]
 8005d4e:	e007      	b.n	8005d60 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	781a      	ldrb	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3301      	adds	r3, #1
 8005d5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2252      	movs	r2, #82	; 0x52
 8005d64:	5a9b      	ldrh	r3, [r3, r2]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	3b01      	subs	r3, #1
 8005d6a:	b299      	uxth	r1, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2252      	movs	r2, #82	; 0x52
 8005d70:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2252      	movs	r2, #82	; 0x52
 8005d76:	5a9b      	ldrh	r3, [r3, r2]
 8005d78:	b29b      	uxth	r3, r3
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d1cc      	bne.n	8005d18 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d7e:	697a      	ldr	r2, [r7, #20]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	9300      	str	r3, [sp, #0]
 8005d86:	0013      	movs	r3, r2
 8005d88:	2200      	movs	r2, #0
 8005d8a:	2140      	movs	r1, #64	; 0x40
 8005d8c:	f000 fcb6 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 8005d90:	1e03      	subs	r3, r0, #0
 8005d92:	d001      	beq.n	8005d98 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005d94:	2303      	movs	r3, #3
 8005d96:	e005      	b.n	8005da4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2220      	movs	r2, #32
 8005d9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	e000      	b.n	8005da4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005da2:	2302      	movs	r3, #2
  }
}
 8005da4:	0018      	movs	r0, r3
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b008      	add	sp, #32
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08a      	sub	sp, #40	; 0x28
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	603b      	str	r3, [r7, #0]
 8005db8:	1dbb      	adds	r3, r7, #6
 8005dba:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc0:	2b20      	cmp	r3, #32
 8005dc2:	d000      	beq.n	8005dc6 <HAL_UART_Receive+0x1a>
 8005dc4:	e0d9      	b.n	8005f7a <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d003      	beq.n	8005dd4 <HAL_UART_Receive+0x28>
 8005dcc:	1dbb      	adds	r3, r7, #6
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d101      	bne.n	8005dd8 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e0d1      	b.n	8005f7c <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	689a      	ldr	r2, [r3, #8]
 8005ddc:	2380      	movs	r3, #128	; 0x80
 8005dde:	015b      	lsls	r3, r3, #5
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d109      	bne.n	8005df8 <HAL_UART_Receive+0x4c>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d105      	bne.n	8005df8 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2201      	movs	r2, #1
 8005df0:	4013      	ands	r3, r2
 8005df2:	d001      	beq.n	8005df8 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e0c1      	b.n	8005f7c <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2274      	movs	r2, #116	; 0x74
 8005dfc:	5c9b      	ldrb	r3, [r3, r2]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_UART_Receive+0x5a>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e0ba      	b.n	8005f7c <HAL_UART_Receive+0x1d0>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2274      	movs	r2, #116	; 0x74
 8005e0a:	2101      	movs	r1, #1
 8005e0c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2280      	movs	r2, #128	; 0x80
 8005e12:	2100      	movs	r1, #0
 8005e14:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2222      	movs	r2, #34	; 0x22
 8005e1a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e22:	f7fd f819 	bl	8002e58 <HAL_GetTick>
 8005e26:	0003      	movs	r3, r0
 8005e28:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	1dba      	adds	r2, r7, #6
 8005e2e:	2158      	movs	r1, #88	; 0x58
 8005e30:	8812      	ldrh	r2, [r2, #0]
 8005e32:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	1dba      	adds	r2, r7, #6
 8005e38:	215a      	movs	r1, #90	; 0x5a
 8005e3a:	8812      	ldrh	r2, [r2, #0]
 8005e3c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	689a      	ldr	r2, [r3, #8]
 8005e42:	2380      	movs	r3, #128	; 0x80
 8005e44:	015b      	lsls	r3, r3, #5
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d10d      	bne.n	8005e66 <HAL_UART_Receive+0xba>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	691b      	ldr	r3, [r3, #16]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d104      	bne.n	8005e5c <HAL_UART_Receive+0xb0>
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	225c      	movs	r2, #92	; 0x5c
 8005e56:	494b      	ldr	r1, [pc, #300]	; (8005f84 <HAL_UART_Receive+0x1d8>)
 8005e58:	5299      	strh	r1, [r3, r2]
 8005e5a:	e02e      	b.n	8005eba <HAL_UART_Receive+0x10e>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	225c      	movs	r2, #92	; 0x5c
 8005e60:	21ff      	movs	r1, #255	; 0xff
 8005e62:	5299      	strh	r1, [r3, r2]
 8005e64:	e029      	b.n	8005eba <HAL_UART_Receive+0x10e>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10d      	bne.n	8005e8a <HAL_UART_Receive+0xde>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d104      	bne.n	8005e80 <HAL_UART_Receive+0xd4>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	225c      	movs	r2, #92	; 0x5c
 8005e7a:	21ff      	movs	r1, #255	; 0xff
 8005e7c:	5299      	strh	r1, [r3, r2]
 8005e7e:	e01c      	b.n	8005eba <HAL_UART_Receive+0x10e>
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	225c      	movs	r2, #92	; 0x5c
 8005e84:	217f      	movs	r1, #127	; 0x7f
 8005e86:	5299      	strh	r1, [r3, r2]
 8005e88:	e017      	b.n	8005eba <HAL_UART_Receive+0x10e>
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	2380      	movs	r3, #128	; 0x80
 8005e90:	055b      	lsls	r3, r3, #21
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d10d      	bne.n	8005eb2 <HAL_UART_Receive+0x106>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d104      	bne.n	8005ea8 <HAL_UART_Receive+0xfc>
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	225c      	movs	r2, #92	; 0x5c
 8005ea2:	217f      	movs	r1, #127	; 0x7f
 8005ea4:	5299      	strh	r1, [r3, r2]
 8005ea6:	e008      	b.n	8005eba <HAL_UART_Receive+0x10e>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	225c      	movs	r2, #92	; 0x5c
 8005eac:	213f      	movs	r1, #63	; 0x3f
 8005eae:	5299      	strh	r1, [r3, r2]
 8005eb0:	e003      	b.n	8005eba <HAL_UART_Receive+0x10e>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	225c      	movs	r2, #92	; 0x5c
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005eba:	2312      	movs	r3, #18
 8005ebc:	18fb      	adds	r3, r7, r3
 8005ebe:	68fa      	ldr	r2, [r7, #12]
 8005ec0:	215c      	movs	r1, #92	; 0x5c
 8005ec2:	5a52      	ldrh	r2, [r2, r1]
 8005ec4:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	689a      	ldr	r2, [r3, #8]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	015b      	lsls	r3, r3, #5
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d108      	bne.n	8005ee4 <HAL_UART_Receive+0x138>
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	691b      	ldr	r3, [r3, #16]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d104      	bne.n	8005ee4 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8005eda:	2300      	movs	r3, #0
 8005edc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	61bb      	str	r3, [r7, #24]
 8005ee2:	e003      	b.n	8005eec <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2274      	movs	r2, #116	; 0x74
 8005ef0:	2100      	movs	r1, #0
 8005ef2:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005ef4:	e036      	b.n	8005f64 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	68f8      	ldr	r0, [r7, #12]
 8005efa:	683b      	ldr	r3, [r7, #0]
 8005efc:	9300      	str	r3, [sp, #0]
 8005efe:	0013      	movs	r3, r2
 8005f00:	2200      	movs	r2, #0
 8005f02:	2120      	movs	r1, #32
 8005f04:	f000 fbfa 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 8005f08:	1e03      	subs	r3, r0, #0
 8005f0a:	d001      	beq.n	8005f10 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e035      	b.n	8005f7c <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10e      	bne.n	8005f34 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	2212      	movs	r2, #18
 8005f20:	18ba      	adds	r2, r7, r2
 8005f22:	8812      	ldrh	r2, [r2, #0]
 8005f24:	4013      	ands	r3, r2
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005f2c:	69bb      	ldr	r3, [r7, #24]
 8005f2e:	3302      	adds	r3, #2
 8005f30:	61bb      	str	r3, [r7, #24]
 8005f32:	e00e      	b.n	8005f52 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2212      	movs	r2, #18
 8005f3e:	18ba      	adds	r2, r7, r2
 8005f40:	8812      	ldrh	r2, [r2, #0]
 8005f42:	b2d2      	uxtb	r2, r2
 8005f44:	4013      	ands	r3, r2
 8005f46:	b2da      	uxtb	r2, r3
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	225a      	movs	r2, #90	; 0x5a
 8005f56:	5a9b      	ldrh	r3, [r3, r2]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	3b01      	subs	r3, #1
 8005f5c:	b299      	uxth	r1, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	225a      	movs	r2, #90	; 0x5a
 8005f62:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	225a      	movs	r2, #90	; 0x5a
 8005f68:	5a9b      	ldrh	r3, [r3, r2]
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d1c2      	bne.n	8005ef6 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005f76:	2300      	movs	r3, #0
 8005f78:	e000      	b.n	8005f7c <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
  }
}
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	b008      	add	sp, #32
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	000001ff 	.word	0x000001ff

08005f88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f88:	b5b0      	push	{r4, r5, r7, lr}
 8005f8a:	b08e      	sub	sp, #56	; 0x38
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f90:	231a      	movs	r3, #26
 8005f92:	2218      	movs	r2, #24
 8005f94:	4694      	mov	ip, r2
 8005f96:	44bc      	add	ip, r7
 8005f98:	4463      	add	r3, ip
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	689a      	ldr	r2, [r3, #8]
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	431a      	orrs	r2, r3
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	431a      	orrs	r2, r3
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	69db      	ldr	r3, [r3, #28]
 8005fb2:	4313      	orrs	r3, r2
 8005fb4:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fb6:	69fb      	ldr	r3, [r7, #28]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4ab0      	ldr	r2, [pc, #704]	; (8006280 <UART_SetConfig+0x2f8>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	0019      	movs	r1, r3
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fc8:	430a      	orrs	r2, r1
 8005fca:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fcc:	69fb      	ldr	r3, [r7, #28]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4aac      	ldr	r2, [pc, #688]	; (8006284 <UART_SetConfig+0x2fc>)
 8005fd4:	4013      	ands	r3, r2
 8005fd6:	0019      	movs	r1, r3
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	699b      	ldr	r3, [r3, #24]
 8005fe8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4aa6      	ldr	r2, [pc, #664]	; (8006288 <UART_SetConfig+0x300>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d004      	beq.n	8005ffe <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005ff4:	69fb      	ldr	r3, [r7, #28]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	4aa1      	ldr	r2, [pc, #644]	; (800628c <UART_SetConfig+0x304>)
 8006006:	4013      	ands	r3, r2
 8006008:	0019      	movs	r1, r3
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006010:	430a      	orrs	r2, r1
 8006012:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a9d      	ldr	r2, [pc, #628]	; (8006290 <UART_SetConfig+0x308>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d136      	bne.n	800608c <UART_SetConfig+0x104>
 800601e:	4b9d      	ldr	r3, [pc, #628]	; (8006294 <UART_SetConfig+0x30c>)
 8006020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006022:	2203      	movs	r2, #3
 8006024:	4013      	ands	r3, r2
 8006026:	2b03      	cmp	r3, #3
 8006028:	d020      	beq.n	800606c <UART_SetConfig+0xe4>
 800602a:	d827      	bhi.n	800607c <UART_SetConfig+0xf4>
 800602c:	2b02      	cmp	r3, #2
 800602e:	d00d      	beq.n	800604c <UART_SetConfig+0xc4>
 8006030:	d824      	bhi.n	800607c <UART_SetConfig+0xf4>
 8006032:	2b00      	cmp	r3, #0
 8006034:	d002      	beq.n	800603c <UART_SetConfig+0xb4>
 8006036:	2b01      	cmp	r3, #1
 8006038:	d010      	beq.n	800605c <UART_SetConfig+0xd4>
 800603a:	e01f      	b.n	800607c <UART_SetConfig+0xf4>
 800603c:	231b      	movs	r3, #27
 800603e:	2218      	movs	r2, #24
 8006040:	4694      	mov	ip, r2
 8006042:	44bc      	add	ip, r7
 8006044:	4463      	add	r3, ip
 8006046:	2201      	movs	r2, #1
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	e0c5      	b.n	80061d8 <UART_SetConfig+0x250>
 800604c:	231b      	movs	r3, #27
 800604e:	2218      	movs	r2, #24
 8006050:	4694      	mov	ip, r2
 8006052:	44bc      	add	ip, r7
 8006054:	4463      	add	r3, ip
 8006056:	2202      	movs	r2, #2
 8006058:	701a      	strb	r2, [r3, #0]
 800605a:	e0bd      	b.n	80061d8 <UART_SetConfig+0x250>
 800605c:	231b      	movs	r3, #27
 800605e:	2218      	movs	r2, #24
 8006060:	4694      	mov	ip, r2
 8006062:	44bc      	add	ip, r7
 8006064:	4463      	add	r3, ip
 8006066:	2204      	movs	r2, #4
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	e0b5      	b.n	80061d8 <UART_SetConfig+0x250>
 800606c:	231b      	movs	r3, #27
 800606e:	2218      	movs	r2, #24
 8006070:	4694      	mov	ip, r2
 8006072:	44bc      	add	ip, r7
 8006074:	4463      	add	r3, ip
 8006076:	2208      	movs	r2, #8
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e0ad      	b.n	80061d8 <UART_SetConfig+0x250>
 800607c:	231b      	movs	r3, #27
 800607e:	2218      	movs	r2, #24
 8006080:	4694      	mov	ip, r2
 8006082:	44bc      	add	ip, r7
 8006084:	4463      	add	r3, ip
 8006086:	2210      	movs	r2, #16
 8006088:	701a      	strb	r2, [r3, #0]
 800608a:	e0a5      	b.n	80061d8 <UART_SetConfig+0x250>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	4a81      	ldr	r2, [pc, #516]	; (8006298 <UART_SetConfig+0x310>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d136      	bne.n	8006104 <UART_SetConfig+0x17c>
 8006096:	4b7f      	ldr	r3, [pc, #508]	; (8006294 <UART_SetConfig+0x30c>)
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	220c      	movs	r2, #12
 800609c:	4013      	ands	r3, r2
 800609e:	2b0c      	cmp	r3, #12
 80060a0:	d020      	beq.n	80060e4 <UART_SetConfig+0x15c>
 80060a2:	d827      	bhi.n	80060f4 <UART_SetConfig+0x16c>
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d00d      	beq.n	80060c4 <UART_SetConfig+0x13c>
 80060a8:	d824      	bhi.n	80060f4 <UART_SetConfig+0x16c>
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d002      	beq.n	80060b4 <UART_SetConfig+0x12c>
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d010      	beq.n	80060d4 <UART_SetConfig+0x14c>
 80060b2:	e01f      	b.n	80060f4 <UART_SetConfig+0x16c>
 80060b4:	231b      	movs	r3, #27
 80060b6:	2218      	movs	r2, #24
 80060b8:	4694      	mov	ip, r2
 80060ba:	44bc      	add	ip, r7
 80060bc:	4463      	add	r3, ip
 80060be:	2200      	movs	r2, #0
 80060c0:	701a      	strb	r2, [r3, #0]
 80060c2:	e089      	b.n	80061d8 <UART_SetConfig+0x250>
 80060c4:	231b      	movs	r3, #27
 80060c6:	2218      	movs	r2, #24
 80060c8:	4694      	mov	ip, r2
 80060ca:	44bc      	add	ip, r7
 80060cc:	4463      	add	r3, ip
 80060ce:	2202      	movs	r2, #2
 80060d0:	701a      	strb	r2, [r3, #0]
 80060d2:	e081      	b.n	80061d8 <UART_SetConfig+0x250>
 80060d4:	231b      	movs	r3, #27
 80060d6:	2218      	movs	r2, #24
 80060d8:	4694      	mov	ip, r2
 80060da:	44bc      	add	ip, r7
 80060dc:	4463      	add	r3, ip
 80060de:	2204      	movs	r2, #4
 80060e0:	701a      	strb	r2, [r3, #0]
 80060e2:	e079      	b.n	80061d8 <UART_SetConfig+0x250>
 80060e4:	231b      	movs	r3, #27
 80060e6:	2218      	movs	r2, #24
 80060e8:	4694      	mov	ip, r2
 80060ea:	44bc      	add	ip, r7
 80060ec:	4463      	add	r3, ip
 80060ee:	2208      	movs	r2, #8
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e071      	b.n	80061d8 <UART_SetConfig+0x250>
 80060f4:	231b      	movs	r3, #27
 80060f6:	2218      	movs	r2, #24
 80060f8:	4694      	mov	ip, r2
 80060fa:	44bc      	add	ip, r7
 80060fc:	4463      	add	r3, ip
 80060fe:	2210      	movs	r2, #16
 8006100:	701a      	strb	r2, [r3, #0]
 8006102:	e069      	b.n	80061d8 <UART_SetConfig+0x250>
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a64      	ldr	r2, [pc, #400]	; (800629c <UART_SetConfig+0x314>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d107      	bne.n	800611e <UART_SetConfig+0x196>
 800610e:	231b      	movs	r3, #27
 8006110:	2218      	movs	r2, #24
 8006112:	4694      	mov	ip, r2
 8006114:	44bc      	add	ip, r7
 8006116:	4463      	add	r3, ip
 8006118:	2200      	movs	r2, #0
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e05c      	b.n	80061d8 <UART_SetConfig+0x250>
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a5f      	ldr	r2, [pc, #380]	; (80062a0 <UART_SetConfig+0x318>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d107      	bne.n	8006138 <UART_SetConfig+0x1b0>
 8006128:	231b      	movs	r3, #27
 800612a:	2218      	movs	r2, #24
 800612c:	4694      	mov	ip, r2
 800612e:	44bc      	add	ip, r7
 8006130:	4463      	add	r3, ip
 8006132:	2200      	movs	r2, #0
 8006134:	701a      	strb	r2, [r3, #0]
 8006136:	e04f      	b.n	80061d8 <UART_SetConfig+0x250>
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a52      	ldr	r2, [pc, #328]	; (8006288 <UART_SetConfig+0x300>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d143      	bne.n	80061ca <UART_SetConfig+0x242>
 8006142:	4b54      	ldr	r3, [pc, #336]	; (8006294 <UART_SetConfig+0x30c>)
 8006144:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006146:	23c0      	movs	r3, #192	; 0xc0
 8006148:	011b      	lsls	r3, r3, #4
 800614a:	4013      	ands	r3, r2
 800614c:	22c0      	movs	r2, #192	; 0xc0
 800614e:	0112      	lsls	r2, r2, #4
 8006150:	4293      	cmp	r3, r2
 8006152:	d02a      	beq.n	80061aa <UART_SetConfig+0x222>
 8006154:	22c0      	movs	r2, #192	; 0xc0
 8006156:	0112      	lsls	r2, r2, #4
 8006158:	4293      	cmp	r3, r2
 800615a:	d82e      	bhi.n	80061ba <UART_SetConfig+0x232>
 800615c:	2280      	movs	r2, #128	; 0x80
 800615e:	0112      	lsls	r2, r2, #4
 8006160:	4293      	cmp	r3, r2
 8006162:	d012      	beq.n	800618a <UART_SetConfig+0x202>
 8006164:	2280      	movs	r2, #128	; 0x80
 8006166:	0112      	lsls	r2, r2, #4
 8006168:	4293      	cmp	r3, r2
 800616a:	d826      	bhi.n	80061ba <UART_SetConfig+0x232>
 800616c:	2b00      	cmp	r3, #0
 800616e:	d004      	beq.n	800617a <UART_SetConfig+0x1f2>
 8006170:	2280      	movs	r2, #128	; 0x80
 8006172:	00d2      	lsls	r2, r2, #3
 8006174:	4293      	cmp	r3, r2
 8006176:	d010      	beq.n	800619a <UART_SetConfig+0x212>
 8006178:	e01f      	b.n	80061ba <UART_SetConfig+0x232>
 800617a:	231b      	movs	r3, #27
 800617c:	2218      	movs	r2, #24
 800617e:	4694      	mov	ip, r2
 8006180:	44bc      	add	ip, r7
 8006182:	4463      	add	r3, ip
 8006184:	2200      	movs	r2, #0
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e026      	b.n	80061d8 <UART_SetConfig+0x250>
 800618a:	231b      	movs	r3, #27
 800618c:	2218      	movs	r2, #24
 800618e:	4694      	mov	ip, r2
 8006190:	44bc      	add	ip, r7
 8006192:	4463      	add	r3, ip
 8006194:	2202      	movs	r2, #2
 8006196:	701a      	strb	r2, [r3, #0]
 8006198:	e01e      	b.n	80061d8 <UART_SetConfig+0x250>
 800619a:	231b      	movs	r3, #27
 800619c:	2218      	movs	r2, #24
 800619e:	4694      	mov	ip, r2
 80061a0:	44bc      	add	ip, r7
 80061a2:	4463      	add	r3, ip
 80061a4:	2204      	movs	r2, #4
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	e016      	b.n	80061d8 <UART_SetConfig+0x250>
 80061aa:	231b      	movs	r3, #27
 80061ac:	2218      	movs	r2, #24
 80061ae:	4694      	mov	ip, r2
 80061b0:	44bc      	add	ip, r7
 80061b2:	4463      	add	r3, ip
 80061b4:	2208      	movs	r2, #8
 80061b6:	701a      	strb	r2, [r3, #0]
 80061b8:	e00e      	b.n	80061d8 <UART_SetConfig+0x250>
 80061ba:	231b      	movs	r3, #27
 80061bc:	2218      	movs	r2, #24
 80061be:	4694      	mov	ip, r2
 80061c0:	44bc      	add	ip, r7
 80061c2:	4463      	add	r3, ip
 80061c4:	2210      	movs	r2, #16
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	e006      	b.n	80061d8 <UART_SetConfig+0x250>
 80061ca:	231b      	movs	r3, #27
 80061cc:	2218      	movs	r2, #24
 80061ce:	4694      	mov	ip, r2
 80061d0:	44bc      	add	ip, r7
 80061d2:	4463      	add	r3, ip
 80061d4:	2210      	movs	r2, #16
 80061d6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a2a      	ldr	r2, [pc, #168]	; (8006288 <UART_SetConfig+0x300>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d000      	beq.n	80061e4 <UART_SetConfig+0x25c>
 80061e2:	e09e      	b.n	8006322 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061e4:	231b      	movs	r3, #27
 80061e6:	2218      	movs	r2, #24
 80061e8:	4694      	mov	ip, r2
 80061ea:	44bc      	add	ip, r7
 80061ec:	4463      	add	r3, ip
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d01d      	beq.n	8006230 <UART_SetConfig+0x2a8>
 80061f4:	dc20      	bgt.n	8006238 <UART_SetConfig+0x2b0>
 80061f6:	2b04      	cmp	r3, #4
 80061f8:	d015      	beq.n	8006226 <UART_SetConfig+0x29e>
 80061fa:	dc1d      	bgt.n	8006238 <UART_SetConfig+0x2b0>
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d002      	beq.n	8006206 <UART_SetConfig+0x27e>
 8006200:	2b02      	cmp	r3, #2
 8006202:	d005      	beq.n	8006210 <UART_SetConfig+0x288>
 8006204:	e018      	b.n	8006238 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006206:	f7fe fd3d 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 800620a:	0003      	movs	r3, r0
 800620c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800620e:	e01d      	b.n	800624c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006210:	4b20      	ldr	r3, [pc, #128]	; (8006294 <UART_SetConfig+0x30c>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2210      	movs	r2, #16
 8006216:	4013      	ands	r3, r2
 8006218:	d002      	beq.n	8006220 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800621a:	4b22      	ldr	r3, [pc, #136]	; (80062a4 <UART_SetConfig+0x31c>)
 800621c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800621e:	e015      	b.n	800624c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8006220:	4b21      	ldr	r3, [pc, #132]	; (80062a8 <UART_SetConfig+0x320>)
 8006222:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006224:	e012      	b.n	800624c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006226:	f7fe fc7f 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 800622a:	0003      	movs	r3, r0
 800622c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800622e:	e00d      	b.n	800624c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006230:	2380      	movs	r3, #128	; 0x80
 8006232:	021b      	lsls	r3, r3, #8
 8006234:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006236:	e009      	b.n	800624c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8006238:	2300      	movs	r3, #0
 800623a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800623c:	231a      	movs	r3, #26
 800623e:	2218      	movs	r2, #24
 8006240:	4694      	mov	ip, r2
 8006242:	44bc      	add	ip, r7
 8006244:	4463      	add	r3, ip
 8006246:	2201      	movs	r2, #1
 8006248:	701a      	strb	r2, [r3, #0]
        break;
 800624a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800624c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624e:	2b00      	cmp	r3, #0
 8006250:	d100      	bne.n	8006254 <UART_SetConfig+0x2cc>
 8006252:	e13c      	b.n	80064ce <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	685a      	ldr	r2, [r3, #4]
 8006258:	0013      	movs	r3, r2
 800625a:	005b      	lsls	r3, r3, #1
 800625c:	189b      	adds	r3, r3, r2
 800625e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006260:	429a      	cmp	r2, r3
 8006262:	d305      	bcc.n	8006270 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800626a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800626c:	429a      	cmp	r2, r3
 800626e:	d91d      	bls.n	80062ac <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 8006270:	231a      	movs	r3, #26
 8006272:	2218      	movs	r2, #24
 8006274:	4694      	mov	ip, r2
 8006276:	44bc      	add	ip, r7
 8006278:	4463      	add	r3, ip
 800627a:	2201      	movs	r2, #1
 800627c:	701a      	strb	r2, [r3, #0]
 800627e:	e126      	b.n	80064ce <UART_SetConfig+0x546>
 8006280:	efff69f3 	.word	0xefff69f3
 8006284:	ffffcfff 	.word	0xffffcfff
 8006288:	40004800 	.word	0x40004800
 800628c:	fffff4ff 	.word	0xfffff4ff
 8006290:	40013800 	.word	0x40013800
 8006294:	40021000 	.word	0x40021000
 8006298:	40004400 	.word	0x40004400
 800629c:	40004c00 	.word	0x40004c00
 80062a0:	40005000 	.word	0x40005000
 80062a4:	003d0900 	.word	0x003d0900
 80062a8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80062ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ae:	613b      	str	r3, [r7, #16]
 80062b0:	2300      	movs	r3, #0
 80062b2:	617b      	str	r3, [r7, #20]
 80062b4:	6939      	ldr	r1, [r7, #16]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	000b      	movs	r3, r1
 80062ba:	0e1b      	lsrs	r3, r3, #24
 80062bc:	0010      	movs	r0, r2
 80062be:	0205      	lsls	r5, r0, #8
 80062c0:	431d      	orrs	r5, r3
 80062c2:	000b      	movs	r3, r1
 80062c4:	021c      	lsls	r4, r3, #8
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	685b      	ldr	r3, [r3, #4]
 80062ca:	085b      	lsrs	r3, r3, #1
 80062cc:	60bb      	str	r3, [r7, #8]
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
 80062d2:	68b8      	ldr	r0, [r7, #8]
 80062d4:	68f9      	ldr	r1, [r7, #12]
 80062d6:	1900      	adds	r0, r0, r4
 80062d8:	4169      	adcs	r1, r5
 80062da:	69fb      	ldr	r3, [r7, #28]
 80062dc:	685b      	ldr	r3, [r3, #4]
 80062de:	603b      	str	r3, [r7, #0]
 80062e0:	2300      	movs	r3, #0
 80062e2:	607b      	str	r3, [r7, #4]
 80062e4:	683a      	ldr	r2, [r7, #0]
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f7f9 ffac 	bl	8000244 <__aeabi_uldivmod>
 80062ec:	0002      	movs	r2, r0
 80062ee:	000b      	movs	r3, r1
 80062f0:	0013      	movs	r3, r2
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80062f6:	23c0      	movs	r3, #192	; 0xc0
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	429a      	cmp	r2, r3
 80062fc:	d309      	bcc.n	8006312 <UART_SetConfig+0x38a>
 80062fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006300:	2380      	movs	r3, #128	; 0x80
 8006302:	035b      	lsls	r3, r3, #13
 8006304:	429a      	cmp	r2, r3
 8006306:	d204      	bcs.n	8006312 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800630e:	60da      	str	r2, [r3, #12]
 8006310:	e0dd      	b.n	80064ce <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006312:	231a      	movs	r3, #26
 8006314:	2218      	movs	r2, #24
 8006316:	4694      	mov	ip, r2
 8006318:	44bc      	add	ip, r7
 800631a:	4463      	add	r3, ip
 800631c:	2201      	movs	r2, #1
 800631e:	701a      	strb	r2, [r3, #0]
 8006320:	e0d5      	b.n	80064ce <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006322:	69fb      	ldr	r3, [r7, #28]
 8006324:	69da      	ldr	r2, [r3, #28]
 8006326:	2380      	movs	r3, #128	; 0x80
 8006328:	021b      	lsls	r3, r3, #8
 800632a:	429a      	cmp	r2, r3
 800632c:	d000      	beq.n	8006330 <UART_SetConfig+0x3a8>
 800632e:	e074      	b.n	800641a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8006330:	231b      	movs	r3, #27
 8006332:	2218      	movs	r2, #24
 8006334:	4694      	mov	ip, r2
 8006336:	44bc      	add	ip, r7
 8006338:	4463      	add	r3, ip
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b08      	cmp	r3, #8
 800633e:	d822      	bhi.n	8006386 <UART_SetConfig+0x3fe>
 8006340:	009a      	lsls	r2, r3, #2
 8006342:	4b6b      	ldr	r3, [pc, #428]	; (80064f0 <UART_SetConfig+0x568>)
 8006344:	18d3      	adds	r3, r2, r3
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800634a:	f7fe fc9b 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 800634e:	0003      	movs	r3, r0
 8006350:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006352:	e022      	b.n	800639a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006354:	f7fe fcac 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 8006358:	0003      	movs	r3, r0
 800635a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800635c:	e01d      	b.n	800639a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800635e:	4b65      	ldr	r3, [pc, #404]	; (80064f4 <UART_SetConfig+0x56c>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2210      	movs	r2, #16
 8006364:	4013      	ands	r3, r2
 8006366:	d002      	beq.n	800636e <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006368:	4b63      	ldr	r3, [pc, #396]	; (80064f8 <UART_SetConfig+0x570>)
 800636a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800636c:	e015      	b.n	800639a <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 800636e:	4b63      	ldr	r3, [pc, #396]	; (80064fc <UART_SetConfig+0x574>)
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006372:	e012      	b.n	800639a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006374:	f7fe fbd8 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8006378:	0003      	movs	r3, r0
 800637a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800637c:	e00d      	b.n	800639a <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800637e:	2380      	movs	r3, #128	; 0x80
 8006380:	021b      	lsls	r3, r3, #8
 8006382:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006384:	e009      	b.n	800639a <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 8006386:	2300      	movs	r3, #0
 8006388:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800638a:	231a      	movs	r3, #26
 800638c:	2218      	movs	r2, #24
 800638e:	4694      	mov	ip, r2
 8006390:	44bc      	add	ip, r7
 8006392:	4463      	add	r3, ip
 8006394:	2201      	movs	r2, #1
 8006396:	701a      	strb	r2, [r3, #0]
        break;
 8006398:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800639a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639c:	2b00      	cmp	r3, #0
 800639e:	d100      	bne.n	80063a2 <UART_SetConfig+0x41a>
 80063a0:	e095      	b.n	80064ce <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80063a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a4:	005a      	lsls	r2, r3, #1
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	085b      	lsrs	r3, r3, #1
 80063ac:	18d2      	adds	r2, r2, r3
 80063ae:	69fb      	ldr	r3, [r7, #28]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	0019      	movs	r1, r3
 80063b4:	0010      	movs	r0, r2
 80063b6:	f7f9 feb9 	bl	800012c <__udivsi3>
 80063ba:	0003      	movs	r3, r0
 80063bc:	b29b      	uxth	r3, r3
 80063be:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063c2:	2b0f      	cmp	r3, #15
 80063c4:	d921      	bls.n	800640a <UART_SetConfig+0x482>
 80063c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063c8:	2380      	movs	r3, #128	; 0x80
 80063ca:	025b      	lsls	r3, r3, #9
 80063cc:	429a      	cmp	r2, r3
 80063ce:	d21c      	bcs.n	800640a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	200e      	movs	r0, #14
 80063d6:	2418      	movs	r4, #24
 80063d8:	193b      	adds	r3, r7, r4
 80063da:	181b      	adds	r3, r3, r0
 80063dc:	210f      	movs	r1, #15
 80063de:	438a      	bics	r2, r1
 80063e0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e4:	085b      	lsrs	r3, r3, #1
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2207      	movs	r2, #7
 80063ea:	4013      	ands	r3, r2
 80063ec:	b299      	uxth	r1, r3
 80063ee:	193b      	adds	r3, r7, r4
 80063f0:	181b      	adds	r3, r3, r0
 80063f2:	193a      	adds	r2, r7, r4
 80063f4:	1812      	adds	r2, r2, r0
 80063f6:	8812      	ldrh	r2, [r2, #0]
 80063f8:	430a      	orrs	r2, r1
 80063fa:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	193a      	adds	r2, r7, r4
 8006402:	1812      	adds	r2, r2, r0
 8006404:	8812      	ldrh	r2, [r2, #0]
 8006406:	60da      	str	r2, [r3, #12]
 8006408:	e061      	b.n	80064ce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800640a:	231a      	movs	r3, #26
 800640c:	2218      	movs	r2, #24
 800640e:	4694      	mov	ip, r2
 8006410:	44bc      	add	ip, r7
 8006412:	4463      	add	r3, ip
 8006414:	2201      	movs	r2, #1
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	e059      	b.n	80064ce <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800641a:	231b      	movs	r3, #27
 800641c:	2218      	movs	r2, #24
 800641e:	4694      	mov	ip, r2
 8006420:	44bc      	add	ip, r7
 8006422:	4463      	add	r3, ip
 8006424:	781b      	ldrb	r3, [r3, #0]
 8006426:	2b08      	cmp	r3, #8
 8006428:	d822      	bhi.n	8006470 <UART_SetConfig+0x4e8>
 800642a:	009a      	lsls	r2, r3, #2
 800642c:	4b34      	ldr	r3, [pc, #208]	; (8006500 <UART_SetConfig+0x578>)
 800642e:	18d3      	adds	r3, r2, r3
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006434:	f7fe fc26 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8006438:	0003      	movs	r3, r0
 800643a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800643c:	e022      	b.n	8006484 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800643e:	f7fe fc37 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 8006442:	0003      	movs	r3, r0
 8006444:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006446:	e01d      	b.n	8006484 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006448:	4b2a      	ldr	r3, [pc, #168]	; (80064f4 <UART_SetConfig+0x56c>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2210      	movs	r2, #16
 800644e:	4013      	ands	r3, r2
 8006450:	d002      	beq.n	8006458 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006452:	4b29      	ldr	r3, [pc, #164]	; (80064f8 <UART_SetConfig+0x570>)
 8006454:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006456:	e015      	b.n	8006484 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 8006458:	4b28      	ldr	r3, [pc, #160]	; (80064fc <UART_SetConfig+0x574>)
 800645a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800645c:	e012      	b.n	8006484 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800645e:	f7fe fb63 	bl	8004b28 <HAL_RCC_GetSysClockFreq>
 8006462:	0003      	movs	r3, r0
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006466:	e00d      	b.n	8006484 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006468:	2380      	movs	r3, #128	; 0x80
 800646a:	021b      	lsls	r3, r3, #8
 800646c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800646e:	e009      	b.n	8006484 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 8006470:	2300      	movs	r3, #0
 8006472:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006474:	231a      	movs	r3, #26
 8006476:	2218      	movs	r2, #24
 8006478:	4694      	mov	ip, r2
 800647a:	44bc      	add	ip, r7
 800647c:	4463      	add	r3, ip
 800647e:	2201      	movs	r2, #1
 8006480:	701a      	strb	r2, [r3, #0]
        break;
 8006482:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006486:	2b00      	cmp	r3, #0
 8006488:	d021      	beq.n	80064ce <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800648a:	69fb      	ldr	r3, [r7, #28]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	085a      	lsrs	r2, r3, #1
 8006490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006492:	18d2      	adds	r2, r2, r3
 8006494:	69fb      	ldr	r3, [r7, #28]
 8006496:	685b      	ldr	r3, [r3, #4]
 8006498:	0019      	movs	r1, r3
 800649a:	0010      	movs	r0, r2
 800649c:	f7f9 fe46 	bl	800012c <__udivsi3>
 80064a0:	0003      	movs	r3, r0
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	2b0f      	cmp	r3, #15
 80064aa:	d909      	bls.n	80064c0 <UART_SetConfig+0x538>
 80064ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064ae:	2380      	movs	r3, #128	; 0x80
 80064b0:	025b      	lsls	r3, r3, #9
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d204      	bcs.n	80064c0 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	e006      	b.n	80064ce <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80064c0:	231a      	movs	r3, #26
 80064c2:	2218      	movs	r2, #24
 80064c4:	4694      	mov	ip, r2
 80064c6:	44bc      	add	ip, r7
 80064c8:	4463      	add	r3, ip
 80064ca:	2201      	movs	r2, #1
 80064cc:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	2200      	movs	r2, #0
 80064d2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	2200      	movs	r2, #0
 80064d8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80064da:	231a      	movs	r3, #26
 80064dc:	2218      	movs	r2, #24
 80064de:	4694      	mov	ip, r2
 80064e0:	44bc      	add	ip, r7
 80064e2:	4463      	add	r3, ip
 80064e4:	781b      	ldrb	r3, [r3, #0]
}
 80064e6:	0018      	movs	r0, r3
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b00e      	add	sp, #56	; 0x38
 80064ec:	bdb0      	pop	{r4, r5, r7, pc}
 80064ee:	46c0      	nop			; (mov r8, r8)
 80064f0:	08009160 	.word	0x08009160
 80064f4:	40021000 	.word	0x40021000
 80064f8:	003d0900 	.word	0x003d0900
 80064fc:	00f42400 	.word	0x00f42400
 8006500:	08009184 	.word	0x08009184

08006504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b082      	sub	sp, #8
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	2201      	movs	r2, #1
 8006512:	4013      	ands	r3, r2
 8006514:	d00b      	beq.n	800652e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	4a4a      	ldr	r2, [pc, #296]	; (8006648 <UART_AdvFeatureConfig+0x144>)
 800651e:	4013      	ands	r3, r2
 8006520:	0019      	movs	r1, r3
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006532:	2202      	movs	r2, #2
 8006534:	4013      	ands	r3, r2
 8006536:	d00b      	beq.n	8006550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	4a43      	ldr	r2, [pc, #268]	; (800664c <UART_AdvFeatureConfig+0x148>)
 8006540:	4013      	ands	r3, r2
 8006542:	0019      	movs	r1, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	2204      	movs	r2, #4
 8006556:	4013      	ands	r3, r2
 8006558:	d00b      	beq.n	8006572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	4a3b      	ldr	r2, [pc, #236]	; (8006650 <UART_AdvFeatureConfig+0x14c>)
 8006562:	4013      	ands	r3, r2
 8006564:	0019      	movs	r1, r3
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006576:	2208      	movs	r2, #8
 8006578:	4013      	ands	r3, r2
 800657a:	d00b      	beq.n	8006594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	4a34      	ldr	r2, [pc, #208]	; (8006654 <UART_AdvFeatureConfig+0x150>)
 8006584:	4013      	ands	r3, r2
 8006586:	0019      	movs	r1, r3
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	2210      	movs	r2, #16
 800659a:	4013      	ands	r3, r2
 800659c:	d00b      	beq.n	80065b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	4a2c      	ldr	r2, [pc, #176]	; (8006658 <UART_AdvFeatureConfig+0x154>)
 80065a6:	4013      	ands	r3, r2
 80065a8:	0019      	movs	r1, r3
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065ba:	2220      	movs	r2, #32
 80065bc:	4013      	ands	r3, r2
 80065be:	d00b      	beq.n	80065d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	689b      	ldr	r3, [r3, #8]
 80065c6:	4a25      	ldr	r2, [pc, #148]	; (800665c <UART_AdvFeatureConfig+0x158>)
 80065c8:	4013      	ands	r3, r2
 80065ca:	0019      	movs	r1, r3
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	2240      	movs	r2, #64	; 0x40
 80065de:	4013      	ands	r3, r2
 80065e0:	d01d      	beq.n	800661e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	4a1d      	ldr	r2, [pc, #116]	; (8006660 <UART_AdvFeatureConfig+0x15c>)
 80065ea:	4013      	ands	r3, r2
 80065ec:	0019      	movs	r1, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065fe:	2380      	movs	r3, #128	; 0x80
 8006600:	035b      	lsls	r3, r3, #13
 8006602:	429a      	cmp	r2, r3
 8006604:	d10b      	bne.n	800661e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	4a15      	ldr	r2, [pc, #84]	; (8006664 <UART_AdvFeatureConfig+0x160>)
 800660e:	4013      	ands	r3, r2
 8006610:	0019      	movs	r1, r3
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	430a      	orrs	r2, r1
 800661c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006622:	2280      	movs	r2, #128	; 0x80
 8006624:	4013      	ands	r3, r2
 8006626:	d00b      	beq.n	8006640 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	4a0e      	ldr	r2, [pc, #56]	; (8006668 <UART_AdvFeatureConfig+0x164>)
 8006630:	4013      	ands	r3, r2
 8006632:	0019      	movs	r1, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	605a      	str	r2, [r3, #4]
  }
}
 8006640:	46c0      	nop			; (mov r8, r8)
 8006642:	46bd      	mov	sp, r7
 8006644:	b002      	add	sp, #8
 8006646:	bd80      	pop	{r7, pc}
 8006648:	fffdffff 	.word	0xfffdffff
 800664c:	fffeffff 	.word	0xfffeffff
 8006650:	fffbffff 	.word	0xfffbffff
 8006654:	ffff7fff 	.word	0xffff7fff
 8006658:	ffffefff 	.word	0xffffefff
 800665c:	ffffdfff 	.word	0xffffdfff
 8006660:	ffefffff 	.word	0xffefffff
 8006664:	ff9fffff 	.word	0xff9fffff
 8006668:	fff7ffff 	.word	0xfff7ffff

0800666c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af02      	add	r7, sp, #8
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2280      	movs	r2, #128	; 0x80
 8006678:	2100      	movs	r1, #0
 800667a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800667c:	f7fc fbec 	bl	8002e58 <HAL_GetTick>
 8006680:	0003      	movs	r3, r0
 8006682:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	2208      	movs	r2, #8
 800668c:	4013      	ands	r3, r2
 800668e:	2b08      	cmp	r3, #8
 8006690:	d10c      	bne.n	80066ac <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	2280      	movs	r2, #128	; 0x80
 8006696:	0391      	lsls	r1, r2, #14
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	4a17      	ldr	r2, [pc, #92]	; (80066f8 <UART_CheckIdleState+0x8c>)
 800669c:	9200      	str	r2, [sp, #0]
 800669e:	2200      	movs	r2, #0
 80066a0:	f000 f82c 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 80066a4:	1e03      	subs	r3, r0, #0
 80066a6:	d001      	beq.n	80066ac <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e021      	b.n	80066f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2204      	movs	r2, #4
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d10c      	bne.n	80066d4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2280      	movs	r2, #128	; 0x80
 80066be:	03d1      	lsls	r1, r2, #15
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	4a0d      	ldr	r2, [pc, #52]	; (80066f8 <UART_CheckIdleState+0x8c>)
 80066c4:	9200      	str	r2, [sp, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f000 f818 	bl	80066fc <UART_WaitOnFlagUntilTimeout>
 80066cc:	1e03      	subs	r3, r0, #0
 80066ce:	d001      	beq.n	80066d4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066d0:	2303      	movs	r3, #3
 80066d2:	e00d      	b.n	80066f0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2220      	movs	r2, #32
 80066d8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2220      	movs	r2, #32
 80066de:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2274      	movs	r2, #116	; 0x74
 80066ea:	2100      	movs	r1, #0
 80066ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	0018      	movs	r0, r3
 80066f2:	46bd      	mov	sp, r7
 80066f4:	b004      	add	sp, #16
 80066f6:	bd80      	pop	{r7, pc}
 80066f8:	01ffffff 	.word	0x01ffffff

080066fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b094      	sub	sp, #80	; 0x50
 8006700:	af00      	add	r7, sp, #0
 8006702:	60f8      	str	r0, [r7, #12]
 8006704:	60b9      	str	r1, [r7, #8]
 8006706:	603b      	str	r3, [r7, #0]
 8006708:	1dfb      	adds	r3, r7, #7
 800670a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800670c:	e0a3      	b.n	8006856 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800670e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006710:	3301      	adds	r3, #1
 8006712:	d100      	bne.n	8006716 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006714:	e09f      	b.n	8006856 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006716:	f7fc fb9f 	bl	8002e58 <HAL_GetTick>
 800671a:	0002      	movs	r2, r0
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	1ad3      	subs	r3, r2, r3
 8006720:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006722:	429a      	cmp	r2, r3
 8006724:	d302      	bcc.n	800672c <UART_WaitOnFlagUntilTimeout+0x30>
 8006726:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006728:	2b00      	cmp	r3, #0
 800672a:	d13d      	bne.n	80067a8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800672c:	f3ef 8310 	mrs	r3, PRIMASK
 8006730:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006732:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006734:	647b      	str	r3, [r7, #68]	; 0x44
 8006736:	2301      	movs	r3, #1
 8006738:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800673c:	f383 8810 	msr	PRIMASK, r3
}
 8006740:	46c0      	nop			; (mov r8, r8)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	494c      	ldr	r1, [pc, #304]	; (8006880 <UART_WaitOnFlagUntilTimeout+0x184>)
 800674e:	400a      	ands	r2, r1
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006754:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006758:	f383 8810 	msr	PRIMASK, r3
}
 800675c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675e:	f3ef 8310 	mrs	r3, PRIMASK
 8006762:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006766:	643b      	str	r3, [r7, #64]	; 0x40
 8006768:	2301      	movs	r3, #1
 800676a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			; (mov r8, r8)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	689a      	ldr	r2, [r3, #8]
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2101      	movs	r1, #1
 8006780:	438a      	bics	r2, r1
 8006782:	609a      	str	r2, [r3, #8]
 8006784:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006786:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006788:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800678a:	f383 8810 	msr	PRIMASK, r3
}
 800678e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2220      	movs	r2, #32
 8006794:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2220      	movs	r2, #32
 800679a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2274      	movs	r2, #116	; 0x74
 80067a0:	2100      	movs	r1, #0
 80067a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e067      	b.n	8006878 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2204      	movs	r2, #4
 80067b0:	4013      	ands	r3, r2
 80067b2:	d050      	beq.n	8006856 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	69da      	ldr	r2, [r3, #28]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	401a      	ands	r2, r3
 80067c0:	2380      	movs	r3, #128	; 0x80
 80067c2:	011b      	lsls	r3, r3, #4
 80067c4:	429a      	cmp	r2, r3
 80067c6:	d146      	bne.n	8006856 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2280      	movs	r2, #128	; 0x80
 80067ce:	0112      	lsls	r2, r2, #4
 80067d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d2:	f3ef 8310 	mrs	r3, PRIMASK
 80067d6:	613b      	str	r3, [r7, #16]
  return(result);
 80067d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067dc:	2301      	movs	r3, #1
 80067de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	f383 8810 	msr	PRIMASK, r3
}
 80067e6:	46c0      	nop			; (mov r8, r8)
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4923      	ldr	r1, [pc, #140]	; (8006880 <UART_WaitOnFlagUntilTimeout+0x184>)
 80067f4:	400a      	ands	r2, r1
 80067f6:	601a      	str	r2, [r3, #0]
 80067f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fc:	69bb      	ldr	r3, [r7, #24]
 80067fe:	f383 8810 	msr	PRIMASK, r3
}
 8006802:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006804:	f3ef 8310 	mrs	r3, PRIMASK
 8006808:	61fb      	str	r3, [r7, #28]
  return(result);
 800680a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680c:	64bb      	str	r3, [r7, #72]	; 0x48
 800680e:	2301      	movs	r3, #1
 8006810:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006812:	6a3b      	ldr	r3, [r7, #32]
 8006814:	f383 8810 	msr	PRIMASK, r3
}
 8006818:	46c0      	nop			; (mov r8, r8)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	689a      	ldr	r2, [r3, #8]
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2101      	movs	r1, #1
 8006826:	438a      	bics	r2, r1
 8006828:	609a      	str	r2, [r3, #8]
 800682a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800682e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006830:	f383 8810 	msr	PRIMASK, r3
}
 8006834:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2280      	movs	r2, #128	; 0x80
 8006846:	2120      	movs	r1, #32
 8006848:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2274      	movs	r2, #116	; 0x74
 800684e:	2100      	movs	r1, #0
 8006850:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e010      	b.n	8006878 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69db      	ldr	r3, [r3, #28]
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	4013      	ands	r3, r2
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	425a      	negs	r2, r3
 8006866:	4153      	adcs	r3, r2
 8006868:	b2db      	uxtb	r3, r3
 800686a:	001a      	movs	r2, r3
 800686c:	1dfb      	adds	r3, r7, #7
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	429a      	cmp	r2, r3
 8006872:	d100      	bne.n	8006876 <UART_WaitOnFlagUntilTimeout+0x17a>
 8006874:	e74b      	b.n	800670e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	0018      	movs	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	b014      	add	sp, #80	; 0x50
 800687e:	bd80      	pop	{r7, pc}
 8006880:	fffffe5f 	.word	0xfffffe5f

08006884 <__errno>:
 8006884:	4b01      	ldr	r3, [pc, #4]	; (800688c <__errno+0x8>)
 8006886:	6818      	ldr	r0, [r3, #0]
 8006888:	4770      	bx	lr
 800688a:	46c0      	nop			; (mov r8, r8)
 800688c:	20000014 	.word	0x20000014

08006890 <__libc_init_array>:
 8006890:	b570      	push	{r4, r5, r6, lr}
 8006892:	2600      	movs	r6, #0
 8006894:	4d0c      	ldr	r5, [pc, #48]	; (80068c8 <__libc_init_array+0x38>)
 8006896:	4c0d      	ldr	r4, [pc, #52]	; (80068cc <__libc_init_array+0x3c>)
 8006898:	1b64      	subs	r4, r4, r5
 800689a:	10a4      	asrs	r4, r4, #2
 800689c:	42a6      	cmp	r6, r4
 800689e:	d109      	bne.n	80068b4 <__libc_init_array+0x24>
 80068a0:	2600      	movs	r6, #0
 80068a2:	f001 f943 	bl	8007b2c <_init>
 80068a6:	4d0a      	ldr	r5, [pc, #40]	; (80068d0 <__libc_init_array+0x40>)
 80068a8:	4c0a      	ldr	r4, [pc, #40]	; (80068d4 <__libc_init_array+0x44>)
 80068aa:	1b64      	subs	r4, r4, r5
 80068ac:	10a4      	asrs	r4, r4, #2
 80068ae:	42a6      	cmp	r6, r4
 80068b0:	d105      	bne.n	80068be <__libc_init_array+0x2e>
 80068b2:	bd70      	pop	{r4, r5, r6, pc}
 80068b4:	00b3      	lsls	r3, r6, #2
 80068b6:	58eb      	ldr	r3, [r5, r3]
 80068b8:	4798      	blx	r3
 80068ba:	3601      	adds	r6, #1
 80068bc:	e7ee      	b.n	800689c <__libc_init_array+0xc>
 80068be:	00b3      	lsls	r3, r6, #2
 80068c0:	58eb      	ldr	r3, [r5, r3]
 80068c2:	4798      	blx	r3
 80068c4:	3601      	adds	r6, #1
 80068c6:	e7f2      	b.n	80068ae <__libc_init_array+0x1e>
 80068c8:	08009360 	.word	0x08009360
 80068cc:	08009360 	.word	0x08009360
 80068d0:	08009360 	.word	0x08009360
 80068d4:	08009364 	.word	0x08009364

080068d8 <memcpy>:
 80068d8:	2300      	movs	r3, #0
 80068da:	b510      	push	{r4, lr}
 80068dc:	429a      	cmp	r2, r3
 80068de:	d100      	bne.n	80068e2 <memcpy+0xa>
 80068e0:	bd10      	pop	{r4, pc}
 80068e2:	5ccc      	ldrb	r4, [r1, r3]
 80068e4:	54c4      	strb	r4, [r0, r3]
 80068e6:	3301      	adds	r3, #1
 80068e8:	e7f8      	b.n	80068dc <memcpy+0x4>

080068ea <memset>:
 80068ea:	0003      	movs	r3, r0
 80068ec:	1882      	adds	r2, r0, r2
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d100      	bne.n	80068f4 <memset+0xa>
 80068f2:	4770      	bx	lr
 80068f4:	7019      	strb	r1, [r3, #0]
 80068f6:	3301      	adds	r3, #1
 80068f8:	e7f9      	b.n	80068ee <memset+0x4>
	...

080068fc <siprintf>:
 80068fc:	b40e      	push	{r1, r2, r3}
 80068fe:	b500      	push	{lr}
 8006900:	490b      	ldr	r1, [pc, #44]	; (8006930 <siprintf+0x34>)
 8006902:	b09c      	sub	sp, #112	; 0x70
 8006904:	ab1d      	add	r3, sp, #116	; 0x74
 8006906:	9002      	str	r0, [sp, #8]
 8006908:	9006      	str	r0, [sp, #24]
 800690a:	9107      	str	r1, [sp, #28]
 800690c:	9104      	str	r1, [sp, #16]
 800690e:	4809      	ldr	r0, [pc, #36]	; (8006934 <siprintf+0x38>)
 8006910:	4909      	ldr	r1, [pc, #36]	; (8006938 <siprintf+0x3c>)
 8006912:	cb04      	ldmia	r3!, {r2}
 8006914:	9105      	str	r1, [sp, #20]
 8006916:	6800      	ldr	r0, [r0, #0]
 8006918:	a902      	add	r1, sp, #8
 800691a:	9301      	str	r3, [sp, #4]
 800691c:	f000 f89a 	bl	8006a54 <_svfiprintf_r>
 8006920:	2300      	movs	r3, #0
 8006922:	9a02      	ldr	r2, [sp, #8]
 8006924:	7013      	strb	r3, [r2, #0]
 8006926:	b01c      	add	sp, #112	; 0x70
 8006928:	bc08      	pop	{r3}
 800692a:	b003      	add	sp, #12
 800692c:	4718      	bx	r3
 800692e:	46c0      	nop			; (mov r8, r8)
 8006930:	7fffffff 	.word	0x7fffffff
 8006934:	20000014 	.word	0x20000014
 8006938:	ffff0208 	.word	0xffff0208

0800693c <siscanf>:
 800693c:	b40e      	push	{r1, r2, r3}
 800693e:	b530      	push	{r4, r5, lr}
 8006940:	2381      	movs	r3, #129	; 0x81
 8006942:	b09c      	sub	sp, #112	; 0x70
 8006944:	466a      	mov	r2, sp
 8006946:	ac1f      	add	r4, sp, #124	; 0x7c
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	cc20      	ldmia	r4!, {r5}
 800694c:	8293      	strh	r3, [r2, #20]
 800694e:	9002      	str	r0, [sp, #8]
 8006950:	9006      	str	r0, [sp, #24]
 8006952:	f7f9 fbd9 	bl	8000108 <strlen>
 8006956:	4b0b      	ldr	r3, [pc, #44]	; (8006984 <siscanf+0x48>)
 8006958:	466a      	mov	r2, sp
 800695a:	930b      	str	r3, [sp, #44]	; 0x2c
 800695c:	2300      	movs	r3, #0
 800695e:	9003      	str	r0, [sp, #12]
 8006960:	9007      	str	r0, [sp, #28]
 8006962:	4809      	ldr	r0, [pc, #36]	; (8006988 <siscanf+0x4c>)
 8006964:	930f      	str	r3, [sp, #60]	; 0x3c
 8006966:	9314      	str	r3, [sp, #80]	; 0x50
 8006968:	3b01      	subs	r3, #1
 800696a:	82d3      	strh	r3, [r2, #22]
 800696c:	a902      	add	r1, sp, #8
 800696e:	0023      	movs	r3, r4
 8006970:	002a      	movs	r2, r5
 8006972:	6800      	ldr	r0, [r0, #0]
 8006974:	9401      	str	r4, [sp, #4]
 8006976:	f000 f9c9 	bl	8006d0c <__ssvfiscanf_r>
 800697a:	b01c      	add	sp, #112	; 0x70
 800697c:	bc30      	pop	{r4, r5}
 800697e:	bc08      	pop	{r3}
 8006980:	b003      	add	sp, #12
 8006982:	4718      	bx	r3
 8006984:	0800698d 	.word	0x0800698d
 8006988:	20000014 	.word	0x20000014

0800698c <__seofread>:
 800698c:	2000      	movs	r0, #0
 800698e:	4770      	bx	lr

08006990 <__ssputs_r>:
 8006990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006992:	688e      	ldr	r6, [r1, #8]
 8006994:	b085      	sub	sp, #20
 8006996:	0007      	movs	r7, r0
 8006998:	000c      	movs	r4, r1
 800699a:	9203      	str	r2, [sp, #12]
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	429e      	cmp	r6, r3
 80069a0:	d83c      	bhi.n	8006a1c <__ssputs_r+0x8c>
 80069a2:	2390      	movs	r3, #144	; 0x90
 80069a4:	898a      	ldrh	r2, [r1, #12]
 80069a6:	00db      	lsls	r3, r3, #3
 80069a8:	421a      	tst	r2, r3
 80069aa:	d034      	beq.n	8006a16 <__ssputs_r+0x86>
 80069ac:	2503      	movs	r5, #3
 80069ae:	6909      	ldr	r1, [r1, #16]
 80069b0:	6823      	ldr	r3, [r4, #0]
 80069b2:	1a5b      	subs	r3, r3, r1
 80069b4:	9302      	str	r3, [sp, #8]
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	9802      	ldr	r0, [sp, #8]
 80069ba:	435d      	muls	r5, r3
 80069bc:	0feb      	lsrs	r3, r5, #31
 80069be:	195d      	adds	r5, r3, r5
 80069c0:	9b01      	ldr	r3, [sp, #4]
 80069c2:	106d      	asrs	r5, r5, #1
 80069c4:	3301      	adds	r3, #1
 80069c6:	181b      	adds	r3, r3, r0
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	d900      	bls.n	80069ce <__ssputs_r+0x3e>
 80069cc:	001d      	movs	r5, r3
 80069ce:	0553      	lsls	r3, r2, #21
 80069d0:	d532      	bpl.n	8006a38 <__ssputs_r+0xa8>
 80069d2:	0029      	movs	r1, r5
 80069d4:	0038      	movs	r0, r7
 80069d6:	f000 fffb 	bl	80079d0 <_malloc_r>
 80069da:	1e06      	subs	r6, r0, #0
 80069dc:	d109      	bne.n	80069f2 <__ssputs_r+0x62>
 80069de:	230c      	movs	r3, #12
 80069e0:	603b      	str	r3, [r7, #0]
 80069e2:	2340      	movs	r3, #64	; 0x40
 80069e4:	2001      	movs	r0, #1
 80069e6:	89a2      	ldrh	r2, [r4, #12]
 80069e8:	4240      	negs	r0, r0
 80069ea:	4313      	orrs	r3, r2
 80069ec:	81a3      	strh	r3, [r4, #12]
 80069ee:	b005      	add	sp, #20
 80069f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069f2:	9a02      	ldr	r2, [sp, #8]
 80069f4:	6921      	ldr	r1, [r4, #16]
 80069f6:	f7ff ff6f 	bl	80068d8 <memcpy>
 80069fa:	89a3      	ldrh	r3, [r4, #12]
 80069fc:	4a14      	ldr	r2, [pc, #80]	; (8006a50 <__ssputs_r+0xc0>)
 80069fe:	401a      	ands	r2, r3
 8006a00:	2380      	movs	r3, #128	; 0x80
 8006a02:	4313      	orrs	r3, r2
 8006a04:	81a3      	strh	r3, [r4, #12]
 8006a06:	9b02      	ldr	r3, [sp, #8]
 8006a08:	6126      	str	r6, [r4, #16]
 8006a0a:	18f6      	adds	r6, r6, r3
 8006a0c:	6026      	str	r6, [r4, #0]
 8006a0e:	6165      	str	r5, [r4, #20]
 8006a10:	9e01      	ldr	r6, [sp, #4]
 8006a12:	1aed      	subs	r5, r5, r3
 8006a14:	60a5      	str	r5, [r4, #8]
 8006a16:	9b01      	ldr	r3, [sp, #4]
 8006a18:	429e      	cmp	r6, r3
 8006a1a:	d900      	bls.n	8006a1e <__ssputs_r+0x8e>
 8006a1c:	9e01      	ldr	r6, [sp, #4]
 8006a1e:	0032      	movs	r2, r6
 8006a20:	9903      	ldr	r1, [sp, #12]
 8006a22:	6820      	ldr	r0, [r4, #0]
 8006a24:	f000 ff77 	bl	8007916 <memmove>
 8006a28:	68a3      	ldr	r3, [r4, #8]
 8006a2a:	2000      	movs	r0, #0
 8006a2c:	1b9b      	subs	r3, r3, r6
 8006a2e:	60a3      	str	r3, [r4, #8]
 8006a30:	6823      	ldr	r3, [r4, #0]
 8006a32:	199e      	adds	r6, r3, r6
 8006a34:	6026      	str	r6, [r4, #0]
 8006a36:	e7da      	b.n	80069ee <__ssputs_r+0x5e>
 8006a38:	002a      	movs	r2, r5
 8006a3a:	0038      	movs	r0, r7
 8006a3c:	f001 f826 	bl	8007a8c <_realloc_r>
 8006a40:	1e06      	subs	r6, r0, #0
 8006a42:	d1e0      	bne.n	8006a06 <__ssputs_r+0x76>
 8006a44:	0038      	movs	r0, r7
 8006a46:	6921      	ldr	r1, [r4, #16]
 8006a48:	f000 ff78 	bl	800793c <_free_r>
 8006a4c:	e7c7      	b.n	80069de <__ssputs_r+0x4e>
 8006a4e:	46c0      	nop			; (mov r8, r8)
 8006a50:	fffffb7f 	.word	0xfffffb7f

08006a54 <_svfiprintf_r>:
 8006a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a56:	b0a1      	sub	sp, #132	; 0x84
 8006a58:	9003      	str	r0, [sp, #12]
 8006a5a:	001d      	movs	r5, r3
 8006a5c:	898b      	ldrh	r3, [r1, #12]
 8006a5e:	000f      	movs	r7, r1
 8006a60:	0016      	movs	r6, r2
 8006a62:	061b      	lsls	r3, r3, #24
 8006a64:	d511      	bpl.n	8006a8a <_svfiprintf_r+0x36>
 8006a66:	690b      	ldr	r3, [r1, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d10e      	bne.n	8006a8a <_svfiprintf_r+0x36>
 8006a6c:	2140      	movs	r1, #64	; 0x40
 8006a6e:	f000 ffaf 	bl	80079d0 <_malloc_r>
 8006a72:	6038      	str	r0, [r7, #0]
 8006a74:	6138      	str	r0, [r7, #16]
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d105      	bne.n	8006a86 <_svfiprintf_r+0x32>
 8006a7a:	230c      	movs	r3, #12
 8006a7c:	9a03      	ldr	r2, [sp, #12]
 8006a7e:	3801      	subs	r0, #1
 8006a80:	6013      	str	r3, [r2, #0]
 8006a82:	b021      	add	sp, #132	; 0x84
 8006a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a86:	2340      	movs	r3, #64	; 0x40
 8006a88:	617b      	str	r3, [r7, #20]
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	ac08      	add	r4, sp, #32
 8006a8e:	6163      	str	r3, [r4, #20]
 8006a90:	3320      	adds	r3, #32
 8006a92:	7663      	strb	r3, [r4, #25]
 8006a94:	3310      	adds	r3, #16
 8006a96:	76a3      	strb	r3, [r4, #26]
 8006a98:	9507      	str	r5, [sp, #28]
 8006a9a:	0035      	movs	r5, r6
 8006a9c:	782b      	ldrb	r3, [r5, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d001      	beq.n	8006aa6 <_svfiprintf_r+0x52>
 8006aa2:	2b25      	cmp	r3, #37	; 0x25
 8006aa4:	d147      	bne.n	8006b36 <_svfiprintf_r+0xe2>
 8006aa6:	1bab      	subs	r3, r5, r6
 8006aa8:	9305      	str	r3, [sp, #20]
 8006aaa:	42b5      	cmp	r5, r6
 8006aac:	d00c      	beq.n	8006ac8 <_svfiprintf_r+0x74>
 8006aae:	0032      	movs	r2, r6
 8006ab0:	0039      	movs	r1, r7
 8006ab2:	9803      	ldr	r0, [sp, #12]
 8006ab4:	f7ff ff6c 	bl	8006990 <__ssputs_r>
 8006ab8:	1c43      	adds	r3, r0, #1
 8006aba:	d100      	bne.n	8006abe <_svfiprintf_r+0x6a>
 8006abc:	e0ae      	b.n	8006c1c <_svfiprintf_r+0x1c8>
 8006abe:	6962      	ldr	r2, [r4, #20]
 8006ac0:	9b05      	ldr	r3, [sp, #20]
 8006ac2:	4694      	mov	ip, r2
 8006ac4:	4463      	add	r3, ip
 8006ac6:	6163      	str	r3, [r4, #20]
 8006ac8:	782b      	ldrb	r3, [r5, #0]
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d100      	bne.n	8006ad0 <_svfiprintf_r+0x7c>
 8006ace:	e0a5      	b.n	8006c1c <_svfiprintf_r+0x1c8>
 8006ad0:	2201      	movs	r2, #1
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	4252      	negs	r2, r2
 8006ad6:	6062      	str	r2, [r4, #4]
 8006ad8:	a904      	add	r1, sp, #16
 8006ada:	3254      	adds	r2, #84	; 0x54
 8006adc:	1852      	adds	r2, r2, r1
 8006ade:	1c6e      	adds	r6, r5, #1
 8006ae0:	6023      	str	r3, [r4, #0]
 8006ae2:	60e3      	str	r3, [r4, #12]
 8006ae4:	60a3      	str	r3, [r4, #8]
 8006ae6:	7013      	strb	r3, [r2, #0]
 8006ae8:	65a3      	str	r3, [r4, #88]	; 0x58
 8006aea:	2205      	movs	r2, #5
 8006aec:	7831      	ldrb	r1, [r6, #0]
 8006aee:	4854      	ldr	r0, [pc, #336]	; (8006c40 <_svfiprintf_r+0x1ec>)
 8006af0:	f000 ff06 	bl	8007900 <memchr>
 8006af4:	1c75      	adds	r5, r6, #1
 8006af6:	2800      	cmp	r0, #0
 8006af8:	d11f      	bne.n	8006b3a <_svfiprintf_r+0xe6>
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	06d3      	lsls	r3, r2, #27
 8006afe:	d504      	bpl.n	8006b0a <_svfiprintf_r+0xb6>
 8006b00:	2353      	movs	r3, #83	; 0x53
 8006b02:	a904      	add	r1, sp, #16
 8006b04:	185b      	adds	r3, r3, r1
 8006b06:	2120      	movs	r1, #32
 8006b08:	7019      	strb	r1, [r3, #0]
 8006b0a:	0713      	lsls	r3, r2, #28
 8006b0c:	d504      	bpl.n	8006b18 <_svfiprintf_r+0xc4>
 8006b0e:	2353      	movs	r3, #83	; 0x53
 8006b10:	a904      	add	r1, sp, #16
 8006b12:	185b      	adds	r3, r3, r1
 8006b14:	212b      	movs	r1, #43	; 0x2b
 8006b16:	7019      	strb	r1, [r3, #0]
 8006b18:	7833      	ldrb	r3, [r6, #0]
 8006b1a:	2b2a      	cmp	r3, #42	; 0x2a
 8006b1c:	d016      	beq.n	8006b4c <_svfiprintf_r+0xf8>
 8006b1e:	0035      	movs	r5, r6
 8006b20:	2100      	movs	r1, #0
 8006b22:	200a      	movs	r0, #10
 8006b24:	68e3      	ldr	r3, [r4, #12]
 8006b26:	782a      	ldrb	r2, [r5, #0]
 8006b28:	1c6e      	adds	r6, r5, #1
 8006b2a:	3a30      	subs	r2, #48	; 0x30
 8006b2c:	2a09      	cmp	r2, #9
 8006b2e:	d94e      	bls.n	8006bce <_svfiprintf_r+0x17a>
 8006b30:	2900      	cmp	r1, #0
 8006b32:	d111      	bne.n	8006b58 <_svfiprintf_r+0x104>
 8006b34:	e017      	b.n	8006b66 <_svfiprintf_r+0x112>
 8006b36:	3501      	adds	r5, #1
 8006b38:	e7b0      	b.n	8006a9c <_svfiprintf_r+0x48>
 8006b3a:	4b41      	ldr	r3, [pc, #260]	; (8006c40 <_svfiprintf_r+0x1ec>)
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	1ac0      	subs	r0, r0, r3
 8006b40:	2301      	movs	r3, #1
 8006b42:	4083      	lsls	r3, r0
 8006b44:	4313      	orrs	r3, r2
 8006b46:	002e      	movs	r6, r5
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	e7ce      	b.n	8006aea <_svfiprintf_r+0x96>
 8006b4c:	9b07      	ldr	r3, [sp, #28]
 8006b4e:	1d19      	adds	r1, r3, #4
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	9107      	str	r1, [sp, #28]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	db01      	blt.n	8006b5c <_svfiprintf_r+0x108>
 8006b58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006b5a:	e004      	b.n	8006b66 <_svfiprintf_r+0x112>
 8006b5c:	425b      	negs	r3, r3
 8006b5e:	60e3      	str	r3, [r4, #12]
 8006b60:	2302      	movs	r3, #2
 8006b62:	4313      	orrs	r3, r2
 8006b64:	6023      	str	r3, [r4, #0]
 8006b66:	782b      	ldrb	r3, [r5, #0]
 8006b68:	2b2e      	cmp	r3, #46	; 0x2e
 8006b6a:	d10a      	bne.n	8006b82 <_svfiprintf_r+0x12e>
 8006b6c:	786b      	ldrb	r3, [r5, #1]
 8006b6e:	2b2a      	cmp	r3, #42	; 0x2a
 8006b70:	d135      	bne.n	8006bde <_svfiprintf_r+0x18a>
 8006b72:	9b07      	ldr	r3, [sp, #28]
 8006b74:	3502      	adds	r5, #2
 8006b76:	1d1a      	adds	r2, r3, #4
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	9207      	str	r2, [sp, #28]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	db2b      	blt.n	8006bd8 <_svfiprintf_r+0x184>
 8006b80:	9309      	str	r3, [sp, #36]	; 0x24
 8006b82:	4e30      	ldr	r6, [pc, #192]	; (8006c44 <_svfiprintf_r+0x1f0>)
 8006b84:	2203      	movs	r2, #3
 8006b86:	0030      	movs	r0, r6
 8006b88:	7829      	ldrb	r1, [r5, #0]
 8006b8a:	f000 feb9 	bl	8007900 <memchr>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d006      	beq.n	8006ba0 <_svfiprintf_r+0x14c>
 8006b92:	2340      	movs	r3, #64	; 0x40
 8006b94:	1b80      	subs	r0, r0, r6
 8006b96:	4083      	lsls	r3, r0
 8006b98:	6822      	ldr	r2, [r4, #0]
 8006b9a:	3501      	adds	r5, #1
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	6023      	str	r3, [r4, #0]
 8006ba0:	7829      	ldrb	r1, [r5, #0]
 8006ba2:	2206      	movs	r2, #6
 8006ba4:	4828      	ldr	r0, [pc, #160]	; (8006c48 <_svfiprintf_r+0x1f4>)
 8006ba6:	1c6e      	adds	r6, r5, #1
 8006ba8:	7621      	strb	r1, [r4, #24]
 8006baa:	f000 fea9 	bl	8007900 <memchr>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d03c      	beq.n	8006c2c <_svfiprintf_r+0x1d8>
 8006bb2:	4b26      	ldr	r3, [pc, #152]	; (8006c4c <_svfiprintf_r+0x1f8>)
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d125      	bne.n	8006c04 <_svfiprintf_r+0x1b0>
 8006bb8:	2207      	movs	r2, #7
 8006bba:	9b07      	ldr	r3, [sp, #28]
 8006bbc:	3307      	adds	r3, #7
 8006bbe:	4393      	bics	r3, r2
 8006bc0:	3308      	adds	r3, #8
 8006bc2:	9307      	str	r3, [sp, #28]
 8006bc4:	6963      	ldr	r3, [r4, #20]
 8006bc6:	9a04      	ldr	r2, [sp, #16]
 8006bc8:	189b      	adds	r3, r3, r2
 8006bca:	6163      	str	r3, [r4, #20]
 8006bcc:	e765      	b.n	8006a9a <_svfiprintf_r+0x46>
 8006bce:	4343      	muls	r3, r0
 8006bd0:	0035      	movs	r5, r6
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	189b      	adds	r3, r3, r2
 8006bd6:	e7a6      	b.n	8006b26 <_svfiprintf_r+0xd2>
 8006bd8:	2301      	movs	r3, #1
 8006bda:	425b      	negs	r3, r3
 8006bdc:	e7d0      	b.n	8006b80 <_svfiprintf_r+0x12c>
 8006bde:	2300      	movs	r3, #0
 8006be0:	200a      	movs	r0, #10
 8006be2:	001a      	movs	r2, r3
 8006be4:	3501      	adds	r5, #1
 8006be6:	6063      	str	r3, [r4, #4]
 8006be8:	7829      	ldrb	r1, [r5, #0]
 8006bea:	1c6e      	adds	r6, r5, #1
 8006bec:	3930      	subs	r1, #48	; 0x30
 8006bee:	2909      	cmp	r1, #9
 8006bf0:	d903      	bls.n	8006bfa <_svfiprintf_r+0x1a6>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d0c5      	beq.n	8006b82 <_svfiprintf_r+0x12e>
 8006bf6:	9209      	str	r2, [sp, #36]	; 0x24
 8006bf8:	e7c3      	b.n	8006b82 <_svfiprintf_r+0x12e>
 8006bfa:	4342      	muls	r2, r0
 8006bfc:	0035      	movs	r5, r6
 8006bfe:	2301      	movs	r3, #1
 8006c00:	1852      	adds	r2, r2, r1
 8006c02:	e7f1      	b.n	8006be8 <_svfiprintf_r+0x194>
 8006c04:	ab07      	add	r3, sp, #28
 8006c06:	9300      	str	r3, [sp, #0]
 8006c08:	003a      	movs	r2, r7
 8006c0a:	0021      	movs	r1, r4
 8006c0c:	4b10      	ldr	r3, [pc, #64]	; (8006c50 <_svfiprintf_r+0x1fc>)
 8006c0e:	9803      	ldr	r0, [sp, #12]
 8006c10:	e000      	b.n	8006c14 <_svfiprintf_r+0x1c0>
 8006c12:	bf00      	nop
 8006c14:	9004      	str	r0, [sp, #16]
 8006c16:	9b04      	ldr	r3, [sp, #16]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	d1d3      	bne.n	8006bc4 <_svfiprintf_r+0x170>
 8006c1c:	89bb      	ldrh	r3, [r7, #12]
 8006c1e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006c20:	065b      	lsls	r3, r3, #25
 8006c22:	d400      	bmi.n	8006c26 <_svfiprintf_r+0x1d2>
 8006c24:	e72d      	b.n	8006a82 <_svfiprintf_r+0x2e>
 8006c26:	2001      	movs	r0, #1
 8006c28:	4240      	negs	r0, r0
 8006c2a:	e72a      	b.n	8006a82 <_svfiprintf_r+0x2e>
 8006c2c:	ab07      	add	r3, sp, #28
 8006c2e:	9300      	str	r3, [sp, #0]
 8006c30:	003a      	movs	r2, r7
 8006c32:	0021      	movs	r1, r4
 8006c34:	4b06      	ldr	r3, [pc, #24]	; (8006c50 <_svfiprintf_r+0x1fc>)
 8006c36:	9803      	ldr	r0, [sp, #12]
 8006c38:	f000 fa50 	bl	80070dc <_printf_i>
 8006c3c:	e7ea      	b.n	8006c14 <_svfiprintf_r+0x1c0>
 8006c3e:	46c0      	nop			; (mov r8, r8)
 8006c40:	080092a9 	.word	0x080092a9
 8006c44:	080092af 	.word	0x080092af
 8006c48:	080092b3 	.word	0x080092b3
 8006c4c:	00000000 	.word	0x00000000
 8006c50:	08006991 	.word	0x08006991

08006c54 <_sungetc_r>:
 8006c54:	b570      	push	{r4, r5, r6, lr}
 8006c56:	0014      	movs	r4, r2
 8006c58:	1c4b      	adds	r3, r1, #1
 8006c5a:	d103      	bne.n	8006c64 <_sungetc_r+0x10>
 8006c5c:	2501      	movs	r5, #1
 8006c5e:	426d      	negs	r5, r5
 8006c60:	0028      	movs	r0, r5
 8006c62:	bd70      	pop	{r4, r5, r6, pc}
 8006c64:	8993      	ldrh	r3, [r2, #12]
 8006c66:	2220      	movs	r2, #32
 8006c68:	4393      	bics	r3, r2
 8006c6a:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	b2ce      	uxtb	r6, r1
 8006c70:	6863      	ldr	r3, [r4, #4]
 8006c72:	b2cd      	uxtb	r5, r1
 8006c74:	2a00      	cmp	r2, #0
 8006c76:	d010      	beq.n	8006c9a <_sungetc_r+0x46>
 8006c78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	dd07      	ble.n	8006c8e <_sungetc_r+0x3a>
 8006c7e:	6823      	ldr	r3, [r4, #0]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	701e      	strb	r6, [r3, #0]
 8006c86:	6863      	ldr	r3, [r4, #4]
 8006c88:	3301      	adds	r3, #1
 8006c8a:	6063      	str	r3, [r4, #4]
 8006c8c:	e7e8      	b.n	8006c60 <_sungetc_r+0xc>
 8006c8e:	0021      	movs	r1, r4
 8006c90:	f000 fdf6 	bl	8007880 <__submore>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	d0f2      	beq.n	8006c7e <_sungetc_r+0x2a>
 8006c98:	e7e0      	b.n	8006c5c <_sungetc_r+0x8>
 8006c9a:	6921      	ldr	r1, [r4, #16]
 8006c9c:	6822      	ldr	r2, [r4, #0]
 8006c9e:	2900      	cmp	r1, #0
 8006ca0:	d007      	beq.n	8006cb2 <_sungetc_r+0x5e>
 8006ca2:	4291      	cmp	r1, r2
 8006ca4:	d205      	bcs.n	8006cb2 <_sungetc_r+0x5e>
 8006ca6:	1e51      	subs	r1, r2, #1
 8006ca8:	7808      	ldrb	r0, [r1, #0]
 8006caa:	42a8      	cmp	r0, r5
 8006cac:	d101      	bne.n	8006cb2 <_sungetc_r+0x5e>
 8006cae:	6021      	str	r1, [r4, #0]
 8006cb0:	e7ea      	b.n	8006c88 <_sungetc_r+0x34>
 8006cb2:	6423      	str	r3, [r4, #64]	; 0x40
 8006cb4:	0023      	movs	r3, r4
 8006cb6:	3344      	adds	r3, #68	; 0x44
 8006cb8:	6363      	str	r3, [r4, #52]	; 0x34
 8006cba:	2303      	movs	r3, #3
 8006cbc:	63a3      	str	r3, [r4, #56]	; 0x38
 8006cbe:	0023      	movs	r3, r4
 8006cc0:	3346      	adds	r3, #70	; 0x46
 8006cc2:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006cc4:	701e      	strb	r6, [r3, #0]
 8006cc6:	6023      	str	r3, [r4, #0]
 8006cc8:	2301      	movs	r3, #1
 8006cca:	e7de      	b.n	8006c8a <_sungetc_r+0x36>

08006ccc <__ssrefill_r>:
 8006ccc:	b510      	push	{r4, lr}
 8006cce:	000c      	movs	r4, r1
 8006cd0:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006cd2:	2900      	cmp	r1, #0
 8006cd4:	d00e      	beq.n	8006cf4 <__ssrefill_r+0x28>
 8006cd6:	0023      	movs	r3, r4
 8006cd8:	3344      	adds	r3, #68	; 0x44
 8006cda:	4299      	cmp	r1, r3
 8006cdc:	d001      	beq.n	8006ce2 <__ssrefill_r+0x16>
 8006cde:	f000 fe2d 	bl	800793c <_free_r>
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006ce6:	6360      	str	r0, [r4, #52]	; 0x34
 8006ce8:	6063      	str	r3, [r4, #4]
 8006cea:	4283      	cmp	r3, r0
 8006cec:	d002      	beq.n	8006cf4 <__ssrefill_r+0x28>
 8006cee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	bd10      	pop	{r4, pc}
 8006cf4:	6923      	ldr	r3, [r4, #16]
 8006cf6:	2001      	movs	r0, #1
 8006cf8:	6023      	str	r3, [r4, #0]
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	89a2      	ldrh	r2, [r4, #12]
 8006cfe:	6063      	str	r3, [r4, #4]
 8006d00:	3320      	adds	r3, #32
 8006d02:	4313      	orrs	r3, r2
 8006d04:	81a3      	strh	r3, [r4, #12]
 8006d06:	4240      	negs	r0, r0
 8006d08:	e7f3      	b.n	8006cf2 <__ssrefill_r+0x26>
	...

08006d0c <__ssvfiscanf_r>:
 8006d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d0e:	4cb5      	ldr	r4, [pc, #724]	; (8006fe4 <__ssvfiscanf_r+0x2d8>)
 8006d10:	0005      	movs	r5, r0
 8006d12:	44a5      	add	sp, r4
 8006d14:	000c      	movs	r4, r1
 8006d16:	2100      	movs	r1, #0
 8006d18:	9148      	str	r1, [sp, #288]	; 0x120
 8006d1a:	9149      	str	r1, [sp, #292]	; 0x124
 8006d1c:	a905      	add	r1, sp, #20
 8006d1e:	914a      	str	r1, [sp, #296]	; 0x128
 8006d20:	21be      	movs	r1, #190	; 0xbe
 8006d22:	48b1      	ldr	r0, [pc, #708]	; (8006fe8 <__ssvfiscanf_r+0x2dc>)
 8006d24:	0049      	lsls	r1, r1, #1
 8006d26:	ae45      	add	r6, sp, #276	; 0x114
 8006d28:	5070      	str	r0, [r6, r1]
 8006d2a:	48b0      	ldr	r0, [pc, #704]	; (8006fec <__ssvfiscanf_r+0x2e0>)
 8006d2c:	3104      	adds	r1, #4
 8006d2e:	ae45      	add	r6, sp, #276	; 0x114
 8006d30:	5070      	str	r0, [r6, r1]
 8006d32:	9304      	str	r3, [sp, #16]
 8006d34:	9101      	str	r1, [sp, #4]
 8006d36:	7813      	ldrb	r3, [r2, #0]
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d100      	bne.n	8006d40 <__ssvfiscanf_r+0x34>
 8006d3e:	e14f      	b.n	8006fe0 <__ssvfiscanf_r+0x2d4>
 8006d40:	4fab      	ldr	r7, [pc, #684]	; (8006ff0 <__ssvfiscanf_r+0x2e4>)
 8006d42:	2008      	movs	r0, #8
 8006d44:	5cf9      	ldrb	r1, [r7, r3]
 8006d46:	2308      	movs	r3, #8
 8006d48:	1c56      	adds	r6, r2, #1
 8006d4a:	400b      	ands	r3, r1
 8006d4c:	4201      	tst	r1, r0
 8006d4e:	d01e      	beq.n	8006d8e <__ssvfiscanf_r+0x82>
 8006d50:	6863      	ldr	r3, [r4, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	dd11      	ble.n	8006d7a <__ssvfiscanf_r+0x6e>
 8006d56:	2108      	movs	r1, #8
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	781a      	ldrb	r2, [r3, #0]
 8006d5c:	5cba      	ldrb	r2, [r7, r2]
 8006d5e:	420a      	tst	r2, r1
 8006d60:	d101      	bne.n	8006d66 <__ssvfiscanf_r+0x5a>
 8006d62:	0032      	movs	r2, r6
 8006d64:	e7e7      	b.n	8006d36 <__ssvfiscanf_r+0x2a>
 8006d66:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8006d68:	3301      	adds	r3, #1
 8006d6a:	9200      	str	r2, [sp, #0]
 8006d6c:	3201      	adds	r2, #1
 8006d6e:	9249      	str	r2, [sp, #292]	; 0x124
 8006d70:	6862      	ldr	r2, [r4, #4]
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	3a01      	subs	r2, #1
 8006d76:	6062      	str	r2, [r4, #4]
 8006d78:	e7ea      	b.n	8006d50 <__ssvfiscanf_r+0x44>
 8006d7a:	9a01      	ldr	r2, [sp, #4]
 8006d7c:	ab45      	add	r3, sp, #276	; 0x114
 8006d7e:	589b      	ldr	r3, [r3, r2]
 8006d80:	0021      	movs	r1, r4
 8006d82:	0028      	movs	r0, r5
 8006d84:	9300      	str	r3, [sp, #0]
 8006d86:	4798      	blx	r3
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d0e4      	beq.n	8006d56 <__ssvfiscanf_r+0x4a>
 8006d8c:	e7e9      	b.n	8006d62 <__ssvfiscanf_r+0x56>
 8006d8e:	9900      	ldr	r1, [sp, #0]
 8006d90:	2925      	cmp	r1, #37	; 0x25
 8006d92:	d164      	bne.n	8006e5e <__ssvfiscanf_r+0x152>
 8006d94:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d96:	9345      	str	r3, [sp, #276]	; 0x114
 8006d98:	7853      	ldrb	r3, [r2, #1]
 8006d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8006d9c:	d102      	bne.n	8006da4 <__ssvfiscanf_r+0x98>
 8006d9e:	3b1a      	subs	r3, #26
 8006da0:	9345      	str	r3, [sp, #276]	; 0x114
 8006da2:	1c96      	adds	r6, r2, #2
 8006da4:	0037      	movs	r7, r6
 8006da6:	200a      	movs	r0, #10
 8006da8:	7839      	ldrb	r1, [r7, #0]
 8006daa:	1c7b      	adds	r3, r7, #1
 8006dac:	9302      	str	r3, [sp, #8]
 8006dae:	000b      	movs	r3, r1
 8006db0:	3b30      	subs	r3, #48	; 0x30
 8006db2:	2b09      	cmp	r3, #9
 8006db4:	d91f      	bls.n	8006df6 <__ssvfiscanf_r+0xea>
 8006db6:	4e8f      	ldr	r6, [pc, #572]	; (8006ff4 <__ssvfiscanf_r+0x2e8>)
 8006db8:	2203      	movs	r2, #3
 8006dba:	0030      	movs	r0, r6
 8006dbc:	f000 fda0 	bl	8007900 <memchr>
 8006dc0:	2800      	cmp	r0, #0
 8006dc2:	d007      	beq.n	8006dd4 <__ssvfiscanf_r+0xc8>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	1b80      	subs	r0, r0, r6
 8006dc8:	4083      	lsls	r3, r0
 8006dca:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006dcc:	9f02      	ldr	r7, [sp, #8]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	9203      	str	r2, [sp, #12]
 8006dd2:	9345      	str	r3, [sp, #276]	; 0x114
 8006dd4:	783b      	ldrb	r3, [r7, #0]
 8006dd6:	1c7e      	adds	r6, r7, #1
 8006dd8:	2b78      	cmp	r3, #120	; 0x78
 8006dda:	d807      	bhi.n	8006dec <__ssvfiscanf_r+0xe0>
 8006ddc:	2b57      	cmp	r3, #87	; 0x57
 8006dde:	d812      	bhi.n	8006e06 <__ssvfiscanf_r+0xfa>
 8006de0:	2b25      	cmp	r3, #37	; 0x25
 8006de2:	d03c      	beq.n	8006e5e <__ssvfiscanf_r+0x152>
 8006de4:	d836      	bhi.n	8006e54 <__ssvfiscanf_r+0x148>
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d100      	bne.n	8006dec <__ssvfiscanf_r+0xe0>
 8006dea:	e0f6      	b.n	8006fda <__ssvfiscanf_r+0x2ce>
 8006dec:	2303      	movs	r3, #3
 8006dee:	934b      	str	r3, [sp, #300]	; 0x12c
 8006df0:	3307      	adds	r3, #7
 8006df2:	9346      	str	r3, [sp, #280]	; 0x118
 8006df4:	e076      	b.n	8006ee4 <__ssvfiscanf_r+0x1d8>
 8006df6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006df8:	9f02      	ldr	r7, [sp, #8]
 8006dfa:	9303      	str	r3, [sp, #12]
 8006dfc:	4343      	muls	r3, r0
 8006dfe:	3b30      	subs	r3, #48	; 0x30
 8006e00:	185b      	adds	r3, r3, r1
 8006e02:	9347      	str	r3, [sp, #284]	; 0x11c
 8006e04:	e7d0      	b.n	8006da8 <__ssvfiscanf_r+0x9c>
 8006e06:	0018      	movs	r0, r3
 8006e08:	3858      	subs	r0, #88	; 0x58
 8006e0a:	2820      	cmp	r0, #32
 8006e0c:	d8ee      	bhi.n	8006dec <__ssvfiscanf_r+0xe0>
 8006e0e:	f7f9 f983 	bl	8000118 <__gnu_thumb1_case_shi>
 8006e12:	0051      	.short	0x0051
 8006e14:	ffedffed 	.word	0xffedffed
 8006e18:	ffed0086 	.word	0xffed0086
 8006e1c:	ffedffed 	.word	0xffedffed
 8006e20:	ffedffed 	.word	0xffedffed
 8006e24:	ffedffed 	.word	0xffedffed
 8006e28:	00600093 	.word	0x00600093
 8006e2c:	00240024 	.word	0x00240024
 8006e30:	ffed0024 	.word	0xffed0024
 8006e34:	ffed0062 	.word	0xffed0062
 8006e38:	ffedffed 	.word	0xffedffed
 8006e3c:	009dffed 	.word	0x009dffed
 8006e40:	004b0065 	.word	0x004b0065
 8006e44:	ffedffed 	.word	0xffedffed
 8006e48:	ffed009b 	.word	0xffed009b
 8006e4c:	ffed0060 	.word	0xffed0060
 8006e50:	0051ffed 	.word	0x0051ffed
 8006e54:	3b45      	subs	r3, #69	; 0x45
 8006e56:	2b02      	cmp	r3, #2
 8006e58:	d8c8      	bhi.n	8006dec <__ssvfiscanf_r+0xe0>
 8006e5a:	2305      	movs	r3, #5
 8006e5c:	e041      	b.n	8006ee2 <__ssvfiscanf_r+0x1d6>
 8006e5e:	6863      	ldr	r3, [r4, #4]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dd0f      	ble.n	8006e84 <__ssvfiscanf_r+0x178>
 8006e64:	6823      	ldr	r3, [r4, #0]
 8006e66:	9900      	ldr	r1, [sp, #0]
 8006e68:	781a      	ldrb	r2, [r3, #0]
 8006e6a:	428a      	cmp	r2, r1
 8006e6c:	d000      	beq.n	8006e70 <__ssvfiscanf_r+0x164>
 8006e6e:	e0b7      	b.n	8006fe0 <__ssvfiscanf_r+0x2d4>
 8006e70:	3301      	adds	r3, #1
 8006e72:	6862      	ldr	r2, [r4, #4]
 8006e74:	6023      	str	r3, [r4, #0]
 8006e76:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8006e78:	3a01      	subs	r2, #1
 8006e7a:	9300      	str	r3, [sp, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	6062      	str	r2, [r4, #4]
 8006e80:	9349      	str	r3, [sp, #292]	; 0x124
 8006e82:	e76e      	b.n	8006d62 <__ssvfiscanf_r+0x56>
 8006e84:	9a01      	ldr	r2, [sp, #4]
 8006e86:	ab45      	add	r3, sp, #276	; 0x114
 8006e88:	589b      	ldr	r3, [r3, r2]
 8006e8a:	0021      	movs	r1, r4
 8006e8c:	0028      	movs	r0, r5
 8006e8e:	9302      	str	r3, [sp, #8]
 8006e90:	4798      	blx	r3
 8006e92:	2800      	cmp	r0, #0
 8006e94:	d0e6      	beq.n	8006e64 <__ssvfiscanf_r+0x158>
 8006e96:	9848      	ldr	r0, [sp, #288]	; 0x120
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d000      	beq.n	8006e9e <__ssvfiscanf_r+0x192>
 8006e9c:	e099      	b.n	8006fd2 <__ssvfiscanf_r+0x2c6>
 8006e9e:	3801      	subs	r0, #1
 8006ea0:	23a7      	movs	r3, #167	; 0xa7
 8006ea2:	009b      	lsls	r3, r3, #2
 8006ea4:	449d      	add	sp, r3
 8006ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ea8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006eaa:	9200      	str	r2, [sp, #0]
 8006eac:	2220      	movs	r2, #32
 8006eae:	9900      	ldr	r1, [sp, #0]
 8006eb0:	430a      	orrs	r2, r1
 8006eb2:	9245      	str	r2, [sp, #276]	; 0x114
 8006eb4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006eb6:	9200      	str	r2, [sp, #0]
 8006eb8:	2280      	movs	r2, #128	; 0x80
 8006eba:	9900      	ldr	r1, [sp, #0]
 8006ebc:	0092      	lsls	r2, r2, #2
 8006ebe:	430a      	orrs	r2, r1
 8006ec0:	9245      	str	r2, [sp, #276]	; 0x114
 8006ec2:	2210      	movs	r2, #16
 8006ec4:	9246      	str	r2, [sp, #280]	; 0x118
 8006ec6:	226e      	movs	r2, #110	; 0x6e
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	419b      	sbcs	r3, r3
 8006ecc:	425b      	negs	r3, r3
 8006ece:	3303      	adds	r3, #3
 8006ed0:	e007      	b.n	8006ee2 <__ssvfiscanf_r+0x1d6>
 8006ed2:	220a      	movs	r2, #10
 8006ed4:	e7f6      	b.n	8006ec4 <__ssvfiscanf_r+0x1b8>
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9346      	str	r3, [sp, #280]	; 0x118
 8006eda:	e7f8      	b.n	8006ece <__ssvfiscanf_r+0x1c2>
 8006edc:	2308      	movs	r3, #8
 8006ede:	9346      	str	r3, [sp, #280]	; 0x118
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	934b      	str	r3, [sp, #300]	; 0x12c
 8006ee4:	6863      	ldr	r3, [r4, #4]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	dd3f      	ble.n	8006f6a <__ssvfiscanf_r+0x25e>
 8006eea:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	065b      	lsls	r3, r3, #25
 8006ef0:	d406      	bmi.n	8006f00 <__ssvfiscanf_r+0x1f4>
 8006ef2:	6823      	ldr	r3, [r4, #0]
 8006ef4:	493e      	ldr	r1, [pc, #248]	; (8006ff0 <__ssvfiscanf_r+0x2e4>)
 8006ef6:	781a      	ldrb	r2, [r3, #0]
 8006ef8:	5c8a      	ldrb	r2, [r1, r2]
 8006efa:	2108      	movs	r1, #8
 8006efc:	420a      	tst	r2, r1
 8006efe:	d13e      	bne.n	8006f7e <__ssvfiscanf_r+0x272>
 8006f00:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8006f02:	2b02      	cmp	r3, #2
 8006f04:	dc51      	bgt.n	8006faa <__ssvfiscanf_r+0x29e>
 8006f06:	0022      	movs	r2, r4
 8006f08:	0028      	movs	r0, r5
 8006f0a:	ab04      	add	r3, sp, #16
 8006f0c:	a945      	add	r1, sp, #276	; 0x114
 8006f0e:	f000 f9f7 	bl	8007300 <_scanf_chars>
 8006f12:	2801      	cmp	r0, #1
 8006f14:	d064      	beq.n	8006fe0 <__ssvfiscanf_r+0x2d4>
 8006f16:	2802      	cmp	r0, #2
 8006f18:	d000      	beq.n	8006f1c <__ssvfiscanf_r+0x210>
 8006f1a:	e722      	b.n	8006d62 <__ssvfiscanf_r+0x56>
 8006f1c:	e7bb      	b.n	8006e96 <__ssvfiscanf_r+0x18a>
 8006f1e:	0031      	movs	r1, r6
 8006f20:	a805      	add	r0, sp, #20
 8006f22:	f000 fb4f 	bl	80075c4 <__sccl>
 8006f26:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006f28:	0006      	movs	r6, r0
 8006f2a:	9300      	str	r3, [sp, #0]
 8006f2c:	2340      	movs	r3, #64	; 0x40
 8006f2e:	9a00      	ldr	r2, [sp, #0]
 8006f30:	4313      	orrs	r3, r2
 8006f32:	9345      	str	r3, [sp, #276]	; 0x114
 8006f34:	2301      	movs	r3, #1
 8006f36:	e7d4      	b.n	8006ee2 <__ssvfiscanf_r+0x1d6>
 8006f38:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006f3a:	9300      	str	r3, [sp, #0]
 8006f3c:	2340      	movs	r3, #64	; 0x40
 8006f3e:	9a00      	ldr	r2, [sp, #0]
 8006f40:	4313      	orrs	r3, r2
 8006f42:	9345      	str	r3, [sp, #276]	; 0x114
 8006f44:	2300      	movs	r3, #0
 8006f46:	e7cc      	b.n	8006ee2 <__ssvfiscanf_r+0x1d6>
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e7ca      	b.n	8006ee2 <__ssvfiscanf_r+0x1d6>
 8006f4c:	9845      	ldr	r0, [sp, #276]	; 0x114
 8006f4e:	06c3      	lsls	r3, r0, #27
 8006f50:	d500      	bpl.n	8006f54 <__ssvfiscanf_r+0x248>
 8006f52:	e706      	b.n	8006d62 <__ssvfiscanf_r+0x56>
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8006f58:	1d19      	adds	r1, r3, #4
 8006f5a:	9104      	str	r1, [sp, #16]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	07c7      	lsls	r7, r0, #31
 8006f60:	d501      	bpl.n	8006f66 <__ssvfiscanf_r+0x25a>
 8006f62:	801a      	strh	r2, [r3, #0]
 8006f64:	e6fd      	b.n	8006d62 <__ssvfiscanf_r+0x56>
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	e6fb      	b.n	8006d62 <__ssvfiscanf_r+0x56>
 8006f6a:	9a01      	ldr	r2, [sp, #4]
 8006f6c:	ab45      	add	r3, sp, #276	; 0x114
 8006f6e:	589b      	ldr	r3, [r3, r2]
 8006f70:	0021      	movs	r1, r4
 8006f72:	0028      	movs	r0, r5
 8006f74:	9300      	str	r3, [sp, #0]
 8006f76:	4798      	blx	r3
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d0b6      	beq.n	8006eea <__ssvfiscanf_r+0x1de>
 8006f7c:	e78b      	b.n	8006e96 <__ssvfiscanf_r+0x18a>
 8006f7e:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8006f80:	9200      	str	r2, [sp, #0]
 8006f82:	3201      	adds	r2, #1
 8006f84:	9249      	str	r2, [sp, #292]	; 0x124
 8006f86:	6862      	ldr	r2, [r4, #4]
 8006f88:	3a01      	subs	r2, #1
 8006f8a:	6062      	str	r2, [r4, #4]
 8006f8c:	2a00      	cmp	r2, #0
 8006f8e:	dd02      	ble.n	8006f96 <__ssvfiscanf_r+0x28a>
 8006f90:	3301      	adds	r3, #1
 8006f92:	6023      	str	r3, [r4, #0]
 8006f94:	e7ad      	b.n	8006ef2 <__ssvfiscanf_r+0x1e6>
 8006f96:	9a01      	ldr	r2, [sp, #4]
 8006f98:	ab45      	add	r3, sp, #276	; 0x114
 8006f9a:	589b      	ldr	r3, [r3, r2]
 8006f9c:	0021      	movs	r1, r4
 8006f9e:	0028      	movs	r0, r5
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	4798      	blx	r3
 8006fa4:	2800      	cmp	r0, #0
 8006fa6:	d0a4      	beq.n	8006ef2 <__ssvfiscanf_r+0x1e6>
 8006fa8:	e775      	b.n	8006e96 <__ssvfiscanf_r+0x18a>
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	dc06      	bgt.n	8006fbc <__ssvfiscanf_r+0x2b0>
 8006fae:	0022      	movs	r2, r4
 8006fb0:	0028      	movs	r0, r5
 8006fb2:	ab04      	add	r3, sp, #16
 8006fb4:	a945      	add	r1, sp, #276	; 0x114
 8006fb6:	f000 fa01 	bl	80073bc <_scanf_i>
 8006fba:	e7aa      	b.n	8006f12 <__ssvfiscanf_r+0x206>
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	; (8006ff8 <__ssvfiscanf_r+0x2ec>)
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d100      	bne.n	8006fc4 <__ssvfiscanf_r+0x2b8>
 8006fc2:	e6ce      	b.n	8006d62 <__ssvfiscanf_r+0x56>
 8006fc4:	0022      	movs	r2, r4
 8006fc6:	0028      	movs	r0, r5
 8006fc8:	ab04      	add	r3, sp, #16
 8006fca:	a945      	add	r1, sp, #276	; 0x114
 8006fcc:	e000      	b.n	8006fd0 <__ssvfiscanf_r+0x2c4>
 8006fce:	bf00      	nop
 8006fd0:	e79f      	b.n	8006f12 <__ssvfiscanf_r+0x206>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	065b      	lsls	r3, r3, #25
 8006fd6:	d400      	bmi.n	8006fda <__ssvfiscanf_r+0x2ce>
 8006fd8:	e762      	b.n	8006ea0 <__ssvfiscanf_r+0x194>
 8006fda:	2001      	movs	r0, #1
 8006fdc:	4240      	negs	r0, r0
 8006fde:	e75f      	b.n	8006ea0 <__ssvfiscanf_r+0x194>
 8006fe0:	9848      	ldr	r0, [sp, #288]	; 0x120
 8006fe2:	e75d      	b.n	8006ea0 <__ssvfiscanf_r+0x194>
 8006fe4:	fffffd64 	.word	0xfffffd64
 8006fe8:	08006c55 	.word	0x08006c55
 8006fec:	08006ccd 	.word	0x08006ccd
 8006ff0:	080091a9 	.word	0x080091a9
 8006ff4:	080092af 	.word	0x080092af
 8006ff8:	00000000 	.word	0x00000000

08006ffc <_printf_common>:
 8006ffc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ffe:	0015      	movs	r5, r2
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	688a      	ldr	r2, [r1, #8]
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	000c      	movs	r4, r1
 8007008:	9000      	str	r0, [sp, #0]
 800700a:	4293      	cmp	r3, r2
 800700c:	da00      	bge.n	8007010 <_printf_common+0x14>
 800700e:	0013      	movs	r3, r2
 8007010:	0022      	movs	r2, r4
 8007012:	602b      	str	r3, [r5, #0]
 8007014:	3243      	adds	r2, #67	; 0x43
 8007016:	7812      	ldrb	r2, [r2, #0]
 8007018:	2a00      	cmp	r2, #0
 800701a:	d001      	beq.n	8007020 <_printf_common+0x24>
 800701c:	3301      	adds	r3, #1
 800701e:	602b      	str	r3, [r5, #0]
 8007020:	6823      	ldr	r3, [r4, #0]
 8007022:	069b      	lsls	r3, r3, #26
 8007024:	d502      	bpl.n	800702c <_printf_common+0x30>
 8007026:	682b      	ldr	r3, [r5, #0]
 8007028:	3302      	adds	r3, #2
 800702a:	602b      	str	r3, [r5, #0]
 800702c:	6822      	ldr	r2, [r4, #0]
 800702e:	2306      	movs	r3, #6
 8007030:	0017      	movs	r7, r2
 8007032:	401f      	ands	r7, r3
 8007034:	421a      	tst	r2, r3
 8007036:	d027      	beq.n	8007088 <_printf_common+0x8c>
 8007038:	0023      	movs	r3, r4
 800703a:	3343      	adds	r3, #67	; 0x43
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	1e5a      	subs	r2, r3, #1
 8007040:	4193      	sbcs	r3, r2
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	0692      	lsls	r2, r2, #26
 8007046:	d430      	bmi.n	80070aa <_printf_common+0xae>
 8007048:	0022      	movs	r2, r4
 800704a:	9901      	ldr	r1, [sp, #4]
 800704c:	9800      	ldr	r0, [sp, #0]
 800704e:	9e08      	ldr	r6, [sp, #32]
 8007050:	3243      	adds	r2, #67	; 0x43
 8007052:	47b0      	blx	r6
 8007054:	1c43      	adds	r3, r0, #1
 8007056:	d025      	beq.n	80070a4 <_printf_common+0xa8>
 8007058:	2306      	movs	r3, #6
 800705a:	6820      	ldr	r0, [r4, #0]
 800705c:	682a      	ldr	r2, [r5, #0]
 800705e:	68e1      	ldr	r1, [r4, #12]
 8007060:	2500      	movs	r5, #0
 8007062:	4003      	ands	r3, r0
 8007064:	2b04      	cmp	r3, #4
 8007066:	d103      	bne.n	8007070 <_printf_common+0x74>
 8007068:	1a8d      	subs	r5, r1, r2
 800706a:	43eb      	mvns	r3, r5
 800706c:	17db      	asrs	r3, r3, #31
 800706e:	401d      	ands	r5, r3
 8007070:	68a3      	ldr	r3, [r4, #8]
 8007072:	6922      	ldr	r2, [r4, #16]
 8007074:	4293      	cmp	r3, r2
 8007076:	dd01      	ble.n	800707c <_printf_common+0x80>
 8007078:	1a9b      	subs	r3, r3, r2
 800707a:	18ed      	adds	r5, r5, r3
 800707c:	2700      	movs	r7, #0
 800707e:	42bd      	cmp	r5, r7
 8007080:	d120      	bne.n	80070c4 <_printf_common+0xc8>
 8007082:	2000      	movs	r0, #0
 8007084:	e010      	b.n	80070a8 <_printf_common+0xac>
 8007086:	3701      	adds	r7, #1
 8007088:	68e3      	ldr	r3, [r4, #12]
 800708a:	682a      	ldr	r2, [r5, #0]
 800708c:	1a9b      	subs	r3, r3, r2
 800708e:	42bb      	cmp	r3, r7
 8007090:	ddd2      	ble.n	8007038 <_printf_common+0x3c>
 8007092:	0022      	movs	r2, r4
 8007094:	2301      	movs	r3, #1
 8007096:	9901      	ldr	r1, [sp, #4]
 8007098:	9800      	ldr	r0, [sp, #0]
 800709a:	9e08      	ldr	r6, [sp, #32]
 800709c:	3219      	adds	r2, #25
 800709e:	47b0      	blx	r6
 80070a0:	1c43      	adds	r3, r0, #1
 80070a2:	d1f0      	bne.n	8007086 <_printf_common+0x8a>
 80070a4:	2001      	movs	r0, #1
 80070a6:	4240      	negs	r0, r0
 80070a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80070aa:	2030      	movs	r0, #48	; 0x30
 80070ac:	18e1      	adds	r1, r4, r3
 80070ae:	3143      	adds	r1, #67	; 0x43
 80070b0:	7008      	strb	r0, [r1, #0]
 80070b2:	0021      	movs	r1, r4
 80070b4:	1c5a      	adds	r2, r3, #1
 80070b6:	3145      	adds	r1, #69	; 0x45
 80070b8:	7809      	ldrb	r1, [r1, #0]
 80070ba:	18a2      	adds	r2, r4, r2
 80070bc:	3243      	adds	r2, #67	; 0x43
 80070be:	3302      	adds	r3, #2
 80070c0:	7011      	strb	r1, [r2, #0]
 80070c2:	e7c1      	b.n	8007048 <_printf_common+0x4c>
 80070c4:	0022      	movs	r2, r4
 80070c6:	2301      	movs	r3, #1
 80070c8:	9901      	ldr	r1, [sp, #4]
 80070ca:	9800      	ldr	r0, [sp, #0]
 80070cc:	9e08      	ldr	r6, [sp, #32]
 80070ce:	321a      	adds	r2, #26
 80070d0:	47b0      	blx	r6
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	d0e6      	beq.n	80070a4 <_printf_common+0xa8>
 80070d6:	3701      	adds	r7, #1
 80070d8:	e7d1      	b.n	800707e <_printf_common+0x82>
	...

080070dc <_printf_i>:
 80070dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80070de:	b08b      	sub	sp, #44	; 0x2c
 80070e0:	9206      	str	r2, [sp, #24]
 80070e2:	000a      	movs	r2, r1
 80070e4:	3243      	adds	r2, #67	; 0x43
 80070e6:	9307      	str	r3, [sp, #28]
 80070e8:	9005      	str	r0, [sp, #20]
 80070ea:	9204      	str	r2, [sp, #16]
 80070ec:	7e0a      	ldrb	r2, [r1, #24]
 80070ee:	000c      	movs	r4, r1
 80070f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80070f2:	2a78      	cmp	r2, #120	; 0x78
 80070f4:	d806      	bhi.n	8007104 <_printf_i+0x28>
 80070f6:	2a62      	cmp	r2, #98	; 0x62
 80070f8:	d808      	bhi.n	800710c <_printf_i+0x30>
 80070fa:	2a00      	cmp	r2, #0
 80070fc:	d100      	bne.n	8007100 <_printf_i+0x24>
 80070fe:	e0c0      	b.n	8007282 <_printf_i+0x1a6>
 8007100:	2a58      	cmp	r2, #88	; 0x58
 8007102:	d052      	beq.n	80071aa <_printf_i+0xce>
 8007104:	0026      	movs	r6, r4
 8007106:	3642      	adds	r6, #66	; 0x42
 8007108:	7032      	strb	r2, [r6, #0]
 800710a:	e022      	b.n	8007152 <_printf_i+0x76>
 800710c:	0010      	movs	r0, r2
 800710e:	3863      	subs	r0, #99	; 0x63
 8007110:	2815      	cmp	r0, #21
 8007112:	d8f7      	bhi.n	8007104 <_printf_i+0x28>
 8007114:	f7f9 f800 	bl	8000118 <__gnu_thumb1_case_shi>
 8007118:	001f0016 	.word	0x001f0016
 800711c:	fff6fff6 	.word	0xfff6fff6
 8007120:	fff6fff6 	.word	0xfff6fff6
 8007124:	fff6001f 	.word	0xfff6001f
 8007128:	fff6fff6 	.word	0xfff6fff6
 800712c:	00a8fff6 	.word	0x00a8fff6
 8007130:	009a0036 	.word	0x009a0036
 8007134:	fff6fff6 	.word	0xfff6fff6
 8007138:	fff600b9 	.word	0xfff600b9
 800713c:	fff60036 	.word	0xfff60036
 8007140:	009efff6 	.word	0x009efff6
 8007144:	0026      	movs	r6, r4
 8007146:	681a      	ldr	r2, [r3, #0]
 8007148:	3642      	adds	r6, #66	; 0x42
 800714a:	1d11      	adds	r1, r2, #4
 800714c:	6019      	str	r1, [r3, #0]
 800714e:	6813      	ldr	r3, [r2, #0]
 8007150:	7033      	strb	r3, [r6, #0]
 8007152:	2301      	movs	r3, #1
 8007154:	e0a7      	b.n	80072a6 <_printf_i+0x1ca>
 8007156:	6808      	ldr	r0, [r1, #0]
 8007158:	6819      	ldr	r1, [r3, #0]
 800715a:	1d0a      	adds	r2, r1, #4
 800715c:	0605      	lsls	r5, r0, #24
 800715e:	d50b      	bpl.n	8007178 <_printf_i+0x9c>
 8007160:	680d      	ldr	r5, [r1, #0]
 8007162:	601a      	str	r2, [r3, #0]
 8007164:	2d00      	cmp	r5, #0
 8007166:	da03      	bge.n	8007170 <_printf_i+0x94>
 8007168:	232d      	movs	r3, #45	; 0x2d
 800716a:	9a04      	ldr	r2, [sp, #16]
 800716c:	426d      	negs	r5, r5
 800716e:	7013      	strb	r3, [r2, #0]
 8007170:	4b61      	ldr	r3, [pc, #388]	; (80072f8 <_printf_i+0x21c>)
 8007172:	270a      	movs	r7, #10
 8007174:	9303      	str	r3, [sp, #12]
 8007176:	e032      	b.n	80071de <_printf_i+0x102>
 8007178:	680d      	ldr	r5, [r1, #0]
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	0641      	lsls	r1, r0, #25
 800717e:	d5f1      	bpl.n	8007164 <_printf_i+0x88>
 8007180:	b22d      	sxth	r5, r5
 8007182:	e7ef      	b.n	8007164 <_printf_i+0x88>
 8007184:	680d      	ldr	r5, [r1, #0]
 8007186:	6819      	ldr	r1, [r3, #0]
 8007188:	1d08      	adds	r0, r1, #4
 800718a:	6018      	str	r0, [r3, #0]
 800718c:	062e      	lsls	r6, r5, #24
 800718e:	d501      	bpl.n	8007194 <_printf_i+0xb8>
 8007190:	680d      	ldr	r5, [r1, #0]
 8007192:	e003      	b.n	800719c <_printf_i+0xc0>
 8007194:	066d      	lsls	r5, r5, #25
 8007196:	d5fb      	bpl.n	8007190 <_printf_i+0xb4>
 8007198:	680d      	ldr	r5, [r1, #0]
 800719a:	b2ad      	uxth	r5, r5
 800719c:	4b56      	ldr	r3, [pc, #344]	; (80072f8 <_printf_i+0x21c>)
 800719e:	270a      	movs	r7, #10
 80071a0:	9303      	str	r3, [sp, #12]
 80071a2:	2a6f      	cmp	r2, #111	; 0x6f
 80071a4:	d117      	bne.n	80071d6 <_printf_i+0xfa>
 80071a6:	2708      	movs	r7, #8
 80071a8:	e015      	b.n	80071d6 <_printf_i+0xfa>
 80071aa:	3145      	adds	r1, #69	; 0x45
 80071ac:	700a      	strb	r2, [r1, #0]
 80071ae:	4a52      	ldr	r2, [pc, #328]	; (80072f8 <_printf_i+0x21c>)
 80071b0:	9203      	str	r2, [sp, #12]
 80071b2:	681a      	ldr	r2, [r3, #0]
 80071b4:	6821      	ldr	r1, [r4, #0]
 80071b6:	ca20      	ldmia	r2!, {r5}
 80071b8:	601a      	str	r2, [r3, #0]
 80071ba:	0608      	lsls	r0, r1, #24
 80071bc:	d550      	bpl.n	8007260 <_printf_i+0x184>
 80071be:	07cb      	lsls	r3, r1, #31
 80071c0:	d502      	bpl.n	80071c8 <_printf_i+0xec>
 80071c2:	2320      	movs	r3, #32
 80071c4:	4319      	orrs	r1, r3
 80071c6:	6021      	str	r1, [r4, #0]
 80071c8:	2710      	movs	r7, #16
 80071ca:	2d00      	cmp	r5, #0
 80071cc:	d103      	bne.n	80071d6 <_printf_i+0xfa>
 80071ce:	2320      	movs	r3, #32
 80071d0:	6822      	ldr	r2, [r4, #0]
 80071d2:	439a      	bics	r2, r3
 80071d4:	6022      	str	r2, [r4, #0]
 80071d6:	0023      	movs	r3, r4
 80071d8:	2200      	movs	r2, #0
 80071da:	3343      	adds	r3, #67	; 0x43
 80071dc:	701a      	strb	r2, [r3, #0]
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	60a3      	str	r3, [r4, #8]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	db03      	blt.n	80071ee <_printf_i+0x112>
 80071e6:	2204      	movs	r2, #4
 80071e8:	6821      	ldr	r1, [r4, #0]
 80071ea:	4391      	bics	r1, r2
 80071ec:	6021      	str	r1, [r4, #0]
 80071ee:	2d00      	cmp	r5, #0
 80071f0:	d102      	bne.n	80071f8 <_printf_i+0x11c>
 80071f2:	9e04      	ldr	r6, [sp, #16]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d00c      	beq.n	8007212 <_printf_i+0x136>
 80071f8:	9e04      	ldr	r6, [sp, #16]
 80071fa:	0028      	movs	r0, r5
 80071fc:	0039      	movs	r1, r7
 80071fe:	f7f9 f81b 	bl	8000238 <__aeabi_uidivmod>
 8007202:	9b03      	ldr	r3, [sp, #12]
 8007204:	3e01      	subs	r6, #1
 8007206:	5c5b      	ldrb	r3, [r3, r1]
 8007208:	7033      	strb	r3, [r6, #0]
 800720a:	002b      	movs	r3, r5
 800720c:	0005      	movs	r5, r0
 800720e:	429f      	cmp	r7, r3
 8007210:	d9f3      	bls.n	80071fa <_printf_i+0x11e>
 8007212:	2f08      	cmp	r7, #8
 8007214:	d109      	bne.n	800722a <_printf_i+0x14e>
 8007216:	6823      	ldr	r3, [r4, #0]
 8007218:	07db      	lsls	r3, r3, #31
 800721a:	d506      	bpl.n	800722a <_printf_i+0x14e>
 800721c:	6863      	ldr	r3, [r4, #4]
 800721e:	6922      	ldr	r2, [r4, #16]
 8007220:	4293      	cmp	r3, r2
 8007222:	dc02      	bgt.n	800722a <_printf_i+0x14e>
 8007224:	2330      	movs	r3, #48	; 0x30
 8007226:	3e01      	subs	r6, #1
 8007228:	7033      	strb	r3, [r6, #0]
 800722a:	9b04      	ldr	r3, [sp, #16]
 800722c:	1b9b      	subs	r3, r3, r6
 800722e:	6123      	str	r3, [r4, #16]
 8007230:	9b07      	ldr	r3, [sp, #28]
 8007232:	0021      	movs	r1, r4
 8007234:	9300      	str	r3, [sp, #0]
 8007236:	9805      	ldr	r0, [sp, #20]
 8007238:	9b06      	ldr	r3, [sp, #24]
 800723a:	aa09      	add	r2, sp, #36	; 0x24
 800723c:	f7ff fede 	bl	8006ffc <_printf_common>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d135      	bne.n	80072b0 <_printf_i+0x1d4>
 8007244:	2001      	movs	r0, #1
 8007246:	4240      	negs	r0, r0
 8007248:	b00b      	add	sp, #44	; 0x2c
 800724a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800724c:	2220      	movs	r2, #32
 800724e:	6809      	ldr	r1, [r1, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	6022      	str	r2, [r4, #0]
 8007254:	0022      	movs	r2, r4
 8007256:	2178      	movs	r1, #120	; 0x78
 8007258:	3245      	adds	r2, #69	; 0x45
 800725a:	7011      	strb	r1, [r2, #0]
 800725c:	4a27      	ldr	r2, [pc, #156]	; (80072fc <_printf_i+0x220>)
 800725e:	e7a7      	b.n	80071b0 <_printf_i+0xd4>
 8007260:	0648      	lsls	r0, r1, #25
 8007262:	d5ac      	bpl.n	80071be <_printf_i+0xe2>
 8007264:	b2ad      	uxth	r5, r5
 8007266:	e7aa      	b.n	80071be <_printf_i+0xe2>
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	680d      	ldr	r5, [r1, #0]
 800726c:	1d10      	adds	r0, r2, #4
 800726e:	6949      	ldr	r1, [r1, #20]
 8007270:	6018      	str	r0, [r3, #0]
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	062e      	lsls	r6, r5, #24
 8007276:	d501      	bpl.n	800727c <_printf_i+0x1a0>
 8007278:	6019      	str	r1, [r3, #0]
 800727a:	e002      	b.n	8007282 <_printf_i+0x1a6>
 800727c:	066d      	lsls	r5, r5, #25
 800727e:	d5fb      	bpl.n	8007278 <_printf_i+0x19c>
 8007280:	8019      	strh	r1, [r3, #0]
 8007282:	2300      	movs	r3, #0
 8007284:	9e04      	ldr	r6, [sp, #16]
 8007286:	6123      	str	r3, [r4, #16]
 8007288:	e7d2      	b.n	8007230 <_printf_i+0x154>
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	1d11      	adds	r1, r2, #4
 800728e:	6019      	str	r1, [r3, #0]
 8007290:	6816      	ldr	r6, [r2, #0]
 8007292:	2100      	movs	r1, #0
 8007294:	0030      	movs	r0, r6
 8007296:	6862      	ldr	r2, [r4, #4]
 8007298:	f000 fb32 	bl	8007900 <memchr>
 800729c:	2800      	cmp	r0, #0
 800729e:	d001      	beq.n	80072a4 <_printf_i+0x1c8>
 80072a0:	1b80      	subs	r0, r0, r6
 80072a2:	6060      	str	r0, [r4, #4]
 80072a4:	6863      	ldr	r3, [r4, #4]
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	2300      	movs	r3, #0
 80072aa:	9a04      	ldr	r2, [sp, #16]
 80072ac:	7013      	strb	r3, [r2, #0]
 80072ae:	e7bf      	b.n	8007230 <_printf_i+0x154>
 80072b0:	6923      	ldr	r3, [r4, #16]
 80072b2:	0032      	movs	r2, r6
 80072b4:	9906      	ldr	r1, [sp, #24]
 80072b6:	9805      	ldr	r0, [sp, #20]
 80072b8:	9d07      	ldr	r5, [sp, #28]
 80072ba:	47a8      	blx	r5
 80072bc:	1c43      	adds	r3, r0, #1
 80072be:	d0c1      	beq.n	8007244 <_printf_i+0x168>
 80072c0:	6823      	ldr	r3, [r4, #0]
 80072c2:	079b      	lsls	r3, r3, #30
 80072c4:	d415      	bmi.n	80072f2 <_printf_i+0x216>
 80072c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072c8:	68e0      	ldr	r0, [r4, #12]
 80072ca:	4298      	cmp	r0, r3
 80072cc:	dabc      	bge.n	8007248 <_printf_i+0x16c>
 80072ce:	0018      	movs	r0, r3
 80072d0:	e7ba      	b.n	8007248 <_printf_i+0x16c>
 80072d2:	0022      	movs	r2, r4
 80072d4:	2301      	movs	r3, #1
 80072d6:	9906      	ldr	r1, [sp, #24]
 80072d8:	9805      	ldr	r0, [sp, #20]
 80072da:	9e07      	ldr	r6, [sp, #28]
 80072dc:	3219      	adds	r2, #25
 80072de:	47b0      	blx	r6
 80072e0:	1c43      	adds	r3, r0, #1
 80072e2:	d0af      	beq.n	8007244 <_printf_i+0x168>
 80072e4:	3501      	adds	r5, #1
 80072e6:	68e3      	ldr	r3, [r4, #12]
 80072e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072ea:	1a9b      	subs	r3, r3, r2
 80072ec:	42ab      	cmp	r3, r5
 80072ee:	dcf0      	bgt.n	80072d2 <_printf_i+0x1f6>
 80072f0:	e7e9      	b.n	80072c6 <_printf_i+0x1ea>
 80072f2:	2500      	movs	r5, #0
 80072f4:	e7f7      	b.n	80072e6 <_printf_i+0x20a>
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	080092ba 	.word	0x080092ba
 80072fc:	080092cb 	.word	0x080092cb

08007300 <_scanf_chars>:
 8007300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007302:	0015      	movs	r5, r2
 8007304:	688a      	ldr	r2, [r1, #8]
 8007306:	000c      	movs	r4, r1
 8007308:	9001      	str	r0, [sp, #4]
 800730a:	2a00      	cmp	r2, #0
 800730c:	d105      	bne.n	800731a <_scanf_chars+0x1a>
 800730e:	6989      	ldr	r1, [r1, #24]
 8007310:	3201      	adds	r2, #1
 8007312:	2900      	cmp	r1, #0
 8007314:	d000      	beq.n	8007318 <_scanf_chars+0x18>
 8007316:	3a02      	subs	r2, #2
 8007318:	60a2      	str	r2, [r4, #8]
 800731a:	6822      	ldr	r2, [r4, #0]
 800731c:	06d2      	lsls	r2, r2, #27
 800731e:	d403      	bmi.n	8007328 <_scanf_chars+0x28>
 8007320:	681a      	ldr	r2, [r3, #0]
 8007322:	1d11      	adds	r1, r2, #4
 8007324:	6019      	str	r1, [r3, #0]
 8007326:	6817      	ldr	r7, [r2, #0]
 8007328:	2600      	movs	r6, #0
 800732a:	69a0      	ldr	r0, [r4, #24]
 800732c:	2800      	cmp	r0, #0
 800732e:	d013      	beq.n	8007358 <_scanf_chars+0x58>
 8007330:	2801      	cmp	r0, #1
 8007332:	d108      	bne.n	8007346 <_scanf_chars+0x46>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	6962      	ldr	r2, [r4, #20]
 8007338:	781b      	ldrb	r3, [r3, #0]
 800733a:	5cd3      	ldrb	r3, [r2, r3]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10b      	bne.n	8007358 <_scanf_chars+0x58>
 8007340:	2e00      	cmp	r6, #0
 8007342:	d127      	bne.n	8007394 <_scanf_chars+0x94>
 8007344:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007346:	2802      	cmp	r0, #2
 8007348:	d124      	bne.n	8007394 <_scanf_chars+0x94>
 800734a:	682b      	ldr	r3, [r5, #0]
 800734c:	4a1a      	ldr	r2, [pc, #104]	; (80073b8 <_scanf_chars+0xb8>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	5cd3      	ldrb	r3, [r2, r3]
 8007352:	2208      	movs	r2, #8
 8007354:	4213      	tst	r3, r2
 8007356:	d11d      	bne.n	8007394 <_scanf_chars+0x94>
 8007358:	2210      	movs	r2, #16
 800735a:	6823      	ldr	r3, [r4, #0]
 800735c:	3601      	adds	r6, #1
 800735e:	4213      	tst	r3, r2
 8007360:	d103      	bne.n	800736a <_scanf_chars+0x6a>
 8007362:	682b      	ldr	r3, [r5, #0]
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	703b      	strb	r3, [r7, #0]
 8007368:	3701      	adds	r7, #1
 800736a:	682a      	ldr	r2, [r5, #0]
 800736c:	686b      	ldr	r3, [r5, #4]
 800736e:	3201      	adds	r2, #1
 8007370:	602a      	str	r2, [r5, #0]
 8007372:	68a2      	ldr	r2, [r4, #8]
 8007374:	3b01      	subs	r3, #1
 8007376:	3a01      	subs	r2, #1
 8007378:	606b      	str	r3, [r5, #4]
 800737a:	60a2      	str	r2, [r4, #8]
 800737c:	2a00      	cmp	r2, #0
 800737e:	d009      	beq.n	8007394 <_scanf_chars+0x94>
 8007380:	2b00      	cmp	r3, #0
 8007382:	dcd2      	bgt.n	800732a <_scanf_chars+0x2a>
 8007384:	23c0      	movs	r3, #192	; 0xc0
 8007386:	005b      	lsls	r3, r3, #1
 8007388:	0029      	movs	r1, r5
 800738a:	58e3      	ldr	r3, [r4, r3]
 800738c:	9801      	ldr	r0, [sp, #4]
 800738e:	4798      	blx	r3
 8007390:	2800      	cmp	r0, #0
 8007392:	d0ca      	beq.n	800732a <_scanf_chars+0x2a>
 8007394:	6822      	ldr	r2, [r4, #0]
 8007396:	2310      	movs	r3, #16
 8007398:	0011      	movs	r1, r2
 800739a:	4019      	ands	r1, r3
 800739c:	421a      	tst	r2, r3
 800739e:	d106      	bne.n	80073ae <_scanf_chars+0xae>
 80073a0:	68e3      	ldr	r3, [r4, #12]
 80073a2:	3301      	adds	r3, #1
 80073a4:	60e3      	str	r3, [r4, #12]
 80073a6:	69a3      	ldr	r3, [r4, #24]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d000      	beq.n	80073ae <_scanf_chars+0xae>
 80073ac:	7039      	strb	r1, [r7, #0]
 80073ae:	6923      	ldr	r3, [r4, #16]
 80073b0:	2000      	movs	r0, #0
 80073b2:	199e      	adds	r6, r3, r6
 80073b4:	6126      	str	r6, [r4, #16]
 80073b6:	e7c5      	b.n	8007344 <_scanf_chars+0x44>
 80073b8:	080091a9 	.word	0x080091a9

080073bc <_scanf_i>:
 80073bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80073be:	000c      	movs	r4, r1
 80073c0:	b08d      	sub	sp, #52	; 0x34
 80073c2:	9302      	str	r3, [sp, #8]
 80073c4:	4b79      	ldr	r3, [pc, #484]	; (80075ac <_scanf_i+0x1f0>)
 80073c6:	0016      	movs	r6, r2
 80073c8:	9005      	str	r0, [sp, #20]
 80073ca:	aa09      	add	r2, sp, #36	; 0x24
 80073cc:	cb23      	ldmia	r3!, {r0, r1, r5}
 80073ce:	c223      	stmia	r2!, {r0, r1, r5}
 80073d0:	4b77      	ldr	r3, [pc, #476]	; (80075b0 <_scanf_i+0x1f4>)
 80073d2:	9306      	str	r3, [sp, #24]
 80073d4:	69a3      	ldr	r3, [r4, #24]
 80073d6:	2b03      	cmp	r3, #3
 80073d8:	d001      	beq.n	80073de <_scanf_i+0x22>
 80073da:	4b76      	ldr	r3, [pc, #472]	; (80075b4 <_scanf_i+0x1f8>)
 80073dc:	9306      	str	r3, [sp, #24]
 80073de:	22ae      	movs	r2, #174	; 0xae
 80073e0:	2000      	movs	r0, #0
 80073e2:	68a3      	ldr	r3, [r4, #8]
 80073e4:	0052      	lsls	r2, r2, #1
 80073e6:	1e59      	subs	r1, r3, #1
 80073e8:	9004      	str	r0, [sp, #16]
 80073ea:	4291      	cmp	r1, r2
 80073ec:	d905      	bls.n	80073fa <_scanf_i+0x3e>
 80073ee:	3b5e      	subs	r3, #94	; 0x5e
 80073f0:	3bff      	subs	r3, #255	; 0xff
 80073f2:	9304      	str	r3, [sp, #16]
 80073f4:	235e      	movs	r3, #94	; 0x5e
 80073f6:	33ff      	adds	r3, #255	; 0xff
 80073f8:	60a3      	str	r3, [r4, #8]
 80073fa:	0023      	movs	r3, r4
 80073fc:	331c      	adds	r3, #28
 80073fe:	9301      	str	r3, [sp, #4]
 8007400:	23d0      	movs	r3, #208	; 0xd0
 8007402:	2700      	movs	r7, #0
 8007404:	6822      	ldr	r2, [r4, #0]
 8007406:	011b      	lsls	r3, r3, #4
 8007408:	4313      	orrs	r3, r2
 800740a:	6023      	str	r3, [r4, #0]
 800740c:	9b01      	ldr	r3, [sp, #4]
 800740e:	9303      	str	r3, [sp, #12]
 8007410:	6833      	ldr	r3, [r6, #0]
 8007412:	a809      	add	r0, sp, #36	; 0x24
 8007414:	7819      	ldrb	r1, [r3, #0]
 8007416:	00bb      	lsls	r3, r7, #2
 8007418:	2202      	movs	r2, #2
 800741a:	5818      	ldr	r0, [r3, r0]
 800741c:	f000 fa70 	bl	8007900 <memchr>
 8007420:	2800      	cmp	r0, #0
 8007422:	d02b      	beq.n	800747c <_scanf_i+0xc0>
 8007424:	2f01      	cmp	r7, #1
 8007426:	d162      	bne.n	80074ee <_scanf_i+0x132>
 8007428:	6863      	ldr	r3, [r4, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d106      	bne.n	800743c <_scanf_i+0x80>
 800742e:	3308      	adds	r3, #8
 8007430:	6822      	ldr	r2, [r4, #0]
 8007432:	6063      	str	r3, [r4, #4]
 8007434:	33f9      	adds	r3, #249	; 0xf9
 8007436:	33ff      	adds	r3, #255	; 0xff
 8007438:	4313      	orrs	r3, r2
 800743a:	6023      	str	r3, [r4, #0]
 800743c:	4b5e      	ldr	r3, [pc, #376]	; (80075b8 <_scanf_i+0x1fc>)
 800743e:	6822      	ldr	r2, [r4, #0]
 8007440:	4013      	ands	r3, r2
 8007442:	6023      	str	r3, [r4, #0]
 8007444:	68a3      	ldr	r3, [r4, #8]
 8007446:	1e5a      	subs	r2, r3, #1
 8007448:	60a2      	str	r2, [r4, #8]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d016      	beq.n	800747c <_scanf_i+0xc0>
 800744e:	6833      	ldr	r3, [r6, #0]
 8007450:	1c5a      	adds	r2, r3, #1
 8007452:	6032      	str	r2, [r6, #0]
 8007454:	781b      	ldrb	r3, [r3, #0]
 8007456:	9a03      	ldr	r2, [sp, #12]
 8007458:	7013      	strb	r3, [r2, #0]
 800745a:	6873      	ldr	r3, [r6, #4]
 800745c:	1c55      	adds	r5, r2, #1
 800745e:	3b01      	subs	r3, #1
 8007460:	6073      	str	r3, [r6, #4]
 8007462:	9503      	str	r5, [sp, #12]
 8007464:	2b00      	cmp	r3, #0
 8007466:	dc09      	bgt.n	800747c <_scanf_i+0xc0>
 8007468:	23c0      	movs	r3, #192	; 0xc0
 800746a:	005b      	lsls	r3, r3, #1
 800746c:	58e3      	ldr	r3, [r4, r3]
 800746e:	0031      	movs	r1, r6
 8007470:	9805      	ldr	r0, [sp, #20]
 8007472:	9307      	str	r3, [sp, #28]
 8007474:	4798      	blx	r3
 8007476:	2800      	cmp	r0, #0
 8007478:	d000      	beq.n	800747c <_scanf_i+0xc0>
 800747a:	e081      	b.n	8007580 <_scanf_i+0x1c4>
 800747c:	3701      	adds	r7, #1
 800747e:	2f03      	cmp	r7, #3
 8007480:	d1c6      	bne.n	8007410 <_scanf_i+0x54>
 8007482:	6863      	ldr	r3, [r4, #4]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d101      	bne.n	800748c <_scanf_i+0xd0>
 8007488:	330a      	adds	r3, #10
 800748a:	6063      	str	r3, [r4, #4]
 800748c:	2110      	movs	r1, #16
 800748e:	2700      	movs	r7, #0
 8007490:	6863      	ldr	r3, [r4, #4]
 8007492:	6960      	ldr	r0, [r4, #20]
 8007494:	1ac9      	subs	r1, r1, r3
 8007496:	4b49      	ldr	r3, [pc, #292]	; (80075bc <_scanf_i+0x200>)
 8007498:	18c9      	adds	r1, r1, r3
 800749a:	f000 f893 	bl	80075c4 <__sccl>
 800749e:	9d03      	ldr	r5, [sp, #12]
 80074a0:	68a3      	ldr	r3, [r4, #8]
 80074a2:	6822      	ldr	r2, [r4, #0]
 80074a4:	9303      	str	r3, [sp, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d041      	beq.n	800752e <_scanf_i+0x172>
 80074aa:	6831      	ldr	r1, [r6, #0]
 80074ac:	6963      	ldr	r3, [r4, #20]
 80074ae:	7808      	ldrb	r0, [r1, #0]
 80074b0:	5c1b      	ldrb	r3, [r3, r0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d03b      	beq.n	800752e <_scanf_i+0x172>
 80074b6:	2830      	cmp	r0, #48	; 0x30
 80074b8:	d129      	bne.n	800750e <_scanf_i+0x152>
 80074ba:	2380      	movs	r3, #128	; 0x80
 80074bc:	011b      	lsls	r3, r3, #4
 80074be:	421a      	tst	r2, r3
 80074c0:	d025      	beq.n	800750e <_scanf_i+0x152>
 80074c2:	9b04      	ldr	r3, [sp, #16]
 80074c4:	3701      	adds	r7, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d005      	beq.n	80074d6 <_scanf_i+0x11a>
 80074ca:	001a      	movs	r2, r3
 80074cc:	9b03      	ldr	r3, [sp, #12]
 80074ce:	3a01      	subs	r2, #1
 80074d0:	3301      	adds	r3, #1
 80074d2:	9204      	str	r2, [sp, #16]
 80074d4:	60a3      	str	r3, [r4, #8]
 80074d6:	6873      	ldr	r3, [r6, #4]
 80074d8:	3b01      	subs	r3, #1
 80074da:	6073      	str	r3, [r6, #4]
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dd1d      	ble.n	800751c <_scanf_i+0x160>
 80074e0:	6833      	ldr	r3, [r6, #0]
 80074e2:	3301      	adds	r3, #1
 80074e4:	6033      	str	r3, [r6, #0]
 80074e6:	68a3      	ldr	r3, [r4, #8]
 80074e8:	3b01      	subs	r3, #1
 80074ea:	60a3      	str	r3, [r4, #8]
 80074ec:	e7d8      	b.n	80074a0 <_scanf_i+0xe4>
 80074ee:	2f02      	cmp	r7, #2
 80074f0:	d1a8      	bne.n	8007444 <_scanf_i+0x88>
 80074f2:	21c0      	movs	r1, #192	; 0xc0
 80074f4:	2380      	movs	r3, #128	; 0x80
 80074f6:	6822      	ldr	r2, [r4, #0]
 80074f8:	00c9      	lsls	r1, r1, #3
 80074fa:	4011      	ands	r1, r2
 80074fc:	009b      	lsls	r3, r3, #2
 80074fe:	4299      	cmp	r1, r3
 8007500:	d1bf      	bne.n	8007482 <_scanf_i+0xc6>
 8007502:	3bf1      	subs	r3, #241	; 0xf1
 8007504:	3bff      	subs	r3, #255	; 0xff
 8007506:	6063      	str	r3, [r4, #4]
 8007508:	33f0      	adds	r3, #240	; 0xf0
 800750a:	4313      	orrs	r3, r2
 800750c:	e799      	b.n	8007442 <_scanf_i+0x86>
 800750e:	4b2c      	ldr	r3, [pc, #176]	; (80075c0 <_scanf_i+0x204>)
 8007510:	4013      	ands	r3, r2
 8007512:	6023      	str	r3, [r4, #0]
 8007514:	780b      	ldrb	r3, [r1, #0]
 8007516:	702b      	strb	r3, [r5, #0]
 8007518:	3501      	adds	r5, #1
 800751a:	e7dc      	b.n	80074d6 <_scanf_i+0x11a>
 800751c:	23c0      	movs	r3, #192	; 0xc0
 800751e:	005b      	lsls	r3, r3, #1
 8007520:	58e3      	ldr	r3, [r4, r3]
 8007522:	0031      	movs	r1, r6
 8007524:	9805      	ldr	r0, [sp, #20]
 8007526:	9303      	str	r3, [sp, #12]
 8007528:	4798      	blx	r3
 800752a:	2800      	cmp	r0, #0
 800752c:	d0db      	beq.n	80074e6 <_scanf_i+0x12a>
 800752e:	6823      	ldr	r3, [r4, #0]
 8007530:	05db      	lsls	r3, r3, #23
 8007532:	d50e      	bpl.n	8007552 <_scanf_i+0x196>
 8007534:	9b01      	ldr	r3, [sp, #4]
 8007536:	429d      	cmp	r5, r3
 8007538:	d907      	bls.n	800754a <_scanf_i+0x18e>
 800753a:	23be      	movs	r3, #190	; 0xbe
 800753c:	3d01      	subs	r5, #1
 800753e:	005b      	lsls	r3, r3, #1
 8007540:	0032      	movs	r2, r6
 8007542:	7829      	ldrb	r1, [r5, #0]
 8007544:	58e3      	ldr	r3, [r4, r3]
 8007546:	9805      	ldr	r0, [sp, #20]
 8007548:	4798      	blx	r3
 800754a:	9b01      	ldr	r3, [sp, #4]
 800754c:	2001      	movs	r0, #1
 800754e:	429d      	cmp	r5, r3
 8007550:	d029      	beq.n	80075a6 <_scanf_i+0x1ea>
 8007552:	6821      	ldr	r1, [r4, #0]
 8007554:	2310      	movs	r3, #16
 8007556:	000a      	movs	r2, r1
 8007558:	401a      	ands	r2, r3
 800755a:	4219      	tst	r1, r3
 800755c:	d11c      	bne.n	8007598 <_scanf_i+0x1dc>
 800755e:	702a      	strb	r2, [r5, #0]
 8007560:	6863      	ldr	r3, [r4, #4]
 8007562:	9901      	ldr	r1, [sp, #4]
 8007564:	9805      	ldr	r0, [sp, #20]
 8007566:	9e06      	ldr	r6, [sp, #24]
 8007568:	47b0      	blx	r6
 800756a:	9b02      	ldr	r3, [sp, #8]
 800756c:	6821      	ldr	r1, [r4, #0]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	068a      	lsls	r2, r1, #26
 8007572:	d507      	bpl.n	8007584 <_scanf_i+0x1c8>
 8007574:	1d1a      	adds	r2, r3, #4
 8007576:	9902      	ldr	r1, [sp, #8]
 8007578:	600a      	str	r2, [r1, #0]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6018      	str	r0, [r3, #0]
 800757e:	e008      	b.n	8007592 <_scanf_i+0x1d6>
 8007580:	2700      	movs	r7, #0
 8007582:	e7d4      	b.n	800752e <_scanf_i+0x172>
 8007584:	1d1a      	adds	r2, r3, #4
 8007586:	07ce      	lsls	r6, r1, #31
 8007588:	d5f5      	bpl.n	8007576 <_scanf_i+0x1ba>
 800758a:	9902      	ldr	r1, [sp, #8]
 800758c:	600a      	str	r2, [r1, #0]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	8018      	strh	r0, [r3, #0]
 8007592:	68e3      	ldr	r3, [r4, #12]
 8007594:	3301      	adds	r3, #1
 8007596:	60e3      	str	r3, [r4, #12]
 8007598:	2000      	movs	r0, #0
 800759a:	9b01      	ldr	r3, [sp, #4]
 800759c:	1aed      	subs	r5, r5, r3
 800759e:	6923      	ldr	r3, [r4, #16]
 80075a0:	19ef      	adds	r7, r5, r7
 80075a2:	19df      	adds	r7, r3, r7
 80075a4:	6127      	str	r7, [r4, #16]
 80075a6:	b00d      	add	sp, #52	; 0x34
 80075a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075aa:	46c0      	nop			; (mov r8, r8)
 80075ac:	08008354 	.word	0x08008354
 80075b0:	08007759 	.word	0x08007759
 80075b4:	08007879 	.word	0x08007879
 80075b8:	fffffaff 	.word	0xfffffaff
 80075bc:	080092e5 	.word	0x080092e5
 80075c0:	fffff6ff 	.word	0xfffff6ff

080075c4 <__sccl>:
 80075c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80075c6:	780b      	ldrb	r3, [r1, #0]
 80075c8:	0004      	movs	r4, r0
 80075ca:	2b5e      	cmp	r3, #94	; 0x5e
 80075cc:	d00c      	beq.n	80075e8 <__sccl+0x24>
 80075ce:	1c48      	adds	r0, r1, #1
 80075d0:	2100      	movs	r1, #0
 80075d2:	0022      	movs	r2, r4
 80075d4:	1c65      	adds	r5, r4, #1
 80075d6:	35ff      	adds	r5, #255	; 0xff
 80075d8:	7011      	strb	r1, [r2, #0]
 80075da:	3201      	adds	r2, #1
 80075dc:	42aa      	cmp	r2, r5
 80075de:	d1fb      	bne.n	80075d8 <__sccl+0x14>
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d105      	bne.n	80075f0 <__sccl+0x2c>
 80075e4:	3801      	subs	r0, #1
 80075e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80075e8:	784b      	ldrb	r3, [r1, #1]
 80075ea:	1c88      	adds	r0, r1, #2
 80075ec:	2101      	movs	r1, #1
 80075ee:	e7f0      	b.n	80075d2 <__sccl+0xe>
 80075f0:	2201      	movs	r2, #1
 80075f2:	262d      	movs	r6, #45	; 0x2d
 80075f4:	4051      	eors	r1, r2
 80075f6:	0002      	movs	r2, r0
 80075f8:	54e1      	strb	r1, [r4, r3]
 80075fa:	7815      	ldrb	r5, [r2, #0]
 80075fc:	1c50      	adds	r0, r2, #1
 80075fe:	2d2d      	cmp	r5, #45	; 0x2d
 8007600:	d009      	beq.n	8007616 <__sccl+0x52>
 8007602:	2d5d      	cmp	r5, #93	; 0x5d
 8007604:	d0ef      	beq.n	80075e6 <__sccl+0x22>
 8007606:	2d00      	cmp	r5, #0
 8007608:	d101      	bne.n	800760e <__sccl+0x4a>
 800760a:	0010      	movs	r0, r2
 800760c:	e7eb      	b.n	80075e6 <__sccl+0x22>
 800760e:	002b      	movs	r3, r5
 8007610:	e7f1      	b.n	80075f6 <__sccl+0x32>
 8007612:	0033      	movs	r3, r6
 8007614:	e7ef      	b.n	80075f6 <__sccl+0x32>
 8007616:	7855      	ldrb	r5, [r2, #1]
 8007618:	2d5d      	cmp	r5, #93	; 0x5d
 800761a:	d0fa      	beq.n	8007612 <__sccl+0x4e>
 800761c:	42ab      	cmp	r3, r5
 800761e:	dcf8      	bgt.n	8007612 <__sccl+0x4e>
 8007620:	0018      	movs	r0, r3
 8007622:	3202      	adds	r2, #2
 8007624:	3001      	adds	r0, #1
 8007626:	5421      	strb	r1, [r4, r0]
 8007628:	4285      	cmp	r5, r0
 800762a:	dcfb      	bgt.n	8007624 <__sccl+0x60>
 800762c:	2000      	movs	r0, #0
 800762e:	1c5f      	adds	r7, r3, #1
 8007630:	42ab      	cmp	r3, r5
 8007632:	da01      	bge.n	8007638 <__sccl+0x74>
 8007634:	1ae8      	subs	r0, r5, r3
 8007636:	3801      	subs	r0, #1
 8007638:	183b      	adds	r3, r7, r0
 800763a:	e7de      	b.n	80075fa <__sccl+0x36>

0800763c <_strtol_l.isra.0>:
 800763c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800763e:	b087      	sub	sp, #28
 8007640:	001e      	movs	r6, r3
 8007642:	9005      	str	r0, [sp, #20]
 8007644:	9101      	str	r1, [sp, #4]
 8007646:	9202      	str	r2, [sp, #8]
 8007648:	2b01      	cmp	r3, #1
 800764a:	d045      	beq.n	80076d8 <_strtol_l.isra.0+0x9c>
 800764c:	0008      	movs	r0, r1
 800764e:	2b24      	cmp	r3, #36	; 0x24
 8007650:	d842      	bhi.n	80076d8 <_strtol_l.isra.0+0x9c>
 8007652:	4b3f      	ldr	r3, [pc, #252]	; (8007750 <_strtol_l.isra.0+0x114>)
 8007654:	2208      	movs	r2, #8
 8007656:	469c      	mov	ip, r3
 8007658:	0003      	movs	r3, r0
 800765a:	4661      	mov	r1, ip
 800765c:	781c      	ldrb	r4, [r3, #0]
 800765e:	1c45      	adds	r5, r0, #1
 8007660:	5d09      	ldrb	r1, [r1, r4]
 8007662:	0028      	movs	r0, r5
 8007664:	000f      	movs	r7, r1
 8007666:	4017      	ands	r7, r2
 8007668:	4211      	tst	r1, r2
 800766a:	d1f5      	bne.n	8007658 <_strtol_l.isra.0+0x1c>
 800766c:	2c2d      	cmp	r4, #45	; 0x2d
 800766e:	d13a      	bne.n	80076e6 <_strtol_l.isra.0+0xaa>
 8007670:	2701      	movs	r7, #1
 8007672:	782c      	ldrb	r4, [r5, #0]
 8007674:	1c9d      	adds	r5, r3, #2
 8007676:	2e00      	cmp	r6, #0
 8007678:	d065      	beq.n	8007746 <_strtol_l.isra.0+0x10a>
 800767a:	2e10      	cmp	r6, #16
 800767c:	d109      	bne.n	8007692 <_strtol_l.isra.0+0x56>
 800767e:	2c30      	cmp	r4, #48	; 0x30
 8007680:	d107      	bne.n	8007692 <_strtol_l.isra.0+0x56>
 8007682:	2220      	movs	r2, #32
 8007684:	782b      	ldrb	r3, [r5, #0]
 8007686:	4393      	bics	r3, r2
 8007688:	2b58      	cmp	r3, #88	; 0x58
 800768a:	d157      	bne.n	800773c <_strtol_l.isra.0+0x100>
 800768c:	2610      	movs	r6, #16
 800768e:	786c      	ldrb	r4, [r5, #1]
 8007690:	3502      	adds	r5, #2
 8007692:	4b30      	ldr	r3, [pc, #192]	; (8007754 <_strtol_l.isra.0+0x118>)
 8007694:	0031      	movs	r1, r6
 8007696:	18fb      	adds	r3, r7, r3
 8007698:	0018      	movs	r0, r3
 800769a:	9303      	str	r3, [sp, #12]
 800769c:	f7f8 fdcc 	bl	8000238 <__aeabi_uidivmod>
 80076a0:	2300      	movs	r3, #0
 80076a2:	2201      	movs	r2, #1
 80076a4:	4684      	mov	ip, r0
 80076a6:	0018      	movs	r0, r3
 80076a8:	9104      	str	r1, [sp, #16]
 80076aa:	4252      	negs	r2, r2
 80076ac:	0021      	movs	r1, r4
 80076ae:	3930      	subs	r1, #48	; 0x30
 80076b0:	2909      	cmp	r1, #9
 80076b2:	d81d      	bhi.n	80076f0 <_strtol_l.isra.0+0xb4>
 80076b4:	000c      	movs	r4, r1
 80076b6:	42a6      	cmp	r6, r4
 80076b8:	dd28      	ble.n	800770c <_strtol_l.isra.0+0xd0>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	db24      	blt.n	8007708 <_strtol_l.isra.0+0xcc>
 80076be:	0013      	movs	r3, r2
 80076c0:	4584      	cmp	ip, r0
 80076c2:	d306      	bcc.n	80076d2 <_strtol_l.isra.0+0x96>
 80076c4:	d102      	bne.n	80076cc <_strtol_l.isra.0+0x90>
 80076c6:	9904      	ldr	r1, [sp, #16]
 80076c8:	42a1      	cmp	r1, r4
 80076ca:	db02      	blt.n	80076d2 <_strtol_l.isra.0+0x96>
 80076cc:	2301      	movs	r3, #1
 80076ce:	4370      	muls	r0, r6
 80076d0:	1820      	adds	r0, r4, r0
 80076d2:	782c      	ldrb	r4, [r5, #0]
 80076d4:	3501      	adds	r5, #1
 80076d6:	e7e9      	b.n	80076ac <_strtol_l.isra.0+0x70>
 80076d8:	f7ff f8d4 	bl	8006884 <__errno>
 80076dc:	2316      	movs	r3, #22
 80076de:	6003      	str	r3, [r0, #0]
 80076e0:	2000      	movs	r0, #0
 80076e2:	b007      	add	sp, #28
 80076e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076e6:	2c2b      	cmp	r4, #43	; 0x2b
 80076e8:	d1c5      	bne.n	8007676 <_strtol_l.isra.0+0x3a>
 80076ea:	782c      	ldrb	r4, [r5, #0]
 80076ec:	1c9d      	adds	r5, r3, #2
 80076ee:	e7c2      	b.n	8007676 <_strtol_l.isra.0+0x3a>
 80076f0:	0021      	movs	r1, r4
 80076f2:	3941      	subs	r1, #65	; 0x41
 80076f4:	2919      	cmp	r1, #25
 80076f6:	d801      	bhi.n	80076fc <_strtol_l.isra.0+0xc0>
 80076f8:	3c37      	subs	r4, #55	; 0x37
 80076fa:	e7dc      	b.n	80076b6 <_strtol_l.isra.0+0x7a>
 80076fc:	0021      	movs	r1, r4
 80076fe:	3961      	subs	r1, #97	; 0x61
 8007700:	2919      	cmp	r1, #25
 8007702:	d803      	bhi.n	800770c <_strtol_l.isra.0+0xd0>
 8007704:	3c57      	subs	r4, #87	; 0x57
 8007706:	e7d6      	b.n	80076b6 <_strtol_l.isra.0+0x7a>
 8007708:	0013      	movs	r3, r2
 800770a:	e7e2      	b.n	80076d2 <_strtol_l.isra.0+0x96>
 800770c:	2b00      	cmp	r3, #0
 800770e:	da09      	bge.n	8007724 <_strtol_l.isra.0+0xe8>
 8007710:	2322      	movs	r3, #34	; 0x22
 8007712:	9a05      	ldr	r2, [sp, #20]
 8007714:	9803      	ldr	r0, [sp, #12]
 8007716:	6013      	str	r3, [r2, #0]
 8007718:	9b02      	ldr	r3, [sp, #8]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d0e1      	beq.n	80076e2 <_strtol_l.isra.0+0xa6>
 800771e:	1e6b      	subs	r3, r5, #1
 8007720:	9301      	str	r3, [sp, #4]
 8007722:	e007      	b.n	8007734 <_strtol_l.isra.0+0xf8>
 8007724:	2f00      	cmp	r7, #0
 8007726:	d000      	beq.n	800772a <_strtol_l.isra.0+0xee>
 8007728:	4240      	negs	r0, r0
 800772a:	9a02      	ldr	r2, [sp, #8]
 800772c:	2a00      	cmp	r2, #0
 800772e:	d0d8      	beq.n	80076e2 <_strtol_l.isra.0+0xa6>
 8007730:	2b00      	cmp	r3, #0
 8007732:	d1f4      	bne.n	800771e <_strtol_l.isra.0+0xe2>
 8007734:	9b02      	ldr	r3, [sp, #8]
 8007736:	9a01      	ldr	r2, [sp, #4]
 8007738:	601a      	str	r2, [r3, #0]
 800773a:	e7d2      	b.n	80076e2 <_strtol_l.isra.0+0xa6>
 800773c:	2430      	movs	r4, #48	; 0x30
 800773e:	2e00      	cmp	r6, #0
 8007740:	d1a7      	bne.n	8007692 <_strtol_l.isra.0+0x56>
 8007742:	3608      	adds	r6, #8
 8007744:	e7a5      	b.n	8007692 <_strtol_l.isra.0+0x56>
 8007746:	2c30      	cmp	r4, #48	; 0x30
 8007748:	d09b      	beq.n	8007682 <_strtol_l.isra.0+0x46>
 800774a:	260a      	movs	r6, #10
 800774c:	e7a1      	b.n	8007692 <_strtol_l.isra.0+0x56>
 800774e:	46c0      	nop			; (mov r8, r8)
 8007750:	080091a9 	.word	0x080091a9
 8007754:	7fffffff 	.word	0x7fffffff

08007758 <_strtol_r>:
 8007758:	b510      	push	{r4, lr}
 800775a:	f7ff ff6f 	bl	800763c <_strtol_l.isra.0>
 800775e:	bd10      	pop	{r4, pc}

08007760 <_strtoul_l.isra.0>:
 8007760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007762:	001e      	movs	r6, r3
 8007764:	4b43      	ldr	r3, [pc, #268]	; (8007874 <_strtoul_l.isra.0+0x114>)
 8007766:	b087      	sub	sp, #28
 8007768:	000f      	movs	r7, r1
 800776a:	9101      	str	r1, [sp, #4]
 800776c:	469c      	mov	ip, r3
 800776e:	2108      	movs	r1, #8
 8007770:	9005      	str	r0, [sp, #20]
 8007772:	9202      	str	r2, [sp, #8]
 8007774:	003b      	movs	r3, r7
 8007776:	4662      	mov	r2, ip
 8007778:	781c      	ldrb	r4, [r3, #0]
 800777a:	1c7d      	adds	r5, r7, #1
 800777c:	5d10      	ldrb	r0, [r2, r4]
 800777e:	002f      	movs	r7, r5
 8007780:	0002      	movs	r2, r0
 8007782:	400a      	ands	r2, r1
 8007784:	4208      	tst	r0, r1
 8007786:	d1f5      	bne.n	8007774 <_strtoul_l.isra.0+0x14>
 8007788:	2c2d      	cmp	r4, #45	; 0x2d
 800778a:	d13a      	bne.n	8007802 <_strtoul_l.isra.0+0xa2>
 800778c:	2701      	movs	r7, #1
 800778e:	782c      	ldrb	r4, [r5, #0]
 8007790:	1c9d      	adds	r5, r3, #2
 8007792:	2e00      	cmp	r6, #0
 8007794:	d069      	beq.n	800786a <_strtoul_l.isra.0+0x10a>
 8007796:	2e10      	cmp	r6, #16
 8007798:	d109      	bne.n	80077ae <_strtoul_l.isra.0+0x4e>
 800779a:	2c30      	cmp	r4, #48	; 0x30
 800779c:	d107      	bne.n	80077ae <_strtoul_l.isra.0+0x4e>
 800779e:	2220      	movs	r2, #32
 80077a0:	782b      	ldrb	r3, [r5, #0]
 80077a2:	4393      	bics	r3, r2
 80077a4:	2b58      	cmp	r3, #88	; 0x58
 80077a6:	d15b      	bne.n	8007860 <_strtoul_l.isra.0+0x100>
 80077a8:	2610      	movs	r6, #16
 80077aa:	786c      	ldrb	r4, [r5, #1]
 80077ac:	3502      	adds	r5, #2
 80077ae:	2001      	movs	r0, #1
 80077b0:	0031      	movs	r1, r6
 80077b2:	4240      	negs	r0, r0
 80077b4:	f7f8 fcba 	bl	800012c <__udivsi3>
 80077b8:	9003      	str	r0, [sp, #12]
 80077ba:	2001      	movs	r0, #1
 80077bc:	0031      	movs	r1, r6
 80077be:	4240      	negs	r0, r0
 80077c0:	f7f8 fd3a 	bl	8000238 <__aeabi_uidivmod>
 80077c4:	2300      	movs	r3, #0
 80077c6:	9104      	str	r1, [sp, #16]
 80077c8:	2101      	movs	r1, #1
 80077ca:	2201      	movs	r2, #1
 80077cc:	0018      	movs	r0, r3
 80077ce:	468c      	mov	ip, r1
 80077d0:	4252      	negs	r2, r2
 80077d2:	0021      	movs	r1, r4
 80077d4:	3930      	subs	r1, #48	; 0x30
 80077d6:	2909      	cmp	r1, #9
 80077d8:	d81a      	bhi.n	8007810 <_strtoul_l.isra.0+0xb0>
 80077da:	000c      	movs	r4, r1
 80077dc:	42a6      	cmp	r6, r4
 80077de:	dd25      	ble.n	800782c <_strtoul_l.isra.0+0xcc>
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	db21      	blt.n	8007828 <_strtoul_l.isra.0+0xc8>
 80077e4:	9903      	ldr	r1, [sp, #12]
 80077e6:	0013      	movs	r3, r2
 80077e8:	4281      	cmp	r1, r0
 80077ea:	d307      	bcc.n	80077fc <_strtoul_l.isra.0+0x9c>
 80077ec:	d103      	bne.n	80077f6 <_strtoul_l.isra.0+0x96>
 80077ee:	9904      	ldr	r1, [sp, #16]
 80077f0:	0013      	movs	r3, r2
 80077f2:	42a1      	cmp	r1, r4
 80077f4:	db02      	blt.n	80077fc <_strtoul_l.isra.0+0x9c>
 80077f6:	4663      	mov	r3, ip
 80077f8:	4370      	muls	r0, r6
 80077fa:	1820      	adds	r0, r4, r0
 80077fc:	782c      	ldrb	r4, [r5, #0]
 80077fe:	3501      	adds	r5, #1
 8007800:	e7e7      	b.n	80077d2 <_strtoul_l.isra.0+0x72>
 8007802:	2c2b      	cmp	r4, #43	; 0x2b
 8007804:	d001      	beq.n	800780a <_strtoul_l.isra.0+0xaa>
 8007806:	0017      	movs	r7, r2
 8007808:	e7c3      	b.n	8007792 <_strtoul_l.isra.0+0x32>
 800780a:	782c      	ldrb	r4, [r5, #0]
 800780c:	1c9d      	adds	r5, r3, #2
 800780e:	e7fa      	b.n	8007806 <_strtoul_l.isra.0+0xa6>
 8007810:	0021      	movs	r1, r4
 8007812:	3941      	subs	r1, #65	; 0x41
 8007814:	2919      	cmp	r1, #25
 8007816:	d801      	bhi.n	800781c <_strtoul_l.isra.0+0xbc>
 8007818:	3c37      	subs	r4, #55	; 0x37
 800781a:	e7df      	b.n	80077dc <_strtoul_l.isra.0+0x7c>
 800781c:	0021      	movs	r1, r4
 800781e:	3961      	subs	r1, #97	; 0x61
 8007820:	2919      	cmp	r1, #25
 8007822:	d803      	bhi.n	800782c <_strtoul_l.isra.0+0xcc>
 8007824:	3c57      	subs	r4, #87	; 0x57
 8007826:	e7d9      	b.n	80077dc <_strtoul_l.isra.0+0x7c>
 8007828:	0013      	movs	r3, r2
 800782a:	e7e7      	b.n	80077fc <_strtoul_l.isra.0+0x9c>
 800782c:	2b00      	cmp	r3, #0
 800782e:	da09      	bge.n	8007844 <_strtoul_l.isra.0+0xe4>
 8007830:	2322      	movs	r3, #34	; 0x22
 8007832:	2001      	movs	r0, #1
 8007834:	9a05      	ldr	r2, [sp, #20]
 8007836:	4240      	negs	r0, r0
 8007838:	6013      	str	r3, [r2, #0]
 800783a:	9b02      	ldr	r3, [sp, #8]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d109      	bne.n	8007854 <_strtoul_l.isra.0+0xf4>
 8007840:	b007      	add	sp, #28
 8007842:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007844:	2f00      	cmp	r7, #0
 8007846:	d000      	beq.n	800784a <_strtoul_l.isra.0+0xea>
 8007848:	4240      	negs	r0, r0
 800784a:	9a02      	ldr	r2, [sp, #8]
 800784c:	2a00      	cmp	r2, #0
 800784e:	d0f7      	beq.n	8007840 <_strtoul_l.isra.0+0xe0>
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <_strtoul_l.isra.0+0xf8>
 8007854:	1e6b      	subs	r3, r5, #1
 8007856:	9301      	str	r3, [sp, #4]
 8007858:	9b02      	ldr	r3, [sp, #8]
 800785a:	9a01      	ldr	r2, [sp, #4]
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	e7ef      	b.n	8007840 <_strtoul_l.isra.0+0xe0>
 8007860:	2430      	movs	r4, #48	; 0x30
 8007862:	2e00      	cmp	r6, #0
 8007864:	d1a3      	bne.n	80077ae <_strtoul_l.isra.0+0x4e>
 8007866:	3608      	adds	r6, #8
 8007868:	e7a1      	b.n	80077ae <_strtoul_l.isra.0+0x4e>
 800786a:	2c30      	cmp	r4, #48	; 0x30
 800786c:	d097      	beq.n	800779e <_strtoul_l.isra.0+0x3e>
 800786e:	260a      	movs	r6, #10
 8007870:	e79d      	b.n	80077ae <_strtoul_l.isra.0+0x4e>
 8007872:	46c0      	nop			; (mov r8, r8)
 8007874:	080091a9 	.word	0x080091a9

08007878 <_strtoul_r>:
 8007878:	b510      	push	{r4, lr}
 800787a:	f7ff ff71 	bl	8007760 <_strtoul_l.isra.0>
 800787e:	bd10      	pop	{r4, pc}

08007880 <__submore>:
 8007880:	000b      	movs	r3, r1
 8007882:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007884:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 8007886:	3344      	adds	r3, #68	; 0x44
 8007888:	000c      	movs	r4, r1
 800788a:	429d      	cmp	r5, r3
 800788c:	d11c      	bne.n	80078c8 <__submore+0x48>
 800788e:	2680      	movs	r6, #128	; 0x80
 8007890:	00f6      	lsls	r6, r6, #3
 8007892:	0031      	movs	r1, r6
 8007894:	f000 f89c 	bl	80079d0 <_malloc_r>
 8007898:	2800      	cmp	r0, #0
 800789a:	d102      	bne.n	80078a2 <__submore+0x22>
 800789c:	2001      	movs	r0, #1
 800789e:	4240      	negs	r0, r0
 80078a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80078a2:	0023      	movs	r3, r4
 80078a4:	6360      	str	r0, [r4, #52]	; 0x34
 80078a6:	63a6      	str	r6, [r4, #56]	; 0x38
 80078a8:	3346      	adds	r3, #70	; 0x46
 80078aa:	781a      	ldrb	r2, [r3, #0]
 80078ac:	4b10      	ldr	r3, [pc, #64]	; (80078f0 <__submore+0x70>)
 80078ae:	54c2      	strb	r2, [r0, r3]
 80078b0:	0023      	movs	r3, r4
 80078b2:	3345      	adds	r3, #69	; 0x45
 80078b4:	781a      	ldrb	r2, [r3, #0]
 80078b6:	4b0f      	ldr	r3, [pc, #60]	; (80078f4 <__submore+0x74>)
 80078b8:	54c2      	strb	r2, [r0, r3]
 80078ba:	782a      	ldrb	r2, [r5, #0]
 80078bc:	4b0e      	ldr	r3, [pc, #56]	; (80078f8 <__submore+0x78>)
 80078be:	54c2      	strb	r2, [r0, r3]
 80078c0:	18c0      	adds	r0, r0, r3
 80078c2:	6020      	str	r0, [r4, #0]
 80078c4:	2000      	movs	r0, #0
 80078c6:	e7eb      	b.n	80078a0 <__submore+0x20>
 80078c8:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80078ca:	0029      	movs	r1, r5
 80078cc:	0073      	lsls	r3, r6, #1
 80078ce:	001a      	movs	r2, r3
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	f000 f8db 	bl	8007a8c <_realloc_r>
 80078d6:	1e05      	subs	r5, r0, #0
 80078d8:	d0e0      	beq.n	800789c <__submore+0x1c>
 80078da:	1987      	adds	r7, r0, r6
 80078dc:	0001      	movs	r1, r0
 80078de:	0032      	movs	r2, r6
 80078e0:	0038      	movs	r0, r7
 80078e2:	f7fe fff9 	bl	80068d8 <memcpy>
 80078e6:	9b01      	ldr	r3, [sp, #4]
 80078e8:	6027      	str	r7, [r4, #0]
 80078ea:	6365      	str	r5, [r4, #52]	; 0x34
 80078ec:	63a3      	str	r3, [r4, #56]	; 0x38
 80078ee:	e7e9      	b.n	80078c4 <__submore+0x44>
 80078f0:	000003ff 	.word	0x000003ff
 80078f4:	000003fe 	.word	0x000003fe
 80078f8:	000003fd 	.word	0x000003fd

080078fc <__retarget_lock_acquire_recursive>:
 80078fc:	4770      	bx	lr

080078fe <__retarget_lock_release_recursive>:
 80078fe:	4770      	bx	lr

08007900 <memchr>:
 8007900:	b2c9      	uxtb	r1, r1
 8007902:	1882      	adds	r2, r0, r2
 8007904:	4290      	cmp	r0, r2
 8007906:	d101      	bne.n	800790c <memchr+0xc>
 8007908:	2000      	movs	r0, #0
 800790a:	4770      	bx	lr
 800790c:	7803      	ldrb	r3, [r0, #0]
 800790e:	428b      	cmp	r3, r1
 8007910:	d0fb      	beq.n	800790a <memchr+0xa>
 8007912:	3001      	adds	r0, #1
 8007914:	e7f6      	b.n	8007904 <memchr+0x4>

08007916 <memmove>:
 8007916:	b510      	push	{r4, lr}
 8007918:	4288      	cmp	r0, r1
 800791a:	d902      	bls.n	8007922 <memmove+0xc>
 800791c:	188b      	adds	r3, r1, r2
 800791e:	4298      	cmp	r0, r3
 8007920:	d303      	bcc.n	800792a <memmove+0x14>
 8007922:	2300      	movs	r3, #0
 8007924:	e007      	b.n	8007936 <memmove+0x20>
 8007926:	5c8b      	ldrb	r3, [r1, r2]
 8007928:	5483      	strb	r3, [r0, r2]
 800792a:	3a01      	subs	r2, #1
 800792c:	d2fb      	bcs.n	8007926 <memmove+0x10>
 800792e:	bd10      	pop	{r4, pc}
 8007930:	5ccc      	ldrb	r4, [r1, r3]
 8007932:	54c4      	strb	r4, [r0, r3]
 8007934:	3301      	adds	r3, #1
 8007936:	429a      	cmp	r2, r3
 8007938:	d1fa      	bne.n	8007930 <memmove+0x1a>
 800793a:	e7f8      	b.n	800792e <memmove+0x18>

0800793c <_free_r>:
 800793c:	b570      	push	{r4, r5, r6, lr}
 800793e:	0005      	movs	r5, r0
 8007940:	2900      	cmp	r1, #0
 8007942:	d010      	beq.n	8007966 <_free_r+0x2a>
 8007944:	1f0c      	subs	r4, r1, #4
 8007946:	6823      	ldr	r3, [r4, #0]
 8007948:	2b00      	cmp	r3, #0
 800794a:	da00      	bge.n	800794e <_free_r+0x12>
 800794c:	18e4      	adds	r4, r4, r3
 800794e:	0028      	movs	r0, r5
 8007950:	f000 f8d4 	bl	8007afc <__malloc_lock>
 8007954:	4a1d      	ldr	r2, [pc, #116]	; (80079cc <_free_r+0x90>)
 8007956:	6813      	ldr	r3, [r2, #0]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d105      	bne.n	8007968 <_free_r+0x2c>
 800795c:	6063      	str	r3, [r4, #4]
 800795e:	6014      	str	r4, [r2, #0]
 8007960:	0028      	movs	r0, r5
 8007962:	f000 f8d3 	bl	8007b0c <__malloc_unlock>
 8007966:	bd70      	pop	{r4, r5, r6, pc}
 8007968:	42a3      	cmp	r3, r4
 800796a:	d908      	bls.n	800797e <_free_r+0x42>
 800796c:	6821      	ldr	r1, [r4, #0]
 800796e:	1860      	adds	r0, r4, r1
 8007970:	4283      	cmp	r3, r0
 8007972:	d1f3      	bne.n	800795c <_free_r+0x20>
 8007974:	6818      	ldr	r0, [r3, #0]
 8007976:	685b      	ldr	r3, [r3, #4]
 8007978:	1841      	adds	r1, r0, r1
 800797a:	6021      	str	r1, [r4, #0]
 800797c:	e7ee      	b.n	800795c <_free_r+0x20>
 800797e:	001a      	movs	r2, r3
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <_free_r+0x4e>
 8007986:	42a3      	cmp	r3, r4
 8007988:	d9f9      	bls.n	800797e <_free_r+0x42>
 800798a:	6811      	ldr	r1, [r2, #0]
 800798c:	1850      	adds	r0, r2, r1
 800798e:	42a0      	cmp	r0, r4
 8007990:	d10b      	bne.n	80079aa <_free_r+0x6e>
 8007992:	6820      	ldr	r0, [r4, #0]
 8007994:	1809      	adds	r1, r1, r0
 8007996:	1850      	adds	r0, r2, r1
 8007998:	6011      	str	r1, [r2, #0]
 800799a:	4283      	cmp	r3, r0
 800799c:	d1e0      	bne.n	8007960 <_free_r+0x24>
 800799e:	6818      	ldr	r0, [r3, #0]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	1841      	adds	r1, r0, r1
 80079a4:	6011      	str	r1, [r2, #0]
 80079a6:	6053      	str	r3, [r2, #4]
 80079a8:	e7da      	b.n	8007960 <_free_r+0x24>
 80079aa:	42a0      	cmp	r0, r4
 80079ac:	d902      	bls.n	80079b4 <_free_r+0x78>
 80079ae:	230c      	movs	r3, #12
 80079b0:	602b      	str	r3, [r5, #0]
 80079b2:	e7d5      	b.n	8007960 <_free_r+0x24>
 80079b4:	6821      	ldr	r1, [r4, #0]
 80079b6:	1860      	adds	r0, r4, r1
 80079b8:	4283      	cmp	r3, r0
 80079ba:	d103      	bne.n	80079c4 <_free_r+0x88>
 80079bc:	6818      	ldr	r0, [r3, #0]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	1841      	adds	r1, r0, r1
 80079c2:	6021      	str	r1, [r4, #0]
 80079c4:	6063      	str	r3, [r4, #4]
 80079c6:	6054      	str	r4, [r2, #4]
 80079c8:	e7ca      	b.n	8007960 <_free_r+0x24>
 80079ca:	46c0      	nop			; (mov r8, r8)
 80079cc:	200000a4 	.word	0x200000a4

080079d0 <_malloc_r>:
 80079d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079d2:	2303      	movs	r3, #3
 80079d4:	1ccd      	adds	r5, r1, #3
 80079d6:	439d      	bics	r5, r3
 80079d8:	3508      	adds	r5, #8
 80079da:	0006      	movs	r6, r0
 80079dc:	2d0c      	cmp	r5, #12
 80079de:	d21f      	bcs.n	8007a20 <_malloc_r+0x50>
 80079e0:	250c      	movs	r5, #12
 80079e2:	42a9      	cmp	r1, r5
 80079e4:	d81e      	bhi.n	8007a24 <_malloc_r+0x54>
 80079e6:	0030      	movs	r0, r6
 80079e8:	f000 f888 	bl	8007afc <__malloc_lock>
 80079ec:	4925      	ldr	r1, [pc, #148]	; (8007a84 <_malloc_r+0xb4>)
 80079ee:	680a      	ldr	r2, [r1, #0]
 80079f0:	0014      	movs	r4, r2
 80079f2:	2c00      	cmp	r4, #0
 80079f4:	d11a      	bne.n	8007a2c <_malloc_r+0x5c>
 80079f6:	4f24      	ldr	r7, [pc, #144]	; (8007a88 <_malloc_r+0xb8>)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d104      	bne.n	8007a08 <_malloc_r+0x38>
 80079fe:	0021      	movs	r1, r4
 8007a00:	0030      	movs	r0, r6
 8007a02:	f000 f869 	bl	8007ad8 <_sbrk_r>
 8007a06:	6038      	str	r0, [r7, #0]
 8007a08:	0029      	movs	r1, r5
 8007a0a:	0030      	movs	r0, r6
 8007a0c:	f000 f864 	bl	8007ad8 <_sbrk_r>
 8007a10:	1c43      	adds	r3, r0, #1
 8007a12:	d12b      	bne.n	8007a6c <_malloc_r+0x9c>
 8007a14:	230c      	movs	r3, #12
 8007a16:	0030      	movs	r0, r6
 8007a18:	6033      	str	r3, [r6, #0]
 8007a1a:	f000 f877 	bl	8007b0c <__malloc_unlock>
 8007a1e:	e003      	b.n	8007a28 <_malloc_r+0x58>
 8007a20:	2d00      	cmp	r5, #0
 8007a22:	dade      	bge.n	80079e2 <_malloc_r+0x12>
 8007a24:	230c      	movs	r3, #12
 8007a26:	6033      	str	r3, [r6, #0]
 8007a28:	2000      	movs	r0, #0
 8007a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	1b5b      	subs	r3, r3, r5
 8007a30:	d419      	bmi.n	8007a66 <_malloc_r+0x96>
 8007a32:	2b0b      	cmp	r3, #11
 8007a34:	d903      	bls.n	8007a3e <_malloc_r+0x6e>
 8007a36:	6023      	str	r3, [r4, #0]
 8007a38:	18e4      	adds	r4, r4, r3
 8007a3a:	6025      	str	r5, [r4, #0]
 8007a3c:	e003      	b.n	8007a46 <_malloc_r+0x76>
 8007a3e:	6863      	ldr	r3, [r4, #4]
 8007a40:	42a2      	cmp	r2, r4
 8007a42:	d10e      	bne.n	8007a62 <_malloc_r+0x92>
 8007a44:	600b      	str	r3, [r1, #0]
 8007a46:	0030      	movs	r0, r6
 8007a48:	f000 f860 	bl	8007b0c <__malloc_unlock>
 8007a4c:	0020      	movs	r0, r4
 8007a4e:	2207      	movs	r2, #7
 8007a50:	300b      	adds	r0, #11
 8007a52:	1d23      	adds	r3, r4, #4
 8007a54:	4390      	bics	r0, r2
 8007a56:	1ac2      	subs	r2, r0, r3
 8007a58:	4298      	cmp	r0, r3
 8007a5a:	d0e6      	beq.n	8007a2a <_malloc_r+0x5a>
 8007a5c:	1a1b      	subs	r3, r3, r0
 8007a5e:	50a3      	str	r3, [r4, r2]
 8007a60:	e7e3      	b.n	8007a2a <_malloc_r+0x5a>
 8007a62:	6053      	str	r3, [r2, #4]
 8007a64:	e7ef      	b.n	8007a46 <_malloc_r+0x76>
 8007a66:	0022      	movs	r2, r4
 8007a68:	6864      	ldr	r4, [r4, #4]
 8007a6a:	e7c2      	b.n	80079f2 <_malloc_r+0x22>
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	1cc4      	adds	r4, r0, #3
 8007a70:	439c      	bics	r4, r3
 8007a72:	42a0      	cmp	r0, r4
 8007a74:	d0e1      	beq.n	8007a3a <_malloc_r+0x6a>
 8007a76:	1a21      	subs	r1, r4, r0
 8007a78:	0030      	movs	r0, r6
 8007a7a:	f000 f82d 	bl	8007ad8 <_sbrk_r>
 8007a7e:	1c43      	adds	r3, r0, #1
 8007a80:	d1db      	bne.n	8007a3a <_malloc_r+0x6a>
 8007a82:	e7c7      	b.n	8007a14 <_malloc_r+0x44>
 8007a84:	200000a4 	.word	0x200000a4
 8007a88:	200000a8 	.word	0x200000a8

08007a8c <_realloc_r>:
 8007a8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8e:	0007      	movs	r7, r0
 8007a90:	000d      	movs	r5, r1
 8007a92:	0016      	movs	r6, r2
 8007a94:	2900      	cmp	r1, #0
 8007a96:	d105      	bne.n	8007aa4 <_realloc_r+0x18>
 8007a98:	0011      	movs	r1, r2
 8007a9a:	f7ff ff99 	bl	80079d0 <_malloc_r>
 8007a9e:	0004      	movs	r4, r0
 8007aa0:	0020      	movs	r0, r4
 8007aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aa4:	2a00      	cmp	r2, #0
 8007aa6:	d103      	bne.n	8007ab0 <_realloc_r+0x24>
 8007aa8:	f7ff ff48 	bl	800793c <_free_r>
 8007aac:	0034      	movs	r4, r6
 8007aae:	e7f7      	b.n	8007aa0 <_realloc_r+0x14>
 8007ab0:	f000 f834 	bl	8007b1c <_malloc_usable_size_r>
 8007ab4:	002c      	movs	r4, r5
 8007ab6:	42b0      	cmp	r0, r6
 8007ab8:	d2f2      	bcs.n	8007aa0 <_realloc_r+0x14>
 8007aba:	0031      	movs	r1, r6
 8007abc:	0038      	movs	r0, r7
 8007abe:	f7ff ff87 	bl	80079d0 <_malloc_r>
 8007ac2:	1e04      	subs	r4, r0, #0
 8007ac4:	d0ec      	beq.n	8007aa0 <_realloc_r+0x14>
 8007ac6:	0029      	movs	r1, r5
 8007ac8:	0032      	movs	r2, r6
 8007aca:	f7fe ff05 	bl	80068d8 <memcpy>
 8007ace:	0029      	movs	r1, r5
 8007ad0:	0038      	movs	r0, r7
 8007ad2:	f7ff ff33 	bl	800793c <_free_r>
 8007ad6:	e7e3      	b.n	8007aa0 <_realloc_r+0x14>

08007ad8 <_sbrk_r>:
 8007ad8:	2300      	movs	r3, #0
 8007ada:	b570      	push	{r4, r5, r6, lr}
 8007adc:	4d06      	ldr	r5, [pc, #24]	; (8007af8 <_sbrk_r+0x20>)
 8007ade:	0004      	movs	r4, r0
 8007ae0:	0008      	movs	r0, r1
 8007ae2:	602b      	str	r3, [r5, #0]
 8007ae4:	f7fb f8ec 	bl	8002cc0 <_sbrk>
 8007ae8:	1c43      	adds	r3, r0, #1
 8007aea:	d103      	bne.n	8007af4 <_sbrk_r+0x1c>
 8007aec:	682b      	ldr	r3, [r5, #0]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d000      	beq.n	8007af4 <_sbrk_r+0x1c>
 8007af2:	6023      	str	r3, [r4, #0]
 8007af4:	bd70      	pop	{r4, r5, r6, pc}
 8007af6:	46c0      	nop			; (mov r8, r8)
 8007af8:	200001d8 	.word	0x200001d8

08007afc <__malloc_lock>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	4802      	ldr	r0, [pc, #8]	; (8007b08 <__malloc_lock+0xc>)
 8007b00:	f7ff fefc 	bl	80078fc <__retarget_lock_acquire_recursive>
 8007b04:	bd10      	pop	{r4, pc}
 8007b06:	46c0      	nop			; (mov r8, r8)
 8007b08:	200001e0 	.word	0x200001e0

08007b0c <__malloc_unlock>:
 8007b0c:	b510      	push	{r4, lr}
 8007b0e:	4802      	ldr	r0, [pc, #8]	; (8007b18 <__malloc_unlock+0xc>)
 8007b10:	f7ff fef5 	bl	80078fe <__retarget_lock_release_recursive>
 8007b14:	bd10      	pop	{r4, pc}
 8007b16:	46c0      	nop			; (mov r8, r8)
 8007b18:	200001e0 	.word	0x200001e0

08007b1c <_malloc_usable_size_r>:
 8007b1c:	1f0b      	subs	r3, r1, #4
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	1f18      	subs	r0, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	da01      	bge.n	8007b2a <_malloc_usable_size_r+0xe>
 8007b26:	580b      	ldr	r3, [r1, r0]
 8007b28:	18c0      	adds	r0, r0, r3
 8007b2a:	4770      	bx	lr

08007b2c <_init>:
 8007b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b2e:	46c0      	nop			; (mov r8, r8)
 8007b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b32:	bc08      	pop	{r3}
 8007b34:	469e      	mov	lr, r3
 8007b36:	4770      	bx	lr

08007b38 <_fini>:
 8007b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b3a:	46c0      	nop			; (mov r8, r8)
 8007b3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b3e:	bc08      	pop	{r3}
 8007b40:	469e      	mov	lr, r3
 8007b42:	4770      	bx	lr
