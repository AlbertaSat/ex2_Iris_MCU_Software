
SPI_CH_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005148  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a6c  08005208  08005208  00015208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c74  08005c74  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005c74  08005c74  00015c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c7c  08005c7c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c7c  08005c7c  00015c7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c80  08005c80  00015c80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005c84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000074  08005cf8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005cf8  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011b45  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a49  00000000  00000000  00031be1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  00034630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d28  00000000  00000000  00035470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014971  00000000  00000000  00036198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c88  00000000  00000000  0004ab09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000751a5  00000000  00000000  0005d791  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d2936  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003800  00000000  00000000  000d2988  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080051f0 	.word	0x080051f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080051f0 	.word	0x080051f0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8d8 	bl	80004b4 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8d3 	bl	80004b4 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzsi2>:
 8000478:	211c      	movs	r1, #28
 800047a:	2301      	movs	r3, #1
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0xe>
 8000482:	0c00      	lsrs	r0, r0, #16
 8000484:	3910      	subs	r1, #16
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	4298      	cmp	r0, r3
 800048a:	d301      	bcc.n	8000490 <__clzsi2+0x18>
 800048c:	0a00      	lsrs	r0, r0, #8
 800048e:	3908      	subs	r1, #8
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0x22>
 8000496:	0900      	lsrs	r0, r0, #4
 8000498:	3904      	subs	r1, #4
 800049a:	a202      	add	r2, pc, #8	; (adr r2, 80004a4 <__clzsi2+0x2c>)
 800049c:	5c10      	ldrb	r0, [r2, r0]
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	02020304 	.word	0x02020304
 80004a8:	01010101 	.word	0x01010101
	...

080004b4 <__clzdi2>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d103      	bne.n	80004c2 <__clzdi2+0xe>
 80004ba:	f7ff ffdd 	bl	8000478 <__clzsi2>
 80004be:	3020      	adds	r0, #32
 80004c0:	e002      	b.n	80004c8 <__clzdi2+0x14>
 80004c2:	0008      	movs	r0, r1
 80004c4:	f7ff ffd8 	bl	8000478 <__clzsi2>
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <DBG_PUT>:
#include <stdio.h>
#include <string.h>

extern UART_HandleTypeDef huart1;

static inline void DBG_PUT(char *str) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	0018      	movs	r0, r3
 80004d8:	f7ff fe16 	bl	8000108 <strlen>
 80004dc:	0003      	movs	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <DBG_PUT+0x28>)
 80004e4:	2364      	movs	r3, #100	; 0x64
 80004e6:	f003 fcdf 	bl	8003ea8 <HAL_UART_Transmit>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200001e0 	.word	0x200001e0

080004f8 <i2c2_read8_8>:
void i2c2_write16_8(uint8_t addr, uint16_t register_pointer, uint16_t register_value){
	hi2c_write16_8(hi2c2, addr, register_pointer, register_value);
	return;
}

uint8_t i2c2_read8_8(uint8_t addr, uint8_t register_pointer){
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b097      	sub	sp, #92	; 0x5c
 80004fc:	af12      	add	r7, sp, #72	; 0x48
 80004fe:	0002      	movs	r2, r0
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	1c0a      	adds	r2, r1, #0
 8000508:	701a      	strb	r2, [r3, #0]
	uint8_t val = hi2c_read8_8(hi2c2, addr, register_pointer);
 800050a:	260f      	movs	r6, #15
 800050c:	19bd      	adds	r5, r7, r6
 800050e:	4c0e      	ldr	r4, [pc, #56]	; (8000548 <i2c2_read8_8+0x50>)
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	9310      	str	r3, [sp, #64]	; 0x40
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	930f      	str	r3, [sp, #60]	; 0x3c
 800051c:	466b      	mov	r3, sp
 800051e:	0018      	movs	r0, r3
 8000520:	0023      	movs	r3, r4
 8000522:	3310      	adds	r3, #16
 8000524:	223c      	movs	r2, #60	; 0x3c
 8000526:	0019      	movs	r1, r3
 8000528:	f004 f9f0 	bl	800490c <memcpy>
 800052c:	6820      	ldr	r0, [r4, #0]
 800052e:	6861      	ldr	r1, [r4, #4]
 8000530:	68a2      	ldr	r2, [r4, #8]
 8000532:	68e3      	ldr	r3, [r4, #12]
 8000534:	f000 f80a 	bl	800054c <hi2c_read8_8>
 8000538:	0003      	movs	r3, r0
 800053a:	702b      	strb	r3, [r5, #0]
	return val;
 800053c:	19bb      	adds	r3, r7, r6
 800053e:	781b      	ldrb	r3, [r3, #0]
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b005      	add	sp, #20
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	200000e4 	.word	0x200000e4

0800054c <hi2c_read8_8>:
        }
}

// UNTESTED BELOW
uint8_t hi2c_read8_8(I2C_HandleTypeDef hi2c, uint8_t addr, uint8_t register_pointer)
{
 800054c:	b084      	sub	sp, #16
 800054e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000550:	b097      	sub	sp, #92	; 0x5c
 8000552:	af04      	add	r7, sp, #16
 8000554:	2558      	movs	r5, #88	; 0x58
 8000556:	2608      	movs	r6, #8
 8000558:	19ac      	adds	r4, r5, r6
 800055a:	19e4      	adds	r4, r4, r7
 800055c:	6020      	str	r0, [r4, #0]
 800055e:	6061      	str	r1, [r4, #4]
 8000560:	60a2      	str	r2, [r4, #8]
 8000562:	60e3      	str	r3, [r4, #12]
    uint16_t return_value = 0;
 8000564:	2344      	movs	r3, #68	; 0x44
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	2200      	movs	r2, #0
 800056a:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800056c:	2047      	movs	r0, #71	; 0x47
 800056e:	183b      	adds	r3, r7, r0
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Read(&hi2c, addr << 1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 8000574:	234c      	movs	r3, #76	; 0x4c
 8000576:	195a      	adds	r2, r3, r5
 8000578:	19bb      	adds	r3, r7, r6
 800057a:	18d3      	adds	r3, r2, r3
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	18db      	adds	r3, r3, r3
 8000582:	b299      	uxth	r1, r3
 8000584:	2350      	movs	r3, #80	; 0x50
 8000586:	195a      	adds	r2, r3, r5
 8000588:	19bc      	adds	r4, r7, r6
 800058a:	1913      	adds	r3, r2, r4
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b29a      	uxth	r2, r3
 8000590:	0006      	movs	r6, r0
 8000592:	183c      	adds	r4, r7, r0
 8000594:	2308      	movs	r3, #8
 8000596:	18eb      	adds	r3, r5, r3
 8000598:	19d8      	adds	r0, r3, r7
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	9302      	str	r3, [sp, #8]
 800059e:	2301      	movs	r3, #1
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2344      	movs	r3, #68	; 0x44
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	f001 fa37 	bl	8001a1c <HAL_I2C_Mem_Read>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80005b2:	19bb      	adds	r3, r7, r6
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d015      	beq.n	80005e6 <hi2c_read8_8+0x9a>
            char buf[64];
            sprintf(buf, "I2C8_8 read from 0x%x register 0x%x failed\r\n", addr, register_pointer);
 80005ba:	234c      	movs	r3, #76	; 0x4c
 80005bc:	195b      	adds	r3, r3, r5
 80005be:	2208      	movs	r2, #8
 80005c0:	4694      	mov	ip, r2
 80005c2:	44bc      	add	ip, r7
 80005c4:	4463      	add	r3, ip
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	2350      	movs	r3, #80	; 0x50
 80005ca:	195b      	adds	r3, r3, r5
 80005cc:	2108      	movs	r1, #8
 80005ce:	468c      	mov	ip, r1
 80005d0:	44bc      	add	ip, r7
 80005d2:	4463      	add	r3, ip
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4909      	ldr	r1, [pc, #36]	; (80005fc <hi2c_read8_8+0xb0>)
 80005d8:	1d38      	adds	r0, r7, #4
 80005da:	f004 f9a9 	bl	8004930 <siprintf>
            DBG_PUT(buf);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff73 	bl	80004cc <DBG_PUT>
        }
    return return_value;
 80005e6:	2344      	movs	r3, #68	; 0x44
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
}
 80005ee:	0018      	movs	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b013      	add	sp, #76	; 0x4c
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	b004      	add	sp, #16
 80005fa:	4718      	bx	r3
 80005fc:	08005260 	.word	0x08005260

08000600 <get_image_num>:
    }

    DBG_PUT("\04");
}

uint8_t get_image_num(){
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
	return image_number;
 8000604:	4b02      	ldr	r3, [pc, #8]	; (8000610 <get_image_num+0x10>)
 8000606:	781b      	ldrb	r3, [r3, #0]
}
 8000608:	0018      	movs	r0, r3
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	20000090 	.word	0x20000090

08000614 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	0018      	movs	r0, r3
 8000620:	f7ff fd72 	bl	8000108 <strlen>
 8000624:	0003      	movs	r3, r0
 8000626:	b29a      	uxth	r2, r3
 8000628:	6879      	ldr	r1, [r7, #4]
 800062a:	4804      	ldr	r0, [pc, #16]	; (800063c <DBG_PUT+0x28>)
 800062c:	2364      	movs	r3, #100	; 0x64
 800062e:	f003 fc3b 	bl	8003ea8 <HAL_UART_Transmit>
}
 8000632:	46c0      	nop			; (mov r8, r8)
 8000634:	46bd      	mov	sp, r7
 8000636:	b002      	add	sp, #8
 8000638:	bd80      	pop	{r7, pc}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	200001e0 	.word	0x200001e0

08000640 <sensor_togglepower>:
		 	 }
	  	}
	 DBG_PUT("Scan Complete.\r\n");
}

void sensor_togglepower(int i){
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	if (i == 1){
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b01      	cmp	r3, #1
 800064c:	d10c      	bne.n	8000668 <sensor_togglepower+0x28>
		HAL_GPIO_WritePin(CAM_EN_GPIO_Port, CAM_EN_Pin, GPIO_PIN_SET);
 800064e:	2380      	movs	r3, #128	; 0x80
 8000650:	0119      	lsls	r1, r3, #4
 8000652:	23a0      	movs	r3, #160	; 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2201      	movs	r2, #1
 8000658:	0018      	movs	r0, r3
 800065a:	f001 f92b 	bl	80018b4 <HAL_GPIO_WritePin>
		DBG_PUT("Sensor Power Enabled.\r\n");
 800065e:	4b0a      	ldr	r3, [pc, #40]	; (8000688 <sensor_togglepower+0x48>)
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ffd7 	bl	8000614 <DBG_PUT>
		return;
 8000666:	e00b      	b.n	8000680 <sensor_togglepower+0x40>
	}
	HAL_GPIO_WritePin(CAM_EN_GPIO_Port, CAM_EN_Pin, GPIO_PIN_RESET);
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	0119      	lsls	r1, r3, #4
 800066c:	23a0      	movs	r3, #160	; 0xa0
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2200      	movs	r2, #0
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f91e 	bl	80018b4 <HAL_GPIO_WritePin>
	DBG_PUT("Sensor Power Disabled.\r\n");
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <sensor_togglepower+0x4c>)
 800067a:	0018      	movs	r0, r3
 800067c:	f7ff ffca 	bl	8000614 <DBG_PUT>


}
 8000680:	46bd      	mov	sp, r7
 8000682:	b002      	add	sp, #8
 8000684:	bd80      	pop	{r7, pc}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	08005848 	.word	0x08005848
 800068c:	08005860 	.word	0x08005860

08000690 <get_housekeeping_packet>:
	}
	DBG_PUT(buf);

}

housekeeping_packet_t get_housekeeping_packet(){
 8000690:	b590      	push	{r4, r7, lr}
 8000692:	b087      	sub	sp, #28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	housekeeping_packet_t hk;
	hk = get_housekeeping();
 8000698:	240c      	movs	r4, #12
 800069a:	193b      	adds	r3, r7, r4
 800069c:	0018      	movs	r0, r3
 800069e:	f000 f88f 	bl	80007c0 <get_housekeeping>
	return hk;
 80006a2:	687a      	ldr	r2, [r7, #4]
 80006a4:	193b      	adds	r3, r7, r4
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	230a      	movs	r3, #10
 80006ac:	001a      	movs	r2, r3
 80006ae:	f004 f92d 	bl	800490c <memcpy>
}
 80006b2:	6878      	ldr	r0, [r7, #4]
 80006b4:	46bd      	mov	sp, r7
 80006b6:	b007      	add	sp, #28
 80006b8:	bd90      	pop	{r4, r7, pc}
	...

080006bc <handle_command>:

void handle_command(uint8_t cmd) {
 80006bc:	b590      	push	{r4, r7, lr}
 80006be:	b097      	sub	sp, #92	; 0x5c
 80006c0:	af00      	add	r7, sp, #0
 80006c2:	0002      	movs	r2, r0
 80006c4:	1dfb      	adds	r3, r7, #7
 80006c6:	701a      	strb	r2, [r3, #0]
	char buf[64];
	housekeeping_packet_t hk;
    switch(cmd) {
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b50      	cmp	r3, #80	; 0x50
 80006ce:	d00e      	beq.n	80006ee <handle_command+0x32>
 80006d0:	dc51      	bgt.n	8000776 <handle_command+0xba>
 80006d2:	2b40      	cmp	r3, #64	; 0x40
 80006d4:	d047      	beq.n	8000766 <handle_command+0xaa>
 80006d6:	dc4e      	bgt.n	8000776 <handle_command+0xba>
 80006d8:	2b35      	cmp	r3, #53	; 0x35
 80006da:	d037      	beq.n	800074c <handle_command+0x90>
 80006dc:	dc4b      	bgt.n	8000776 <handle_command+0xba>
 80006de:	2b30      	cmp	r3, #48	; 0x30
 80006e0:	d045      	beq.n	800076e <handle_command+0xb2>
 80006e2:	dc48      	bgt.n	8000776 <handle_command+0xba>
 80006e4:	2b10      	cmp	r3, #16
 80006e6:	d012      	beq.n	800070e <handle_command+0x52>
 80006e8:	2b15      	cmp	r3, #21
 80006ea:	d022      	beq.n	8000732 <handle_command+0x76>
//						break;
//				}
//		}
//		break;
//    }
}
 80006ec:	e043      	b.n	8000776 <handle_command+0xba>
    	DBG_PUT("Getting Housekeeping Data:\r\n");
 80006ee:	4b24      	ldr	r3, [pc, #144]	; (8000780 <handle_command+0xc4>)
 80006f0:	0018      	movs	r0, r3
 80006f2:	f7ff ff8f 	bl	8000614 <DBG_PUT>
    	hk = get_housekeeping_packet();
 80006f6:	240c      	movs	r4, #12
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	0018      	movs	r0, r3
 80006fc:	f7ff ffc8 	bl	8000690 <get_housekeeping_packet>
    	decode_hk_packet(hk);
 8000700:	193b      	adds	r3, r7, r4
 8000702:	6818      	ldr	r0, [r3, #0]
 8000704:	6859      	ldr	r1, [r3, #4]
 8000706:	689a      	ldr	r2, [r3, #8]
 8000708:	f000 f890 	bl	800082c <decode_hk_packet>
    	break;
 800070c:	e033      	b.n	8000776 <handle_command+0xba>
    	imagenum++;
 800070e:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <handle_command+0xc8>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	1c5a      	adds	r2, r3, #1
 8000714:	4b1b      	ldr	r3, [pc, #108]	; (8000784 <handle_command+0xc8>)
 8000716:	601a      	str	r2, [r3, #0]
    	sprintf(buf, "(Placeholder)Captured Image %d\r\n", imagenum);
 8000718:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <handle_command+0xc8>)
 800071a:	681a      	ldr	r2, [r3, #0]
 800071c:	491a      	ldr	r1, [pc, #104]	; (8000788 <handle_command+0xcc>)
 800071e:	2418      	movs	r4, #24
 8000720:	193b      	adds	r3, r7, r4
 8000722:	0018      	movs	r0, r3
 8000724:	f004 f904 	bl	8004930 <siprintf>
    	DBG_PUT(buf);
 8000728:	193b      	adds	r3, r7, r4
 800072a:	0018      	movs	r0, r3
 800072c:	f7ff ff72 	bl	8000614 <DBG_PUT>
    	break;
 8000730:	e021      	b.n	8000776 <handle_command+0xba>
    	sprintf(buf, "Current Image: %d\r\n", imagenum);
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <handle_command+0xc8>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	4915      	ldr	r1, [pc, #84]	; (800078c <handle_command+0xd0>)
 8000738:	2418      	movs	r4, #24
 800073a:	193b      	adds	r3, r7, r4
 800073c:	0018      	movs	r0, r3
 800073e:	f004 f8f7 	bl	8004930 <siprintf>
    	DBG_PUT(buf);
 8000742:	193b      	adds	r3, r7, r4
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff65 	bl	8000614 <DBG_PUT>
    	break;
 800074a:	e014      	b.n	8000776 <handle_command+0xba>
    	sprintf(buf, "Number of Images: %d\r\n", imagenum);
 800074c:	4b0d      	ldr	r3, [pc, #52]	; (8000784 <handle_command+0xc8>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	490f      	ldr	r1, [pc, #60]	; (8000790 <handle_command+0xd4>)
 8000752:	2418      	movs	r4, #24
 8000754:	193b      	adds	r3, r7, r4
 8000756:	0018      	movs	r0, r3
 8000758:	f004 f8ea 	bl	8004930 <siprintf>
    	DBG_PUT(buf);
 800075c:	193b      	adds	r3, r7, r4
 800075e:	0018      	movs	r0, r3
 8000760:	f7ff ff58 	bl	8000614 <DBG_PUT>
    	break;
 8000764:	e007      	b.n	8000776 <handle_command+0xba>
		sensor_togglepower(1);
 8000766:	2001      	movs	r0, #1
 8000768:	f7ff ff6a 	bl	8000640 <sensor_togglepower>
		break;
 800076c:	e003      	b.n	8000776 <handle_command+0xba>
		sensor_togglepower(0);
 800076e:	2000      	movs	r0, #0
 8000770:	f7ff ff66 	bl	8000640 <sensor_togglepower>
		break;
 8000774:	46c0      	nop			; (mov r8, r8)
}
 8000776:	46c0      	nop			; (mov r8, r8)
 8000778:	46bd      	mov	sp, r7
 800077a:	b017      	add	sp, #92	; 0x5c
 800077c:	bd90      	pop	{r4, r7, pc}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	080059ec 	.word	0x080059ec
 8000784:	20000094 	.word	0x20000094
 8000788:	08005a0c 	.word	0x08005a0c
 800078c:	08005a30 	.word	0x08005a30
 8000790:	08005a44 	.word	0x08005a44

08000794 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fcb2 	bl	8000108 <strlen>
 80007a4:	0003      	movs	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	6879      	ldr	r1, [r7, #4]
 80007aa:	4804      	ldr	r0, [pc, #16]	; (80007bc <DBG_PUT+0x28>)
 80007ac:	2364      	movs	r3, #100	; 0x64
 80007ae:	f003 fb7b 	bl	8003ea8 <HAL_UART_Transmit>
}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b002      	add	sp, #8
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	200001e0 	.word	0x200001e0

080007c0 <get_housekeeping>:
#include "debug.h"
#include "housekeeping.h"



housekeeping_packet_t get_housekeeping(){
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b087      	sub	sp, #28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	housekeeping_packet_t hk;
	hk.vis_temp = get_temp(VIS_TEMP_SENSOR);
 80007c8:	204c      	movs	r0, #76	; 0x4c
 80007ca:	f000 fd0c 	bl	80011e6 <get_temp>
 80007ce:	0003      	movs	r3, r0
 80007d0:	001a      	movs	r2, r3
 80007d2:	240c      	movs	r4, #12
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	801a      	strh	r2, [r3, #0]
	hk.nir_temp = get_temp(NIR_TEMP_SENSOR);
 80007d8:	204d      	movs	r0, #77	; 0x4d
 80007da:	f000 fd04 	bl	80011e6 <get_temp>
 80007de:	0003      	movs	r3, r0
 80007e0:	001a      	movs	r2, r3
 80007e2:	193b      	adds	r3, r7, r4
 80007e4:	805a      	strh	r2, [r3, #2]
	hk.flash_temp = get_temp(TEMP3);
 80007e6:	204e      	movs	r0, #78	; 0x4e
 80007e8:	f000 fcfd 	bl	80011e6 <get_temp>
 80007ec:	0003      	movs	r3, r0
 80007ee:	001a      	movs	r2, r3
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	809a      	strh	r2, [r3, #4]
	hk.gate_temp = get_temp(TEMP4);
 80007f4:	204f      	movs	r0, #79	; 0x4f
 80007f6:	f000 fcf6 	bl	80011e6 <get_temp>
 80007fa:	0003      	movs	r3, r0
 80007fc:	001a      	movs	r2, r3
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	80da      	strh	r2, [r3, #6]
	hk.imagenum = get_image_num();
 8000802:	f7ff fefd 	bl	8000600 <get_image_num>
 8000806:	0003      	movs	r3, r0
 8000808:	001a      	movs	r2, r3
 800080a:	193b      	adds	r3, r7, r4
 800080c:	721a      	strb	r2, [r3, #8]
	hk.software_version = software_ver;
 800080e:	193b      	adds	r3, r7, r4
 8000810:	2211      	movs	r2, #17
 8000812:	725a      	strb	r2, [r3, #9]
	return hk;
 8000814:	687a      	ldr	r2, [r7, #4]
 8000816:	193b      	adds	r3, r7, r4
 8000818:	0010      	movs	r0, r2
 800081a:	0019      	movs	r1, r3
 800081c:	230a      	movs	r3, #10
 800081e:	001a      	movs	r2, r3
 8000820:	f004 f874 	bl	800490c <memcpy>
}
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	46bd      	mov	sp, r7
 8000828:	b007      	add	sp, #28
 800082a:	bd90      	pop	{r4, r7, pc}

0800082c <decode_hk_packet>:



void decode_hk_packet (housekeeping_packet_t hk){
 800082c:	b590      	push	{r4, r7, lr}
 800082e:	b095      	sub	sp, #84	; 0x54
 8000830:	af00      	add	r7, sp, #0
 8000832:	1d3b      	adds	r3, r7, #4
 8000834:	6018      	str	r0, [r3, #0]
 8000836:	6059      	str	r1, [r3, #4]
 8000838:	609a      	str	r2, [r3, #8]
	char buf[64];
	sprintf(buf, "hk.vis_temp:0x%x\r\n", hk.vis_temp);
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	881b      	ldrh	r3, [r3, #0]
 800083e:	001a      	movs	r2, r3
 8000840:	4924      	ldr	r1, [pc, #144]	; (80008d4 <decode_hk_packet+0xa8>)
 8000842:	2410      	movs	r4, #16
 8000844:	193b      	adds	r3, r7, r4
 8000846:	0018      	movs	r0, r3
 8000848:	f004 f872 	bl	8004930 <siprintf>
	DBG_PUT(buf);
 800084c:	193b      	adds	r3, r7, r4
 800084e:	0018      	movs	r0, r3
 8000850:	f7ff ffa0 	bl	8000794 <DBG_PUT>
	sprintf(buf, "hk.nir_temp: 0x%x\r\n", hk.nir_temp);
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	885b      	ldrh	r3, [r3, #2]
 8000858:	001a      	movs	r2, r3
 800085a:	491f      	ldr	r1, [pc, #124]	; (80008d8 <decode_hk_packet+0xac>)
 800085c:	193b      	adds	r3, r7, r4
 800085e:	0018      	movs	r0, r3
 8000860:	f004 f866 	bl	8004930 <siprintf>
	DBG_PUT(buf);
 8000864:	193b      	adds	r3, r7, r4
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff ff94 	bl	8000794 <DBG_PUT>
	sprintf(buf, "hk.flash_temp: 0x%x\r\n", hk.flash_temp);
 800086c:	1d3b      	adds	r3, r7, #4
 800086e:	889b      	ldrh	r3, [r3, #4]
 8000870:	001a      	movs	r2, r3
 8000872:	491a      	ldr	r1, [pc, #104]	; (80008dc <decode_hk_packet+0xb0>)
 8000874:	193b      	adds	r3, r7, r4
 8000876:	0018      	movs	r0, r3
 8000878:	f004 f85a 	bl	8004930 <siprintf>
	DBG_PUT(buf);
 800087c:	193b      	adds	r3, r7, r4
 800087e:	0018      	movs	r0, r3
 8000880:	f7ff ff88 	bl	8000794 <DBG_PUT>
	sprintf(buf, "hk.gate_temp: 0x%x\r\n", hk.gate_temp);
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	88db      	ldrh	r3, [r3, #6]
 8000888:	001a      	movs	r2, r3
 800088a:	4915      	ldr	r1, [pc, #84]	; (80008e0 <decode_hk_packet+0xb4>)
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	f004 f84e 	bl	8004930 <siprintf>
	DBG_PUT(buf);
 8000894:	193b      	adds	r3, r7, r4
 8000896:	0018      	movs	r0, r3
 8000898:	f7ff ff7c 	bl	8000794 <DBG_PUT>
	sprintf(buf, "hk.imgnum: 0x%x\r\n", hk.imagenum);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	7a1b      	ldrb	r3, [r3, #8]
 80008a0:	001a      	movs	r2, r3
 80008a2:	4910      	ldr	r1, [pc, #64]	; (80008e4 <decode_hk_packet+0xb8>)
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	0018      	movs	r0, r3
 80008a8:	f004 f842 	bl	8004930 <siprintf>
	DBG_PUT(buf);
 80008ac:	193b      	adds	r3, r7, r4
 80008ae:	0018      	movs	r0, r3
 80008b0:	f7ff ff70 	bl	8000794 <DBG_PUT>
	sprintf(buf, "hk.software_version: 0x%x\r\n", hk.software_version);
 80008b4:	1d3b      	adds	r3, r7, #4
 80008b6:	7a5b      	ldrb	r3, [r3, #9]
 80008b8:	001a      	movs	r2, r3
 80008ba:	490b      	ldr	r1, [pc, #44]	; (80008e8 <decode_hk_packet+0xbc>)
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	0018      	movs	r0, r3
 80008c0:	f004 f836 	bl	8004930 <siprintf>
	DBG_PUT(buf);
 80008c4:	193b      	adds	r3, r7, r4
 80008c6:	0018      	movs	r0, r3
 80008c8:	f7ff ff64 	bl	8000794 <DBG_PUT>
}
 80008cc:	46c0      	nop			; (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b015      	add	sp, #84	; 0x54
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	08005a5c 	.word	0x08005a5c
 80008d8:	08005a70 	.word	0x08005a70
 80008dc:	08005a84 	.word	0x08005a84
 80008e0:	08005a9c 	.word	0x08005a9c
 80008e4:	08005ab4 	.word	0x08005ab4
 80008e8:	08005ac8 	.word	0x08005ac8

080008ec <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	0018      	movs	r0, r3
 80008f8:	f7ff fc06 	bl	8000108 <strlen>
 80008fc:	0003      	movs	r3, r0
 80008fe:	b29a      	uxth	r2, r3
 8000900:	6879      	ldr	r1, [r7, #4]
 8000902:	4804      	ldr	r0, [pc, #16]	; (8000914 <DBG_PUT+0x28>)
 8000904:	2364      	movs	r3, #100	; 0x64
 8000906:	f003 facf 	bl	8003ea8 <HAL_UART_Transmit>
}
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	46bd      	mov	sp, r7
 800090e:	b002      	add	sp, #8
 8000910:	bd80      	pop	{r7, pc}
 8000912:	46c0      	nop			; (mov r8, r8)
 8000914:	200001e0 	.word	0x200001e0

08000918 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800091c:	f000 fcb6 	bl	800128c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000920:	f000 f84a 	bl	80009b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000924:	f000 f9d0 	bl	8000cc8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000928:	f000 f8b4 	bl	8000a94 <MX_I2C1_Init>
  MX_I2C2_Init();
 800092c:	f000 f8f2 	bl	8000b14 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000930:	f000 f930 	bl	8000b94 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000934:	f000 f960 	bl	8000bf8 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000938:	f000 f996 	bl	8000c68 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // init nand flash
//  NAND_SPI_Init(&hspi2);
  DBG_PUT("-----------------------------------\r\n");
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <main+0x8c>)
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff ffd4 	bl	80008ec <DBG_PUT>
  DBG_PUT("Iris Electronics Long Duration Test Software\r\nVersion 1.01.0; 2022-05-04\r\nSlave Side\r\n");
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <main+0x90>)
 8000946:	0018      	movs	r0, r3
 8000948:	f7ff ffd0 	bl	80008ec <DBG_PUT>
  DBG_PUT("-----------------------------------\r\n");
 800094c:	4b15      	ldr	r3, [pc, #84]	; (80009a4 <main+0x8c>)
 800094e:	0018      	movs	r0, r3
 8000950:	f7ff ffcc 	bl	80008ec <DBG_PUT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (state){
 8000954:	4b15      	ldr	r3, [pc, #84]	; (80009ac <main+0x94>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b03      	cmp	r3, #3
 800095a:	d018      	beq.n	800098e <main+0x76>
 800095c:	dcfa      	bgt.n	8000954 <main+0x3c>
 800095e:	2b02      	cmp	r3, #2
 8000960:	d00e      	beq.n	8000980 <main+0x68>
 8000962:	dcf7      	bgt.n	8000954 <main+0x3c>
 8000964:	2b00      	cmp	r3, #0
 8000966:	d01b      	beq.n	80009a0 <main+0x88>
 8000968:	2b01      	cmp	r3, #1
 800096a:	d1f3      	bne.n	8000954 <main+0x3c>
			case idle:
				break;
			case receiving:
				state = idle;
 800096c:	4b0f      	ldr	r3, [pc, #60]	; (80009ac <main+0x94>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Receive_IT(&hspi1, &RX_Data, sizeof(RX_Data));
 8000972:	490f      	ldr	r1, [pc, #60]	; (80009b0 <main+0x98>)
 8000974:	4b0f      	ldr	r3, [pc, #60]	; (80009b4 <main+0x9c>)
 8000976:	2201      	movs	r2, #1
 8000978:	0018      	movs	r0, r3
 800097a:	f002 fc17 	bl	80031ac <HAL_SPI_Receive_IT>
				break;
 800097e:	e010      	b.n	80009a2 <main+0x8a>
			case transmitting:
				HAL_SPI_Transmit_IT(&hspi1, &RX_Data, sizeof(RX_Data));
 8000980:	490b      	ldr	r1, [pc, #44]	; (80009b0 <main+0x98>)
 8000982:	4b0c      	ldr	r3, [pc, #48]	; (80009b4 <main+0x9c>)
 8000984:	2201      	movs	r2, #1
 8000986:	0018      	movs	r0, r3
 8000988:	f002 fb7a 	bl	8003080 <HAL_SPI_Transmit_IT>
				break;
 800098c:	e009      	b.n	80009a2 <main+0x8a>
			case handling_command:
				handle_command(RX_Data);
 800098e:	4b08      	ldr	r3, [pc, #32]	; (80009b0 <main+0x98>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	0018      	movs	r0, r3
 8000994:	f7ff fe92 	bl	80006bc <handle_command>
				state = receiving;
 8000998:	4b04      	ldr	r3, [pc, #16]	; (80009ac <main+0x94>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
				break;
 800099e:	e000      	b.n	80009a2 <main+0x8a>
				break;
 80009a0:	46c0      	nop			; (mov r8, r8)
	  switch (state){
 80009a2:	e7d7      	b.n	8000954 <main+0x3c>
 80009a4:	08005ae4 	.word	0x08005ae4
 80009a8:	08005b0c 	.word	0x08005b0c
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000264 	.word	0x20000264
 80009b4:	20000130 	.word	0x20000130

080009b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009b8:	b590      	push	{r4, r7, lr}
 80009ba:	b09b      	sub	sp, #108	; 0x6c
 80009bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009be:	2434      	movs	r4, #52	; 0x34
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	0018      	movs	r0, r3
 80009c4:	2334      	movs	r3, #52	; 0x34
 80009c6:	001a      	movs	r2, r3
 80009c8:	2100      	movs	r1, #0
 80009ca:	f003 ffa8 	bl	800491e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009ce:	2320      	movs	r3, #32
 80009d0:	18fb      	adds	r3, r7, r3
 80009d2:	0018      	movs	r0, r3
 80009d4:	2314      	movs	r3, #20
 80009d6:	001a      	movs	r2, r3
 80009d8:	2100      	movs	r1, #0
 80009da:	f003 ffa0 	bl	800491e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009de:	003b      	movs	r3, r7
 80009e0:	0018      	movs	r0, r3
 80009e2:	2320      	movs	r3, #32
 80009e4:	001a      	movs	r2, r3
 80009e6:	2100      	movs	r1, #0
 80009e8:	f003 ff99 	bl	800491e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ec:	4b27      	ldr	r3, [pc, #156]	; (8000a8c <SystemClock_Config+0xd4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a27      	ldr	r2, [pc, #156]	; (8000a90 <SystemClock_Config+0xd8>)
 80009f2:	401a      	ands	r2, r3
 80009f4:	4b25      	ldr	r3, [pc, #148]	; (8000a8c <SystemClock_Config+0xd4>)
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	0109      	lsls	r1, r1, #4
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80009fe:	0021      	movs	r1, r4
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	2210      	movs	r2, #16
 8000a04:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	2201      	movs	r2, #1
 8000a0a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	22a0      	movs	r2, #160	; 0xa0
 8000a16:	0212      	lsls	r2, r2, #8
 8000a18:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a1a:	187b      	adds	r3, r7, r1
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	187b      	adds	r3, r7, r1
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 fbb4 	bl	8002190 <HAL_RCC_OscConfig>
 8000a28:	1e03      	subs	r3, r0, #0
 8000a2a:	d001      	beq.n	8000a30 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000a2c:	f000 f9f6 	bl	8000e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	2120      	movs	r1, #32
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	220f      	movs	r2, #15
 8000a36:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3e:	187b      	adds	r3, r7, r1
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a44:	187b      	adds	r3, r7, r1
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a4a:	187b      	adds	r3, r7, r1
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2100      	movs	r1, #0
 8000a54:	0018      	movs	r0, r3
 8000a56:	f001 ff17 	bl	8002888 <HAL_RCC_ClockConfig>
 8000a5a:	1e03      	subs	r3, r0, #0
 8000a5c:	d001      	beq.n	8000a62 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000a5e:	f000 f9dd 	bl	8000e1c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000a62:	003b      	movs	r3, r7
 8000a64:	2209      	movs	r2, #9
 8000a66:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a68:	003b      	movs	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a74:	003b      	movs	r3, r7
 8000a76:	0018      	movs	r0, r3
 8000a78:	f002 f928 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
 8000a7c:	1e03      	subs	r3, r0, #0
 8000a7e:	d001      	beq.n	8000a84 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a80:	f000 f9cc 	bl	8000e1c <Error_Handler>
  }
}
 8000a84:	46c0      	nop			; (mov r8, r8)
 8000a86:	46bd      	mov	sp, r7
 8000a88:	b01b      	add	sp, #108	; 0x6c
 8000a8a:	bd90      	pop	{r4, r7, pc}
 8000a8c:	40007000 	.word	0x40007000
 8000a90:	ffffe7ff 	.word	0xffffe7ff

08000a94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a98:	4b1c      	ldr	r3, [pc, #112]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000a9a:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <MX_I2C1_Init+0x7c>)
 8000a9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000a9e:	4b1b      	ldr	r3, [pc, #108]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000aa0:	22e1      	movs	r2, #225	; 0xe1
 8000aa2:	00d2      	lsls	r2, r2, #3
 8000aa4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aac:	4b17      	ldr	r3, [pc, #92]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ab2:	4b16      	ldr	r3, [pc, #88]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ab8:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000abe:	4b13      	ldr	r3, [pc, #76]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aca:	4b10      	ldr	r3, [pc, #64]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f000 ff0c 	bl	80018f0 <HAL_I2C_Init>
 8000ad8:	1e03      	subs	r3, r0, #0
 8000ada:	d001      	beq.n	8000ae0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000adc:	f000 f99e 	bl	8000e1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	0018      	movs	r0, r3
 8000ae6:	f001 fabb 	bl	8002060 <HAL_I2CEx_ConfigAnalogFilter>
 8000aea:	1e03      	subs	r3, r0, #0
 8000aec:	d001      	beq.n	8000af2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aee:	f000 f995 	bl	8000e1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <MX_I2C1_Init+0x78>)
 8000af4:	2100      	movs	r1, #0
 8000af6:	0018      	movs	r0, r3
 8000af8:	f001 fafe 	bl	80020f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000afc:	1e03      	subs	r3, r0, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000b00:	f000 f98c 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b04:	46c0      	nop			; (mov r8, r8)
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	20000098 	.word	0x20000098
 8000b10:	40005400 	.word	0x40005400

08000b14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000b18:	4b1c      	ldr	r3, [pc, #112]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b1a:	4a1d      	ldr	r2, [pc, #116]	; (8000b90 <MX_I2C2_Init+0x7c>)
 8000b1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 8000b1e:	4b1b      	ldr	r3, [pc, #108]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b20:	22e1      	movs	r2, #225	; 0xe1
 8000b22:	00d2      	lsls	r2, r2, #3
 8000b24:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000b26:	4b19      	ldr	r3, [pc, #100]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b2c:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b2e:	2201      	movs	r2, #1
 8000b30:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b32:	4b16      	ldr	r3, [pc, #88]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000b38:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b3e:	4b13      	ldr	r3, [pc, #76]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b44:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b4a:	4b10      	ldr	r3, [pc, #64]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 fecc 	bl	80018f0 <HAL_I2C_Init>
 8000b58:	1e03      	subs	r3, r0, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b5c:	f000 f95e 	bl	8000e1c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b60:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b62:	2100      	movs	r1, #0
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 fa7b 	bl	8002060 <HAL_I2CEx_ConfigAnalogFilter>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b6e:	f000 f955 	bl	8000e1c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_I2C2_Init+0x78>)
 8000b74:	2100      	movs	r1, #0
 8000b76:	0018      	movs	r0, r3
 8000b78:	f001 fabe 	bl	80020f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b80:	f000 f94c 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b84:	46c0      	nop			; (mov r8, r8)
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	200000e4 	.word	0x200000e4
 8000b90:	40005800 	.word	0x40005800

08000b94 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b98:	4b15      	ldr	r3, [pc, #84]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000b9a:	4a16      	ldr	r2, [pc, #88]	; (8000bf4 <MX_SPI1_Init+0x60>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b9e:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba4:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000baa:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb6:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc2:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc8:	4b09      	ldr	r3, [pc, #36]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bce:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bd6:	2207      	movs	r2, #7
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bda:	4b05      	ldr	r3, [pc, #20]	; (8000bf0 <MX_SPI1_Init+0x5c>)
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f002 f9bb 	bl	8002f58 <HAL_SPI_Init>
 8000be2:	1e03      	subs	r3, r0, #0
 8000be4:	d001      	beq.n	8000bea <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000be6:	f000 f919 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	20000130 	.word	0x20000130
 8000bf4:	40013000 	.word	0x40013000

08000bf8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000bfc:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000bfe:	4a19      	ldr	r2, [pc, #100]	; (8000c64 <MX_SPI2_Init+0x6c>)
 8000c00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c04:	2282      	movs	r2, #130	; 0x82
 8000c06:	0052      	lsls	r2, r2, #1
 8000c08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c1c:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c24:	2280      	movs	r2, #128	; 0x80
 8000c26:	0092      	lsls	r2, r2, #2
 8000c28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c2a:	4b0d      	ldr	r3, [pc, #52]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c30:	4b0b      	ldr	r3, [pc, #44]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c44:	2207      	movs	r2, #7
 8000c46:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <MX_SPI2_Init+0x68>)
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 f984 	bl	8002f58 <HAL_SPI_Init>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c54:	f000 f8e2 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c58:	46c0      	nop			; (mov r8, r8)
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000188 	.word	0x20000188
 8000c64:	40003800 	.word	0x40003800

08000c68 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <MX_USART1_UART_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000c74:	22e1      	movs	r2, #225	; 0xe1
 8000c76:	0252      	lsls	r2, r2, #9
 8000c78:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000caa:	4b05      	ldr	r3, [pc, #20]	; (8000cc0 <MX_USART1_UART_Init+0x58>)
 8000cac:	0018      	movs	r0, r3
 8000cae:	f003 f8a7 	bl	8003e00 <HAL_UART_Init>
 8000cb2:	1e03      	subs	r3, r0, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f000 f8b1 	bl	8000e1c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	200001e0 	.word	0x200001e0
 8000cc4:	40013800 	.word	0x40013800

08000cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cc8:	b590      	push	{r4, r7, lr}
 8000cca:	b089      	sub	sp, #36	; 0x24
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cce:	240c      	movs	r4, #12
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	2314      	movs	r3, #20
 8000cd6:	001a      	movs	r2, r3
 8000cd8:	2100      	movs	r1, #0
 8000cda:	f003 fe20 	bl	800491e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cde:	4b35      	ldr	r3, [pc, #212]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000ce4:	2180      	movs	r1, #128	; 0x80
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cea:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cee:	2280      	movs	r2, #128	; 0x80
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
 8000cf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000cfc:	2101      	movs	r1, #1
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d06:	2201      	movs	r2, #1
 8000d08:	4013      	ands	r3, r2
 8000d0a:	607b      	str	r3, [r7, #4]
 8000d0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	4b29      	ldr	r3, [pc, #164]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000d14:	2102      	movs	r1, #2
 8000d16:	430a      	orrs	r2, r1
 8000d18:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d1a:	4b26      	ldr	r3, [pc, #152]	; (8000db4 <MX_GPIO_Init+0xec>)
 8000d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d1e:	2202      	movs	r2, #2
 8000d20:	4013      	ands	r3, r2
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8000d26:	4924      	ldr	r1, [pc, #144]	; (8000db8 <MX_GPIO_Init+0xf0>)
 8000d28:	23a0      	movs	r3, #160	; 0xa0
 8000d2a:	05db      	lsls	r3, r3, #23
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	0018      	movs	r0, r3
 8000d30:	f000 fdc0 	bl	80018b4 <HAL_GPIO_WritePin>
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_OUT1_Pin|NAND_CS1_Pin, GPIO_PIN_RESET);
 8000d34:	4921      	ldr	r1, [pc, #132]	; (8000dbc <MX_GPIO_Init+0xf4>)
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <MX_GPIO_Init+0xf8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	f000 fdba 	bl	80018b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_CS1_Pin USART2_CS2_Pin USART2_MOSI_Pin USART2_CLK_Pin
                           WP__Pin CAM_EN_Pin NAND_CS2_Pin */
  GPIO_InitStruct.Pin = USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8000d40:	193b      	adds	r3, r7, r4
 8000d42:	4a1d      	ldr	r2, [pc, #116]	; (8000db8 <MX_GPIO_Init+0xf0>)
 8000d44:	601a      	str	r2, [r3, #0]
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d46:	193b      	adds	r3, r7, r4
 8000d48:	2201      	movs	r2, #1
 8000d4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	193b      	adds	r3, r7, r4
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	193a      	adds	r2, r7, r4
 8000d5a:	23a0      	movs	r3, #160	; 0xa0
 8000d5c:	05db      	lsls	r3, r3, #23
 8000d5e:	0011      	movs	r1, r2
 8000d60:	0018      	movs	r0, r3
 8000d62:	f000 fc29 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_MISO_Pin */
  GPIO_InitStruct.Pin = USART2_MISO_Pin;
 8000d66:	193b      	adds	r3, r7, r4
 8000d68:	2208      	movs	r2, #8
 8000d6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	193b      	adds	r3, r7, r4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USART2_MISO_GPIO_Port, &GPIO_InitStruct);
 8000d78:	193a      	adds	r2, r7, r4
 8000d7a:	23a0      	movs	r3, #160	; 0xa0
 8000d7c:	05db      	lsls	r3, r3, #23
 8000d7e:	0011      	movs	r1, r2
 8000d80:	0018      	movs	r0, r3
 8000d82:	f000 fc19 	bl	80015b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_OUT1_Pin NAND_CS1_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin|NAND_CS1_Pin;
 8000d86:	0021      	movs	r1, r4
 8000d88:	187b      	adds	r3, r7, r1
 8000d8a:	4a0c      	ldr	r2, [pc, #48]	; (8000dbc <MX_GPIO_Init+0xf4>)
 8000d8c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2201      	movs	r2, #1
 8000d92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2200      	movs	r2, #0
 8000d98:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	187b      	adds	r3, r7, r1
 8000da2:	4a07      	ldr	r2, [pc, #28]	; (8000dc0 <MX_GPIO_Init+0xf8>)
 8000da4:	0019      	movs	r1, r3
 8000da6:	0010      	movs	r0, r2
 8000da8:	f000 fc06 	bl	80015b8 <HAL_GPIO_Init>

}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b009      	add	sp, #36	; 0x24
 8000db2:	bd90      	pop	{r4, r7, pc}
 8000db4:	40021000 	.word	0x40021000
 8000db8:	00001917 	.word	0x00001917
 8000dbc:	00001001 	.word	0x00001001
 8000dc0:	50000400 	.word	0x50000400

08000dc4 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
	state = receiving;
 8000dcc:	4b03      	ldr	r3, [pc, #12]	; (8000ddc <HAL_SPI_TxCpltCallback+0x18>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	701a      	strb	r2, [r3, #0]
}
 8000dd2:	46c0      	nop			; (mov r8, r8)
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	b002      	add	sp, #8
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	46c0      	nop			; (mov r8, r8)
 8000ddc:	20000000 	.word	0x20000000

08000de0 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)

{
 8000de0:	b590      	push	{r4, r7, lr}
 8000de2:	b093      	sub	sp, #76	; 0x4c
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
	state = handling_command;
 8000de8:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_SPI_RxCpltCallback+0x30>)
 8000dea:	2203      	movs	r2, #3
 8000dec:	701a      	strb	r2, [r3, #0]
	char buf[64];
	sprintf(buf, "Received 0x%x\r\n", RX_Data);
 8000dee:	4b09      	ldr	r3, [pc, #36]	; (8000e14 <HAL_SPI_RxCpltCallback+0x34>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	001a      	movs	r2, r3
 8000df4:	4908      	ldr	r1, [pc, #32]	; (8000e18 <HAL_SPI_RxCpltCallback+0x38>)
 8000df6:	2408      	movs	r4, #8
 8000df8:	193b      	adds	r3, r7, r4
 8000dfa:	0018      	movs	r0, r3
 8000dfc:	f003 fd98 	bl	8004930 <siprintf>
	DBG_PUT(buf);
 8000e00:	193b      	adds	r3, r7, r4
 8000e02:	0018      	movs	r0, r3
 8000e04:	f7ff fd72 	bl	80008ec <DBG_PUT>

}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b013      	add	sp, #76	; 0x4c
 8000e0e:	bd90      	pop	{r4, r7, pc}
 8000e10:	20000000 	.word	0x20000000
 8000e14:	20000264 	.word	0x20000264
 8000e18:	08005b64 	.word	0x08005b64

08000e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e20:	b672      	cpsid	i
}
 8000e22:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <Error_Handler+0x8>
	...

08000e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <HAL_MspInit+0x24>)
 8000e2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e30:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_MspInit+0x24>)
 8000e32:	2101      	movs	r1, #1
 8000e34:	430a      	orrs	r2, r1
 8000e36:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e38:	4b04      	ldr	r3, [pc, #16]	; (8000e4c <HAL_MspInit+0x24>)
 8000e3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e3c:	4b03      	ldr	r3, [pc, #12]	; (8000e4c <HAL_MspInit+0x24>)
 8000e3e:	2180      	movs	r1, #128	; 0x80
 8000e40:	0549      	lsls	r1, r1, #21
 8000e42:	430a      	orrs	r2, r1
 8000e44:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	40021000 	.word	0x40021000

08000e50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e50:	b590      	push	{r4, r7, lr}
 8000e52:	b08b      	sub	sp, #44	; 0x2c
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	2414      	movs	r4, #20
 8000e5a:	193b      	adds	r3, r7, r4
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	2314      	movs	r3, #20
 8000e60:	001a      	movs	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	f003 fd5b 	bl	800491e <memset>
  if(hi2c->Instance==I2C1)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a3b      	ldr	r2, [pc, #236]	; (8000f5c <HAL_I2C_MspInit+0x10c>)
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	d129      	bne.n	8000ec6 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e72:	4b3b      	ldr	r3, [pc, #236]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e76:	4b3a      	ldr	r3, [pc, #232]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000e78:	2102      	movs	r1, #2
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e7e:	4b38      	ldr	r3, [pc, #224]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e82:	2202      	movs	r2, #2
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e8a:	0021      	movs	r1, r4
 8000e8c:	187b      	adds	r3, r7, r1
 8000e8e:	22c0      	movs	r2, #192	; 0xc0
 8000e90:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e92:	187b      	adds	r3, r7, r1
 8000e94:	2212      	movs	r2, #18
 8000e96:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	187b      	adds	r3, r7, r1
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e9e:	187b      	adds	r3, r7, r1
 8000ea0:	2203      	movs	r2, #3
 8000ea2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000ea4:	187b      	adds	r3, r7, r1
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	187b      	adds	r3, r7, r1
 8000eac:	4a2d      	ldr	r2, [pc, #180]	; (8000f64 <HAL_I2C_MspInit+0x114>)
 8000eae:	0019      	movs	r1, r3
 8000eb0:	0010      	movs	r0, r2
 8000eb2:	f000 fb81 	bl	80015b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000eb6:	4b2a      	ldr	r3, [pc, #168]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000eb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000eba:	4b29      	ldr	r3, [pc, #164]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	0389      	lsls	r1, r1, #14
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ec4:	e046      	b.n	8000f54 <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a27      	ldr	r2, [pc, #156]	; (8000f68 <HAL_I2C_MspInit+0x118>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d141      	bne.n	8000f54 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ed0:	4b23      	ldr	r3, [pc, #140]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ed4:	4b22      	ldr	r3, [pc, #136]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	430a      	orrs	r2, r1
 8000eda:	62da      	str	r2, [r3, #44]	; 0x2c
 8000edc:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000ee8:	2114      	movs	r1, #20
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2280      	movs	r2, #128	; 0x80
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ef2:	000c      	movs	r4, r1
 8000ef4:	193b      	adds	r3, r7, r4
 8000ef6:	2212      	movs	r2, #18
 8000ef8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f00:	193b      	adds	r3, r7, r4
 8000f02:	2203      	movs	r2, #3
 8000f04:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000f06:	193b      	adds	r3, r7, r4
 8000f08:	2206      	movs	r2, #6
 8000f0a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0c:	193b      	adds	r3, r7, r4
 8000f0e:	4a15      	ldr	r2, [pc, #84]	; (8000f64 <HAL_I2C_MspInit+0x114>)
 8000f10:	0019      	movs	r1, r3
 8000f12:	0010      	movs	r0, r2
 8000f14:	f000 fb50 	bl	80015b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f18:	0021      	movs	r1, r4
 8000f1a:	187b      	adds	r3, r7, r1
 8000f1c:	2280      	movs	r2, #128	; 0x80
 8000f1e:	0192      	lsls	r2, r2, #6
 8000f20:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2212      	movs	r2, #18
 8000f26:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2e:	187b      	adds	r3, r7, r1
 8000f30:	2203      	movs	r2, #3
 8000f32:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8000f34:	187b      	adds	r3, r7, r1
 8000f36:	2205      	movs	r2, #5
 8000f38:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3a:	187b      	adds	r3, r7, r1
 8000f3c:	4a09      	ldr	r2, [pc, #36]	; (8000f64 <HAL_I2C_MspInit+0x114>)
 8000f3e:	0019      	movs	r1, r3
 8000f40:	0010      	movs	r0, r2
 8000f42:	f000 fb39 	bl	80015b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f4a:	4b05      	ldr	r3, [pc, #20]	; (8000f60 <HAL_I2C_MspInit+0x110>)
 8000f4c:	2180      	movs	r1, #128	; 0x80
 8000f4e:	03c9      	lsls	r1, r1, #15
 8000f50:	430a      	orrs	r2, r1
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000f54:	46c0      	nop			; (mov r8, r8)
 8000f56:	46bd      	mov	sp, r7
 8000f58:	b00b      	add	sp, #44	; 0x2c
 8000f5a:	bd90      	pop	{r4, r7, pc}
 8000f5c:	40005400 	.word	0x40005400
 8000f60:	40021000 	.word	0x40021000
 8000f64:	50000400 	.word	0x50000400
 8000f68:	40005800 	.word	0x40005800

08000f6c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f6c:	b590      	push	{r4, r7, lr}
 8000f6e:	b08b      	sub	sp, #44	; 0x2c
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f74:	2414      	movs	r4, #20
 8000f76:	193b      	adds	r3, r7, r4
 8000f78:	0018      	movs	r0, r3
 8000f7a:	2314      	movs	r3, #20
 8000f7c:	001a      	movs	r2, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	f003 fccd 	bl	800491e <memset>
  if(hspi->Instance==SPI1)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a40      	ldr	r2, [pc, #256]	; (800108c <HAL_SPI_MspInit+0x120>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d132      	bne.n	8000ff4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f8e:	4b40      	ldr	r3, [pc, #256]	; (8001090 <HAL_SPI_MspInit+0x124>)
 8000f90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f92:	4b3f      	ldr	r3, [pc, #252]	; (8001090 <HAL_SPI_MspInit+0x124>)
 8000f94:	2180      	movs	r1, #128	; 0x80
 8000f96:	0149      	lsls	r1, r1, #5
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9c:	4b3c      	ldr	r3, [pc, #240]	; (8001090 <HAL_SPI_MspInit+0x124>)
 8000f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fa0:	4b3b      	ldr	r3, [pc, #236]	; (8001090 <HAL_SPI_MspInit+0x124>)
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_SPI_MspInit+0x124>)
 8000faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fac:	2201      	movs	r2, #1
 8000fae:	4013      	ands	r3, r2
 8000fb0:	613b      	str	r3, [r7, #16]
 8000fb2:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8000fb4:	0021      	movs	r1, r4
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	4a36      	ldr	r2, [pc, #216]	; (8001094 <HAL_SPI_MspInit+0x128>)
 8000fba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	2203      	movs	r2, #3
 8000fcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000fce:	187b      	adds	r3, r7, r1
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fd4:	187a      	adds	r2, r7, r1
 8000fd6:	23a0      	movs	r3, #160	; 0xa0
 8000fd8:	05db      	lsls	r3, r3, #23
 8000fda:	0011      	movs	r1, r2
 8000fdc:	0018      	movs	r0, r3
 8000fde:	f000 faeb 	bl	80015b8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	2019      	movs	r0, #25
 8000fe8:	f000 fa6c 	bl	80014c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000fec:	2019      	movs	r0, #25
 8000fee:	f000 fa7e 	bl	80014ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000ff2:	e046      	b.n	8001082 <HAL_SPI_MspInit+0x116>
  else if(hspi->Instance==SPI2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a27      	ldr	r2, [pc, #156]	; (8001098 <HAL_SPI_MspInit+0x12c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d141      	bne.n	8001082 <HAL_SPI_MspInit+0x116>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000ffe:	4b24      	ldr	r3, [pc, #144]	; (8001090 <HAL_SPI_MspInit+0x124>)
 8001000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001002:	4b23      	ldr	r3, [pc, #140]	; (8001090 <HAL_SPI_MspInit+0x124>)
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	01c9      	lsls	r1, r1, #7
 8001008:	430a      	orrs	r2, r1
 800100a:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800100c:	4b20      	ldr	r3, [pc, #128]	; (8001090 <HAL_SPI_MspInit+0x124>)
 800100e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001010:	4b1f      	ldr	r3, [pc, #124]	; (8001090 <HAL_SPI_MspInit+0x124>)
 8001012:	2102      	movs	r1, #2
 8001014:	430a      	orrs	r2, r1
 8001016:	62da      	str	r2, [r3, #44]	; 0x2c
 8001018:	4b1d      	ldr	r3, [pc, #116]	; (8001090 <HAL_SPI_MspInit+0x124>)
 800101a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800101c:	2202      	movs	r2, #2
 800101e:	4013      	ands	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001024:	2114      	movs	r1, #20
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2280      	movs	r2, #128	; 0x80
 800102a:	00d2      	lsls	r2, r2, #3
 800102c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	000c      	movs	r4, r1
 8001030:	193b      	adds	r3, r7, r4
 8001032:	2202      	movs	r2, #2
 8001034:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	193b      	adds	r3, r7, r4
 8001038:	2200      	movs	r2, #0
 800103a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103c:	193b      	adds	r3, r7, r4
 800103e:	2203      	movs	r2, #3
 8001040:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001042:	193b      	adds	r3, r7, r4
 8001044:	2205      	movs	r2, #5
 8001046:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001048:	193b      	adds	r3, r7, r4
 800104a:	4a14      	ldr	r2, [pc, #80]	; (800109c <HAL_SPI_MspInit+0x130>)
 800104c:	0019      	movs	r1, r3
 800104e:	0010      	movs	r0, r2
 8001050:	f000 fab2 	bl	80015b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001054:	0021      	movs	r1, r4
 8001056:	187b      	adds	r3, r7, r1
 8001058:	22c0      	movs	r2, #192	; 0xc0
 800105a:	0212      	lsls	r2, r2, #8
 800105c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	187b      	adds	r3, r7, r1
 8001060:	2202      	movs	r2, #2
 8001062:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	187b      	adds	r3, r7, r1
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800106a:	187b      	adds	r3, r7, r1
 800106c:	2203      	movs	r2, #3
 800106e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8001070:	187b      	adds	r3, r7, r1
 8001072:	2200      	movs	r2, #0
 8001074:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001076:	187b      	adds	r3, r7, r1
 8001078:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_SPI_MspInit+0x130>)
 800107a:	0019      	movs	r1, r3
 800107c:	0010      	movs	r0, r2
 800107e:	f000 fa9b 	bl	80015b8 <HAL_GPIO_Init>
}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	46bd      	mov	sp, r7
 8001086:	b00b      	add	sp, #44	; 0x2c
 8001088:	bd90      	pop	{r4, r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	40013000 	.word	0x40013000
 8001090:	40021000 	.word	0x40021000
 8001094:	000080e0 	.word	0x000080e0
 8001098:	40003800 	.word	0x40003800
 800109c:	50000400 	.word	0x50000400

080010a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b089      	sub	sp, #36	; 0x24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	240c      	movs	r4, #12
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	0018      	movs	r0, r3
 80010ae:	2314      	movs	r3, #20
 80010b0:	001a      	movs	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	f003 fc33 	bl	800491e <memset>
  if(huart->Instance==USART1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a18      	ldr	r2, [pc, #96]	; (8001120 <HAL_UART_MspInit+0x80>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d12a      	bne.n	8001118 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <HAL_UART_MspInit+0x84>)
 80010c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_UART_MspInit+0x84>)
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	01c9      	lsls	r1, r1, #7
 80010cc:	430a      	orrs	r2, r1
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b14      	ldr	r3, [pc, #80]	; (8001124 <HAL_UART_MspInit+0x84>)
 80010d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <HAL_UART_MspInit+0x84>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_MspInit+0x84>)
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e0:	2201      	movs	r2, #1
 80010e2:	4013      	ands	r3, r2
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80010e8:	193b      	adds	r3, r7, r4
 80010ea:	22c0      	movs	r2, #192	; 0xc0
 80010ec:	00d2      	lsls	r2, r2, #3
 80010ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	0021      	movs	r1, r4
 80010f2:	187b      	adds	r3, r7, r1
 80010f4:	2202      	movs	r2, #2
 80010f6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	187b      	adds	r3, r7, r1
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fe:	187b      	adds	r3, r7, r1
 8001100:	2203      	movs	r2, #3
 8001102:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001104:	187b      	adds	r3, r7, r1
 8001106:	2204      	movs	r2, #4
 8001108:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	187a      	adds	r2, r7, r1
 800110c:	23a0      	movs	r3, #160	; 0xa0
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f000 fa50 	bl	80015b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001118:	46c0      	nop			; (mov r8, r8)
 800111a:	46bd      	mov	sp, r7
 800111c:	b009      	add	sp, #36	; 0x24
 800111e:	bd90      	pop	{r4, r7, pc}
 8001120:	40013800 	.word	0x40013800
 8001124:	40021000 	.word	0x40021000

08001128 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800112c:	e7fe      	b.n	800112c <NMI_Handler+0x4>

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b580      	push	{r7, lr}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f8f2 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	46c0      	nop			; (mov r8, r8)
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
	...

08001158 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 800115c:	4b03      	ldr	r3, [pc, #12]	; (800116c <SPI1_IRQHandler+0x14>)
 800115e:	0018      	movs	r0, r3
 8001160:	f002 f97a 	bl	8003458 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001164:	46c0      	nop			; (mov r8, r8)
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	46c0      	nop			; (mov r8, r8)
 800116c:	20000130 	.word	0x20000130

08001170 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001178:	4a14      	ldr	r2, [pc, #80]	; (80011cc <_sbrk+0x5c>)
 800117a:	4b15      	ldr	r3, [pc, #84]	; (80011d0 <_sbrk+0x60>)
 800117c:	1ad3      	subs	r3, r2, r3
 800117e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <_sbrk+0x64>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <_sbrk+0x64>)
 800118e:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <_sbrk+0x68>)
 8001190:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001192:	4b10      	ldr	r3, [pc, #64]	; (80011d4 <_sbrk+0x64>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	18d3      	adds	r3, r2, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	429a      	cmp	r2, r3
 800119e:	d207      	bcs.n	80011b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011a0:	f003 fb8a 	bl	80048b8 <__errno>
 80011a4:	0003      	movs	r3, r0
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	425b      	negs	r3, r3
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b07      	ldr	r3, [pc, #28]	; (80011d4 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	18d2      	adds	r2, r2, r3
 80011be:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <_sbrk+0x64>)
 80011c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	0018      	movs	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	b006      	add	sp, #24
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20005000 	.word	0x20005000
 80011d0:	00000400 	.word	0x00000400
 80011d4:	20000268 	.word	0x20000268
 80011d8:	20000280 	.word	0x20000280

080011dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e0:	46c0      	nop			; (mov r8, r8)
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <get_temp>:
 */
#include "tmp421.h"
#include "debug.h"

// add reset function to the stuff n things
uint16_t get_temp(uint8_t sensor_addr){
 80011e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011e8:	b085      	sub	sp, #20
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	0002      	movs	r2, r0
 80011ee:	1dfb      	adds	r3, r7, #7
 80011f0:	701a      	strb	r2, [r3, #0]
	// returns a 16 bit unsigned integer with bits [15:8] as the 'high' byte,
	// and the bits [7:4] bits as the 'low' byte. High byte is the integer value with a -64 celsius offset
	// Low byte is [7:4] with 0.0625 celsius per count. Temp is the sum of the high and low byte.
	uint8_t highbyte = i2c2_read8_8(sensor_addr, 0x00);
 80011f2:	250f      	movs	r5, #15
 80011f4:	197c      	adds	r4, r7, r5
 80011f6:	1dfb      	adds	r3, r7, #7
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	2100      	movs	r1, #0
 80011fc:	0018      	movs	r0, r3
 80011fe:	f7ff f97b 	bl	80004f8 <i2c2_read8_8>
 8001202:	0003      	movs	r3, r0
 8001204:	7023      	strb	r3, [r4, #0]
	uint8_t lowbyte = i2c2_read8_8(sensor_addr, 0x10);
 8001206:	260e      	movs	r6, #14
 8001208:	19bc      	adds	r4, r7, r6
 800120a:	1dfb      	adds	r3, r7, #7
 800120c:	781b      	ldrb	r3, [r3, #0]
 800120e:	2110      	movs	r1, #16
 8001210:	0018      	movs	r0, r3
 8001212:	f7ff f971 	bl	80004f8 <i2c2_read8_8>
 8001216:	0003      	movs	r3, r0
 8001218:	7023      	strb	r3, [r4, #0]
	return ((uint16_t)highbyte << 8) | lowbyte;
 800121a:	197b      	adds	r3, r7, r5
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	021b      	lsls	r3, r3, #8
 8001220:	b21a      	sxth	r2, r3
 8001222:	19bb      	adds	r3, r7, r6
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b21b      	sxth	r3, r3
 8001228:	4313      	orrs	r3, r2
 800122a:	b21b      	sxth	r3, r3
 800122c:	b29b      	uxth	r3, r3
}
 800122e:	0018      	movs	r0, r3
 8001230:	46bd      	mov	sp, r7
 8001232:	b005      	add	sp, #20
 8001234:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001238 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001238:	480d      	ldr	r0, [pc, #52]	; (8001270 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800123a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopForever+0x6>)
  ldr r1, =_edata
 800123e:	490e      	ldr	r1, [pc, #56]	; (8001278 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001240:	4a0e      	ldr	r2, [pc, #56]	; (800127c <LoopForever+0xe>)
  movs r3, #0
 8001242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001244:	e002      	b.n	800124c <LoopCopyDataInit>

08001246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124a:	3304      	adds	r3, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800124c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800124e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001250:	d3f9      	bcc.n	8001246 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001252:	4a0b      	ldr	r2, [pc, #44]	; (8001280 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001254:	4c0b      	ldr	r4, [pc, #44]	; (8001284 <LoopForever+0x16>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001258:	e001      	b.n	800125e <LoopFillZerobss>

0800125a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800125c:	3204      	adds	r2, #4

0800125e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800125e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001260:	d3fb      	bcc.n	800125a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001262:	f7ff ffbb 	bl	80011dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001266:	f003 fb2d 	bl	80048c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126a:	f7ff fb55 	bl	8000918 <main>

0800126e <LoopForever>:

LoopForever:
    b LoopForever
 800126e:	e7fe      	b.n	800126e <LoopForever>
   ldr   r0, =_estack
 8001270:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001274:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001278:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800127c:	08005c84 	.word	0x08005c84
  ldr r2, =_sbss
 8001280:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001284:	20000280 	.word	0x20000280

08001288 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001288:	e7fe      	b.n	8001288 <ADC1_COMP_IRQHandler>
	...

0800128c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	2200      	movs	r2, #0
 8001296:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001298:	4b0b      	ldr	r3, [pc, #44]	; (80012c8 <HAL_Init+0x3c>)
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Init+0x3c>)
 800129e:	2140      	movs	r1, #64	; 0x40
 80012a0:	430a      	orrs	r2, r1
 80012a2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012a4:	2003      	movs	r0, #3
 80012a6:	f000 f811 	bl	80012cc <HAL_InitTick>
 80012aa:	1e03      	subs	r3, r0, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	2201      	movs	r2, #1
 80012b2:	701a      	strb	r2, [r3, #0]
 80012b4:	e001      	b.n	80012ba <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b6:	f7ff fdb7 	bl	8000e28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
}
 80012be:	0018      	movs	r0, r3
 80012c0:	46bd      	mov	sp, r7
 80012c2:	b002      	add	sp, #8
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	46c0      	nop			; (mov r8, r8)
 80012c8:	40022000 	.word	0x40022000

080012cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <HAL_InitTick+0x5c>)
 80012d6:	681c      	ldr	r4, [r3, #0]
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <HAL_InitTick+0x60>)
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	0019      	movs	r1, r3
 80012de:	23fa      	movs	r3, #250	; 0xfa
 80012e0:	0098      	lsls	r0, r3, #2
 80012e2:	f7fe ff23 	bl	800012c <__udivsi3>
 80012e6:	0003      	movs	r3, r0
 80012e8:	0019      	movs	r1, r3
 80012ea:	0020      	movs	r0, r4
 80012ec:	f7fe ff1e 	bl	800012c <__udivsi3>
 80012f0:	0003      	movs	r3, r0
 80012f2:	0018      	movs	r0, r3
 80012f4:	f000 f90b 	bl	800150e <HAL_SYSTICK_Config>
 80012f8:	1e03      	subs	r3, r0, #0
 80012fa:	d001      	beq.n	8001300 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e00f      	b.n	8001320 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2b03      	cmp	r3, #3
 8001304:	d80b      	bhi.n	800131e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001306:	6879      	ldr	r1, [r7, #4]
 8001308:	2301      	movs	r3, #1
 800130a:	425b      	negs	r3, r3
 800130c:	2200      	movs	r2, #0
 800130e:	0018      	movs	r0, r3
 8001310:	f000 f8d8 	bl	80014c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <HAL_InitTick+0x64>)
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	0018      	movs	r0, r3
 8001322:	46bd      	mov	sp, r7
 8001324:	b003      	add	sp, #12
 8001326:	bd90      	pop	{r4, r7, pc}
 8001328:	20000004 	.word	0x20000004
 800132c:	2000000c 	.word	0x2000000c
 8001330:	20000008 	.word	0x20000008

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b05      	ldr	r3, [pc, #20]	; (8001350 <HAL_IncTick+0x1c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	001a      	movs	r2, r3
 800133e:	4b05      	ldr	r3, [pc, #20]	; (8001354 <HAL_IncTick+0x20>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	18d2      	adds	r2, r2, r3
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_IncTick+0x20>)
 8001346:	601a      	str	r2, [r3, #0]
}
 8001348:	46c0      	nop			; (mov r8, r8)
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	46c0      	nop			; (mov r8, r8)
 8001350:	2000000c 	.word	0x2000000c
 8001354:	2000026c 	.word	0x2000026c

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_GetTick+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	2000026c 	.word	0x2000026c

0800136c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	0002      	movs	r2, r0
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001378:	1dfb      	adds	r3, r7, #7
 800137a:	781b      	ldrb	r3, [r3, #0]
 800137c:	2b7f      	cmp	r3, #127	; 0x7f
 800137e:	d809      	bhi.n	8001394 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	001a      	movs	r2, r3
 8001386:	231f      	movs	r3, #31
 8001388:	401a      	ands	r2, r3
 800138a:	4b04      	ldr	r3, [pc, #16]	; (800139c <__NVIC_EnableIRQ+0x30>)
 800138c:	2101      	movs	r1, #1
 800138e:	4091      	lsls	r1, r2
 8001390:	000a      	movs	r2, r1
 8001392:	601a      	str	r2, [r3, #0]
  }
}
 8001394:	46c0      	nop			; (mov r8, r8)
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}
 800139c:	e000e100 	.word	0xe000e100

080013a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013a0:	b590      	push	{r4, r7, lr}
 80013a2:	b083      	sub	sp, #12
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	0002      	movs	r2, r0
 80013a8:	6039      	str	r1, [r7, #0]
 80013aa:	1dfb      	adds	r3, r7, #7
 80013ac:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013ae:	1dfb      	adds	r3, r7, #7
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b7f      	cmp	r3, #127	; 0x7f
 80013b4:	d828      	bhi.n	8001408 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b6:	4a2f      	ldr	r2, [pc, #188]	; (8001474 <__NVIC_SetPriority+0xd4>)
 80013b8:	1dfb      	adds	r3, r7, #7
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	b25b      	sxtb	r3, r3
 80013be:	089b      	lsrs	r3, r3, #2
 80013c0:	33c0      	adds	r3, #192	; 0xc0
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	589b      	ldr	r3, [r3, r2]
 80013c6:	1dfa      	adds	r2, r7, #7
 80013c8:	7812      	ldrb	r2, [r2, #0]
 80013ca:	0011      	movs	r1, r2
 80013cc:	2203      	movs	r2, #3
 80013ce:	400a      	ands	r2, r1
 80013d0:	00d2      	lsls	r2, r2, #3
 80013d2:	21ff      	movs	r1, #255	; 0xff
 80013d4:	4091      	lsls	r1, r2
 80013d6:	000a      	movs	r2, r1
 80013d8:	43d2      	mvns	r2, r2
 80013da:	401a      	ands	r2, r3
 80013dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	019b      	lsls	r3, r3, #6
 80013e2:	22ff      	movs	r2, #255	; 0xff
 80013e4:	401a      	ands	r2, r3
 80013e6:	1dfb      	adds	r3, r7, #7
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	0018      	movs	r0, r3
 80013ec:	2303      	movs	r3, #3
 80013ee:	4003      	ands	r3, r0
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013f4:	481f      	ldr	r0, [pc, #124]	; (8001474 <__NVIC_SetPriority+0xd4>)
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	089b      	lsrs	r3, r3, #2
 80013fe:	430a      	orrs	r2, r1
 8001400:	33c0      	adds	r3, #192	; 0xc0
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001406:	e031      	b.n	800146c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001408:	4a1b      	ldr	r2, [pc, #108]	; (8001478 <__NVIC_SetPriority+0xd8>)
 800140a:	1dfb      	adds	r3, r7, #7
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	0019      	movs	r1, r3
 8001410:	230f      	movs	r3, #15
 8001412:	400b      	ands	r3, r1
 8001414:	3b08      	subs	r3, #8
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3306      	adds	r3, #6
 800141a:	009b      	lsls	r3, r3, #2
 800141c:	18d3      	adds	r3, r2, r3
 800141e:	3304      	adds	r3, #4
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	1dfa      	adds	r2, r7, #7
 8001424:	7812      	ldrb	r2, [r2, #0]
 8001426:	0011      	movs	r1, r2
 8001428:	2203      	movs	r2, #3
 800142a:	400a      	ands	r2, r1
 800142c:	00d2      	lsls	r2, r2, #3
 800142e:	21ff      	movs	r1, #255	; 0xff
 8001430:	4091      	lsls	r1, r2
 8001432:	000a      	movs	r2, r1
 8001434:	43d2      	mvns	r2, r2
 8001436:	401a      	ands	r2, r3
 8001438:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	019b      	lsls	r3, r3, #6
 800143e:	22ff      	movs	r2, #255	; 0xff
 8001440:	401a      	ands	r2, r3
 8001442:	1dfb      	adds	r3, r7, #7
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	0018      	movs	r0, r3
 8001448:	2303      	movs	r3, #3
 800144a:	4003      	ands	r3, r0
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001450:	4809      	ldr	r0, [pc, #36]	; (8001478 <__NVIC_SetPriority+0xd8>)
 8001452:	1dfb      	adds	r3, r7, #7
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	001c      	movs	r4, r3
 8001458:	230f      	movs	r3, #15
 800145a:	4023      	ands	r3, r4
 800145c:	3b08      	subs	r3, #8
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	430a      	orrs	r2, r1
 8001462:	3306      	adds	r3, #6
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	18c3      	adds	r3, r0, r3
 8001468:	3304      	adds	r3, #4
 800146a:	601a      	str	r2, [r3, #0]
}
 800146c:	46c0      	nop			; (mov r8, r8)
 800146e:	46bd      	mov	sp, r7
 8001470:	b003      	add	sp, #12
 8001472:	bd90      	pop	{r4, r7, pc}
 8001474:	e000e100 	.word	0xe000e100
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	1e5a      	subs	r2, r3, #1
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	045b      	lsls	r3, r3, #17
 800148c:	429a      	cmp	r2, r3
 800148e:	d301      	bcc.n	8001494 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001490:	2301      	movs	r3, #1
 8001492:	e010      	b.n	80014b6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001494:	4b0a      	ldr	r3, [pc, #40]	; (80014c0 <SysTick_Config+0x44>)
 8001496:	687a      	ldr	r2, [r7, #4]
 8001498:	3a01      	subs	r2, #1
 800149a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800149c:	2301      	movs	r3, #1
 800149e:	425b      	negs	r3, r3
 80014a0:	2103      	movs	r1, #3
 80014a2:	0018      	movs	r0, r3
 80014a4:	f7ff ff7c 	bl	80013a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014a8:	4b05      	ldr	r3, [pc, #20]	; (80014c0 <SysTick_Config+0x44>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ae:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <SysTick_Config+0x44>)
 80014b0:	2207      	movs	r2, #7
 80014b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	0018      	movs	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b002      	add	sp, #8
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	46c0      	nop			; (mov r8, r8)
 80014c0:	e000e010 	.word	0xe000e010

080014c4 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	210f      	movs	r1, #15
 80014d0:	187b      	adds	r3, r7, r1
 80014d2:	1c02      	adds	r2, r0, #0
 80014d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014d6:	68ba      	ldr	r2, [r7, #8]
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	b25b      	sxtb	r3, r3
 80014de:	0011      	movs	r1, r2
 80014e0:	0018      	movs	r0, r3
 80014e2:	f7ff ff5d 	bl	80013a0 <__NVIC_SetPriority>
}
 80014e6:	46c0      	nop			; (mov r8, r8)
 80014e8:	46bd      	mov	sp, r7
 80014ea:	b004      	add	sp, #16
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	0002      	movs	r2, r0
 80014f6:	1dfb      	adds	r3, r7, #7
 80014f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014fa:	1dfb      	adds	r3, r7, #7
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b25b      	sxtb	r3, r3
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ff33 	bl	800136c <__NVIC_EnableIRQ>
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b082      	sub	sp, #8
 8001512:	af00      	add	r7, sp, #0
 8001514:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	0018      	movs	r0, r3
 800151a:	f7ff ffaf 	bl	800147c <SysTick_Config>
 800151e:	0003      	movs	r3, r0
}
 8001520:	0018      	movs	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	b002      	add	sp, #8
 8001526:	bd80      	pop	{r7, pc}

08001528 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001530:	210f      	movs	r1, #15
 8001532:	187b      	adds	r3, r7, r1
 8001534:	2200      	movs	r2, #0
 8001536:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2225      	movs	r2, #37	; 0x25
 800153c:	5c9b      	ldrb	r3, [r3, r2]
 800153e:	b2db      	uxtb	r3, r3
 8001540:	2b02      	cmp	r3, #2
 8001542:	d006      	beq.n	8001552 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2204      	movs	r2, #4
 8001548:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800154a:	187b      	adds	r3, r7, r1
 800154c:	2201      	movs	r2, #1
 800154e:	701a      	strb	r2, [r3, #0]
 8001550:	e02a      	b.n	80015a8 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	210e      	movs	r1, #14
 800155e:	438a      	bics	r2, r1
 8001560:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2101      	movs	r1, #1
 800156e:	438a      	bics	r2, r1
 8001570:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001576:	221c      	movs	r2, #28
 8001578:	401a      	ands	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157e:	2101      	movs	r1, #1
 8001580:	4091      	lsls	r1, r2
 8001582:	000a      	movs	r2, r1
 8001584:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2225      	movs	r2, #37	; 0x25
 800158a:	2101      	movs	r1, #1
 800158c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2224      	movs	r2, #36	; 0x24
 8001592:	2100      	movs	r1, #0
 8001594:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159a:	2b00      	cmp	r3, #0
 800159c:	d004      	beq.n	80015a8 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	0010      	movs	r0, r2
 80015a6:	4798      	blx	r3
    }
  }
  return status;
 80015a8:	230f      	movs	r3, #15
 80015aa:	18fb      	adds	r3, r7, r3
 80015ac:	781b      	ldrb	r3, [r3, #0]
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b004      	add	sp, #16
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015c6:	2300      	movs	r3, #0
 80015c8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80015ce:	e155      	b.n	800187c <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2101      	movs	r1, #1
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	4091      	lsls	r1, r2
 80015da:	000a      	movs	r2, r1
 80015dc:	4013      	ands	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d100      	bne.n	80015e8 <HAL_GPIO_Init+0x30>
 80015e6:	e146      	b.n	8001876 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2203      	movs	r2, #3
 80015ee:	4013      	ands	r3, r2
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d005      	beq.n	8001600 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	2203      	movs	r2, #3
 80015fa:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d130      	bne.n	8001662 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	689b      	ldr	r3, [r3, #8]
 8001604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001606:	697b      	ldr	r3, [r7, #20]
 8001608:	005b      	lsls	r3, r3, #1
 800160a:	2203      	movs	r2, #3
 800160c:	409a      	lsls	r2, r3
 800160e:	0013      	movs	r3, r2
 8001610:	43da      	mvns	r2, r3
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4013      	ands	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	68da      	ldr	r2, [r3, #12]
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	409a      	lsls	r2, r3
 8001622:	0013      	movs	r3, r2
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001636:	2201      	movs	r2, #1
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
 800163c:	0013      	movs	r3, r2
 800163e:	43da      	mvns	r2, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	4013      	ands	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	091b      	lsrs	r3, r3, #4
 800164c:	2201      	movs	r2, #1
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	2203      	movs	r2, #3
 8001668:	4013      	ands	r3, r2
 800166a:	2b03      	cmp	r3, #3
 800166c:	d017      	beq.n	800169e <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	68db      	ldr	r3, [r3, #12]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	2203      	movs	r2, #3
 800167a:	409a      	lsls	r2, r3
 800167c:	0013      	movs	r3, r2
 800167e:	43da      	mvns	r2, r3
 8001680:	693b      	ldr	r3, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	689a      	ldr	r2, [r3, #8]
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	005b      	lsls	r3, r3, #1
 800168e:	409a      	lsls	r2, r3
 8001690:	0013      	movs	r3, r2
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2203      	movs	r2, #3
 80016a4:	4013      	ands	r3, r2
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d123      	bne.n	80016f2 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	08da      	lsrs	r2, r3, #3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	3208      	adds	r2, #8
 80016b2:	0092      	lsls	r2, r2, #2
 80016b4:	58d3      	ldr	r3, [r2, r3]
 80016b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	2207      	movs	r2, #7
 80016bc:	4013      	ands	r3, r2
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	220f      	movs	r2, #15
 80016c2:	409a      	lsls	r2, r3
 80016c4:	0013      	movs	r3, r2
 80016c6:	43da      	mvns	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	691a      	ldr	r2, [r3, #16]
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2107      	movs	r1, #7
 80016d6:	400b      	ands	r3, r1
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	409a      	lsls	r2, r3
 80016dc:	0013      	movs	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	08da      	lsrs	r2, r3, #3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	3208      	adds	r2, #8
 80016ec:	0092      	lsls	r2, r2, #2
 80016ee:	6939      	ldr	r1, [r7, #16]
 80016f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	2203      	movs	r2, #3
 80016fe:	409a      	lsls	r2, r3
 8001700:	0013      	movs	r3, r2
 8001702:	43da      	mvns	r2, r3
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4013      	ands	r3, r2
 8001708:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2203      	movs	r2, #3
 8001710:	401a      	ands	r2, r3
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	409a      	lsls	r2, r3
 8001718:	0013      	movs	r3, r2
 800171a:	693a      	ldr	r2, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	23c0      	movs	r3, #192	; 0xc0
 800172c:	029b      	lsls	r3, r3, #10
 800172e:	4013      	ands	r3, r2
 8001730:	d100      	bne.n	8001734 <HAL_GPIO_Init+0x17c>
 8001732:	e0a0      	b.n	8001876 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001734:	4b57      	ldr	r3, [pc, #348]	; (8001894 <HAL_GPIO_Init+0x2dc>)
 8001736:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001738:	4b56      	ldr	r3, [pc, #344]	; (8001894 <HAL_GPIO_Init+0x2dc>)
 800173a:	2101      	movs	r1, #1
 800173c:	430a      	orrs	r2, r1
 800173e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001740:	4a55      	ldr	r2, [pc, #340]	; (8001898 <HAL_GPIO_Init+0x2e0>)
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	089b      	lsrs	r3, r3, #2
 8001746:	3302      	adds	r3, #2
 8001748:	009b      	lsls	r3, r3, #2
 800174a:	589b      	ldr	r3, [r3, r2]
 800174c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	2203      	movs	r2, #3
 8001752:	4013      	ands	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	220f      	movs	r2, #15
 8001758:	409a      	lsls	r2, r3
 800175a:	0013      	movs	r3, r2
 800175c:	43da      	mvns	r2, r3
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4013      	ands	r3, r2
 8001762:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001764:	687a      	ldr	r2, [r7, #4]
 8001766:	23a0      	movs	r3, #160	; 0xa0
 8001768:	05db      	lsls	r3, r3, #23
 800176a:	429a      	cmp	r2, r3
 800176c:	d01f      	beq.n	80017ae <HAL_GPIO_Init+0x1f6>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a4a      	ldr	r2, [pc, #296]	; (800189c <HAL_GPIO_Init+0x2e4>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d019      	beq.n	80017aa <HAL_GPIO_Init+0x1f2>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a49      	ldr	r2, [pc, #292]	; (80018a0 <HAL_GPIO_Init+0x2e8>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d013      	beq.n	80017a6 <HAL_GPIO_Init+0x1ee>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a48      	ldr	r2, [pc, #288]	; (80018a4 <HAL_GPIO_Init+0x2ec>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d00d      	beq.n	80017a2 <HAL_GPIO_Init+0x1ea>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a47      	ldr	r2, [pc, #284]	; (80018a8 <HAL_GPIO_Init+0x2f0>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d007      	beq.n	800179e <HAL_GPIO_Init+0x1e6>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a46      	ldr	r2, [pc, #280]	; (80018ac <HAL_GPIO_Init+0x2f4>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d101      	bne.n	800179a <HAL_GPIO_Init+0x1e2>
 8001796:	2305      	movs	r3, #5
 8001798:	e00a      	b.n	80017b0 <HAL_GPIO_Init+0x1f8>
 800179a:	2306      	movs	r3, #6
 800179c:	e008      	b.n	80017b0 <HAL_GPIO_Init+0x1f8>
 800179e:	2304      	movs	r3, #4
 80017a0:	e006      	b.n	80017b0 <HAL_GPIO_Init+0x1f8>
 80017a2:	2303      	movs	r3, #3
 80017a4:	e004      	b.n	80017b0 <HAL_GPIO_Init+0x1f8>
 80017a6:	2302      	movs	r3, #2
 80017a8:	e002      	b.n	80017b0 <HAL_GPIO_Init+0x1f8>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <HAL_GPIO_Init+0x1f8>
 80017ae:	2300      	movs	r3, #0
 80017b0:	697a      	ldr	r2, [r7, #20]
 80017b2:	2103      	movs	r1, #3
 80017b4:	400a      	ands	r2, r1
 80017b6:	0092      	lsls	r2, r2, #2
 80017b8:	4093      	lsls	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017c0:	4935      	ldr	r1, [pc, #212]	; (8001898 <HAL_GPIO_Init+0x2e0>)
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	089b      	lsrs	r3, r3, #2
 80017c6:	3302      	adds	r3, #2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017ce:	4b38      	ldr	r3, [pc, #224]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	43da      	mvns	r2, r3
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	2380      	movs	r3, #128	; 0x80
 80017e4:	025b      	lsls	r3, r3, #9
 80017e6:	4013      	ands	r3, r2
 80017e8:	d003      	beq.n	80017f2 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017f2:	4b2f      	ldr	r3, [pc, #188]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017f8:	4b2d      	ldr	r3, [pc, #180]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	43da      	mvns	r2, r3
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	029b      	lsls	r3, r3, #10
 8001810:	4013      	ands	r3, r2
 8001812:	d003      	beq.n	800181c <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800181c:	4b24      	ldr	r3, [pc, #144]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001822:	4b23      	ldr	r3, [pc, #140]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	2380      	movs	r3, #128	; 0x80
 8001838:	035b      	lsls	r3, r3, #13
 800183a:	4013      	ands	r3, r2
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	4313      	orrs	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 8001848:	693a      	ldr	r2, [r7, #16]
 800184a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800184c:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43da      	mvns	r2, r3
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	4013      	ands	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	2380      	movs	r3, #128	; 0x80
 8001862:	039b      	lsls	r3, r3, #14
 8001864:	4013      	ands	r3, r2
 8001866:	d003      	beq.n	8001870 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4313      	orrs	r3, r2
 800186e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_GPIO_Init+0x2f8>)
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3301      	adds	r3, #1
 800187a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	40da      	lsrs	r2, r3
 8001884:	1e13      	subs	r3, r2, #0
 8001886:	d000      	beq.n	800188a <HAL_GPIO_Init+0x2d2>
 8001888:	e6a2      	b.n	80015d0 <HAL_GPIO_Init+0x18>
  }
}
 800188a:	46c0      	nop			; (mov r8, r8)
 800188c:	46c0      	nop			; (mov r8, r8)
 800188e:	46bd      	mov	sp, r7
 8001890:	b006      	add	sp, #24
 8001892:	bd80      	pop	{r7, pc}
 8001894:	40021000 	.word	0x40021000
 8001898:	40010000 	.word	0x40010000
 800189c:	50000400 	.word	0x50000400
 80018a0:	50000800 	.word	0x50000800
 80018a4:	50000c00 	.word	0x50000c00
 80018a8:	50001000 	.word	0x50001000
 80018ac:	50001c00 	.word	0x50001c00
 80018b0:	40010400 	.word	0x40010400

080018b4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	0008      	movs	r0, r1
 80018be:	0011      	movs	r1, r2
 80018c0:	1cbb      	adds	r3, r7, #2
 80018c2:	1c02      	adds	r2, r0, #0
 80018c4:	801a      	strh	r2, [r3, #0]
 80018c6:	1c7b      	adds	r3, r7, #1
 80018c8:	1c0a      	adds	r2, r1, #0
 80018ca:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80018cc:	1c7b      	adds	r3, r7, #1
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d004      	beq.n	80018de <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018d4:	1cbb      	adds	r3, r7, #2
 80018d6:	881a      	ldrh	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80018dc:	e003      	b.n	80018e6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80018de:	1cbb      	adds	r3, r7, #2
 80018e0:	881a      	ldrh	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018e6:	46c0      	nop			; (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b002      	add	sp, #8
 80018ec:	bd80      	pop	{r7, pc}
	...

080018f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e082      	b.n	8001a08 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	2241      	movs	r2, #65	; 0x41
 8001906:	5c9b      	ldrb	r3, [r3, r2]
 8001908:	b2db      	uxtb	r3, r3
 800190a:	2b00      	cmp	r3, #0
 800190c:	d107      	bne.n	800191e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2240      	movs	r2, #64	; 0x40
 8001912:	2100      	movs	r1, #0
 8001914:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff fa99 	bl	8000e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2241      	movs	r2, #65	; 0x41
 8001922:	2124      	movs	r1, #36	; 0x24
 8001924:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2101      	movs	r1, #1
 8001932:	438a      	bics	r2, r1
 8001934:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4934      	ldr	r1, [pc, #208]	; (8001a10 <HAL_I2C_Init+0x120>)
 8001940:	400a      	ands	r2, r1
 8001942:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	689a      	ldr	r2, [r3, #8]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4931      	ldr	r1, [pc, #196]	; (8001a14 <HAL_I2C_Init+0x124>)
 8001950:	400a      	ands	r2, r1
 8001952:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d108      	bne.n	800196e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	0209      	lsls	r1, r1, #8
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
 800196c:	e007      	b.n	800197e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2184      	movs	r1, #132	; 0x84
 8001978:	0209      	lsls	r1, r1, #8
 800197a:	430a      	orrs	r2, r1
 800197c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b02      	cmp	r3, #2
 8001984:	d104      	bne.n	8001990 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	0112      	lsls	r2, r2, #4
 800198e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	491f      	ldr	r1, [pc, #124]	; (8001a18 <HAL_I2C_Init+0x128>)
 800199c:	430a      	orrs	r2, r1
 800199e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	68da      	ldr	r2, [r3, #12]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	491a      	ldr	r1, [pc, #104]	; (8001a14 <HAL_I2C_Init+0x124>)
 80019ac:	400a      	ands	r2, r1
 80019ae:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69d9      	ldr	r1, [r3, #28]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1a      	ldr	r2, [r3, #32]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	430a      	orrs	r2, r1
 80019e8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2241      	movs	r2, #65	; 0x41
 80019f4:	2120      	movs	r1, #32
 80019f6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2200      	movs	r2, #0
 80019fc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2242      	movs	r2, #66	; 0x42
 8001a02:	2100      	movs	r1, #0
 8001a04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	0018      	movs	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	b002      	add	sp, #8
 8001a0e:	bd80      	pop	{r7, pc}
 8001a10:	f0ffffff 	.word	0xf0ffffff
 8001a14:	ffff7fff 	.word	0xffff7fff
 8001a18:	02008000 	.word	0x02008000

08001a1c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a1c:	b590      	push	{r4, r7, lr}
 8001a1e:	b089      	sub	sp, #36	; 0x24
 8001a20:	af02      	add	r7, sp, #8
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	000c      	movs	r4, r1
 8001a26:	0010      	movs	r0, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	230a      	movs	r3, #10
 8001a2c:	18fb      	adds	r3, r7, r3
 8001a2e:	1c22      	adds	r2, r4, #0
 8001a30:	801a      	strh	r2, [r3, #0]
 8001a32:	2308      	movs	r3, #8
 8001a34:	18fb      	adds	r3, r7, r3
 8001a36:	1c02      	adds	r2, r0, #0
 8001a38:	801a      	strh	r2, [r3, #0]
 8001a3a:	1dbb      	adds	r3, r7, #6
 8001a3c:	1c0a      	adds	r2, r1, #0
 8001a3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	2241      	movs	r2, #65	; 0x41
 8001a44:	5c9b      	ldrb	r3, [r3, r2]
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b20      	cmp	r3, #32
 8001a4a:	d000      	beq.n	8001a4e <HAL_I2C_Mem_Read+0x32>
 8001a4c:	e110      	b.n	8001c70 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d004      	beq.n	8001a5e <HAL_I2C_Mem_Read+0x42>
 8001a54:	232c      	movs	r3, #44	; 0x2c
 8001a56:	18fb      	adds	r3, r7, r3
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2280      	movs	r2, #128	; 0x80
 8001a62:	0092      	lsls	r2, r2, #2
 8001a64:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e103      	b.n	8001c72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2240      	movs	r2, #64	; 0x40
 8001a6e:	5c9b      	ldrb	r3, [r3, r2]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d101      	bne.n	8001a78 <HAL_I2C_Mem_Read+0x5c>
 8001a74:	2302      	movs	r3, #2
 8001a76:	e0fc      	b.n	8001c72 <HAL_I2C_Mem_Read+0x256>
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	2101      	movs	r1, #1
 8001a7e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a80:	f7ff fc6a 	bl	8001358 <HAL_GetTick>
 8001a84:	0003      	movs	r3, r0
 8001a86:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	0219      	lsls	r1, r3, #8
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	9300      	str	r3, [sp, #0]
 8001a92:	2319      	movs	r3, #25
 8001a94:	2201      	movs	r2, #1
 8001a96:	f000 f979 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 8001a9a:	1e03      	subs	r3, r0, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0e7      	b.n	8001c72 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2241      	movs	r2, #65	; 0x41
 8001aa6:	2122      	movs	r1, #34	; 0x22
 8001aa8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2242      	movs	r2, #66	; 0x42
 8001aae:	2140      	movs	r1, #64	; 0x40
 8001ab0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	222c      	movs	r2, #44	; 0x2c
 8001ac2:	18ba      	adds	r2, r7, r2
 8001ac4:	8812      	ldrh	r2, [r2, #0]
 8001ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001ace:	1dbb      	adds	r3, r7, #6
 8001ad0:	881c      	ldrh	r4, [r3, #0]
 8001ad2:	2308      	movs	r3, #8
 8001ad4:	18fb      	adds	r3, r7, r3
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	230a      	movs	r3, #10
 8001ada:	18fb      	adds	r3, r7, r3
 8001adc:	8819      	ldrh	r1, [r3, #0]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	9301      	str	r3, [sp, #4]
 8001ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ae6:	9300      	str	r3, [sp, #0]
 8001ae8:	0023      	movs	r3, r4
 8001aea:	f000 f8cb 	bl	8001c84 <I2C_RequestMemoryRead>
 8001aee:	1e03      	subs	r3, r0, #0
 8001af0:	d005      	beq.n	8001afe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2240      	movs	r2, #64	; 0x40
 8001af6:	2100      	movs	r1, #0
 8001af8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e0b9      	b.n	8001c72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	2bff      	cmp	r3, #255	; 0xff
 8001b06:	d911      	bls.n	8001b2c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	22ff      	movs	r2, #255	; 0xff
 8001b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b12:	b2da      	uxtb	r2, r3
 8001b14:	2380      	movs	r3, #128	; 0x80
 8001b16:	045c      	lsls	r4, r3, #17
 8001b18:	230a      	movs	r3, #10
 8001b1a:	18fb      	adds	r3, r7, r3
 8001b1c:	8819      	ldrh	r1, [r3, #0]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <HAL_I2C_Mem_Read+0x260>)
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	0023      	movs	r3, r4
 8001b26:	f000 fa65 	bl	8001ff4 <I2C_TransferConfig>
 8001b2a:	e012      	b.n	8001b52 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b3a:	b2da      	uxtb	r2, r3
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	049c      	lsls	r4, r3, #18
 8001b40:	230a      	movs	r3, #10
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	8819      	ldrh	r1, [r3, #0]
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	4b4c      	ldr	r3, [pc, #304]	; (8001c7c <HAL_I2C_Mem_Read+0x260>)
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	0023      	movs	r3, r4
 8001b4e:	f000 fa51 	bl	8001ff4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001b52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	0013      	movs	r3, r2
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2104      	movs	r1, #4
 8001b60:	f000 f914 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 8001b64:	1e03      	subs	r3, r0, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e082      	b.n	8001c72 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b7e:	1c5a      	adds	r2, r3, #1
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	3b01      	subs	r3, #1
 8001b98:	b29a      	uxth	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d03a      	beq.n	8001c1e <HAL_I2C_Mem_Read+0x202>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d136      	bne.n	8001c1e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001bb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb2:	68f8      	ldr	r0, [r7, #12]
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	0013      	movs	r3, r2
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2180      	movs	r1, #128	; 0x80
 8001bbe:	f000 f8e5 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 8001bc2:	1e03      	subs	r3, r0, #0
 8001bc4:	d001      	beq.n	8001bca <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e053      	b.n	8001c72 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d911      	bls.n	8001bf8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	22ff      	movs	r2, #255	; 0xff
 8001bd8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bde:	b2da      	uxtb	r2, r3
 8001be0:	2380      	movs	r3, #128	; 0x80
 8001be2:	045c      	lsls	r4, r3, #17
 8001be4:	230a      	movs	r3, #10
 8001be6:	18fb      	adds	r3, r7, r3
 8001be8:	8819      	ldrh	r1, [r3, #0]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	2300      	movs	r3, #0
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	0023      	movs	r3, r4
 8001bf2:	f000 f9ff 	bl	8001ff4 <I2C_TransferConfig>
 8001bf6:	e012      	b.n	8001c1e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29a      	uxth	r2, r3
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	2380      	movs	r3, #128	; 0x80
 8001c0a:	049c      	lsls	r4, r3, #18
 8001c0c:	230a      	movs	r3, #10
 8001c0e:	18fb      	adds	r3, r7, r3
 8001c10:	8819      	ldrh	r1, [r3, #0]
 8001c12:	68f8      	ldr	r0, [r7, #12]
 8001c14:	2300      	movs	r3, #0
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	0023      	movs	r3, r4
 8001c1a:	f000 f9eb 	bl	8001ff4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d194      	bne.n	8001b52 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	0018      	movs	r0, r3
 8001c30:	f000 f92a 	bl	8001e88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c34:	1e03      	subs	r3, r0, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e01a      	b.n	8001c72 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2220      	movs	r2, #32
 8001c42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685a      	ldr	r2, [r3, #4]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	490c      	ldr	r1, [pc, #48]	; (8001c80 <HAL_I2C_Mem_Read+0x264>)
 8001c50:	400a      	ands	r2, r1
 8001c52:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	2241      	movs	r2, #65	; 0x41
 8001c58:	2120      	movs	r1, #32
 8001c5a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2242      	movs	r2, #66	; 0x42
 8001c60:	2100      	movs	r1, #0
 8001c62:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2240      	movs	r2, #64	; 0x40
 8001c68:	2100      	movs	r1, #0
 8001c6a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	e000      	b.n	8001c72 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001c70:	2302      	movs	r3, #2
  }
}
 8001c72:	0018      	movs	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b007      	add	sp, #28
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	80002400 	.word	0x80002400
 8001c80:	fe00e800 	.word	0xfe00e800

08001c84 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001c84:	b5b0      	push	{r4, r5, r7, lr}
 8001c86:	b086      	sub	sp, #24
 8001c88:	af02      	add	r7, sp, #8
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	000c      	movs	r4, r1
 8001c8e:	0010      	movs	r0, r2
 8001c90:	0019      	movs	r1, r3
 8001c92:	250a      	movs	r5, #10
 8001c94:	197b      	adds	r3, r7, r5
 8001c96:	1c22      	adds	r2, r4, #0
 8001c98:	801a      	strh	r2, [r3, #0]
 8001c9a:	2308      	movs	r3, #8
 8001c9c:	18fb      	adds	r3, r7, r3
 8001c9e:	1c02      	adds	r2, r0, #0
 8001ca0:	801a      	strh	r2, [r3, #0]
 8001ca2:	1dbb      	adds	r3, r7, #6
 8001ca4:	1c0a      	adds	r2, r1, #0
 8001ca6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001ca8:	1dbb      	adds	r3, r7, #6
 8001caa:	881b      	ldrh	r3, [r3, #0]
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	197b      	adds	r3, r7, r5
 8001cb0:	8819      	ldrh	r1, [r3, #0]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <I2C_RequestMemoryRead+0xc0>)
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	f000 f99b 	bl	8001ff4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cbe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc0:	6a39      	ldr	r1, [r7, #32]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f000 f8a0 	bl	8001e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001cca:	1e03      	subs	r3, r0, #0
 8001ccc:	d001      	beq.n	8001cd2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e033      	b.n	8001d3a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001cd2:	1dbb      	adds	r3, r7, #6
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d107      	bne.n	8001cea <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001cda:	2308      	movs	r3, #8
 8001cdc:	18fb      	adds	r3, r7, r3
 8001cde:	881b      	ldrh	r3, [r3, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
 8001ce8:	e019      	b.n	8001d1e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001cea:	2308      	movs	r3, #8
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	0a1b      	lsrs	r3, r3, #8
 8001cf2:	b29b      	uxth	r3, r3
 8001cf4:	b2da      	uxtb	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cfe:	6a39      	ldr	r1, [r7, #32]
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	0018      	movs	r0, r3
 8001d04:	f000 f881 	bl	8001e0a <I2C_WaitOnTXISFlagUntilTimeout>
 8001d08:	1e03      	subs	r3, r0, #0
 8001d0a:	d001      	beq.n	8001d10 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e014      	b.n	8001d3a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d10:	2308      	movs	r3, #8
 8001d12:	18fb      	adds	r3, r7, r3
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	b2da      	uxtb	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001d1e:	6a3a      	ldr	r2, [r7, #32]
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d24:	9300      	str	r3, [sp, #0]
 8001d26:	0013      	movs	r3, r2
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2140      	movs	r1, #64	; 0x40
 8001d2c:	f000 f82e 	bl	8001d8c <I2C_WaitOnFlagUntilTimeout>
 8001d30:	1e03      	subs	r3, r0, #0
 8001d32:	d001      	beq.n	8001d38 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	b004      	add	sp, #16
 8001d40:	bdb0      	pop	{r4, r5, r7, pc}
 8001d42:	46c0      	nop			; (mov r8, r8)
 8001d44:	80002000 	.word	0x80002000

08001d48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	2202      	movs	r2, #2
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d103      	bne.n	8001d66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2200      	movs	r2, #0
 8001d64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	4013      	ands	r3, r2
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d007      	beq.n	8001d84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2101      	movs	r1, #1
 8001d80:	430a      	orrs	r2, r1
 8001d82:	619a      	str	r2, [r3, #24]
  }
}
 8001d84:	46c0      	nop			; (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	1dfb      	adds	r3, r7, #7
 8001d9a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d9c:	e021      	b.n	8001de2 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	d01e      	beq.n	8001de2 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001da4:	f7ff fad8 	bl	8001358 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d302      	bcc.n	8001dba <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d113      	bne.n	8001de2 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	2220      	movs	r2, #32
 8001dc0:	431a      	orrs	r2, r3
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2241      	movs	r2, #65	; 0x41
 8001dca:	2120      	movs	r1, #32
 8001dcc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2242      	movs	r2, #66	; 0x42
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2240      	movs	r2, #64	; 0x40
 8001dda:	2100      	movs	r1, #0
 8001ddc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e00f      	b.n	8001e02 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	68ba      	ldr	r2, [r7, #8]
 8001dea:	4013      	ands	r3, r2
 8001dec:	68ba      	ldr	r2, [r7, #8]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	425a      	negs	r2, r3
 8001df2:	4153      	adcs	r3, r2
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	001a      	movs	r2, r3
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d0ce      	beq.n	8001d9e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	0018      	movs	r0, r3
 8001e04:	46bd      	mov	sp, r7
 8001e06:	b004      	add	sp, #16
 8001e08:	bd80      	pop	{r7, pc}

08001e0a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e0a:	b580      	push	{r7, lr}
 8001e0c:	b084      	sub	sp, #16
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	60f8      	str	r0, [r7, #12]
 8001e12:	60b9      	str	r1, [r7, #8]
 8001e14:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e16:	e02b      	b.n	8001e70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	68b9      	ldr	r1, [r7, #8]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 f86e 	bl	8001f00 <I2C_IsAcknowledgeFailed>
 8001e24:	1e03      	subs	r3, r0, #0
 8001e26:	d001      	beq.n	8001e2c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e029      	b.n	8001e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	d01e      	beq.n	8001e70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e32:	f7ff fa91 	bl	8001358 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	68ba      	ldr	r2, [r7, #8]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d302      	bcc.n	8001e48 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d113      	bne.n	8001e70 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	431a      	orrs	r2, r3
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2241      	movs	r2, #65	; 0x41
 8001e58:	2120      	movs	r1, #32
 8001e5a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2242      	movs	r2, #66	; 0x42
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2240      	movs	r2, #64	; 0x40
 8001e68:	2100      	movs	r1, #0
 8001e6a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e007      	b.n	8001e80 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2202      	movs	r2, #2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d1cc      	bne.n	8001e18 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
}
 8001e80:	0018      	movs	r0, r3
 8001e82:	46bd      	mov	sp, r7
 8001e84:	b004      	add	sp, #16
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001e94:	e028      	b.n	8001ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	68b9      	ldr	r1, [r7, #8]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	0018      	movs	r0, r3
 8001e9e:	f000 f82f 	bl	8001f00 <I2C_IsAcknowledgeFailed>
 8001ea2:	1e03      	subs	r3, r0, #0
 8001ea4:	d001      	beq.n	8001eaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e026      	b.n	8001ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001eaa:	f7ff fa55 	bl	8001358 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	68ba      	ldr	r2, [r7, #8]
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	d302      	bcc.n	8001ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001eba:	68bb      	ldr	r3, [r7, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d113      	bne.n	8001ee8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec4:	2220      	movs	r2, #32
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2241      	movs	r2, #65	; 0x41
 8001ed0:	2120      	movs	r1, #32
 8001ed2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2242      	movs	r2, #66	; 0x42
 8001ed8:	2100      	movs	r1, #0
 8001eda:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2240      	movs	r2, #64	; 0x40
 8001ee0:	2100      	movs	r1, #0
 8001ee2:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001ee4:	2301      	movs	r3, #1
 8001ee6:	e007      	b.n	8001ef8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2220      	movs	r2, #32
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	2b20      	cmp	r3, #32
 8001ef4:	d1cf      	bne.n	8001e96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	0018      	movs	r0, r3
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2210      	movs	r2, #16
 8001f14:	4013      	ands	r3, r2
 8001f16:	2b10      	cmp	r3, #16
 8001f18:	d164      	bne.n	8001fe4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	2380      	movs	r3, #128	; 0x80
 8001f22:	049b      	lsls	r3, r3, #18
 8001f24:	401a      	ands	r2, r3
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	049b      	lsls	r3, r3, #18
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d02b      	beq.n	8001f86 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f40:	e021      	b.n	8001f86 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	3301      	adds	r3, #1
 8001f46:	d01e      	beq.n	8001f86 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f48:	f7ff fa06 	bl	8001358 <HAL_GetTick>
 8001f4c:	0002      	movs	r2, r0
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68ba      	ldr	r2, [r7, #8]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d302      	bcc.n	8001f5e <I2C_IsAcknowledgeFailed+0x5e>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d113      	bne.n	8001f86 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f62:	2220      	movs	r2, #32
 8001f64:	431a      	orrs	r2, r3
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2241      	movs	r2, #65	; 0x41
 8001f6e:	2120      	movs	r1, #32
 8001f70:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2242      	movs	r2, #66	; 0x42
 8001f76:	2100      	movs	r1, #0
 8001f78:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	2240      	movs	r2, #64	; 0x40
 8001f7e:	2100      	movs	r1, #0
 8001f80:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e02f      	b.n	8001fe6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	4013      	ands	r3, r2
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d1d6      	bne.n	8001f42 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2210      	movs	r2, #16
 8001f9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f7ff fece 	bl	8001d48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	685a      	ldr	r2, [r3, #4]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	490e      	ldr	r1, [pc, #56]	; (8001ff0 <I2C_IsAcknowledgeFailed+0xf0>)
 8001fb8:	400a      	ands	r2, r1
 8001fba:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	431a      	orrs	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2241      	movs	r2, #65	; 0x41
 8001fcc:	2120      	movs	r1, #32
 8001fce:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2242      	movs	r2, #66	; 0x42
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2240      	movs	r2, #64	; 0x40
 8001fdc:	2100      	movs	r1, #0
 8001fde:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001fe0:	2301      	movs	r3, #1
 8001fe2:	e000      	b.n	8001fe6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	0018      	movs	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	b004      	add	sp, #16
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	fe00e800 	.word	0xfe00e800

08001ff4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001ff4:	b590      	push	{r4, r7, lr}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	0008      	movs	r0, r1
 8001ffe:	0011      	movs	r1, r2
 8002000:	607b      	str	r3, [r7, #4]
 8002002:	240a      	movs	r4, #10
 8002004:	193b      	adds	r3, r7, r4
 8002006:	1c02      	adds	r2, r0, #0
 8002008:	801a      	strh	r2, [r3, #0]
 800200a:	2009      	movs	r0, #9
 800200c:	183b      	adds	r3, r7, r0
 800200e:	1c0a      	adds	r2, r1, #0
 8002010:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	6a3a      	ldr	r2, [r7, #32]
 800201a:	0d51      	lsrs	r1, r2, #21
 800201c:	2280      	movs	r2, #128	; 0x80
 800201e:	00d2      	lsls	r2, r2, #3
 8002020:	400a      	ands	r2, r1
 8002022:	490e      	ldr	r1, [pc, #56]	; (800205c <I2C_TransferConfig+0x68>)
 8002024:	430a      	orrs	r2, r1
 8002026:	43d2      	mvns	r2, r2
 8002028:	401a      	ands	r2, r3
 800202a:	0011      	movs	r1, r2
 800202c:	193b      	adds	r3, r7, r4
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	059b      	lsls	r3, r3, #22
 8002032:	0d9a      	lsrs	r2, r3, #22
 8002034:	183b      	adds	r3, r7, r0
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	0418      	lsls	r0, r3, #16
 800203a:	23ff      	movs	r3, #255	; 0xff
 800203c:	041b      	lsls	r3, r3, #16
 800203e:	4003      	ands	r3, r0
 8002040:	431a      	orrs	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	431a      	orrs	r2, r3
 8002046:	6a3b      	ldr	r3, [r7, #32]
 8002048:	431a      	orrs	r2, r3
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	430a      	orrs	r2, r1
 8002050:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b005      	add	sp, #20
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	03ff63ff 	.word	0x03ff63ff

08002060 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b082      	sub	sp, #8
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2241      	movs	r2, #65	; 0x41
 800206e:	5c9b      	ldrb	r3, [r3, r2]
 8002070:	b2db      	uxtb	r3, r3
 8002072:	2b20      	cmp	r3, #32
 8002074:	d138      	bne.n	80020e8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2240      	movs	r2, #64	; 0x40
 800207a:	5c9b      	ldrb	r3, [r3, r2]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d101      	bne.n	8002084 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002080:	2302      	movs	r3, #2
 8002082:	e032      	b.n	80020ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2240      	movs	r2, #64	; 0x40
 8002088:	2101      	movs	r1, #1
 800208a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2241      	movs	r2, #65	; 0x41
 8002090:	2124      	movs	r1, #36	; 0x24
 8002092:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681a      	ldr	r2, [r3, #0]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	438a      	bics	r2, r1
 80020a2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4911      	ldr	r1, [pc, #68]	; (80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80020b0:	400a      	ands	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6819      	ldr	r1, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2101      	movs	r1, #1
 80020d0:	430a      	orrs	r2, r1
 80020d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2241      	movs	r2, #65	; 0x41
 80020d8:	2120      	movs	r1, #32
 80020da:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2240      	movs	r2, #64	; 0x40
 80020e0:	2100      	movs	r1, #0
 80020e2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80020e4:	2300      	movs	r3, #0
 80020e6:	e000      	b.n	80020ea <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80020e8:	2302      	movs	r3, #2
  }
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b002      	add	sp, #8
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	ffffefff 	.word	0xffffefff

080020f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2241      	movs	r2, #65	; 0x41
 8002106:	5c9b      	ldrb	r3, [r3, r2]
 8002108:	b2db      	uxtb	r3, r3
 800210a:	2b20      	cmp	r3, #32
 800210c:	d139      	bne.n	8002182 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	5c9b      	ldrb	r3, [r3, r2]
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002118:	2302      	movs	r3, #2
 800211a:	e033      	b.n	8002184 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2240      	movs	r2, #64	; 0x40
 8002120:	2101      	movs	r1, #1
 8002122:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2241      	movs	r2, #65	; 0x41
 8002128:	2124      	movs	r1, #36	; 0x24
 800212a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2101      	movs	r1, #1
 8002138:	438a      	bics	r2, r1
 800213a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4a11      	ldr	r2, [pc, #68]	; (800218c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002148:	4013      	ands	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	021b      	lsls	r3, r3, #8
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2101      	movs	r1, #1
 800216a:	430a      	orrs	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2241      	movs	r2, #65	; 0x41
 8002172:	2120      	movs	r1, #32
 8002174:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2240      	movs	r2, #64	; 0x40
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800217e:	2300      	movs	r3, #0
 8002180:	e000      	b.n	8002184 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
  }
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	fffff0ff 	.word	0xfffff0ff

08002190 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002190:	b5b0      	push	{r4, r5, r7, lr}
 8002192:	b08a      	sub	sp, #40	; 0x28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d102      	bne.n	80021a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	f000 fb6c 	bl	800287c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021a4:	4bc8      	ldr	r3, [pc, #800]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	220c      	movs	r2, #12
 80021aa:	4013      	ands	r3, r2
 80021ac:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ae:	4bc6      	ldr	r3, [pc, #792]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	2380      	movs	r3, #128	; 0x80
 80021b4:	025b      	lsls	r3, r3, #9
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2201      	movs	r2, #1
 80021c0:	4013      	ands	r3, r2
 80021c2:	d100      	bne.n	80021c6 <HAL_RCC_OscConfig+0x36>
 80021c4:	e07d      	b.n	80022c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	2b08      	cmp	r3, #8
 80021ca:	d007      	beq.n	80021dc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	2b0c      	cmp	r3, #12
 80021d0:	d112      	bne.n	80021f8 <HAL_RCC_OscConfig+0x68>
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	2380      	movs	r3, #128	; 0x80
 80021d6:	025b      	lsls	r3, r3, #9
 80021d8:	429a      	cmp	r2, r3
 80021da:	d10d      	bne.n	80021f8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	4bba      	ldr	r3, [pc, #744]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2380      	movs	r3, #128	; 0x80
 80021e2:	029b      	lsls	r3, r3, #10
 80021e4:	4013      	ands	r3, r2
 80021e6:	d100      	bne.n	80021ea <HAL_RCC_OscConfig+0x5a>
 80021e8:	e06a      	b.n	80022c0 <HAL_RCC_OscConfig+0x130>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d166      	bne.n	80022c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	f000 fb42 	bl	800287c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	025b      	lsls	r3, r3, #9
 8002200:	429a      	cmp	r2, r3
 8002202:	d107      	bne.n	8002214 <HAL_RCC_OscConfig+0x84>
 8002204:	4bb0      	ldr	r3, [pc, #704]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4baf      	ldr	r3, [pc, #700]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800220a:	2180      	movs	r1, #128	; 0x80
 800220c:	0249      	lsls	r1, r1, #9
 800220e:	430a      	orrs	r2, r1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e027      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	23a0      	movs	r3, #160	; 0xa0
 800221a:	02db      	lsls	r3, r3, #11
 800221c:	429a      	cmp	r2, r3
 800221e:	d10e      	bne.n	800223e <HAL_RCC_OscConfig+0xae>
 8002220:	4ba9      	ldr	r3, [pc, #676]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	4ba8      	ldr	r3, [pc, #672]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002226:	2180      	movs	r1, #128	; 0x80
 8002228:	02c9      	lsls	r1, r1, #11
 800222a:	430a      	orrs	r2, r1
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	4ba6      	ldr	r3, [pc, #664]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4ba5      	ldr	r3, [pc, #660]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002234:	2180      	movs	r1, #128	; 0x80
 8002236:	0249      	lsls	r1, r1, #9
 8002238:	430a      	orrs	r2, r1
 800223a:	601a      	str	r2, [r3, #0]
 800223c:	e012      	b.n	8002264 <HAL_RCC_OscConfig+0xd4>
 800223e:	4ba2      	ldr	r3, [pc, #648]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	4ba1      	ldr	r3, [pc, #644]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002244:	49a1      	ldr	r1, [pc, #644]	; (80024cc <HAL_RCC_OscConfig+0x33c>)
 8002246:	400a      	ands	r2, r1
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	4b9f      	ldr	r3, [pc, #636]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	2380      	movs	r3, #128	; 0x80
 8002250:	025b      	lsls	r3, r3, #9
 8002252:	4013      	ands	r3, r2
 8002254:	60fb      	str	r3, [r7, #12]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4b9b      	ldr	r3, [pc, #620]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	4b9a      	ldr	r3, [pc, #616]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800225e:	499c      	ldr	r1, [pc, #624]	; (80024d0 <HAL_RCC_OscConfig+0x340>)
 8002260:	400a      	ands	r2, r1
 8002262:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d014      	beq.n	8002296 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800226c:	f7ff f874 	bl	8001358 <HAL_GetTick>
 8002270:	0003      	movs	r3, r0
 8002272:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002274:	e008      	b.n	8002288 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002276:	f7ff f86f 	bl	8001358 <HAL_GetTick>
 800227a:	0002      	movs	r2, r0
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	1ad3      	subs	r3, r2, r3
 8002280:	2b64      	cmp	r3, #100	; 0x64
 8002282:	d901      	bls.n	8002288 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002284:	2303      	movs	r3, #3
 8002286:	e2f9      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002288:	4b8f      	ldr	r3, [pc, #572]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	029b      	lsls	r3, r3, #10
 8002290:	4013      	ands	r3, r2
 8002292:	d0f0      	beq.n	8002276 <HAL_RCC_OscConfig+0xe6>
 8002294:	e015      	b.n	80022c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002296:	f7ff f85f 	bl	8001358 <HAL_GetTick>
 800229a:	0003      	movs	r3, r0
 800229c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f85a 	bl	8001358 <HAL_GetTick>
 80022a4:	0002      	movs	r2, r0
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e2e4      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80022b2:	4b85      	ldr	r3, [pc, #532]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	2380      	movs	r3, #128	; 0x80
 80022b8:	029b      	lsls	r3, r3, #10
 80022ba:	4013      	ands	r3, r2
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0x110>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2202      	movs	r2, #2
 80022c8:	4013      	ands	r3, r2
 80022ca:	d100      	bne.n	80022ce <HAL_RCC_OscConfig+0x13e>
 80022cc:	e099      	b.n	8002402 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80022d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d6:	2220      	movs	r2, #32
 80022d8:	4013      	ands	r3, r2
 80022da:	d009      	beq.n	80022f0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80022dc:	4b7a      	ldr	r3, [pc, #488]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4b79      	ldr	r3, [pc, #484]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80022e2:	2120      	movs	r1, #32
 80022e4:	430a      	orrs	r2, r1
 80022e6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	2220      	movs	r2, #32
 80022ec:	4393      	bics	r3, r2
 80022ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	2b0c      	cmp	r3, #12
 80022fa:	d13e      	bne.n	800237a <HAL_RCC_OscConfig+0x1ea>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d13b      	bne.n	800237a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002302:	4b71      	ldr	r3, [pc, #452]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	2204      	movs	r2, #4
 8002308:	4013      	ands	r3, r2
 800230a:	d004      	beq.n	8002316 <HAL_RCC_OscConfig+0x186>
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	2b00      	cmp	r3, #0
 8002310:	d101      	bne.n	8002316 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e2b2      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002316:	4b6c      	ldr	r3, [pc, #432]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4a6e      	ldr	r2, [pc, #440]	; (80024d4 <HAL_RCC_OscConfig+0x344>)
 800231c:	4013      	ands	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	691b      	ldr	r3, [r3, #16]
 8002324:	021a      	lsls	r2, r3, #8
 8002326:	4b68      	ldr	r3, [pc, #416]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002328:	430a      	orrs	r2, r1
 800232a:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800232c:	4b66      	ldr	r3, [pc, #408]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2209      	movs	r2, #9
 8002332:	4393      	bics	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	4b64      	ldr	r3, [pc, #400]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002338:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233a:	430a      	orrs	r2, r1
 800233c:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800233e:	f000 fbeb 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002342:	0001      	movs	r1, r0
 8002344:	4b60      	ldr	r3, [pc, #384]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	220f      	movs	r2, #15
 800234c:	4013      	ands	r3, r2
 800234e:	4a62      	ldr	r2, [pc, #392]	; (80024d8 <HAL_RCC_OscConfig+0x348>)
 8002350:	5cd3      	ldrb	r3, [r2, r3]
 8002352:	000a      	movs	r2, r1
 8002354:	40da      	lsrs	r2, r3
 8002356:	4b61      	ldr	r3, [pc, #388]	; (80024dc <HAL_RCC_OscConfig+0x34c>)
 8002358:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800235a:	4b61      	ldr	r3, [pc, #388]	; (80024e0 <HAL_RCC_OscConfig+0x350>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2513      	movs	r5, #19
 8002360:	197c      	adds	r4, r7, r5
 8002362:	0018      	movs	r0, r3
 8002364:	f7fe ffb2 	bl	80012cc <HAL_InitTick>
 8002368:	0003      	movs	r3, r0
 800236a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800236c:	197b      	adds	r3, r7, r5
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d046      	beq.n	8002402 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002374:	197b      	adds	r3, r7, r5
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	e280      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800237a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237c:	2b00      	cmp	r3, #0
 800237e:	d027      	beq.n	80023d0 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002380:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2209      	movs	r2, #9
 8002386:	4393      	bics	r3, r2
 8002388:	0019      	movs	r1, r3
 800238a:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800238c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800238e:	430a      	orrs	r2, r1
 8002390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7fe ffe1 	bl	8001358 <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800239c:	f7fe ffdc 	bl	8001358 <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e266      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023ae:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2204      	movs	r2, #4
 80023b4:	4013      	ands	r3, r2
 80023b6:	d0f1      	beq.n	800239c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023b8:	4b43      	ldr	r3, [pc, #268]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a45      	ldr	r2, [pc, #276]	; (80024d4 <HAL_RCC_OscConfig+0x344>)
 80023be:	4013      	ands	r3, r2
 80023c0:	0019      	movs	r1, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	691b      	ldr	r3, [r3, #16]
 80023c6:	021a      	lsls	r2, r3, #8
 80023c8:	4b3f      	ldr	r3, [pc, #252]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
 80023ce:	e018      	b.n	8002402 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d0:	4b3d      	ldr	r3, [pc, #244]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	4b3c      	ldr	r3, [pc, #240]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80023d6:	2101      	movs	r1, #1
 80023d8:	438a      	bics	r2, r1
 80023da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023dc:	f7fe ffbc 	bl	8001358 <HAL_GetTick>
 80023e0:	0003      	movs	r3, r0
 80023e2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023e6:	f7fe ffb7 	bl	8001358 <HAL_GetTick>
 80023ea:	0002      	movs	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e241      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80023f8:	4b33      	ldr	r3, [pc, #204]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2204      	movs	r2, #4
 80023fe:	4013      	ands	r3, r2
 8002400:	d1f1      	bne.n	80023e6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2210      	movs	r2, #16
 8002408:	4013      	ands	r3, r2
 800240a:	d100      	bne.n	800240e <HAL_RCC_OscConfig+0x27e>
 800240c:	e0a1      	b.n	8002552 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d140      	bne.n	8002496 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002414:	4b2c      	ldr	r3, [pc, #176]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002416:	681a      	ldr	r2, [r3, #0]
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d005      	beq.n	800242c <HAL_RCC_OscConfig+0x29c>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	699b      	ldr	r3, [r3, #24]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e227      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800242c:	4b26      	ldr	r3, [pc, #152]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a2c      	ldr	r2, [pc, #176]	; (80024e4 <HAL_RCC_OscConfig+0x354>)
 8002432:	4013      	ands	r3, r2
 8002434:	0019      	movs	r1, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a1a      	ldr	r2, [r3, #32]
 800243a:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 800243c:	430a      	orrs	r2, r1
 800243e:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	0a19      	lsrs	r1, r3, #8
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
 800244c:	061a      	lsls	r2, r3, #24
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002450:	430a      	orrs	r2, r1
 8002452:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a1b      	ldr	r3, [r3, #32]
 8002458:	0b5b      	lsrs	r3, r3, #13
 800245a:	3301      	adds	r3, #1
 800245c:	2280      	movs	r2, #128	; 0x80
 800245e:	0212      	lsls	r2, r2, #8
 8002460:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	091b      	lsrs	r3, r3, #4
 8002468:	210f      	movs	r1, #15
 800246a:	400b      	ands	r3, r1
 800246c:	491a      	ldr	r1, [pc, #104]	; (80024d8 <HAL_RCC_OscConfig+0x348>)
 800246e:	5ccb      	ldrb	r3, [r1, r3]
 8002470:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002472:	4b1a      	ldr	r3, [pc, #104]	; (80024dc <HAL_RCC_OscConfig+0x34c>)
 8002474:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002476:	4b1a      	ldr	r3, [pc, #104]	; (80024e0 <HAL_RCC_OscConfig+0x350>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2513      	movs	r5, #19
 800247c:	197c      	adds	r4, r7, r5
 800247e:	0018      	movs	r0, r3
 8002480:	f7fe ff24 	bl	80012cc <HAL_InitTick>
 8002484:	0003      	movs	r3, r0
 8002486:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002488:	197b      	adds	r3, r7, r5
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d060      	beq.n	8002552 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002490:	197b      	adds	r3, r7, r5
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	e1f2      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d03f      	beq.n	800251e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800249e:	4b0a      	ldr	r3, [pc, #40]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_OscConfig+0x338>)
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	0049      	lsls	r1, r1, #1
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7fe ff54 	bl	8001358 <HAL_GetTick>
 80024b0:	0003      	movs	r3, r0
 80024b2:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024b4:	e018      	b.n	80024e8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80024b6:	f7fe ff4f 	bl	8001358 <HAL_GetTick>
 80024ba:	0002      	movs	r2, r0
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b02      	cmp	r3, #2
 80024c2:	d911      	bls.n	80024e8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	e1d9      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
 80024c8:	40021000 	.word	0x40021000
 80024cc:	fffeffff 	.word	0xfffeffff
 80024d0:	fffbffff 	.word	0xfffbffff
 80024d4:	ffffe0ff 	.word	0xffffe0ff
 80024d8:	08005b74 	.word	0x08005b74
 80024dc:	20000004 	.word	0x20000004
 80024e0:	20000008 	.word	0x20000008
 80024e4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80024e8:	4bc9      	ldr	r3, [pc, #804]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	2380      	movs	r3, #128	; 0x80
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	4013      	ands	r3, r2
 80024f2:	d0e0      	beq.n	80024b6 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024f4:	4bc6      	ldr	r3, [pc, #792]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	4ac6      	ldr	r2, [pc, #792]	; (8002814 <HAL_RCC_OscConfig+0x684>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6a1a      	ldr	r2, [r3, #32]
 8002502:	4bc3      	ldr	r3, [pc, #780]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002504:	430a      	orrs	r2, r1
 8002506:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002508:	4bc1      	ldr	r3, [pc, #772]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	021b      	lsls	r3, r3, #8
 800250e:	0a19      	lsrs	r1, r3, #8
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	061a      	lsls	r2, r3, #24
 8002516:	4bbe      	ldr	r3, [pc, #760]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002518:	430a      	orrs	r2, r1
 800251a:	605a      	str	r2, [r3, #4]
 800251c:	e019      	b.n	8002552 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800251e:	4bbc      	ldr	r3, [pc, #752]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	4bbb      	ldr	r3, [pc, #748]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002524:	49bc      	ldr	r1, [pc, #752]	; (8002818 <HAL_RCC_OscConfig+0x688>)
 8002526:	400a      	ands	r2, r1
 8002528:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252a:	f7fe ff15 	bl	8001358 <HAL_GetTick>
 800252e:	0003      	movs	r3, r0
 8002530:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002534:	f7fe ff10 	bl	8001358 <HAL_GetTick>
 8002538:	0002      	movs	r2, r0
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e19a      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002546:	4bb2      	ldr	r3, [pc, #712]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	2380      	movs	r3, #128	; 0x80
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4013      	ands	r3, r2
 8002550:	d1f0      	bne.n	8002534 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2208      	movs	r2, #8
 8002558:	4013      	ands	r3, r2
 800255a:	d036      	beq.n	80025ca <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	695b      	ldr	r3, [r3, #20]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d019      	beq.n	8002598 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002564:	4baa      	ldr	r3, [pc, #680]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002566:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002568:	4ba9      	ldr	r3, [pc, #676]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800256a:	2101      	movs	r1, #1
 800256c:	430a      	orrs	r2, r1
 800256e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002570:	f7fe fef2 	bl	8001358 <HAL_GetTick>
 8002574:	0003      	movs	r3, r0
 8002576:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800257a:	f7fe feed 	bl	8001358 <HAL_GetTick>
 800257e:	0002      	movs	r2, r0
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e177      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800258c:	4ba0      	ldr	r3, [pc, #640]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800258e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002590:	2202      	movs	r2, #2
 8002592:	4013      	ands	r3, r2
 8002594:	d0f1      	beq.n	800257a <HAL_RCC_OscConfig+0x3ea>
 8002596:	e018      	b.n	80025ca <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002598:	4b9d      	ldr	r3, [pc, #628]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800259a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800259c:	4b9c      	ldr	r3, [pc, #624]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800259e:	2101      	movs	r1, #1
 80025a0:	438a      	bics	r2, r1
 80025a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a4:	f7fe fed8 	bl	8001358 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ae:	f7fe fed3 	bl	8001358 <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e15d      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80025c0:	4b93      	ldr	r3, [pc, #588]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80025c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025c4:	2202      	movs	r2, #2
 80025c6:	4013      	ands	r3, r2
 80025c8:	d1f1      	bne.n	80025ae <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2204      	movs	r2, #4
 80025d0:	4013      	ands	r3, r2
 80025d2:	d100      	bne.n	80025d6 <HAL_RCC_OscConfig+0x446>
 80025d4:	e0ae      	b.n	8002734 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025d6:	2023      	movs	r0, #35	; 0x23
 80025d8:	183b      	adds	r3, r7, r0
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025de:	4b8c      	ldr	r3, [pc, #560]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80025e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025e2:	2380      	movs	r3, #128	; 0x80
 80025e4:	055b      	lsls	r3, r3, #21
 80025e6:	4013      	ands	r3, r2
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ea:	4b89      	ldr	r3, [pc, #548]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80025ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025ee:	4b88      	ldr	r3, [pc, #544]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80025f0:	2180      	movs	r1, #128	; 0x80
 80025f2:	0549      	lsls	r1, r1, #21
 80025f4:	430a      	orrs	r2, r1
 80025f6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80025f8:	183b      	adds	r3, r7, r0
 80025fa:	2201      	movs	r2, #1
 80025fc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fe:	4b87      	ldr	r3, [pc, #540]	; (800281c <HAL_RCC_OscConfig+0x68c>)
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	2380      	movs	r3, #128	; 0x80
 8002604:	005b      	lsls	r3, r3, #1
 8002606:	4013      	ands	r3, r2
 8002608:	d11a      	bne.n	8002640 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800260a:	4b84      	ldr	r3, [pc, #528]	; (800281c <HAL_RCC_OscConfig+0x68c>)
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	4b83      	ldr	r3, [pc, #524]	; (800281c <HAL_RCC_OscConfig+0x68c>)
 8002610:	2180      	movs	r1, #128	; 0x80
 8002612:	0049      	lsls	r1, r1, #1
 8002614:	430a      	orrs	r2, r1
 8002616:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002618:	f7fe fe9e 	bl	8001358 <HAL_GetTick>
 800261c:	0003      	movs	r3, r0
 800261e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002622:	f7fe fe99 	bl	8001358 <HAL_GetTick>
 8002626:	0002      	movs	r2, r0
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b64      	cmp	r3, #100	; 0x64
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e123      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002634:	4b79      	ldr	r3, [pc, #484]	; (800281c <HAL_RCC_OscConfig+0x68c>)
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	2380      	movs	r3, #128	; 0x80
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	4013      	ands	r3, r2
 800263e:	d0f0      	beq.n	8002622 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	2380      	movs	r3, #128	; 0x80
 8002646:	005b      	lsls	r3, r3, #1
 8002648:	429a      	cmp	r2, r3
 800264a:	d107      	bne.n	800265c <HAL_RCC_OscConfig+0x4cc>
 800264c:	4b70      	ldr	r3, [pc, #448]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800264e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002650:	4b6f      	ldr	r3, [pc, #444]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002652:	2180      	movs	r1, #128	; 0x80
 8002654:	0049      	lsls	r1, r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	651a      	str	r2, [r3, #80]	; 0x50
 800265a:	e031      	b.n	80026c0 <HAL_RCC_OscConfig+0x530>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d10c      	bne.n	800267e <HAL_RCC_OscConfig+0x4ee>
 8002664:	4b6a      	ldr	r3, [pc, #424]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002668:	4b69      	ldr	r3, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800266a:	496b      	ldr	r1, [pc, #428]	; (8002818 <HAL_RCC_OscConfig+0x688>)
 800266c:	400a      	ands	r2, r1
 800266e:	651a      	str	r2, [r3, #80]	; 0x50
 8002670:	4b67      	ldr	r3, [pc, #412]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002672:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002674:	4b66      	ldr	r3, [pc, #408]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002676:	496a      	ldr	r1, [pc, #424]	; (8002820 <HAL_RCC_OscConfig+0x690>)
 8002678:	400a      	ands	r2, r1
 800267a:	651a      	str	r2, [r3, #80]	; 0x50
 800267c:	e020      	b.n	80026c0 <HAL_RCC_OscConfig+0x530>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	689a      	ldr	r2, [r3, #8]
 8002682:	23a0      	movs	r3, #160	; 0xa0
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	429a      	cmp	r2, r3
 8002688:	d10e      	bne.n	80026a8 <HAL_RCC_OscConfig+0x518>
 800268a:	4b61      	ldr	r3, [pc, #388]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800268c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800268e:	4b60      	ldr	r3, [pc, #384]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002690:	2180      	movs	r1, #128	; 0x80
 8002692:	00c9      	lsls	r1, r1, #3
 8002694:	430a      	orrs	r2, r1
 8002696:	651a      	str	r2, [r3, #80]	; 0x50
 8002698:	4b5d      	ldr	r3, [pc, #372]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800269a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800269c:	4b5c      	ldr	r3, [pc, #368]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800269e:	2180      	movs	r1, #128	; 0x80
 80026a0:	0049      	lsls	r1, r1, #1
 80026a2:	430a      	orrs	r2, r1
 80026a4:	651a      	str	r2, [r3, #80]	; 0x50
 80026a6:	e00b      	b.n	80026c0 <HAL_RCC_OscConfig+0x530>
 80026a8:	4b59      	ldr	r3, [pc, #356]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80026aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ac:	4b58      	ldr	r3, [pc, #352]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80026ae:	495a      	ldr	r1, [pc, #360]	; (8002818 <HAL_RCC_OscConfig+0x688>)
 80026b0:	400a      	ands	r2, r1
 80026b2:	651a      	str	r2, [r3, #80]	; 0x50
 80026b4:	4b56      	ldr	r3, [pc, #344]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80026b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026b8:	4b55      	ldr	r3, [pc, #340]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80026ba:	4959      	ldr	r1, [pc, #356]	; (8002820 <HAL_RCC_OscConfig+0x690>)
 80026bc:	400a      	ands	r2, r1
 80026be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d015      	beq.n	80026f4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026c8:	f7fe fe46 	bl	8001358 <HAL_GetTick>
 80026cc:	0003      	movs	r3, r0
 80026ce:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026d0:	e009      	b.n	80026e6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d2:	f7fe fe41 	bl	8001358 <HAL_GetTick>
 80026d6:	0002      	movs	r2, r0
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	4a51      	ldr	r2, [pc, #324]	; (8002824 <HAL_RCC_OscConfig+0x694>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d901      	bls.n	80026e6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80026e2:	2303      	movs	r3, #3
 80026e4:	e0ca      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80026e6:	4b4a      	ldr	r3, [pc, #296]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80026e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	4013      	ands	r3, r2
 80026f0:	d0ef      	beq.n	80026d2 <HAL_RCC_OscConfig+0x542>
 80026f2:	e014      	b.n	800271e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fe30 	bl	8001358 <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80026fc:	e009      	b.n	8002712 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7fe fe2b 	bl	8001358 <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	4a46      	ldr	r2, [pc, #280]	; (8002824 <HAL_RCC_OscConfig+0x694>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e0b4      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002712:	4b3f      	ldr	r3, [pc, #252]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002714:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002716:	2380      	movs	r3, #128	; 0x80
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	4013      	ands	r3, r2
 800271c:	d1ef      	bne.n	80026fe <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800271e:	2323      	movs	r3, #35	; 0x23
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d105      	bne.n	8002734 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002728:	4b39      	ldr	r3, [pc, #228]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800272a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272c:	4b38      	ldr	r3, [pc, #224]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800272e:	493e      	ldr	r1, [pc, #248]	; (8002828 <HAL_RCC_OscConfig+0x698>)
 8002730:	400a      	ands	r2, r1
 8002732:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002738:	2b00      	cmp	r3, #0
 800273a:	d100      	bne.n	800273e <HAL_RCC_OscConfig+0x5ae>
 800273c:	e09d      	b.n	800287a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	2b0c      	cmp	r3, #12
 8002742:	d100      	bne.n	8002746 <HAL_RCC_OscConfig+0x5b6>
 8002744:	e076      	b.n	8002834 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	2b02      	cmp	r3, #2
 800274c:	d145      	bne.n	80027da <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b30      	ldr	r3, [pc, #192]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	4b2f      	ldr	r3, [pc, #188]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002754:	4935      	ldr	r1, [pc, #212]	; (800282c <HAL_RCC_OscConfig+0x69c>)
 8002756:	400a      	ands	r2, r1
 8002758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275a:	f7fe fdfd 	bl	8001358 <HAL_GetTick>
 800275e:	0003      	movs	r3, r0
 8002760:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe fdf8 	bl	8001358 <HAL_GetTick>
 8002768:	0002      	movs	r2, r0
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e082      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002776:	4b26      	ldr	r3, [pc, #152]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	2380      	movs	r3, #128	; 0x80
 800277c:	049b      	lsls	r3, r3, #18
 800277e:	4013      	ands	r3, r2
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002782:	4b23      	ldr	r3, [pc, #140]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	4a2a      	ldr	r2, [pc, #168]	; (8002830 <HAL_RCC_OscConfig+0x6a0>)
 8002788:	4013      	ands	r3, r2
 800278a:	0019      	movs	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	431a      	orrs	r2, r3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	431a      	orrs	r2, r3
 800279c:	4b1c      	ldr	r3, [pc, #112]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 800279e:	430a      	orrs	r2, r1
 80027a0:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027a2:	4b1b      	ldr	r3, [pc, #108]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	4b1a      	ldr	r3, [pc, #104]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80027a8:	2180      	movs	r1, #128	; 0x80
 80027aa:	0449      	lsls	r1, r1, #17
 80027ac:	430a      	orrs	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7fe fdd2 	bl	8001358 <HAL_GetTick>
 80027b4:	0003      	movs	r3, r0
 80027b6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe fdcd 	bl	8001358 <HAL_GetTick>
 80027be:	0002      	movs	r2, r0
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e057      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80027cc:	4b10      	ldr	r3, [pc, #64]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	2380      	movs	r3, #128	; 0x80
 80027d2:	049b      	lsls	r3, r3, #18
 80027d4:	4013      	ands	r3, r2
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x62a>
 80027d8:	e04f      	b.n	800287a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	4b0c      	ldr	r3, [pc, #48]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 80027e0:	4912      	ldr	r1, [pc, #72]	; (800282c <HAL_RCC_OscConfig+0x69c>)
 80027e2:	400a      	ands	r2, r1
 80027e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e6:	f7fe fdb7 	bl	8001358 <HAL_GetTick>
 80027ea:	0003      	movs	r3, r0
 80027ec:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fdb2 	bl	8001358 <HAL_GetTick>
 80027f4:	0002      	movs	r2, r0
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e03c      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002802:	4b03      	ldr	r3, [pc, #12]	; (8002810 <HAL_RCC_OscConfig+0x680>)
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	049b      	lsls	r3, r3, #18
 800280a:	4013      	ands	r3, r2
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x660>
 800280e:	e034      	b.n	800287a <HAL_RCC_OscConfig+0x6ea>
 8002810:	40021000 	.word	0x40021000
 8002814:	ffff1fff 	.word	0xffff1fff
 8002818:	fffffeff 	.word	0xfffffeff
 800281c:	40007000 	.word	0x40007000
 8002820:	fffffbff 	.word	0xfffffbff
 8002824:	00001388 	.word	0x00001388
 8002828:	efffffff 	.word	0xefffffff
 800282c:	feffffff 	.word	0xfeffffff
 8002830:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e01d      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCC_OscConfig+0x6f4>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	025b      	lsls	r3, r3, #9
 800284c:	401a      	ands	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002852:	429a      	cmp	r2, r3
 8002854:	d10f      	bne.n	8002876 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	23f0      	movs	r3, #240	; 0xf0
 800285a:	039b      	lsls	r3, r3, #14
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d107      	bne.n	8002876 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	23c0      	movs	r3, #192	; 0xc0
 800286a:	041b      	lsls	r3, r3, #16
 800286c:	401a      	ands	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	0018      	movs	r0, r3
 800287e:	46bd      	mov	sp, r7
 8002880:	b00a      	add	sp, #40	; 0x28
 8002882:	bdb0      	pop	{r4, r5, r7, pc}
 8002884:	40021000 	.word	0x40021000

08002888 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002888:	b5b0      	push	{r4, r5, r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d101      	bne.n	800289c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e128      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800289c:	4b96      	ldr	r3, [pc, #600]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2201      	movs	r2, #1
 80028a2:	4013      	ands	r3, r2
 80028a4:	683a      	ldr	r2, [r7, #0]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d91e      	bls.n	80028e8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028aa:	4b93      	ldr	r3, [pc, #588]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2201      	movs	r2, #1
 80028b0:	4393      	bics	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	4b90      	ldr	r3, [pc, #576]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 80028b6:	683a      	ldr	r2, [r7, #0]
 80028b8:	430a      	orrs	r2, r1
 80028ba:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028bc:	f7fe fd4c 	bl	8001358 <HAL_GetTick>
 80028c0:	0003      	movs	r3, r0
 80028c2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028c4:	e009      	b.n	80028da <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c6:	f7fe fd47 	bl	8001358 <HAL_GetTick>
 80028ca:	0002      	movs	r2, r0
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	4a8a      	ldr	r2, [pc, #552]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e109      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b87      	ldr	r3, [pc, #540]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2201      	movs	r2, #1
 80028e0:	4013      	ands	r3, r2
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1ee      	bne.n	80028c6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	2202      	movs	r2, #2
 80028ee:	4013      	ands	r3, r2
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028f2:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 80028f4:	68db      	ldr	r3, [r3, #12]
 80028f6:	22f0      	movs	r2, #240	; 0xf0
 80028f8:	4393      	bics	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689a      	ldr	r2, [r3, #8]
 8002900:	4b7f      	ldr	r3, [pc, #508]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002902:	430a      	orrs	r2, r1
 8002904:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2201      	movs	r2, #1
 800290c:	4013      	ands	r3, r2
 800290e:	d100      	bne.n	8002912 <HAL_RCC_ClockConfig+0x8a>
 8002910:	e089      	b.n	8002a26 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b02      	cmp	r3, #2
 8002918:	d107      	bne.n	800292a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800291a:	4b79      	ldr	r3, [pc, #484]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	029b      	lsls	r3, r3, #10
 8002922:	4013      	ands	r3, r2
 8002924:	d120      	bne.n	8002968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e0e1      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002932:	4b73      	ldr	r3, [pc, #460]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	2380      	movs	r3, #128	; 0x80
 8002938:	049b      	lsls	r3, r3, #18
 800293a:	4013      	ands	r3, r2
 800293c:	d114      	bne.n	8002968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e0d5      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d106      	bne.n	8002958 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800294a:	4b6d      	ldr	r3, [pc, #436]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2204      	movs	r2, #4
 8002950:	4013      	ands	r3, r2
 8002952:	d109      	bne.n	8002968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0ca      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002958:	4b69      	ldr	r3, [pc, #420]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	2380      	movs	r3, #128	; 0x80
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4013      	ands	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	e0c2      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002968:	4b65      	ldr	r3, [pc, #404]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	2203      	movs	r2, #3
 800296e:	4393      	bics	r3, r2
 8002970:	0019      	movs	r1, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	4b62      	ldr	r3, [pc, #392]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002978:	430a      	orrs	r2, r1
 800297a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800297c:	f7fe fcec 	bl	8001358 <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	2b02      	cmp	r3, #2
 800298a:	d111      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800298c:	e009      	b.n	80029a2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298e:	f7fe fce3 	bl	8001358 <HAL_GetTick>
 8002992:	0002      	movs	r2, r0
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	1ad3      	subs	r3, r2, r3
 8002998:	4a58      	ldr	r2, [pc, #352]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e0a5      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80029a2:	4b57      	ldr	r3, [pc, #348]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 80029a4:	68db      	ldr	r3, [r3, #12]
 80029a6:	220c      	movs	r2, #12
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b08      	cmp	r3, #8
 80029ac:	d1ef      	bne.n	800298e <HAL_RCC_ClockConfig+0x106>
 80029ae:	e03a      	b.n	8002a26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b03      	cmp	r3, #3
 80029b6:	d111      	bne.n	80029dc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	e009      	b.n	80029ce <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029ba:	f7fe fccd 	bl	8001358 <HAL_GetTick>
 80029be:	0002      	movs	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	4a4d      	ldr	r2, [pc, #308]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e08f      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	220c      	movs	r2, #12
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b0c      	cmp	r3, #12
 80029d8:	d1ef      	bne.n	80029ba <HAL_RCC_ClockConfig+0x132>
 80029da:	e024      	b.n	8002a26 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d11b      	bne.n	8002a1c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e4:	e009      	b.n	80029fa <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e6:	f7fe fcb7 	bl	8001358 <HAL_GetTick>
 80029ea:	0002      	movs	r2, r0
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	4a42      	ldr	r2, [pc, #264]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e079      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80029fa:	4b41      	ldr	r3, [pc, #260]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	220c      	movs	r2, #12
 8002a00:	4013      	ands	r3, r2
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	d1ef      	bne.n	80029e6 <HAL_RCC_ClockConfig+0x15e>
 8002a06:	e00e      	b.n	8002a26 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a08:	f7fe fca6 	bl	8001358 <HAL_GetTick>
 8002a0c:	0002      	movs	r2, r0
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	4a3a      	ldr	r2, [pc, #232]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e068      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002a1c:	4b38      	ldr	r3, [pc, #224]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	220c      	movs	r2, #12
 8002a22:	4013      	ands	r3, r2
 8002a24:	d1f0      	bne.n	8002a08 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a26:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d21e      	bcs.n	8002a72 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	4393      	bics	r3, r2
 8002a3c:	0019      	movs	r1, r3
 8002a3e:	4b2e      	ldr	r3, [pc, #184]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 8002a40:	683a      	ldr	r2, [r7, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002a46:	f7fe fc87 	bl	8001358 <HAL_GetTick>
 8002a4a:	0003      	movs	r3, r0
 8002a4c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4e:	e009      	b.n	8002a64 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a50:	f7fe fc82 	bl	8001358 <HAL_GetTick>
 8002a54:	0002      	movs	r2, r0
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	4a28      	ldr	r2, [pc, #160]	; (8002afc <HAL_RCC_ClockConfig+0x274>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e044      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a64:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_RCC_ClockConfig+0x270>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d1ee      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2204      	movs	r2, #4
 8002a78:	4013      	ands	r3, r2
 8002a7a:	d009      	beq.n	8002a90 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b20      	ldr	r3, [pc, #128]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4a20      	ldr	r2, [pc, #128]	; (8002b04 <HAL_RCC_ClockConfig+0x27c>)
 8002a82:	4013      	ands	r3, r2
 8002a84:	0019      	movs	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2208      	movs	r2, #8
 8002a96:	4013      	ands	r3, r2
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a9a:	4b19      	ldr	r3, [pc, #100]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002a9c:	68db      	ldr	r3, [r3, #12]
 8002a9e:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_RCC_ClockConfig+0x280>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691b      	ldr	r3, [r3, #16]
 8002aa8:	00da      	lsls	r2, r3, #3
 8002aaa:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ab0:	f000 f832 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ab4:	0001      	movs	r1, r0
 8002ab6:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_RCC_ClockConfig+0x278>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	091b      	lsrs	r3, r3, #4
 8002abc:	220f      	movs	r2, #15
 8002abe:	4013      	ands	r3, r2
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <HAL_RCC_ClockConfig+0x284>)
 8002ac2:	5cd3      	ldrb	r3, [r2, r3]
 8002ac4:	000a      	movs	r2, r1
 8002ac6:	40da      	lsrs	r2, r3
 8002ac8:	4b11      	ldr	r3, [pc, #68]	; (8002b10 <HAL_RCC_ClockConfig+0x288>)
 8002aca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002acc:	4b11      	ldr	r3, [pc, #68]	; (8002b14 <HAL_RCC_ClockConfig+0x28c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	250b      	movs	r5, #11
 8002ad2:	197c      	adds	r4, r7, r5
 8002ad4:	0018      	movs	r0, r3
 8002ad6:	f7fe fbf9 	bl	80012cc <HAL_InitTick>
 8002ada:	0003      	movs	r3, r0
 8002adc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002ade:	197b      	adds	r3, r7, r5
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002ae6:	197b      	adds	r3, r7, r5
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	e000      	b.n	8002aee <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bdb0      	pop	{r4, r5, r7, pc}
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40022000 	.word	0x40022000
 8002afc:	00001388 	.word	0x00001388
 8002b00:	40021000 	.word	0x40021000
 8002b04:	fffff8ff 	.word	0xfffff8ff
 8002b08:	ffffc7ff 	.word	0xffffc7ff
 8002b0c:	08005b74 	.word	0x08005b74
 8002b10:	20000004 	.word	0x20000004
 8002b14:	20000008 	.word	0x20000008

08002b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b5b0      	push	{r4, r5, r7, lr}
 8002b1a:	b08e      	sub	sp, #56	; 0x38
 8002b1c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002b1e:	4b4c      	ldr	r3, [pc, #304]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b26:	230c      	movs	r3, #12
 8002b28:	4013      	ands	r3, r2
 8002b2a:	2b0c      	cmp	r3, #12
 8002b2c:	d014      	beq.n	8002b58 <HAL_RCC_GetSysClockFreq+0x40>
 8002b2e:	d900      	bls.n	8002b32 <HAL_RCC_GetSysClockFreq+0x1a>
 8002b30:	e07b      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x112>
 8002b32:	2b04      	cmp	r3, #4
 8002b34:	d002      	beq.n	8002b3c <HAL_RCC_GetSysClockFreq+0x24>
 8002b36:	2b08      	cmp	r3, #8
 8002b38:	d00b      	beq.n	8002b52 <HAL_RCC_GetSysClockFreq+0x3a>
 8002b3a:	e076      	b.n	8002c2a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002b3c:	4b44      	ldr	r3, [pc, #272]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2210      	movs	r2, #16
 8002b42:	4013      	ands	r3, r2
 8002b44:	d002      	beq.n	8002b4c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002b46:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002b48:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002b4a:	e07c      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002b4c:	4b42      	ldr	r3, [pc, #264]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b4e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b50:	e079      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b52:	4b41      	ldr	r3, [pc, #260]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b54:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002b56:	e076      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b5a:	0c9a      	lsrs	r2, r3, #18
 8002b5c:	230f      	movs	r3, #15
 8002b5e:	401a      	ands	r2, r3
 8002b60:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <HAL_RCC_GetSysClockFreq+0x144>)
 8002b62:	5c9b      	ldrb	r3, [r3, r2]
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b68:	0d9a      	lsrs	r2, r3, #22
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	3301      	adds	r3, #1
 8002b70:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b72:	4b37      	ldr	r3, [pc, #220]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002b74:	68da      	ldr	r2, [r3, #12]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	025b      	lsls	r3, r3, #9
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d01a      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]
 8002b86:	4a34      	ldr	r2, [pc, #208]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002b88:	2300      	movs	r3, #0
 8002b8a:	69b8      	ldr	r0, [r7, #24]
 8002b8c:	69f9      	ldr	r1, [r7, #28]
 8002b8e:	f7fd fb79 	bl	8000284 <__aeabi_lmul>
 8002b92:	0002      	movs	r2, r0
 8002b94:	000b      	movs	r3, r1
 8002b96:	0010      	movs	r0, r2
 8002b98:	0019      	movs	r1, r3
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9c:	613b      	str	r3, [r7, #16]
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	617b      	str	r3, [r7, #20]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	f7fd fb4d 	bl	8000244 <__aeabi_uldivmod>
 8002baa:	0002      	movs	r2, r0
 8002bac:	000b      	movs	r3, r1
 8002bae:	0013      	movs	r3, r2
 8002bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bb2:	e037      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002bb4:	4b26      	ldr	r3, [pc, #152]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	4013      	ands	r3, r2
 8002bbc:	d01a      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	4a23      	ldr	r2, [pc, #140]	; (8002c54 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002bc8:	2300      	movs	r3, #0
 8002bca:	68b8      	ldr	r0, [r7, #8]
 8002bcc:	68f9      	ldr	r1, [r7, #12]
 8002bce:	f7fd fb59 	bl	8000284 <__aeabi_lmul>
 8002bd2:	0002      	movs	r2, r0
 8002bd4:	000b      	movs	r3, r1
 8002bd6:	0010      	movs	r0, r2
 8002bd8:	0019      	movs	r1, r3
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	603b      	str	r3, [r7, #0]
 8002bde:	2300      	movs	r3, #0
 8002be0:	607b      	str	r3, [r7, #4]
 8002be2:	683a      	ldr	r2, [r7, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f7fd fb2d 	bl	8000244 <__aeabi_uldivmod>
 8002bea:	0002      	movs	r2, r0
 8002bec:	000b      	movs	r3, r1
 8002bee:	0013      	movs	r3, r2
 8002bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf2:	e017      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf6:	0018      	movs	r0, r3
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	0019      	movs	r1, r3
 8002bfc:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <HAL_RCC_GetSysClockFreq+0x140>)
 8002bfe:	2300      	movs	r3, #0
 8002c00:	f7fd fb40 	bl	8000284 <__aeabi_lmul>
 8002c04:	0002      	movs	r2, r0
 8002c06:	000b      	movs	r3, r1
 8002c08:	0010      	movs	r0, r2
 8002c0a:	0019      	movs	r1, r3
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c0e:	001c      	movs	r4, r3
 8002c10:	2300      	movs	r3, #0
 8002c12:	001d      	movs	r5, r3
 8002c14:	0022      	movs	r2, r4
 8002c16:	002b      	movs	r3, r5
 8002c18:	f7fd fb14 	bl	8000244 <__aeabi_uldivmod>
 8002c1c:	0002      	movs	r2, r0
 8002c1e:	000b      	movs	r3, r1
 8002c20:	0013      	movs	r3, r2
 8002c22:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c26:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c28:	e00d      	b.n	8002c46 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x138>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	0b5b      	lsrs	r3, r3, #13
 8002c30:	2207      	movs	r2, #7
 8002c32:	4013      	ands	r3, r2
 8002c34:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c36:	6a3b      	ldr	r3, [r7, #32]
 8002c38:	3301      	adds	r3, #1
 8002c3a:	2280      	movs	r2, #128	; 0x80
 8002c3c:	0212      	lsls	r2, r2, #8
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	0013      	movs	r3, r2
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c44:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002c48:	0018      	movs	r0, r3
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	b00e      	add	sp, #56	; 0x38
 8002c4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002c50:	40021000 	.word	0x40021000
 8002c54:	003d0900 	.word	0x003d0900
 8002c58:	00f42400 	.word	0x00f42400
 8002c5c:	08005b8c 	.word	0x08005b8c

08002c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c64:	4b02      	ldr	r3, [pc, #8]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x10>)
 8002c66:	681b      	ldr	r3, [r3, #0]
}
 8002c68:	0018      	movs	r0, r3
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	46c0      	nop			; (mov r8, r8)
 8002c70:	20000004 	.word	0x20000004

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c78:	f7ff fff2 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002c7c:	0001      	movs	r1, r0
 8002c7e:	4b06      	ldr	r3, [pc, #24]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	0a1b      	lsrs	r3, r3, #8
 8002c84:	2207      	movs	r2, #7
 8002c86:	4013      	ands	r3, r2
 8002c88:	4a04      	ldr	r2, [pc, #16]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c8a:	5cd3      	ldrb	r3, [r2, r3]
 8002c8c:	40d9      	lsrs	r1, r3
 8002c8e:	000b      	movs	r3, r1
}
 8002c90:	0018      	movs	r0, r3
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	46c0      	nop			; (mov r8, r8)
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08005b84 	.word	0x08005b84

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ca4:	f7ff ffdc 	bl	8002c60 <HAL_RCC_GetHCLKFreq>
 8002ca8:	0001      	movs	r1, r0
 8002caa:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	0adb      	lsrs	r3, r3, #11
 8002cb0:	2207      	movs	r2, #7
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cb6:	5cd3      	ldrb	r3, [r2, r3]
 8002cb8:	40d9      	lsrs	r1, r3
 8002cba:	000b      	movs	r3, r1
}
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08005b84 	.word	0x08005b84

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002cd4:	2017      	movs	r0, #23
 8002cd6:	183b      	adds	r3, r7, r0
 8002cd8:	2200      	movs	r2, #0
 8002cda:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	d100      	bne.n	8002ce8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002ce6:	e0c2      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ce8:	4b91      	ldr	r3, [pc, #580]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	055b      	lsls	r3, r3, #21
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf4:	4b8e      	ldr	r3, [pc, #568]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cf6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cf8:	4b8d      	ldr	r3, [pc, #564]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002cfa:	2180      	movs	r1, #128	; 0x80
 8002cfc:	0549      	lsls	r1, r1, #21
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002d02:	183b      	adds	r3, r7, r0
 8002d04:	2201      	movs	r2, #1
 8002d06:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d08:	4b8a      	ldr	r3, [pc, #552]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	4013      	ands	r3, r2
 8002d12:	d11a      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d14:	4b87      	ldr	r3, [pc, #540]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b86      	ldr	r3, [pc, #536]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d1a:	2180      	movs	r1, #128	; 0x80
 8002d1c:	0049      	lsls	r1, r1, #1
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d22:	f7fe fb19 	bl	8001358 <HAL_GetTick>
 8002d26:	0003      	movs	r3, r0
 8002d28:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d2a:	e008      	b.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d2c:	f7fe fb14 	bl	8001358 <HAL_GetTick>
 8002d30:	0002      	movs	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b64      	cmp	r3, #100	; 0x64
 8002d38:	d901      	bls.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0f3      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d3e:	4b7d      	ldr	r3, [pc, #500]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	2380      	movs	r3, #128	; 0x80
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	4013      	ands	r3, r2
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002d4a:	4b79      	ldr	r3, [pc, #484]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	23c0      	movs	r3, #192	; 0xc0
 8002d50:	039b      	lsls	r3, r3, #14
 8002d52:	4013      	ands	r3, r2
 8002d54:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	23c0      	movs	r3, #192	; 0xc0
 8002d5c:	039b      	lsls	r3, r3, #14
 8002d5e:	4013      	ands	r3, r2
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d013      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	23c0      	movs	r3, #192	; 0xc0
 8002d6c:	029b      	lsls	r3, r3, #10
 8002d6e:	401a      	ands	r2, r3
 8002d70:	23c0      	movs	r3, #192	; 0xc0
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d10a      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002d78:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	2380      	movs	r3, #128	; 0x80
 8002d7e:	029b      	lsls	r3, r3, #10
 8002d80:	401a      	ands	r2, r3
 8002d82:	2380      	movs	r3, #128	; 0x80
 8002d84:	029b      	lsls	r3, r3, #10
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d101      	bne.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e0cb      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002d8e:	4b68      	ldr	r3, [pc, #416]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002d90:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002d92:	23c0      	movs	r3, #192	; 0xc0
 8002d94:	029b      	lsls	r3, r3, #10
 8002d96:	4013      	ands	r3, r2
 8002d98:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d03b      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	23c0      	movs	r3, #192	; 0xc0
 8002da6:	029b      	lsls	r3, r3, #10
 8002da8:	4013      	ands	r3, r2
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d033      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2220      	movs	r2, #32
 8002db6:	4013      	ands	r3, r2
 8002db8:	d02e      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002dba:	4b5d      	ldr	r3, [pc, #372]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dbe:	4a5e      	ldr	r2, [pc, #376]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dc4:	4b5a      	ldr	r3, [pc, #360]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dc8:	4b59      	ldr	r3, [pc, #356]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dca:	2180      	movs	r1, #128	; 0x80
 8002dcc:	0309      	lsls	r1, r1, #12
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd2:	4b57      	ldr	r3, [pc, #348]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002dd6:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd8:	4958      	ldr	r1, [pc, #352]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002dda:	400a      	ands	r2, r1
 8002ddc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002dde:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002de0:	68fa      	ldr	r2, [r7, #12]
 8002de2:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	2380      	movs	r3, #128	; 0x80
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	4013      	ands	r3, r2
 8002dec:	d014      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dee:	f7fe fab3 	bl	8001358 <HAL_GetTick>
 8002df2:	0003      	movs	r3, r0
 8002df4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002df6:	e009      	b.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002df8:	f7fe faae 	bl	8001358 <HAL_GetTick>
 8002dfc:	0002      	movs	r2, r0
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	4a4f      	ldr	r2, [pc, #316]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e08c      	b.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002e0c:	4b48      	ldr	r3, [pc, #288]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e0e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e10:	2380      	movs	r3, #128	; 0x80
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4013      	ands	r3, r2
 8002e16:	d0ef      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	23c0      	movs	r3, #192	; 0xc0
 8002e1e:	029b      	lsls	r3, r3, #10
 8002e20:	401a      	ands	r2, r3
 8002e22:	23c0      	movs	r3, #192	; 0xc0
 8002e24:	029b      	lsls	r3, r3, #10
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d10c      	bne.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a45      	ldr	r2, [pc, #276]	; (8002f44 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002e30:	4013      	ands	r3, r2
 8002e32:	0019      	movs	r1, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	23c0      	movs	r3, #192	; 0xc0
 8002e3a:	039b      	lsls	r3, r3, #14
 8002e3c:	401a      	ands	r2, r3
 8002e3e:	4b3c      	ldr	r3, [pc, #240]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e40:	430a      	orrs	r2, r1
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	4b3a      	ldr	r3, [pc, #232]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e46:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685a      	ldr	r2, [r3, #4]
 8002e4c:	23c0      	movs	r3, #192	; 0xc0
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	401a      	ands	r2, r3
 8002e52:	4b37      	ldr	r3, [pc, #220]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e54:	430a      	orrs	r2, r1
 8002e56:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e58:	2317      	movs	r3, #23
 8002e5a:	18fb      	adds	r3, r7, r3
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	d105      	bne.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e62:	4b33      	ldr	r3, [pc, #204]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e66:	4b32      	ldr	r3, [pc, #200]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e68:	4937      	ldr	r1, [pc, #220]	; (8002f48 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002e6a:	400a      	ands	r2, r1
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2201      	movs	r2, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d009      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e78:	4b2d      	ldr	r3, [pc, #180]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	4393      	bics	r3, r2
 8002e80:	0019      	movs	r1, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	4b2a      	ldr	r3, [pc, #168]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2202      	movs	r2, #2
 8002e92:	4013      	ands	r3, r2
 8002e94:	d009      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e96:	4b26      	ldr	r3, [pc, #152]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e9a:	220c      	movs	r2, #12
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	0019      	movs	r1, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	68da      	ldr	r2, [r3, #12]
 8002ea4:	4b22      	ldr	r3, [pc, #136]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ea6:	430a      	orrs	r2, r1
 8002ea8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002eb4:	4b1e      	ldr	r3, [pc, #120]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eb8:	4a24      	ldr	r2, [pc, #144]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691a      	ldr	r2, [r3, #16]
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2208      	movs	r2, #8
 8002ece:	4013      	ands	r3, r2
 8002ed0:	d009      	beq.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed2:	4b17      	ldr	r3, [pc, #92]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed6:	4a1e      	ldr	r2, [pc, #120]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002ed8:	4013      	ands	r3, r2
 8002eda:	0019      	movs	r1, r3
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	4b13      	ldr	r3, [pc, #76]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	2380      	movs	r3, #128	; 0x80
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	4013      	ands	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ef2:	4b0f      	ldr	r3, [pc, #60]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef6:	4a10      	ldr	r2, [pc, #64]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	0019      	movs	r1, r3
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699a      	ldr	r2, [r3, #24]
 8002f00:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f02:	430a      	orrs	r2, r1
 8002f04:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	d009      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002f10:	4b07      	ldr	r3, [pc, #28]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f14:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	69da      	ldr	r2, [r3, #28]
 8002f1e:	4b04      	ldr	r3, [pc, #16]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f20:	430a      	orrs	r2, r1
 8002f22:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	0018      	movs	r0, r3
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	b006      	add	sp, #24
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	46c0      	nop			; (mov r8, r8)
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40007000 	.word	0x40007000
 8002f38:	fffcffff 	.word	0xfffcffff
 8002f3c:	fff7ffff 	.word	0xfff7ffff
 8002f40:	00001388 	.word	0x00001388
 8002f44:	ffcfffff 	.word	0xffcfffff
 8002f48:	efffffff 	.word	0xefffffff
 8002f4c:	fffff3ff 	.word	0xfffff3ff
 8002f50:	ffffcfff 	.word	0xffffcfff
 8002f54:	fff3ffff 	.word	0xfff3ffff

08002f58 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e083      	b.n	8003072 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d109      	bne.n	8002f86 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	2382      	movs	r3, #130	; 0x82
 8002f78:	005b      	lsls	r3, r3, #1
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d009      	beq.n	8002f92 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	61da      	str	r2, [r3, #28]
 8002f84:	e005      	b.n	8002f92 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2251      	movs	r2, #81	; 0x51
 8002f9c:	5c9b      	ldrb	r3, [r3, r2]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d107      	bne.n	8002fb4 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2250      	movs	r2, #80	; 0x50
 8002fa8:	2100      	movs	r1, #0
 8002faa:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f7fd ffdc 	bl	8000f6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2251      	movs	r2, #81	; 0x51
 8002fb8:	2102      	movs	r1, #2
 8002fba:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2140      	movs	r1, #64	; 0x40
 8002fc8:	438a      	bics	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685a      	ldr	r2, [r3, #4]
 8002fd0:	2382      	movs	r3, #130	; 0x82
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	401a      	ands	r2, r3
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6899      	ldr	r1, [r3, #8]
 8002fda:	2384      	movs	r3, #132	; 0x84
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	400b      	ands	r3, r1
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	68d9      	ldr	r1, [r3, #12]
 8002fe6:	2380      	movs	r3, #128	; 0x80
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	400b      	ands	r3, r1
 8002fec:	431a      	orrs	r2, r3
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	2102      	movs	r1, #2
 8002ff4:	400b      	ands	r3, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	400b      	ands	r3, r1
 8003000:	431a      	orrs	r2, r3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6999      	ldr	r1, [r3, #24]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	400b      	ands	r3, r1
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	2138      	movs	r1, #56	; 0x38
 8003014:	400b      	ands	r3, r1
 8003016:	431a      	orrs	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a1b      	ldr	r3, [r3, #32]
 800301c:	2180      	movs	r1, #128	; 0x80
 800301e:	400b      	ands	r3, r1
 8003020:	431a      	orrs	r2, r3
 8003022:	0011      	movs	r1, r2
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	019b      	lsls	r3, r3, #6
 800302c:	401a      	ands	r2, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	0c1b      	lsrs	r3, r3, #16
 800303c:	2204      	movs	r2, #4
 800303e:	4013      	ands	r3, r2
 8003040:	0019      	movs	r1, r3
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003046:	2210      	movs	r2, #16
 8003048:	401a      	ands	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4907      	ldr	r1, [pc, #28]	; (800307c <HAL_SPI_Init+0x124>)
 800305e:	400a      	ands	r2, r1
 8003060:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2251      	movs	r2, #81	; 0x51
 800306c:	2101      	movs	r1, #1
 800306e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	0018      	movs	r0, r3
 8003074:	46bd      	mov	sp, r7
 8003076:	b002      	add	sp, #8
 8003078:	bd80      	pop	{r7, pc}
 800307a:	46c0      	nop			; (mov r8, r8)
 800307c:	fffff7ff 	.word	0xfffff7ff

08003080 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	1dbb      	adds	r3, r7, #6
 800308c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800308e:	2317      	movs	r3, #23
 8003090:	18fb      	adds	r3, r7, r3
 8003092:	2200      	movs	r2, #0
 8003094:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2250      	movs	r2, #80	; 0x50
 800309a:	5c9b      	ldrb	r3, [r3, r2]
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <HAL_SPI_Transmit_IT+0x24>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e07a      	b.n	800319a <HAL_SPI_Transmit_IT+0x11a>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2250      	movs	r2, #80	; 0x50
 80030a8:	2101      	movs	r1, #1
 80030aa:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_SPI_Transmit_IT+0x3a>
 80030b2:	1dbb      	adds	r3, r7, #6
 80030b4:	881b      	ldrh	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d104      	bne.n	80030c4 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 80030ba:	2317      	movs	r3, #23
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
    goto error;
 80030c2:	e063      	b.n	800318c <HAL_SPI_Transmit_IT+0x10c>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	2251      	movs	r2, #81	; 0x51
 80030c8:	5c9b      	ldrb	r3, [r3, r2]
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d004      	beq.n	80030da <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 80030d0:	2317      	movs	r3, #23
 80030d2:	18fb      	adds	r3, r7, r3
 80030d4:	2202      	movs	r2, #2
 80030d6:	701a      	strb	r2, [r3, #0]
    goto error;
 80030d8:	e058      	b.n	800318c <HAL_SPI_Transmit_IT+0x10c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2251      	movs	r2, #81	; 0x51
 80030de:	2103      	movs	r1, #3
 80030e0:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	68ba      	ldr	r2, [r7, #8]
 80030ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	1dba      	adds	r2, r7, #6
 80030f2:	8812      	ldrh	r2, [r2, #0]
 80030f4:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	1dba      	adds	r2, r7, #6
 80030fa:	8812      	ldrh	r2, [r2, #0]
 80030fc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2200      	movs	r2, #0
 8003102:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2200      	movs	r2, #0
 8003108:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_SPI_Transmit_IT+0xa6>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4a20      	ldr	r2, [pc, #128]	; (80031a4 <HAL_SPI_Transmit_IT+0x124>)
 8003122:	645a      	str	r2, [r3, #68]	; 0x44
 8003124:	e002      	b.n	800312c <HAL_SPI_Transmit_IT+0xac>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_SPI_Transmit_IT+0x128>)
 800312a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	689a      	ldr	r2, [r3, #8]
 8003130:	2380      	movs	r3, #128	; 0x80
 8003132:	021b      	lsls	r3, r3, #8
 8003134:	429a      	cmp	r2, r3
 8003136:	d110      	bne.n	800315a <HAL_SPI_Transmit_IT+0xda>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	2140      	movs	r1, #64	; 0x40
 8003144:	438a      	bics	r2, r1
 8003146:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	681a      	ldr	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2180      	movs	r1, #128	; 0x80
 8003154:	01c9      	lsls	r1, r1, #7
 8003156:	430a      	orrs	r2, r1
 8003158:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	21a0      	movs	r1, #160	; 0xa0
 8003166:	430a      	orrs	r2, r1
 8003168:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2240      	movs	r2, #64	; 0x40
 8003172:	4013      	ands	r3, r2
 8003174:	2b40      	cmp	r3, #64	; 0x40
 8003176:	d008      	beq.n	800318a <HAL_SPI_Transmit_IT+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	2140      	movs	r1, #64	; 0x40
 8003184:	430a      	orrs	r2, r1
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	e000      	b.n	800318c <HAL_SPI_Transmit_IT+0x10c>
  }

error :
 800318a:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2250      	movs	r2, #80	; 0x50
 8003190:	2100      	movs	r1, #0
 8003192:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003194:	2317      	movs	r3, #23
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	781b      	ldrb	r3, [r3, #0]
}
 800319a:	0018      	movs	r0, r3
 800319c:	46bd      	mov	sp, r7
 800319e:	b006      	add	sp, #24
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	46c0      	nop			; (mov r8, r8)
 80031a4:	08003905 	.word	0x08003905
 80031a8:	080038bd 	.word	0x080038bd

080031ac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	60f8      	str	r0, [r7, #12]
 80031b4:	60b9      	str	r1, [r7, #8]
 80031b6:	1dbb      	adds	r3, r7, #6
 80031b8:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80031ba:	2317      	movs	r3, #23
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	2200      	movs	r2, #0
 80031c0:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d112      	bne.n	80031f0 <HAL_SPI_Receive_IT+0x44>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	2382      	movs	r3, #130	; 0x82
 80031d0:	005b      	lsls	r3, r3, #1
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d10c      	bne.n	80031f0 <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	2251      	movs	r2, #81	; 0x51
 80031da:	2104      	movs	r1, #4
 80031dc:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80031de:	1dbb      	adds	r3, r7, #6
 80031e0:	881b      	ldrh	r3, [r3, #0]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	68b9      	ldr	r1, [r7, #8]
 80031e6:	68f8      	ldr	r0, [r7, #12]
 80031e8:	f000 f88e 	bl	8003308 <HAL_SPI_TransmitReceive_IT>
 80031ec:	0003      	movs	r3, r0
 80031ee:	e080      	b.n	80032f2 <HAL_SPI_Receive_IT+0x146>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2250      	movs	r2, #80	; 0x50
 80031f4:	5c9b      	ldrb	r3, [r3, r2]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d101      	bne.n	80031fe <HAL_SPI_Receive_IT+0x52>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e079      	b.n	80032f2 <HAL_SPI_Receive_IT+0x146>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2250      	movs	r2, #80	; 0x50
 8003202:	2101      	movs	r1, #1
 8003204:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2251      	movs	r2, #81	; 0x51
 800320a:	5c9b      	ldrb	r3, [r3, r2]
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b01      	cmp	r3, #1
 8003210:	d004      	beq.n	800321c <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 8003212:	2317      	movs	r3, #23
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	2202      	movs	r2, #2
 8003218:	701a      	strb	r2, [r3, #0]
    goto error;
 800321a:	e063      	b.n	80032e4 <HAL_SPI_Receive_IT+0x138>
  }

  if ((pData == NULL) || (Size == 0U))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <HAL_SPI_Receive_IT+0x7e>
 8003222:	1dbb      	adds	r3, r7, #6
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d104      	bne.n	8003234 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 800322a:	2317      	movs	r3, #23
 800322c:	18fb      	adds	r3, r7, r3
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
    goto error;
 8003232:	e057      	b.n	80032e4 <HAL_SPI_Receive_IT+0x138>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	2251      	movs	r2, #81	; 0x51
 8003238:	2104      	movs	r1, #4
 800323a:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2200      	movs	r2, #0
 8003240:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	1dba      	adds	r2, r7, #6
 800324c:	8812      	ldrh	r2, [r2, #0]
 800324e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	1dba      	adds	r2, r7, #6
 8003254:	8812      	ldrh	r2, [r2, #0]
 8003256:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2200      	movs	r2, #0
 8003268:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d003      	beq.n	8003280 <HAL_SPI_Receive_IT+0xd4>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	4a20      	ldr	r2, [pc, #128]	; (80032fc <HAL_SPI_Receive_IT+0x150>)
 800327c:	641a      	str	r2, [r3, #64]	; 0x40
 800327e:	e002      	b.n	8003286 <HAL_SPI_Receive_IT+0xda>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	4a1f      	ldr	r2, [pc, #124]	; (8003300 <HAL_SPI_Receive_IT+0x154>)
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	689a      	ldr	r2, [r3, #8]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	021b      	lsls	r3, r3, #8
 800328e:	429a      	cmp	r2, r3
 8003290:	d10f      	bne.n	80032b2 <HAL_SPI_Receive_IT+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2140      	movs	r1, #64	; 0x40
 800329e:	438a      	bics	r2, r1
 80032a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4915      	ldr	r1, [pc, #84]	; (8003304 <HAL_SPI_Receive_IT+0x158>)
 80032ae:	400a      	ands	r2, r1
 80032b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685a      	ldr	r2, [r3, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	2160      	movs	r1, #96	; 0x60
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2240      	movs	r2, #64	; 0x40
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b40      	cmp	r3, #64	; 0x40
 80032ce:	d008      	beq.n	80032e2 <HAL_SPI_Receive_IT+0x136>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2140      	movs	r1, #64	; 0x40
 80032dc:	430a      	orrs	r2, r1
 80032de:	601a      	str	r2, [r3, #0]
 80032e0:	e000      	b.n	80032e4 <HAL_SPI_Receive_IT+0x138>
  }

error :
 80032e2:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2250      	movs	r2, #80	; 0x50
 80032e8:	2100      	movs	r1, #0
 80032ea:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80032ec:	2317      	movs	r3, #23
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	781b      	ldrb	r3, [r3, #0]
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b006      	add	sp, #24
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	46c0      	nop			; (mov r8, r8)
 80032fc:	08003875 	.word	0x08003875
 8003300:	08003829 	.word	0x08003829
 8003304:	ffffbfff 	.word	0xffffbfff

08003308 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
 8003314:	001a      	movs	r2, r3
 8003316:	1cbb      	adds	r3, r7, #2
 8003318:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800331a:	2317      	movs	r3, #23
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	2200      	movs	r2, #0
 8003320:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2250      	movs	r2, #80	; 0x50
 8003326:	5c9b      	ldrb	r3, [r3, r2]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d101      	bne.n	8003330 <HAL_SPI_TransmitReceive_IT+0x28>
 800332c:	2302      	movs	r3, #2
 800332e:	e086      	b.n	800343e <HAL_SPI_TransmitReceive_IT+0x136>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2250      	movs	r2, #80	; 0x50
 8003334:	2101      	movs	r1, #1
 8003336:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003338:	2016      	movs	r0, #22
 800333a:	183b      	adds	r3, r7, r0
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	2151      	movs	r1, #81	; 0x51
 8003340:	5c52      	ldrb	r2, [r2, r1]
 8003342:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800334a:	0001      	movs	r1, r0
 800334c:	187b      	adds	r3, r7, r1
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	2b01      	cmp	r3, #1
 8003352:	d011      	beq.n	8003378 <HAL_SPI_TransmitReceive_IT+0x70>
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	2382      	movs	r3, #130	; 0x82
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	429a      	cmp	r2, r3
 800335c:	d107      	bne.n	800336e <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d103      	bne.n	800336e <HAL_SPI_TransmitReceive_IT+0x66>
 8003366:	187b      	adds	r3, r7, r1
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b04      	cmp	r3, #4
 800336c:	d004      	beq.n	8003378 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800336e:	2317      	movs	r3, #23
 8003370:	18fb      	adds	r3, r7, r3
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]
    goto error;
 8003376:	e05b      	b.n	8003430 <HAL_SPI_TransmitReceive_IT+0x128>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d006      	beq.n	800338c <HAL_SPI_TransmitReceive_IT+0x84>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_SPI_TransmitReceive_IT+0x84>
 8003384:	1cbb      	adds	r3, r7, #2
 8003386:	881b      	ldrh	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d104      	bne.n	8003396 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 800338c:	2317      	movs	r3, #23
 800338e:	18fb      	adds	r3, r7, r3
 8003390:	2201      	movs	r2, #1
 8003392:	701a      	strb	r2, [r3, #0]
    goto error;
 8003394:	e04c      	b.n	8003430 <HAL_SPI_TransmitReceive_IT+0x128>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2251      	movs	r2, #81	; 0x51
 800339a:	5c9b      	ldrb	r3, [r3, r2]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b04      	cmp	r3, #4
 80033a0:	d003      	beq.n	80033aa <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2251      	movs	r2, #81	; 0x51
 80033a6:	2105      	movs	r1, #5
 80033a8:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	1cba      	adds	r2, r7, #2
 80033ba:	8812      	ldrh	r2, [r2, #0]
 80033bc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1cba      	adds	r2, r7, #2
 80033c2:	8812      	ldrh	r2, [r2, #0]
 80033c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	687a      	ldr	r2, [r7, #4]
 80033ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1cba      	adds	r2, r7, #2
 80033d0:	8812      	ldrh	r2, [r2, #0]
 80033d2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	1cba      	adds	r2, r7, #2
 80033d8:	8812      	ldrh	r2, [r2, #0]
 80033da:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d006      	beq.n	80033f2 <HAL_SPI_TransmitReceive_IT+0xea>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a18      	ldr	r2, [pc, #96]	; (8003448 <HAL_SPI_TransmitReceive_IT+0x140>)
 80033e8:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	4a17      	ldr	r2, [pc, #92]	; (800344c <HAL_SPI_TransmitReceive_IT+0x144>)
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
 80033f0:	e005      	b.n	80033fe <HAL_SPI_TransmitReceive_IT+0xf6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4a16      	ldr	r2, [pc, #88]	; (8003450 <HAL_SPI_TransmitReceive_IT+0x148>)
 80033f6:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	4a16      	ldr	r2, [pc, #88]	; (8003454 <HAL_SPI_TransmitReceive_IT+0x14c>)
 80033fc:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	21e0      	movs	r1, #224	; 0xe0
 800340a:	430a      	orrs	r2, r1
 800340c:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2240      	movs	r2, #64	; 0x40
 8003416:	4013      	ands	r3, r2
 8003418:	2b40      	cmp	r3, #64	; 0x40
 800341a:	d008      	beq.n	800342e <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	2140      	movs	r1, #64	; 0x40
 8003428:	430a      	orrs	r2, r1
 800342a:	601a      	str	r2, [r3, #0]
 800342c:	e000      	b.n	8003430 <HAL_SPI_TransmitReceive_IT+0x128>
  }

error :
 800342e:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2250      	movs	r2, #80	; 0x50
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003438:	2317      	movs	r3, #23
 800343a:	18fb      	adds	r3, r7, r3
 800343c:	781b      	ldrb	r3, [r3, #0]
}
 800343e:	0018      	movs	r0, r3
 8003440:	46bd      	mov	sp, r7
 8003442:	b006      	add	sp, #24
 8003444:	bd80      	pop	{r7, pc}
 8003446:	46c0      	nop			; (mov r8, r8)
 8003448:	08003767 	.word	0x08003767
 800344c:	080037c9 	.word	0x080037c9
 8003450:	0800369f 	.word	0x0800369f
 8003454:	08003705 	.word	0x08003705

08003458 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b088      	sub	sp, #32
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003470:	69bb      	ldr	r3, [r7, #24]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	001a      	movs	r2, r3
 8003476:	2301      	movs	r3, #1
 8003478:	4013      	ands	r3, r2
 800347a:	d10f      	bne.n	800349c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2201      	movs	r2, #1
 8003480:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003482:	d00b      	beq.n	800349c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	099b      	lsrs	r3, r3, #6
 8003488:	001a      	movs	r2, r3
 800348a:	2301      	movs	r3, #1
 800348c:	4013      	ands	r3, r2
 800348e:	d005      	beq.n	800349c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	0010      	movs	r0, r2
 8003498:	4798      	blx	r3
    return;
 800349a:	e0d5      	b.n	8003648 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	001a      	movs	r2, r3
 80034a2:	2301      	movs	r3, #1
 80034a4:	4013      	ands	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <HAL_SPI_IRQHandler+0x68>
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	09db      	lsrs	r3, r3, #7
 80034ac:	001a      	movs	r2, r3
 80034ae:	2301      	movs	r3, #1
 80034b0:	4013      	ands	r3, r2
 80034b2:	d005      	beq.n	80034c0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	0010      	movs	r0, r2
 80034bc:	4798      	blx	r3
    return;
 80034be:	e0c3      	b.n	8003648 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	095b      	lsrs	r3, r3, #5
 80034c4:	001a      	movs	r2, r3
 80034c6:	2301      	movs	r3, #1
 80034c8:	4013      	ands	r3, r2
 80034ca:	d10c      	bne.n	80034e6 <HAL_SPI_IRQHandler+0x8e>
 80034cc:	69bb      	ldr	r3, [r7, #24]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	001a      	movs	r2, r3
 80034d2:	2301      	movs	r3, #1
 80034d4:	4013      	ands	r3, r2
 80034d6:	d106      	bne.n	80034e6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	0a1b      	lsrs	r3, r3, #8
 80034dc:	001a      	movs	r2, r3
 80034de:	2301      	movs	r3, #1
 80034e0:	4013      	ands	r3, r2
 80034e2:	d100      	bne.n	80034e6 <HAL_SPI_IRQHandler+0x8e>
 80034e4:	e0b0      	b.n	8003648 <HAL_SPI_IRQHandler+0x1f0>
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	095b      	lsrs	r3, r3, #5
 80034ea:	001a      	movs	r2, r3
 80034ec:	2301      	movs	r3, #1
 80034ee:	4013      	ands	r3, r2
 80034f0:	d100      	bne.n	80034f4 <HAL_SPI_IRQHandler+0x9c>
 80034f2:	e0a9      	b.n	8003648 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	099b      	lsrs	r3, r3, #6
 80034f8:	001a      	movs	r2, r3
 80034fa:	2301      	movs	r3, #1
 80034fc:	4013      	ands	r3, r2
 80034fe:	d023      	beq.n	8003548 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2251      	movs	r2, #81	; 0x51
 8003504:	5c9b      	ldrb	r3, [r3, r2]
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b03      	cmp	r3, #3
 800350a:	d011      	beq.n	8003530 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003510:	2204      	movs	r2, #4
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003518:	2300      	movs	r3, #0
 800351a:	617b      	str	r3, [r7, #20]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	68db      	ldr	r3, [r3, #12]
 8003522:	617b      	str	r3, [r7, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	617b      	str	r3, [r7, #20]
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	e00b      	b.n	8003548 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003530:	2300      	movs	r3, #0
 8003532:	613b      	str	r3, [r7, #16]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	68db      	ldr	r3, [r3, #12]
 800353a:	613b      	str	r3, [r7, #16]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	693b      	ldr	r3, [r7, #16]
        return;
 8003546:	e07f      	b.n	8003648 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	095b      	lsrs	r3, r3, #5
 800354c:	001a      	movs	r2, r3
 800354e:	2301      	movs	r3, #1
 8003550:	4013      	ands	r3, r2
 8003552:	d014      	beq.n	800357e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003558:	2201      	movs	r2, #1
 800355a:	431a      	orrs	r2, r3
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003560:	2300      	movs	r3, #0
 8003562:	60fb      	str	r3, [r7, #12]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	2140      	movs	r1, #64	; 0x40
 8003578:	438a      	bics	r2, r1
 800357a:	601a      	str	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	0a1b      	lsrs	r3, r3, #8
 8003582:	001a      	movs	r2, r3
 8003584:	2301      	movs	r3, #1
 8003586:	4013      	ands	r3, r2
 8003588:	d00c      	beq.n	80035a4 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358e:	2208      	movs	r2, #8
 8003590:	431a      	orrs	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d04c      	beq.n	8003646 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	21e0      	movs	r1, #224	; 0xe0
 80035b8:	438a      	bics	r2, r1
 80035ba:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2251      	movs	r2, #81	; 0x51
 80035c0:	2101      	movs	r1, #1
 80035c2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	2202      	movs	r2, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d103      	bne.n	80035d4 <HAL_SPI_IRQHandler+0x17c>
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	2201      	movs	r2, #1
 80035d0:	4013      	ands	r3, r2
 80035d2:	d032      	beq.n	800363a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2103      	movs	r1, #3
 80035e0:	438a      	bics	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d010      	beq.n	800360e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f0:	4a17      	ldr	r2, [pc, #92]	; (8003650 <HAL_SPI_IRQHandler+0x1f8>)
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035f8:	0018      	movs	r0, r3
 80035fa:	f7fd ff95 	bl	8001528 <HAL_DMA_Abort_IT>
 80035fe:	1e03      	subs	r3, r0, #0
 8003600:	d005      	beq.n	800360e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003606:	2240      	movs	r2, #64	; 0x40
 8003608:	431a      	orrs	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003612:	2b00      	cmp	r3, #0
 8003614:	d016      	beq.n	8003644 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800361a:	4a0d      	ldr	r2, [pc, #52]	; (8003650 <HAL_SPI_IRQHandler+0x1f8>)
 800361c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003622:	0018      	movs	r0, r3
 8003624:	f7fd ff80 	bl	8001528 <HAL_DMA_Abort_IT>
 8003628:	1e03      	subs	r3, r0, #0
 800362a:	d00b      	beq.n	8003644 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003630:	2240      	movs	r2, #64	; 0x40
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003638:	e004      	b.n	8003644 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0018      	movs	r0, r3
 800363e:	f000 f811 	bl	8003664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003642:	e000      	b.n	8003646 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003644:	46c0      	nop			; (mov r8, r8)
    return;
 8003646:	46c0      	nop			; (mov r8, r8)
  }
}
 8003648:	46bd      	mov	sp, r7
 800364a:	b008      	add	sp, #32
 800364c:	bd80      	pop	{r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	08003675 	.word	0x08003675

08003654 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	46bd      	mov	sp, r7
 8003660:	b002      	add	sp, #8
 8003662:	bd80      	pop	{r7, pc}

08003664 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800366c:	46c0      	nop			; (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	b002      	add	sp, #8
 8003672:	bd80      	pop	{r7, pc}

08003674 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003680:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	0018      	movs	r0, r3
 8003692:	f7ff ffe7 	bl	8003664 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003696:	46c0      	nop			; (mov r8, r8)
 8003698:	46bd      	mov	sp, r7
 800369a:	b004      	add	sp, #16
 800369c:	bd80      	pop	{r7, pc}

0800369e <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800369e:	b580      	push	{r7, lr}
 80036a0:	b082      	sub	sp, #8
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	330c      	adds	r3, #12
 80036ac:	001a      	movs	r2, r3
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b2:	7812      	ldrb	r2, [r2, #0]
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036bc:	1c5a      	adds	r2, r3, #1
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c6:	b29b      	uxth	r3, r3
 80036c8:	3b01      	subs	r3, #1
 80036ca:	b29a      	uxth	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036d4:	b29b      	uxth	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d110      	bne.n	80036fc <SPI_2linesRxISR_8BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2160      	movs	r1, #96	; 0x60
 80036e6:	438a      	bics	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d103      	bne.n	80036fc <SPI_2linesRxISR_8BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	0018      	movs	r0, r3
 80036f8:	f000 fa66 	bl	8003bc8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	330c      	adds	r3, #12
 8003716:	7812      	ldrb	r2, [r2, #0]
 8003718:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	1c5a      	adds	r2, r3, #1
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003736:	b29b      	uxth	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d110      	bne.n	800375e <SPI_2linesTxISR_8BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685a      	ldr	r2, [r3, #4]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	438a      	bics	r2, r1
 800374a:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003750:	b29b      	uxth	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d103      	bne.n	800375e <SPI_2linesTxISR_8BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	0018      	movs	r0, r3
 800375a:	f000 fa35 	bl	8003bc8 <SPI_CloseRxTx_ISR>
    }
  }
}
 800375e:	46c0      	nop			; (mov r8, r8)
 8003760:	46bd      	mov	sp, r7
 8003762:	b002      	add	sp, #8
 8003764:	bd80      	pop	{r7, pc}

08003766 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b082      	sub	sp, #8
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68da      	ldr	r2, [r3, #12]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	b292      	uxth	r2, r2
 800377a:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	1c9a      	adds	r2, r3, #2
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378a:	b29b      	uxth	r3, r3
 800378c:	3b01      	subs	r3, #1
 800378e:	b29a      	uxth	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003798:	b29b      	uxth	r3, r3
 800379a:	2b00      	cmp	r3, #0
 800379c:	d110      	bne.n	80037c0 <SPI_2linesRxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2140      	movs	r1, #64	; 0x40
 80037aa:	438a      	bics	r2, r1
 80037ac:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037b2:	b29b      	uxth	r3, r3
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d103      	bne.n	80037c0 <SPI_2linesRxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f000 fa04 	bl	8003bc8 <SPI_CloseRxTx_ISR>
    }
  }
}
 80037c0:	46c0      	nop			; (mov r8, r8)
 80037c2:	46bd      	mov	sp, r7
 80037c4:	b002      	add	sp, #8
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d4:	881a      	ldrh	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	1c9a      	adds	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80037f8:	b29b      	uxth	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d110      	bne.n	8003820 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2180      	movs	r1, #128	; 0x80
 800380a:	438a      	bics	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003812:	b29b      	uxth	r3, r3
 8003814:	2b00      	cmp	r3, #0
 8003816:	d103      	bne.n	8003820 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	0018      	movs	r0, r3
 800381c:	f000 f9d4 	bl	8003bc8 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003820:	46c0      	nop			; (mov r8, r8)
 8003822:	46bd      	mov	sp, r7
 8003824:	b002      	add	sp, #8
 8003826:	bd80      	pop	{r7, pc}

08003828 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	330c      	adds	r3, #12
 8003836:	001a      	movs	r2, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	7812      	ldrb	r2, [r2, #0]
 800383e:	b2d2      	uxtb	r2, r2
 8003840:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800385e:	b29b      	uxth	r3, r3
 8003860:	2b00      	cmp	r3, #0
 8003862:	d103      	bne.n	800386c <SPI_RxISR_8BIT+0x44>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	0018      	movs	r0, r3
 8003868:	f000 fa26 	bl	8003cb8 <SPI_CloseRx_ISR>
  }
}
 800386c:	46c0      	nop			; (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}

08003874 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003886:	b292      	uxth	r2, r2
 8003888:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800388e:	1c9a      	adds	r2, r3, #2
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b01      	subs	r3, #1
 800389c:	b29a      	uxth	r2, r3
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d103      	bne.n	80038b4 <SPI_RxISR_16BIT+0x40>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 fa02 	bl	8003cb8 <SPI_CloseRx_ISR>
  }
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b002      	add	sp, #8
 80038ba:	bd80      	pop	{r7, pc}

080038bc <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	330c      	adds	r3, #12
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	1c5a      	adds	r2, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	3b01      	subs	r3, #1
 80038e4:	b29a      	uxth	r2, r3
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d103      	bne.n	80038fc <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	0018      	movs	r0, r3
 80038f8:	f000 fa1e 	bl	8003d38 <SPI_CloseTx_ISR>
  }
}
 80038fc:	46c0      	nop			; (mov r8, r8)
 80038fe:	46bd      	mov	sp, r7
 8003900:	b002      	add	sp, #8
 8003902:	bd80      	pop	{r7, pc}

08003904 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b082      	sub	sp, #8
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003910:	881a      	ldrh	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	1c9a      	adds	r2, r3, #2
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	3b01      	subs	r3, #1
 800392a:	b29a      	uxth	r2, r3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	86da      	strh	r2, [r3, #54]	; 0x36

  if (hspi->TxXferCount == 0U)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 f9fb 	bl	8003d38 <SPI_CloseTx_ISR>
  }
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b002      	add	sp, #8
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	603b      	str	r3, [r7, #0]
 8003958:	1dfb      	adds	r3, r7, #7
 800395a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800395c:	f7fd fcfc 	bl	8001358 <HAL_GetTick>
 8003960:	0002      	movs	r2, r0
 8003962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	683a      	ldr	r2, [r7, #0]
 8003968:	18d3      	adds	r3, r2, r3
 800396a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800396c:	f7fd fcf4 	bl	8001358 <HAL_GetTick>
 8003970:	0003      	movs	r3, r0
 8003972:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003974:	4b3a      	ldr	r3, [pc, #232]	; (8003a60 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	015b      	lsls	r3, r3, #5
 800397a:	0d1b      	lsrs	r3, r3, #20
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	4353      	muls	r3, r2
 8003980:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003982:	e058      	b.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	3301      	adds	r3, #1
 8003988:	d055      	beq.n	8003a36 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800398a:	f7fd fce5 	bl	8001358 <HAL_GetTick>
 800398e:	0002      	movs	r2, r0
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	429a      	cmp	r2, r3
 8003998:	d902      	bls.n	80039a0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d142      	bne.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685a      	ldr	r2, [r3, #4]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	21e0      	movs	r1, #224	; 0xe0
 80039ac:	438a      	bics	r2, r1
 80039ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	685a      	ldr	r2, [r3, #4]
 80039b4:	2382      	movs	r3, #130	; 0x82
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d113      	bne.n	80039e4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d005      	beq.n	80039d4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	689a      	ldr	r2, [r3, #8]
 80039cc:	2380      	movs	r3, #128	; 0x80
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d107      	bne.n	80039e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2140      	movs	r1, #64	; 0x40
 80039e0:	438a      	bics	r2, r1
 80039e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	019b      	lsls	r3, r3, #6
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d110      	bne.n	8003a12 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	491a      	ldr	r1, [pc, #104]	; (8003a64 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80039fc:	400a      	ands	r2, r1
 80039fe:	601a      	str	r2, [r3, #0]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2180      	movs	r1, #128	; 0x80
 8003a0c:	0189      	lsls	r1, r1, #6
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2251      	movs	r2, #81	; 0x51
 8003a16:	2101      	movs	r1, #1
 8003a18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2250      	movs	r2, #80	; 0x50
 8003a1e:	2100      	movs	r1, #0
 8003a20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e017      	b.n	8003a56 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a26:	697b      	ldr	r3, [r7, #20]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a30:	697b      	ldr	r3, [r7, #20]
 8003a32:	3b01      	subs	r3, #1
 8003a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	68ba      	ldr	r2, [r7, #8]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	68ba      	ldr	r2, [r7, #8]
 8003a42:	1ad3      	subs	r3, r2, r3
 8003a44:	425a      	negs	r2, r3
 8003a46:	4153      	adcs	r3, r2
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	001a      	movs	r2, r3
 8003a4c:	1dfb      	adds	r3, r7, #7
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d197      	bne.n	8003984 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a54:	2300      	movs	r3, #0
}
 8003a56:	0018      	movs	r0, r3
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	b008      	add	sp, #32
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	20000004 	.word	0x20000004
 8003a64:	ffffdfff 	.word	0xffffdfff

08003a68 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b086      	sub	sp, #24
 8003a6c:	af02      	add	r7, sp, #8
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	685a      	ldr	r2, [r3, #4]
 8003a78:	2382      	movs	r3, #130	; 0x82
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d113      	bne.n	8003aa8 <SPI_EndRxTransaction+0x40>
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	689a      	ldr	r2, [r3, #8]
 8003a84:	2380      	movs	r3, #128	; 0x80
 8003a86:	021b      	lsls	r3, r3, #8
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d005      	beq.n	8003a98 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	689a      	ldr	r2, [r3, #8]
 8003a90:	2380      	movs	r3, #128	; 0x80
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d107      	bne.n	8003aa8 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2140      	movs	r1, #64	; 0x40
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	2382      	movs	r3, #130	; 0x82
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d12b      	bne.n	8003b0c <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	2380      	movs	r3, #128	; 0x80
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	429a      	cmp	r2, r3
 8003abe:	d012      	beq.n	8003ae6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ac0:	68ba      	ldr	r2, [r7, #8]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	9300      	str	r3, [sp, #0]
 8003ac8:	0013      	movs	r3, r2
 8003aca:	2200      	movs	r2, #0
 8003acc:	2180      	movs	r1, #128	; 0x80
 8003ace:	f7ff ff3d 	bl	800394c <SPI_WaitFlagStateUntilTimeout>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d02d      	beq.n	8003b32 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ada:	2220      	movs	r2, #32
 8003adc:	431a      	orrs	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e026      	b.n	8003b34 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	68f8      	ldr	r0, [r7, #12]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	0013      	movs	r3, r2
 8003af0:	2200      	movs	r2, #0
 8003af2:	2101      	movs	r1, #1
 8003af4:	f7ff ff2a 	bl	800394c <SPI_WaitFlagStateUntilTimeout>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d01a      	beq.n	8003b32 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b00:	2220      	movs	r2, #32
 8003b02:	431a      	orrs	r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e013      	b.n	8003b34 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003b0c:	68ba      	ldr	r2, [r7, #8]
 8003b0e:	68f8      	ldr	r0, [r7, #12]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	0013      	movs	r3, r2
 8003b16:	2200      	movs	r2, #0
 8003b18:	2101      	movs	r1, #1
 8003b1a:	f7ff ff17 	bl	800394c <SPI_WaitFlagStateUntilTimeout>
 8003b1e:	1e03      	subs	r3, r0, #0
 8003b20:	d007      	beq.n	8003b32 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	2220      	movs	r2, #32
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b2e:	2303      	movs	r3, #3
 8003b30:	e000      	b.n	8003b34 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003b32:	2300      	movs	r3, #0
}
 8003b34:	0018      	movs	r0, r3
 8003b36:	46bd      	mov	sp, r7
 8003b38:	b004      	add	sp, #16
 8003b3a:	bd80      	pop	{r7, pc}

08003b3c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b088      	sub	sp, #32
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003b48:	4b1d      	ldr	r3, [pc, #116]	; (8003bc0 <SPI_EndRxTxTransaction+0x84>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	491d      	ldr	r1, [pc, #116]	; (8003bc4 <SPI_EndRxTxTransaction+0x88>)
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f7fc faec 	bl	800012c <__udivsi3>
 8003b54:	0003      	movs	r3, r0
 8003b56:	001a      	movs	r2, r3
 8003b58:	0013      	movs	r3, r2
 8003b5a:	015b      	lsls	r3, r3, #5
 8003b5c:	1a9b      	subs	r3, r3, r2
 8003b5e:	009b      	lsls	r3, r3, #2
 8003b60:	189b      	adds	r3, r3, r2
 8003b62:	00db      	lsls	r3, r3, #3
 8003b64:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	685a      	ldr	r2, [r3, #4]
 8003b6a:	2382      	movs	r3, #130	; 0x82
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d112      	bne.n	8003b98 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	0013      	movs	r3, r2
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	2180      	movs	r1, #128	; 0x80
 8003b80:	f7ff fee4 	bl	800394c <SPI_WaitFlagStateUntilTimeout>
 8003b84:	1e03      	subs	r3, r0, #0
 8003b86:	d016      	beq.n	8003bb6 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b8c:	2220      	movs	r2, #32
 8003b8e:	431a      	orrs	r2, r3
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e00f      	b.n	8003bb8 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00a      	beq.n	8003bb4 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2280      	movs	r2, #128	; 0x80
 8003bac:	4013      	ands	r3, r2
 8003bae:	2b80      	cmp	r3, #128	; 0x80
 8003bb0:	d0f2      	beq.n	8003b98 <SPI_EndRxTxTransaction+0x5c>
 8003bb2:	e000      	b.n	8003bb6 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003bb4:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003bb6:	2300      	movs	r3, #0
}
 8003bb8:	0018      	movs	r0, r3
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b006      	add	sp, #24
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000004 	.word	0x20000004
 8003bc4:	016e3600 	.word	0x016e3600

08003bc8 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003bd0:	4b37      	ldr	r3, [pc, #220]	; (8003cb0 <SPI_CloseRxTx_ISR+0xe8>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4937      	ldr	r1, [pc, #220]	; (8003cb4 <SPI_CloseRxTx_ISR+0xec>)
 8003bd6:	0018      	movs	r0, r3
 8003bd8:	f7fc faa8 	bl	800012c <__udivsi3>
 8003bdc:	0003      	movs	r3, r0
 8003bde:	001a      	movs	r2, r3
 8003be0:	2364      	movs	r3, #100	; 0x64
 8003be2:	4353      	muls	r3, r2
 8003be4:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003be6:	f7fd fbb7 	bl	8001358 <HAL_GetTick>
 8003bea:	0003      	movs	r3, r0
 8003bec:	617b      	str	r3, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	685a      	ldr	r2, [r3, #4]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2120      	movs	r1, #32
 8003bfa:	438a      	bics	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d106      	bne.n	8003c12 <SPI_CloseRxTx_ISR+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	2220      	movs	r2, #32
 8003c0a:	431a      	orrs	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003c10:	e008      	b.n	8003c24 <SPI_CloseRxTx_ISR+0x5c>
    }
    count--;
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	3b01      	subs	r3, #1
 8003c16:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	4013      	ands	r3, r2
 8003c22:	d0ec      	beq.n	8003bfe <SPI_CloseRxTx_ISR+0x36>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2164      	movs	r1, #100	; 0x64
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	f7ff ff86 	bl	8003b3c <SPI_EndRxTxTransaction>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d005      	beq.n	8003c40 <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c38:	2220      	movs	r2, #32
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d10a      	bne.n	8003c5e <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003c48:	2300      	movs	r3, #0
 8003c4a:	60fb      	str	r3, [r7, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	60fb      	str	r3, [r7, #12]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d117      	bne.n	8003c96 <SPI_CloseRxTx_ISR+0xce>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2251      	movs	r2, #81	; 0x51
 8003c6a:	5c9b      	ldrb	r3, [r3, r2]
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d108      	bne.n	8003c84 <SPI_CloseRxTx_ISR+0xbc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2251      	movs	r2, #81	; 0x51
 8003c76:	2101      	movs	r1, #1
 8003c78:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	0018      	movs	r0, r3
 8003c7e:	f7fd f8af 	bl	8000de0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003c82:	e010      	b.n	8003ca6 <SPI_CloseRxTx_ISR+0xde>
        hspi->State = HAL_SPI_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2251      	movs	r2, #81	; 0x51
 8003c88:	2101      	movs	r1, #1
 8003c8a:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	0018      	movs	r0, r3
 8003c90:	f7ff fce0 	bl	8003654 <HAL_SPI_TxRxCpltCallback>
}
 8003c94:	e007      	b.n	8003ca6 <SPI_CloseRxTx_ISR+0xde>
      hspi->State = HAL_SPI_STATE_READY;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2251      	movs	r2, #81	; 0x51
 8003c9a:	2101      	movs	r1, #1
 8003c9c:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	0018      	movs	r0, r3
 8003ca2:	f7ff fcdf 	bl	8003664 <HAL_SPI_ErrorCallback>
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	b006      	add	sp, #24
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	46c0      	nop			; (mov r8, r8)
 8003cb0:	20000004 	.word	0x20000004
 8003cb4:	00005dc0 	.word	0x00005dc0

08003cb8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2160      	movs	r1, #96	; 0x60
 8003ccc:	438a      	bics	r2, r1
 8003cce:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003cd0:	f7fd fb42 	bl	8001358 <HAL_GetTick>
 8003cd4:	0002      	movs	r2, r0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2164      	movs	r1, #100	; 0x64
 8003cda:	0018      	movs	r0, r3
 8003cdc:	f7ff fec4 	bl	8003a68 <SPI_EndRxTransaction>
 8003ce0:	1e03      	subs	r3, r0, #0
 8003ce2:	d005      	beq.n	8003cf0 <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ce8:	2220      	movs	r2, #32
 8003cea:	431a      	orrs	r2, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10a      	bne.n	8003d0e <SPI_CloseRx_ISR+0x56>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2251      	movs	r2, #81	; 0x51
 8003d12:	2101      	movs	r1, #1
 8003d14:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d104      	bne.n	8003d28 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fd f85d 	bl	8000de0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003d26:	e003      	b.n	8003d30 <SPI_CloseRx_ISR+0x78>
      HAL_SPI_ErrorCallback(hspi);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f7ff fc9a 	bl	8003664 <HAL_SPI_ErrorCallback>
}
 8003d30:	46c0      	nop			; (mov r8, r8)
 8003d32:	46bd      	mov	sp, r7
 8003d34:	b004      	add	sp, #16
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003d40:	4b2d      	ldr	r3, [pc, #180]	; (8003df8 <SPI_CloseTx_ISR+0xc0>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	492d      	ldr	r1, [pc, #180]	; (8003dfc <SPI_CloseTx_ISR+0xc4>)
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7fc f9f0 	bl	800012c <__udivsi3>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	001a      	movs	r2, r3
 8003d50:	2364      	movs	r3, #100	; 0x64
 8003d52:	4353      	muls	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003d56:	f7fd faff 	bl	8001358 <HAL_GetTick>
 8003d5a:	0003      	movs	r3, r0
 8003d5c:	617b      	str	r3, [r7, #20]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d106      	bne.n	8003d72 <SPI_CloseTx_ISR+0x3a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d68:	2220      	movs	r2, #32
 8003d6a:	431a      	orrs	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003d70:	e008      	b.n	8003d84 <SPI_CloseTx_ISR+0x4c>
    }
    count--;
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3b01      	subs	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	4013      	ands	r3, r2
 8003d82:	d0ec      	beq.n	8003d5e <SPI_CloseTx_ISR+0x26>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	685a      	ldr	r2, [r3, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	21a0      	movs	r1, #160	; 0xa0
 8003d90:	438a      	bics	r2, r1
 8003d92:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003d94:	697a      	ldr	r2, [r7, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2164      	movs	r1, #100	; 0x64
 8003d9a:	0018      	movs	r0, r3
 8003d9c:	f7ff fece 	bl	8003b3c <SPI_EndRxTxTransaction>
 8003da0:	1e03      	subs	r3, r0, #0
 8003da2:	d005      	beq.n	8003db0 <SPI_CloseTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003da8:	2220      	movs	r2, #32
 8003daa:	431a      	orrs	r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10a      	bne.n	8003dce <SPI_CloseTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003db8:	2300      	movs	r3, #0
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	68db      	ldr	r3, [r3, #12]
 8003dc2:	60fb      	str	r3, [r7, #12]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	60fb      	str	r3, [r7, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2251      	movs	r2, #81	; 0x51
 8003dd2:	2101      	movs	r1, #1
 8003dd4:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d004      	beq.n	8003de8 <SPI_CloseTx_ISR+0xb0>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7ff fc3f 	bl	8003664 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8003de6:	e003      	b.n	8003df0 <SPI_CloseTx_ISR+0xb8>
    HAL_SPI_TxCpltCallback(hspi);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	0018      	movs	r0, r3
 8003dec:	f7fc ffea 	bl	8000dc4 <HAL_SPI_TxCpltCallback>
}
 8003df0:	46c0      	nop			; (mov r8, r8)
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b006      	add	sp, #24
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	20000004 	.word	0x20000004
 8003dfc:	00005dc0 	.word	0x00005dc0

08003e00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e044      	b.n	8003e9c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d107      	bne.n	8003e2a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	2274      	movs	r2, #116	; 0x74
 8003e1e:	2100      	movs	r1, #0
 8003e20:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	0018      	movs	r0, r3
 8003e26:	f7fd f93b 	bl	80010a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2224      	movs	r2, #36	; 0x24
 8003e2e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2101      	movs	r1, #1
 8003e3c:	438a      	bics	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	0018      	movs	r0, r3
 8003e44:	f000 f8d8 	bl	8003ff8 <UART_SetConfig>
 8003e48:	0003      	movs	r3, r0
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e024      	b.n	8003e9c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	0018      	movs	r0, r3
 8003e5e:	f000 fb6b 	bl	8004538 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	490d      	ldr	r1, [pc, #52]	; (8003ea4 <HAL_UART_Init+0xa4>)
 8003e6e:	400a      	ands	r2, r1
 8003e70:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689a      	ldr	r2, [r3, #8]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	212a      	movs	r1, #42	; 0x2a
 8003e7e:	438a      	bics	r2, r1
 8003e80:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681a      	ldr	r2, [r3, #0]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	430a      	orrs	r2, r1
 8003e90:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	0018      	movs	r0, r3
 8003e96:	f000 fc03 	bl	80046a0 <UART_CheckIdleState>
 8003e9a:	0003      	movs	r3, r0
}
 8003e9c:	0018      	movs	r0, r3
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	b002      	add	sp, #8
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	ffffb7ff 	.word	0xffffb7ff

08003ea8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b08a      	sub	sp, #40	; 0x28
 8003eac:	af02      	add	r7, sp, #8
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	603b      	str	r3, [r7, #0]
 8003eb4:	1dbb      	adds	r3, r7, #6
 8003eb6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ebc:	2b20      	cmp	r3, #32
 8003ebe:	d000      	beq.n	8003ec2 <HAL_UART_Transmit+0x1a>
 8003ec0:	e095      	b.n	8003fee <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d003      	beq.n	8003ed0 <HAL_UART_Transmit+0x28>
 8003ec8:	1dbb      	adds	r3, r7, #6
 8003eca:	881b      	ldrh	r3, [r3, #0]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e08d      	b.n	8003ff0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	2380      	movs	r3, #128	; 0x80
 8003eda:	015b      	lsls	r3, r3, #5
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d109      	bne.n	8003ef4 <HAL_UART_Transmit+0x4c>
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d105      	bne.n	8003ef4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2201      	movs	r2, #1
 8003eec:	4013      	ands	r3, r2
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e07d      	b.n	8003ff0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2274      	movs	r2, #116	; 0x74
 8003ef8:	5c9b      	ldrb	r3, [r3, r2]
 8003efa:	2b01      	cmp	r3, #1
 8003efc:	d101      	bne.n	8003f02 <HAL_UART_Transmit+0x5a>
 8003efe:	2302      	movs	r3, #2
 8003f00:	e076      	b.n	8003ff0 <HAL_UART_Transmit+0x148>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2274      	movs	r2, #116	; 0x74
 8003f06:	2101      	movs	r1, #1
 8003f08:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	2100      	movs	r1, #0
 8003f10:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2221      	movs	r2, #33	; 0x21
 8003f16:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f18:	f7fd fa1e 	bl	8001358 <HAL_GetTick>
 8003f1c:	0003      	movs	r3, r0
 8003f1e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	1dba      	adds	r2, r7, #6
 8003f24:	2150      	movs	r1, #80	; 0x50
 8003f26:	8812      	ldrh	r2, [r2, #0]
 8003f28:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1dba      	adds	r2, r7, #6
 8003f2e:	2152      	movs	r1, #82	; 0x52
 8003f30:	8812      	ldrh	r2, [r2, #0]
 8003f32:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	689a      	ldr	r2, [r3, #8]
 8003f38:	2380      	movs	r3, #128	; 0x80
 8003f3a:	015b      	lsls	r3, r3, #5
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d108      	bne.n	8003f52 <HAL_UART_Transmit+0xaa>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d104      	bne.n	8003f52 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	61bb      	str	r3, [r7, #24]
 8003f50:	e003      	b.n	8003f5a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f56:	2300      	movs	r3, #0
 8003f58:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2274      	movs	r2, #116	; 0x74
 8003f5e:	2100      	movs	r1, #0
 8003f60:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003f62:	e02c      	b.n	8003fbe <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	9300      	str	r3, [sp, #0]
 8003f6c:	0013      	movs	r3, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	2180      	movs	r1, #128	; 0x80
 8003f72:	f000 fbdd 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 8003f76:	1e03      	subs	r3, r0, #0
 8003f78:	d001      	beq.n	8003f7e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e038      	b.n	8003ff0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10b      	bne.n	8003f9c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	001a      	movs	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	05d2      	lsls	r2, r2, #23
 8003f90:	0dd2      	lsrs	r2, r2, #23
 8003f92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	3302      	adds	r3, #2
 8003f98:	61bb      	str	r3, [r7, #24]
 8003f9a:	e007      	b.n	8003fac <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	781a      	ldrb	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2252      	movs	r2, #82	; 0x52
 8003fb0:	5a9b      	ldrh	r3, [r3, r2]
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	3b01      	subs	r3, #1
 8003fb6:	b299      	uxth	r1, r3
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2252      	movs	r2, #82	; 0x52
 8003fbc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	2252      	movs	r2, #82	; 0x52
 8003fc2:	5a9b      	ldrh	r3, [r3, r2]
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d1cc      	bne.n	8003f64 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	0013      	movs	r3, r2
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2140      	movs	r1, #64	; 0x40
 8003fd8:	f000 fbaa 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 8003fdc:	1e03      	subs	r3, r0, #0
 8003fde:	d001      	beq.n	8003fe4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e005      	b.n	8003ff0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2220      	movs	r2, #32
 8003fe8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003fea:	2300      	movs	r3, #0
 8003fec:	e000      	b.n	8003ff0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003fee:	2302      	movs	r3, #2
  }
}
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b008      	add	sp, #32
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ff8:	b5b0      	push	{r4, r5, r7, lr}
 8003ffa:	b08e      	sub	sp, #56	; 0x38
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004000:	231a      	movs	r3, #26
 8004002:	2218      	movs	r2, #24
 8004004:	189b      	adds	r3, r3, r2
 8004006:	19db      	adds	r3, r3, r7
 8004008:	2200      	movs	r2, #0
 800400a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	689a      	ldr	r2, [r3, #8]
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	431a      	orrs	r2, r3
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	431a      	orrs	r2, r3
 800401c:	69fb      	ldr	r3, [r7, #28]
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	4313      	orrs	r3, r2
 8004022:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4ac3      	ldr	r2, [pc, #780]	; (8004338 <UART_SetConfig+0x340>)
 800402c:	4013      	ands	r3, r2
 800402e:	0019      	movs	r1, r3
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004036:	430a      	orrs	r2, r1
 8004038:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4abe      	ldr	r2, [pc, #760]	; (800433c <UART_SetConfig+0x344>)
 8004042:	4013      	ands	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	699b      	ldr	r3, [r3, #24]
 8004056:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4ab8      	ldr	r2, [pc, #736]	; (8004340 <UART_SetConfig+0x348>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d004      	beq.n	800406c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004068:	4313      	orrs	r3, r2
 800406a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	4ab4      	ldr	r2, [pc, #720]	; (8004344 <UART_SetConfig+0x34c>)
 8004074:	4013      	ands	r3, r2
 8004076:	0019      	movs	r1, r3
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800407e:	430a      	orrs	r2, r1
 8004080:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4ab0      	ldr	r2, [pc, #704]	; (8004348 <UART_SetConfig+0x350>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d131      	bne.n	80040f0 <UART_SetConfig+0xf8>
 800408c:	4baf      	ldr	r3, [pc, #700]	; (800434c <UART_SetConfig+0x354>)
 800408e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004090:	2203      	movs	r2, #3
 8004092:	4013      	ands	r3, r2
 8004094:	2b03      	cmp	r3, #3
 8004096:	d01d      	beq.n	80040d4 <UART_SetConfig+0xdc>
 8004098:	d823      	bhi.n	80040e2 <UART_SetConfig+0xea>
 800409a:	2b02      	cmp	r3, #2
 800409c:	d00c      	beq.n	80040b8 <UART_SetConfig+0xc0>
 800409e:	d820      	bhi.n	80040e2 <UART_SetConfig+0xea>
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d002      	beq.n	80040aa <UART_SetConfig+0xb2>
 80040a4:	2b01      	cmp	r3, #1
 80040a6:	d00e      	beq.n	80040c6 <UART_SetConfig+0xce>
 80040a8:	e01b      	b.n	80040e2 <UART_SetConfig+0xea>
 80040aa:	231b      	movs	r3, #27
 80040ac:	2218      	movs	r2, #24
 80040ae:	189b      	adds	r3, r3, r2
 80040b0:	19db      	adds	r3, r3, r7
 80040b2:	2201      	movs	r2, #1
 80040b4:	701a      	strb	r2, [r3, #0]
 80040b6:	e0b4      	b.n	8004222 <UART_SetConfig+0x22a>
 80040b8:	231b      	movs	r3, #27
 80040ba:	2218      	movs	r2, #24
 80040bc:	189b      	adds	r3, r3, r2
 80040be:	19db      	adds	r3, r3, r7
 80040c0:	2202      	movs	r2, #2
 80040c2:	701a      	strb	r2, [r3, #0]
 80040c4:	e0ad      	b.n	8004222 <UART_SetConfig+0x22a>
 80040c6:	231b      	movs	r3, #27
 80040c8:	2218      	movs	r2, #24
 80040ca:	189b      	adds	r3, r3, r2
 80040cc:	19db      	adds	r3, r3, r7
 80040ce:	2204      	movs	r2, #4
 80040d0:	701a      	strb	r2, [r3, #0]
 80040d2:	e0a6      	b.n	8004222 <UART_SetConfig+0x22a>
 80040d4:	231b      	movs	r3, #27
 80040d6:	2218      	movs	r2, #24
 80040d8:	189b      	adds	r3, r3, r2
 80040da:	19db      	adds	r3, r3, r7
 80040dc:	2208      	movs	r2, #8
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	e09f      	b.n	8004222 <UART_SetConfig+0x22a>
 80040e2:	231b      	movs	r3, #27
 80040e4:	2218      	movs	r2, #24
 80040e6:	189b      	adds	r3, r3, r2
 80040e8:	19db      	adds	r3, r3, r7
 80040ea:	2210      	movs	r2, #16
 80040ec:	701a      	strb	r2, [r3, #0]
 80040ee:	e098      	b.n	8004222 <UART_SetConfig+0x22a>
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	4a96      	ldr	r2, [pc, #600]	; (8004350 <UART_SetConfig+0x358>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d131      	bne.n	800415e <UART_SetConfig+0x166>
 80040fa:	4b94      	ldr	r3, [pc, #592]	; (800434c <UART_SetConfig+0x354>)
 80040fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040fe:	220c      	movs	r2, #12
 8004100:	4013      	ands	r3, r2
 8004102:	2b0c      	cmp	r3, #12
 8004104:	d01d      	beq.n	8004142 <UART_SetConfig+0x14a>
 8004106:	d823      	bhi.n	8004150 <UART_SetConfig+0x158>
 8004108:	2b08      	cmp	r3, #8
 800410a:	d00c      	beq.n	8004126 <UART_SetConfig+0x12e>
 800410c:	d820      	bhi.n	8004150 <UART_SetConfig+0x158>
 800410e:	2b00      	cmp	r3, #0
 8004110:	d002      	beq.n	8004118 <UART_SetConfig+0x120>
 8004112:	2b04      	cmp	r3, #4
 8004114:	d00e      	beq.n	8004134 <UART_SetConfig+0x13c>
 8004116:	e01b      	b.n	8004150 <UART_SetConfig+0x158>
 8004118:	231b      	movs	r3, #27
 800411a:	2218      	movs	r2, #24
 800411c:	189b      	adds	r3, r3, r2
 800411e:	19db      	adds	r3, r3, r7
 8004120:	2200      	movs	r2, #0
 8004122:	701a      	strb	r2, [r3, #0]
 8004124:	e07d      	b.n	8004222 <UART_SetConfig+0x22a>
 8004126:	231b      	movs	r3, #27
 8004128:	2218      	movs	r2, #24
 800412a:	189b      	adds	r3, r3, r2
 800412c:	19db      	adds	r3, r3, r7
 800412e:	2202      	movs	r2, #2
 8004130:	701a      	strb	r2, [r3, #0]
 8004132:	e076      	b.n	8004222 <UART_SetConfig+0x22a>
 8004134:	231b      	movs	r3, #27
 8004136:	2218      	movs	r2, #24
 8004138:	189b      	adds	r3, r3, r2
 800413a:	19db      	adds	r3, r3, r7
 800413c:	2204      	movs	r2, #4
 800413e:	701a      	strb	r2, [r3, #0]
 8004140:	e06f      	b.n	8004222 <UART_SetConfig+0x22a>
 8004142:	231b      	movs	r3, #27
 8004144:	2218      	movs	r2, #24
 8004146:	189b      	adds	r3, r3, r2
 8004148:	19db      	adds	r3, r3, r7
 800414a:	2208      	movs	r2, #8
 800414c:	701a      	strb	r2, [r3, #0]
 800414e:	e068      	b.n	8004222 <UART_SetConfig+0x22a>
 8004150:	231b      	movs	r3, #27
 8004152:	2218      	movs	r2, #24
 8004154:	189b      	adds	r3, r3, r2
 8004156:	19db      	adds	r3, r3, r7
 8004158:	2210      	movs	r2, #16
 800415a:	701a      	strb	r2, [r3, #0]
 800415c:	e061      	b.n	8004222 <UART_SetConfig+0x22a>
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a7c      	ldr	r2, [pc, #496]	; (8004354 <UART_SetConfig+0x35c>)
 8004164:	4293      	cmp	r3, r2
 8004166:	d106      	bne.n	8004176 <UART_SetConfig+0x17e>
 8004168:	231b      	movs	r3, #27
 800416a:	2218      	movs	r2, #24
 800416c:	189b      	adds	r3, r3, r2
 800416e:	19db      	adds	r3, r3, r7
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
 8004174:	e055      	b.n	8004222 <UART_SetConfig+0x22a>
 8004176:	69fb      	ldr	r3, [r7, #28]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a77      	ldr	r2, [pc, #476]	; (8004358 <UART_SetConfig+0x360>)
 800417c:	4293      	cmp	r3, r2
 800417e:	d106      	bne.n	800418e <UART_SetConfig+0x196>
 8004180:	231b      	movs	r3, #27
 8004182:	2218      	movs	r2, #24
 8004184:	189b      	adds	r3, r3, r2
 8004186:	19db      	adds	r3, r3, r7
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
 800418c:	e049      	b.n	8004222 <UART_SetConfig+0x22a>
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a6b      	ldr	r2, [pc, #428]	; (8004340 <UART_SetConfig+0x348>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d13e      	bne.n	8004216 <UART_SetConfig+0x21e>
 8004198:	4b6c      	ldr	r3, [pc, #432]	; (800434c <UART_SetConfig+0x354>)
 800419a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800419c:	23c0      	movs	r3, #192	; 0xc0
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	4013      	ands	r3, r2
 80041a2:	22c0      	movs	r2, #192	; 0xc0
 80041a4:	0112      	lsls	r2, r2, #4
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d027      	beq.n	80041fa <UART_SetConfig+0x202>
 80041aa:	22c0      	movs	r2, #192	; 0xc0
 80041ac:	0112      	lsls	r2, r2, #4
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d82a      	bhi.n	8004208 <UART_SetConfig+0x210>
 80041b2:	2280      	movs	r2, #128	; 0x80
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d011      	beq.n	80041de <UART_SetConfig+0x1e6>
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	0112      	lsls	r2, r2, #4
 80041be:	4293      	cmp	r3, r2
 80041c0:	d822      	bhi.n	8004208 <UART_SetConfig+0x210>
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <UART_SetConfig+0x1d8>
 80041c6:	2280      	movs	r2, #128	; 0x80
 80041c8:	00d2      	lsls	r2, r2, #3
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d00e      	beq.n	80041ec <UART_SetConfig+0x1f4>
 80041ce:	e01b      	b.n	8004208 <UART_SetConfig+0x210>
 80041d0:	231b      	movs	r3, #27
 80041d2:	2218      	movs	r2, #24
 80041d4:	189b      	adds	r3, r3, r2
 80041d6:	19db      	adds	r3, r3, r7
 80041d8:	2200      	movs	r2, #0
 80041da:	701a      	strb	r2, [r3, #0]
 80041dc:	e021      	b.n	8004222 <UART_SetConfig+0x22a>
 80041de:	231b      	movs	r3, #27
 80041e0:	2218      	movs	r2, #24
 80041e2:	189b      	adds	r3, r3, r2
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	2202      	movs	r2, #2
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	e01a      	b.n	8004222 <UART_SetConfig+0x22a>
 80041ec:	231b      	movs	r3, #27
 80041ee:	2218      	movs	r2, #24
 80041f0:	189b      	adds	r3, r3, r2
 80041f2:	19db      	adds	r3, r3, r7
 80041f4:	2204      	movs	r2, #4
 80041f6:	701a      	strb	r2, [r3, #0]
 80041f8:	e013      	b.n	8004222 <UART_SetConfig+0x22a>
 80041fa:	231b      	movs	r3, #27
 80041fc:	2218      	movs	r2, #24
 80041fe:	189b      	adds	r3, r3, r2
 8004200:	19db      	adds	r3, r3, r7
 8004202:	2208      	movs	r2, #8
 8004204:	701a      	strb	r2, [r3, #0]
 8004206:	e00c      	b.n	8004222 <UART_SetConfig+0x22a>
 8004208:	231b      	movs	r3, #27
 800420a:	2218      	movs	r2, #24
 800420c:	189b      	adds	r3, r3, r2
 800420e:	19db      	adds	r3, r3, r7
 8004210:	2210      	movs	r2, #16
 8004212:	701a      	strb	r2, [r3, #0]
 8004214:	e005      	b.n	8004222 <UART_SetConfig+0x22a>
 8004216:	231b      	movs	r3, #27
 8004218:	2218      	movs	r2, #24
 800421a:	189b      	adds	r3, r3, r2
 800421c:	19db      	adds	r3, r3, r7
 800421e:	2210      	movs	r2, #16
 8004220:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a46      	ldr	r2, [pc, #280]	; (8004340 <UART_SetConfig+0x348>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d000      	beq.n	800422e <UART_SetConfig+0x236>
 800422c:	e09a      	b.n	8004364 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800422e:	231b      	movs	r3, #27
 8004230:	2218      	movs	r2, #24
 8004232:	189b      	adds	r3, r3, r2
 8004234:	19db      	adds	r3, r3, r7
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	2b08      	cmp	r3, #8
 800423a:	d01d      	beq.n	8004278 <UART_SetConfig+0x280>
 800423c:	dc20      	bgt.n	8004280 <UART_SetConfig+0x288>
 800423e:	2b04      	cmp	r3, #4
 8004240:	d015      	beq.n	800426e <UART_SetConfig+0x276>
 8004242:	dc1d      	bgt.n	8004280 <UART_SetConfig+0x288>
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <UART_SetConfig+0x256>
 8004248:	2b02      	cmp	r3, #2
 800424a:	d005      	beq.n	8004258 <UART_SetConfig+0x260>
 800424c:	e018      	b.n	8004280 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800424e:	f7fe fd11 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8004252:	0003      	movs	r3, r0
 8004254:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004256:	e01c      	b.n	8004292 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004258:	4b3c      	ldr	r3, [pc, #240]	; (800434c <UART_SetConfig+0x354>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2210      	movs	r2, #16
 800425e:	4013      	ands	r3, r2
 8004260:	d002      	beq.n	8004268 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004262:	4b3e      	ldr	r3, [pc, #248]	; (800435c <UART_SetConfig+0x364>)
 8004264:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004266:	e014      	b.n	8004292 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8004268:	4b3d      	ldr	r3, [pc, #244]	; (8004360 <UART_SetConfig+0x368>)
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800426c:	e011      	b.n	8004292 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426e:	f7fe fc53 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8004272:	0003      	movs	r3, r0
 8004274:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004276:	e00c      	b.n	8004292 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004278:	2380      	movs	r3, #128	; 0x80
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800427e:	e008      	b.n	8004292 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004280:	2300      	movs	r3, #0
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004284:	231a      	movs	r3, #26
 8004286:	2218      	movs	r2, #24
 8004288:	189b      	adds	r3, r3, r2
 800428a:	19db      	adds	r3, r3, r7
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
        break;
 8004290:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004294:	2b00      	cmp	r3, #0
 8004296:	d100      	bne.n	800429a <UART_SetConfig+0x2a2>
 8004298:	e134      	b.n	8004504 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	0013      	movs	r3, r2
 80042a0:	005b      	lsls	r3, r3, #1
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d305      	bcc.n	80042b6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d906      	bls.n	80042c4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80042b6:	231a      	movs	r3, #26
 80042b8:	2218      	movs	r2, #24
 80042ba:	189b      	adds	r3, r3, r2
 80042bc:	19db      	adds	r3, r3, r7
 80042be:	2201      	movs	r2, #1
 80042c0:	701a      	strb	r2, [r3, #0]
 80042c2:	e11f      	b.n	8004504 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042c6:	613b      	str	r3, [r7, #16]
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	6939      	ldr	r1, [r7, #16]
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	000b      	movs	r3, r1
 80042d2:	0e1b      	lsrs	r3, r3, #24
 80042d4:	0010      	movs	r0, r2
 80042d6:	0205      	lsls	r5, r0, #8
 80042d8:	431d      	orrs	r5, r3
 80042da:	000b      	movs	r3, r1
 80042dc:	021c      	lsls	r4, r3, #8
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	085b      	lsrs	r3, r3, #1
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	68b8      	ldr	r0, [r7, #8]
 80042ec:	68f9      	ldr	r1, [r7, #12]
 80042ee:	1900      	adds	r0, r0, r4
 80042f0:	4169      	adcs	r1, r5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	2300      	movs	r3, #0
 80042fa:	607b      	str	r3, [r7, #4]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f7fb ffa0 	bl	8000244 <__aeabi_uldivmod>
 8004304:	0002      	movs	r2, r0
 8004306:	000b      	movs	r3, r1
 8004308:	0013      	movs	r3, r2
 800430a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800430c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800430e:	23c0      	movs	r3, #192	; 0xc0
 8004310:	009b      	lsls	r3, r3, #2
 8004312:	429a      	cmp	r2, r3
 8004314:	d309      	bcc.n	800432a <UART_SetConfig+0x332>
 8004316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004318:	2380      	movs	r3, #128	; 0x80
 800431a:	035b      	lsls	r3, r3, #13
 800431c:	429a      	cmp	r2, r3
 800431e:	d204      	bcs.n	800432a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004320:	69fb      	ldr	r3, [r7, #28]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004326:	60da      	str	r2, [r3, #12]
 8004328:	e0ec      	b.n	8004504 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800432a:	231a      	movs	r3, #26
 800432c:	2218      	movs	r2, #24
 800432e:	189b      	adds	r3, r3, r2
 8004330:	19db      	adds	r3, r3, r7
 8004332:	2201      	movs	r2, #1
 8004334:	701a      	strb	r2, [r3, #0]
 8004336:	e0e5      	b.n	8004504 <UART_SetConfig+0x50c>
 8004338:	efff69f3 	.word	0xefff69f3
 800433c:	ffffcfff 	.word	0xffffcfff
 8004340:	40004800 	.word	0x40004800
 8004344:	fffff4ff 	.word	0xfffff4ff
 8004348:	40013800 	.word	0x40013800
 800434c:	40021000 	.word	0x40021000
 8004350:	40004400 	.word	0x40004400
 8004354:	40004c00 	.word	0x40004c00
 8004358:	40005000 	.word	0x40005000
 800435c:	003d0900 	.word	0x003d0900
 8004360:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	69da      	ldr	r2, [r3, #28]
 8004368:	2380      	movs	r3, #128	; 0x80
 800436a:	021b      	lsls	r3, r3, #8
 800436c:	429a      	cmp	r2, r3
 800436e:	d000      	beq.n	8004372 <UART_SetConfig+0x37a>
 8004370:	e071      	b.n	8004456 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004372:	231b      	movs	r3, #27
 8004374:	2218      	movs	r2, #24
 8004376:	189b      	adds	r3, r3, r2
 8004378:	19db      	adds	r3, r3, r7
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b08      	cmp	r3, #8
 800437e:	d822      	bhi.n	80043c6 <UART_SetConfig+0x3ce>
 8004380:	009a      	lsls	r2, r3, #2
 8004382:	4b68      	ldr	r3, [pc, #416]	; (8004524 <UART_SetConfig+0x52c>)
 8004384:	18d3      	adds	r3, r2, r3
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800438a:	f7fe fc73 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 800438e:	0003      	movs	r3, r0
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004392:	e021      	b.n	80043d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004394:	f7fe fc84 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 8004398:	0003      	movs	r3, r0
 800439a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800439c:	e01c      	b.n	80043d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800439e:	4b62      	ldr	r3, [pc, #392]	; (8004528 <UART_SetConfig+0x530>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	2210      	movs	r2, #16
 80043a4:	4013      	ands	r3, r2
 80043a6:	d002      	beq.n	80043ae <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80043a8:	4b60      	ldr	r3, [pc, #384]	; (800452c <UART_SetConfig+0x534>)
 80043aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80043ac:	e014      	b.n	80043d8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80043ae:	4b60      	ldr	r3, [pc, #384]	; (8004530 <UART_SetConfig+0x538>)
 80043b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043b2:	e011      	b.n	80043d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043b4:	f7fe fbb0 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 80043b8:	0003      	movs	r3, r0
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043bc:	e00c      	b.n	80043d8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043be:	2380      	movs	r3, #128	; 0x80
 80043c0:	021b      	lsls	r3, r3, #8
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80043c4:	e008      	b.n	80043d8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80043c6:	2300      	movs	r3, #0
 80043c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80043ca:	231a      	movs	r3, #26
 80043cc:	2218      	movs	r2, #24
 80043ce:	189b      	adds	r3, r3, r2
 80043d0:	19db      	adds	r3, r3, r7
 80043d2:	2201      	movs	r2, #1
 80043d4:	701a      	strb	r2, [r3, #0]
        break;
 80043d6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d100      	bne.n	80043e0 <UART_SetConfig+0x3e8>
 80043de:	e091      	b.n	8004504 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e2:	005a      	lsls	r2, r3, #1
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	18d2      	adds	r2, r2, r3
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	0019      	movs	r1, r3
 80043f2:	0010      	movs	r0, r2
 80043f4:	f7fb fe9a 	bl	800012c <__udivsi3>
 80043f8:	0003      	movs	r3, r0
 80043fa:	b29b      	uxth	r3, r3
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	2b0f      	cmp	r3, #15
 8004402:	d921      	bls.n	8004448 <UART_SetConfig+0x450>
 8004404:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004406:	2380      	movs	r3, #128	; 0x80
 8004408:	025b      	lsls	r3, r3, #9
 800440a:	429a      	cmp	r2, r3
 800440c:	d21c      	bcs.n	8004448 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	b29a      	uxth	r2, r3
 8004412:	200e      	movs	r0, #14
 8004414:	2418      	movs	r4, #24
 8004416:	1903      	adds	r3, r0, r4
 8004418:	19db      	adds	r3, r3, r7
 800441a:	210f      	movs	r1, #15
 800441c:	438a      	bics	r2, r1
 800441e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004422:	085b      	lsrs	r3, r3, #1
 8004424:	b29b      	uxth	r3, r3
 8004426:	2207      	movs	r2, #7
 8004428:	4013      	ands	r3, r2
 800442a:	b299      	uxth	r1, r3
 800442c:	1903      	adds	r3, r0, r4
 800442e:	19db      	adds	r3, r3, r7
 8004430:	1902      	adds	r2, r0, r4
 8004432:	19d2      	adds	r2, r2, r7
 8004434:	8812      	ldrh	r2, [r2, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1902      	adds	r2, r0, r4
 8004440:	19d2      	adds	r2, r2, r7
 8004442:	8812      	ldrh	r2, [r2, #0]
 8004444:	60da      	str	r2, [r3, #12]
 8004446:	e05d      	b.n	8004504 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004448:	231a      	movs	r3, #26
 800444a:	2218      	movs	r2, #24
 800444c:	189b      	adds	r3, r3, r2
 800444e:	19db      	adds	r3, r3, r7
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	e056      	b.n	8004504 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004456:	231b      	movs	r3, #27
 8004458:	2218      	movs	r2, #24
 800445a:	189b      	adds	r3, r3, r2
 800445c:	19db      	adds	r3, r3, r7
 800445e:	781b      	ldrb	r3, [r3, #0]
 8004460:	2b08      	cmp	r3, #8
 8004462:	d822      	bhi.n	80044aa <UART_SetConfig+0x4b2>
 8004464:	009a      	lsls	r2, r3, #2
 8004466:	4b33      	ldr	r3, [pc, #204]	; (8004534 <UART_SetConfig+0x53c>)
 8004468:	18d3      	adds	r3, r2, r3
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800446e:	f7fe fc01 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
 8004472:	0003      	movs	r3, r0
 8004474:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004476:	e021      	b.n	80044bc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004478:	f7fe fc12 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
 800447c:	0003      	movs	r3, r0
 800447e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004480:	e01c      	b.n	80044bc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004482:	4b29      	ldr	r3, [pc, #164]	; (8004528 <UART_SetConfig+0x530>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2210      	movs	r2, #16
 8004488:	4013      	ands	r3, r2
 800448a:	d002      	beq.n	8004492 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800448c:	4b27      	ldr	r3, [pc, #156]	; (800452c <UART_SetConfig+0x534>)
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004490:	e014      	b.n	80044bc <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8004492:	4b27      	ldr	r3, [pc, #156]	; (8004530 <UART_SetConfig+0x538>)
 8004494:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004496:	e011      	b.n	80044bc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004498:	f7fe fb3e 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 800449c:	0003      	movs	r3, r0
 800449e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044a0:	e00c      	b.n	80044bc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	021b      	lsls	r3, r3, #8
 80044a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80044a8:	e008      	b.n	80044bc <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80044ae:	231a      	movs	r3, #26
 80044b0:	2218      	movs	r2, #24
 80044b2:	189b      	adds	r3, r3, r2
 80044b4:	19db      	adds	r3, r3, r7
 80044b6:	2201      	movs	r2, #1
 80044b8:	701a      	strb	r2, [r3, #0]
        break;
 80044ba:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80044bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d020      	beq.n	8004504 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	085a      	lsrs	r2, r3, #1
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ca:	18d2      	adds	r2, r2, r3
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	0019      	movs	r1, r3
 80044d2:	0010      	movs	r0, r2
 80044d4:	f7fb fe2a 	bl	800012c <__udivsi3>
 80044d8:	0003      	movs	r3, r0
 80044da:	b29b      	uxth	r3, r3
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80044de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044e0:	2b0f      	cmp	r3, #15
 80044e2:	d909      	bls.n	80044f8 <UART_SetConfig+0x500>
 80044e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044e6:	2380      	movs	r3, #128	; 0x80
 80044e8:	025b      	lsls	r3, r3, #9
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d204      	bcs.n	80044f8 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f4:	60da      	str	r2, [r3, #12]
 80044f6:	e005      	b.n	8004504 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80044f8:	231a      	movs	r3, #26
 80044fa:	2218      	movs	r2, #24
 80044fc:	189b      	adds	r3, r3, r2
 80044fe:	19db      	adds	r3, r3, r7
 8004500:	2201      	movs	r2, #1
 8004502:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2200      	movs	r2, #0
 8004508:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	2200      	movs	r2, #0
 800450e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004510:	231a      	movs	r3, #26
 8004512:	2218      	movs	r2, #24
 8004514:	189b      	adds	r3, r3, r2
 8004516:	19db      	adds	r3, r3, r7
 8004518:	781b      	ldrb	r3, [r3, #0]
}
 800451a:	0018      	movs	r0, r3
 800451c:	46bd      	mov	sp, r7
 800451e:	b00e      	add	sp, #56	; 0x38
 8004520:	bdb0      	pop	{r4, r5, r7, pc}
 8004522:	46c0      	nop			; (mov r8, r8)
 8004524:	08005b98 	.word	0x08005b98
 8004528:	40021000 	.word	0x40021000
 800452c:	003d0900 	.word	0x003d0900
 8004530:	00f42400 	.word	0x00f42400
 8004534:	08005bbc 	.word	0x08005bbc

08004538 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004544:	2201      	movs	r2, #1
 8004546:	4013      	ands	r3, r2
 8004548:	d00b      	beq.n	8004562 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	4a4a      	ldr	r2, [pc, #296]	; (800467c <UART_AdvFeatureConfig+0x144>)
 8004552:	4013      	ands	r3, r2
 8004554:	0019      	movs	r1, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2202      	movs	r2, #2
 8004568:	4013      	ands	r3, r2
 800456a:	d00b      	beq.n	8004584 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4a43      	ldr	r2, [pc, #268]	; (8004680 <UART_AdvFeatureConfig+0x148>)
 8004574:	4013      	ands	r3, r2
 8004576:	0019      	movs	r1, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004588:	2204      	movs	r2, #4
 800458a:	4013      	ands	r3, r2
 800458c:	d00b      	beq.n	80045a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	4a3b      	ldr	r2, [pc, #236]	; (8004684 <UART_AdvFeatureConfig+0x14c>)
 8004596:	4013      	ands	r3, r2
 8004598:	0019      	movs	r1, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	2208      	movs	r2, #8
 80045ac:	4013      	ands	r3, r2
 80045ae:	d00b      	beq.n	80045c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	4a34      	ldr	r2, [pc, #208]	; (8004688 <UART_AdvFeatureConfig+0x150>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	0019      	movs	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	2210      	movs	r2, #16
 80045ce:	4013      	ands	r3, r2
 80045d0:	d00b      	beq.n	80045ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	4a2c      	ldr	r2, [pc, #176]	; (800468c <UART_AdvFeatureConfig+0x154>)
 80045da:	4013      	ands	r3, r2
 80045dc:	0019      	movs	r1, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	430a      	orrs	r2, r1
 80045e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	2220      	movs	r2, #32
 80045f0:	4013      	ands	r3, r2
 80045f2:	d00b      	beq.n	800460c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	4a25      	ldr	r2, [pc, #148]	; (8004690 <UART_AdvFeatureConfig+0x158>)
 80045fc:	4013      	ands	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	2240      	movs	r2, #64	; 0x40
 8004612:	4013      	ands	r3, r2
 8004614:	d01d      	beq.n	8004652 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	4a1d      	ldr	r2, [pc, #116]	; (8004694 <UART_AdvFeatureConfig+0x15c>)
 800461e:	4013      	ands	r3, r2
 8004620:	0019      	movs	r1, r3
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004632:	2380      	movs	r3, #128	; 0x80
 8004634:	035b      	lsls	r3, r3, #13
 8004636:	429a      	cmp	r2, r3
 8004638:	d10b      	bne.n	8004652 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	4a15      	ldr	r2, [pc, #84]	; (8004698 <UART_AdvFeatureConfig+0x160>)
 8004642:	4013      	ands	r3, r2
 8004644:	0019      	movs	r1, r3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	430a      	orrs	r2, r1
 8004650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004656:	2280      	movs	r2, #128	; 0x80
 8004658:	4013      	ands	r3, r2
 800465a:	d00b      	beq.n	8004674 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	4a0e      	ldr	r2, [pc, #56]	; (800469c <UART_AdvFeatureConfig+0x164>)
 8004664:	4013      	ands	r3, r2
 8004666:	0019      	movs	r1, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	430a      	orrs	r2, r1
 8004672:	605a      	str	r2, [r3, #4]
  }
}
 8004674:	46c0      	nop			; (mov r8, r8)
 8004676:	46bd      	mov	sp, r7
 8004678:	b002      	add	sp, #8
 800467a:	bd80      	pop	{r7, pc}
 800467c:	fffdffff 	.word	0xfffdffff
 8004680:	fffeffff 	.word	0xfffeffff
 8004684:	fffbffff 	.word	0xfffbffff
 8004688:	ffff7fff 	.word	0xffff7fff
 800468c:	ffffefff 	.word	0xffffefff
 8004690:	ffffdfff 	.word	0xffffdfff
 8004694:	ffefffff 	.word	0xffefffff
 8004698:	ff9fffff 	.word	0xff9fffff
 800469c:	fff7ffff 	.word	0xfff7ffff

080046a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2280      	movs	r2, #128	; 0x80
 80046ac:	2100      	movs	r1, #0
 80046ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80046b0:	f7fc fe52 	bl	8001358 <HAL_GetTick>
 80046b4:	0003      	movs	r3, r0
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2208      	movs	r2, #8
 80046c0:	4013      	ands	r3, r2
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d10c      	bne.n	80046e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2280      	movs	r2, #128	; 0x80
 80046ca:	0391      	lsls	r1, r2, #14
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	4a17      	ldr	r2, [pc, #92]	; (800472c <UART_CheckIdleState+0x8c>)
 80046d0:	9200      	str	r2, [sp, #0]
 80046d2:	2200      	movs	r2, #0
 80046d4:	f000 f82c 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 80046d8:	1e03      	subs	r3, r0, #0
 80046da:	d001      	beq.n	80046e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e021      	b.n	8004724 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2204      	movs	r2, #4
 80046e8:	4013      	ands	r3, r2
 80046ea:	2b04      	cmp	r3, #4
 80046ec:	d10c      	bne.n	8004708 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2280      	movs	r2, #128	; 0x80
 80046f2:	03d1      	lsls	r1, r2, #15
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	4a0d      	ldr	r2, [pc, #52]	; (800472c <UART_CheckIdleState+0x8c>)
 80046f8:	9200      	str	r2, [sp, #0]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f000 f818 	bl	8004730 <UART_WaitOnFlagUntilTimeout>
 8004700:	1e03      	subs	r3, r0, #0
 8004702:	d001      	beq.n	8004708 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	e00d      	b.n	8004724 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2220      	movs	r2, #32
 800470c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2220      	movs	r2, #32
 8004712:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2274      	movs	r2, #116	; 0x74
 800471e:	2100      	movs	r1, #0
 8004720:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	0018      	movs	r0, r3
 8004726:	46bd      	mov	sp, r7
 8004728:	b004      	add	sp, #16
 800472a:	bd80      	pop	{r7, pc}
 800472c:	01ffffff 	.word	0x01ffffff

08004730 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b094      	sub	sp, #80	; 0x50
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	603b      	str	r3, [r7, #0]
 800473c:	1dfb      	adds	r3, r7, #7
 800473e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004740:	e0a3      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004744:	3301      	adds	r3, #1
 8004746:	d100      	bne.n	800474a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004748:	e09f      	b.n	800488a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800474a:	f7fc fe05 	bl	8001358 <HAL_GetTick>
 800474e:	0002      	movs	r2, r0
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004756:	429a      	cmp	r2, r3
 8004758:	d302      	bcc.n	8004760 <UART_WaitOnFlagUntilTimeout+0x30>
 800475a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800475c:	2b00      	cmp	r3, #0
 800475e:	d13d      	bne.n	80047dc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004760:	f3ef 8310 	mrs	r3, PRIMASK
 8004764:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004766:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004768:	647b      	str	r3, [r7, #68]	; 0x44
 800476a:	2301      	movs	r3, #1
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004770:	f383 8810 	msr	PRIMASK, r3
}
 8004774:	46c0      	nop			; (mov r8, r8)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	494c      	ldr	r1, [pc, #304]	; (80048b4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004782:	400a      	ands	r2, r1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004788:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	f383 8810 	msr	PRIMASK, r3
}
 8004790:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004792:	f3ef 8310 	mrs	r3, PRIMASK
 8004796:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479a:	643b      	str	r3, [r7, #64]	; 0x40
 800479c:	2301      	movs	r3, #1
 800479e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a2:	f383 8810 	msr	PRIMASK, r3
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689a      	ldr	r2, [r3, #8]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2101      	movs	r1, #1
 80047b4:	438a      	bics	r2, r1
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047be:	f383 8810 	msr	PRIMASK, r3
}
 80047c2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2274      	movs	r2, #116	; 0x74
 80047d4:	2100      	movs	r1, #0
 80047d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80047d8:	2303      	movs	r3, #3
 80047da:	e067      	b.n	80048ac <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2204      	movs	r2, #4
 80047e4:	4013      	ands	r3, r2
 80047e6:	d050      	beq.n	800488a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69da      	ldr	r2, [r3, #28]
 80047ee:	2380      	movs	r3, #128	; 0x80
 80047f0:	011b      	lsls	r3, r3, #4
 80047f2:	401a      	ands	r2, r3
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	011b      	lsls	r3, r3, #4
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d146      	bne.n	800488a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2280      	movs	r2, #128	; 0x80
 8004802:	0112      	lsls	r2, r2, #4
 8004804:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004806:	f3ef 8310 	mrs	r3, PRIMASK
 800480a:	613b      	str	r3, [r7, #16]
  return(result);
 800480c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800480e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004810:	2301      	movs	r3, #1
 8004812:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f383 8810 	msr	PRIMASK, r3
}
 800481a:	46c0      	nop			; (mov r8, r8)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	681a      	ldr	r2, [r3, #0]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4923      	ldr	r1, [pc, #140]	; (80048b4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004828:	400a      	ands	r2, r1
 800482a:	601a      	str	r2, [r3, #0]
 800482c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	f383 8810 	msr	PRIMASK, r3
}
 8004836:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004838:	f3ef 8310 	mrs	r3, PRIMASK
 800483c:	61fb      	str	r3, [r7, #28]
  return(result);
 800483e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	64bb      	str	r3, [r7, #72]	; 0x48
 8004842:	2301      	movs	r3, #1
 8004844:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f383 8810 	msr	PRIMASK, r3
}
 800484c:	46c0      	nop			; (mov r8, r8)
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689a      	ldr	r2, [r3, #8]
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2101      	movs	r1, #1
 800485a:	438a      	bics	r2, r1
 800485c:	609a      	str	r2, [r3, #8]
 800485e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004860:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004864:	f383 8810 	msr	PRIMASK, r3
}
 8004868:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2220      	movs	r2, #32
 800486e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2280      	movs	r2, #128	; 0x80
 800487a:	2120      	movs	r1, #32
 800487c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2274      	movs	r2, #116	; 0x74
 8004882:	2100      	movs	r1, #0
 8004884:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e010      	b.n	80048ac <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	69db      	ldr	r3, [r3, #28]
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	4013      	ands	r3, r2
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	425a      	negs	r2, r3
 800489a:	4153      	adcs	r3, r2
 800489c:	b2db      	uxtb	r3, r3
 800489e:	001a      	movs	r2, r3
 80048a0:	1dfb      	adds	r3, r7, #7
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d100      	bne.n	80048aa <UART_WaitOnFlagUntilTimeout+0x17a>
 80048a8:	e74b      	b.n	8004742 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048aa:	2300      	movs	r3, #0
}
 80048ac:	0018      	movs	r0, r3
 80048ae:	46bd      	mov	sp, r7
 80048b0:	b014      	add	sp, #80	; 0x50
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	fffffe5f 	.word	0xfffffe5f

080048b8 <__errno>:
 80048b8:	4b01      	ldr	r3, [pc, #4]	; (80048c0 <__errno+0x8>)
 80048ba:	6818      	ldr	r0, [r3, #0]
 80048bc:	4770      	bx	lr
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	20000010 	.word	0x20000010

080048c4 <__libc_init_array>:
 80048c4:	b570      	push	{r4, r5, r6, lr}
 80048c6:	2600      	movs	r6, #0
 80048c8:	4d0c      	ldr	r5, [pc, #48]	; (80048fc <__libc_init_array+0x38>)
 80048ca:	4c0d      	ldr	r4, [pc, #52]	; (8004900 <__libc_init_array+0x3c>)
 80048cc:	1b64      	subs	r4, r4, r5
 80048ce:	10a4      	asrs	r4, r4, #2
 80048d0:	42a6      	cmp	r6, r4
 80048d2:	d109      	bne.n	80048e8 <__libc_init_array+0x24>
 80048d4:	2600      	movs	r6, #0
 80048d6:	f000 fc8b 	bl	80051f0 <_init>
 80048da:	4d0a      	ldr	r5, [pc, #40]	; (8004904 <__libc_init_array+0x40>)
 80048dc:	4c0a      	ldr	r4, [pc, #40]	; (8004908 <__libc_init_array+0x44>)
 80048de:	1b64      	subs	r4, r4, r5
 80048e0:	10a4      	asrs	r4, r4, #2
 80048e2:	42a6      	cmp	r6, r4
 80048e4:	d105      	bne.n	80048f2 <__libc_init_array+0x2e>
 80048e6:	bd70      	pop	{r4, r5, r6, pc}
 80048e8:	00b3      	lsls	r3, r6, #2
 80048ea:	58eb      	ldr	r3, [r5, r3]
 80048ec:	4798      	blx	r3
 80048ee:	3601      	adds	r6, #1
 80048f0:	e7ee      	b.n	80048d0 <__libc_init_array+0xc>
 80048f2:	00b3      	lsls	r3, r6, #2
 80048f4:	58eb      	ldr	r3, [r5, r3]
 80048f6:	4798      	blx	r3
 80048f8:	3601      	adds	r6, #1
 80048fa:	e7f2      	b.n	80048e2 <__libc_init_array+0x1e>
 80048fc:	08005c7c 	.word	0x08005c7c
 8004900:	08005c7c 	.word	0x08005c7c
 8004904:	08005c7c 	.word	0x08005c7c
 8004908:	08005c80 	.word	0x08005c80

0800490c <memcpy>:
 800490c:	2300      	movs	r3, #0
 800490e:	b510      	push	{r4, lr}
 8004910:	429a      	cmp	r2, r3
 8004912:	d100      	bne.n	8004916 <memcpy+0xa>
 8004914:	bd10      	pop	{r4, pc}
 8004916:	5ccc      	ldrb	r4, [r1, r3]
 8004918:	54c4      	strb	r4, [r0, r3]
 800491a:	3301      	adds	r3, #1
 800491c:	e7f8      	b.n	8004910 <memcpy+0x4>

0800491e <memset>:
 800491e:	0003      	movs	r3, r0
 8004920:	1882      	adds	r2, r0, r2
 8004922:	4293      	cmp	r3, r2
 8004924:	d100      	bne.n	8004928 <memset+0xa>
 8004926:	4770      	bx	lr
 8004928:	7019      	strb	r1, [r3, #0]
 800492a:	3301      	adds	r3, #1
 800492c:	e7f9      	b.n	8004922 <memset+0x4>
	...

08004930 <siprintf>:
 8004930:	b40e      	push	{r1, r2, r3}
 8004932:	b500      	push	{lr}
 8004934:	490b      	ldr	r1, [pc, #44]	; (8004964 <siprintf+0x34>)
 8004936:	b09c      	sub	sp, #112	; 0x70
 8004938:	ab1d      	add	r3, sp, #116	; 0x74
 800493a:	9002      	str	r0, [sp, #8]
 800493c:	9006      	str	r0, [sp, #24]
 800493e:	9107      	str	r1, [sp, #28]
 8004940:	9104      	str	r1, [sp, #16]
 8004942:	4809      	ldr	r0, [pc, #36]	; (8004968 <siprintf+0x38>)
 8004944:	4909      	ldr	r1, [pc, #36]	; (800496c <siprintf+0x3c>)
 8004946:	cb04      	ldmia	r3!, {r2}
 8004948:	9105      	str	r1, [sp, #20]
 800494a:	6800      	ldr	r0, [r0, #0]
 800494c:	a902      	add	r1, sp, #8
 800494e:	9301      	str	r3, [sp, #4]
 8004950:	f000 f870 	bl	8004a34 <_svfiprintf_r>
 8004954:	2300      	movs	r3, #0
 8004956:	9a02      	ldr	r2, [sp, #8]
 8004958:	7013      	strb	r3, [r2, #0]
 800495a:	b01c      	add	sp, #112	; 0x70
 800495c:	bc08      	pop	{r3}
 800495e:	b003      	add	sp, #12
 8004960:	4718      	bx	r3
 8004962:	46c0      	nop			; (mov r8, r8)
 8004964:	7fffffff 	.word	0x7fffffff
 8004968:	20000010 	.word	0x20000010
 800496c:	ffff0208 	.word	0xffff0208

08004970 <__ssputs_r>:
 8004970:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004972:	688e      	ldr	r6, [r1, #8]
 8004974:	b085      	sub	sp, #20
 8004976:	0007      	movs	r7, r0
 8004978:	000c      	movs	r4, r1
 800497a:	9203      	str	r2, [sp, #12]
 800497c:	9301      	str	r3, [sp, #4]
 800497e:	429e      	cmp	r6, r3
 8004980:	d83c      	bhi.n	80049fc <__ssputs_r+0x8c>
 8004982:	2390      	movs	r3, #144	; 0x90
 8004984:	898a      	ldrh	r2, [r1, #12]
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	421a      	tst	r2, r3
 800498a:	d034      	beq.n	80049f6 <__ssputs_r+0x86>
 800498c:	6909      	ldr	r1, [r1, #16]
 800498e:	6823      	ldr	r3, [r4, #0]
 8004990:	6960      	ldr	r0, [r4, #20]
 8004992:	1a5b      	subs	r3, r3, r1
 8004994:	9302      	str	r3, [sp, #8]
 8004996:	2303      	movs	r3, #3
 8004998:	4343      	muls	r3, r0
 800499a:	0fdd      	lsrs	r5, r3, #31
 800499c:	18ed      	adds	r5, r5, r3
 800499e:	9b01      	ldr	r3, [sp, #4]
 80049a0:	9802      	ldr	r0, [sp, #8]
 80049a2:	3301      	adds	r3, #1
 80049a4:	181b      	adds	r3, r3, r0
 80049a6:	106d      	asrs	r5, r5, #1
 80049a8:	42ab      	cmp	r3, r5
 80049aa:	d900      	bls.n	80049ae <__ssputs_r+0x3e>
 80049ac:	001d      	movs	r5, r3
 80049ae:	0553      	lsls	r3, r2, #21
 80049b0:	d532      	bpl.n	8004a18 <__ssputs_r+0xa8>
 80049b2:	0029      	movs	r1, r5
 80049b4:	0038      	movs	r0, r7
 80049b6:	f000 fb4b 	bl	8005050 <_malloc_r>
 80049ba:	1e06      	subs	r6, r0, #0
 80049bc:	d109      	bne.n	80049d2 <__ssputs_r+0x62>
 80049be:	230c      	movs	r3, #12
 80049c0:	603b      	str	r3, [r7, #0]
 80049c2:	2340      	movs	r3, #64	; 0x40
 80049c4:	2001      	movs	r0, #1
 80049c6:	89a2      	ldrh	r2, [r4, #12]
 80049c8:	4240      	negs	r0, r0
 80049ca:	4313      	orrs	r3, r2
 80049cc:	81a3      	strh	r3, [r4, #12]
 80049ce:	b005      	add	sp, #20
 80049d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049d2:	9a02      	ldr	r2, [sp, #8]
 80049d4:	6921      	ldr	r1, [r4, #16]
 80049d6:	f7ff ff99 	bl	800490c <memcpy>
 80049da:	89a3      	ldrh	r3, [r4, #12]
 80049dc:	4a14      	ldr	r2, [pc, #80]	; (8004a30 <__ssputs_r+0xc0>)
 80049de:	401a      	ands	r2, r3
 80049e0:	2380      	movs	r3, #128	; 0x80
 80049e2:	4313      	orrs	r3, r2
 80049e4:	81a3      	strh	r3, [r4, #12]
 80049e6:	9b02      	ldr	r3, [sp, #8]
 80049e8:	6126      	str	r6, [r4, #16]
 80049ea:	18f6      	adds	r6, r6, r3
 80049ec:	6026      	str	r6, [r4, #0]
 80049ee:	6165      	str	r5, [r4, #20]
 80049f0:	9e01      	ldr	r6, [sp, #4]
 80049f2:	1aed      	subs	r5, r5, r3
 80049f4:	60a5      	str	r5, [r4, #8]
 80049f6:	9b01      	ldr	r3, [sp, #4]
 80049f8:	429e      	cmp	r6, r3
 80049fa:	d900      	bls.n	80049fe <__ssputs_r+0x8e>
 80049fc:	9e01      	ldr	r6, [sp, #4]
 80049fe:	0032      	movs	r2, r6
 8004a00:	9903      	ldr	r1, [sp, #12]
 8004a02:	6820      	ldr	r0, [r4, #0]
 8004a04:	f000 faa5 	bl	8004f52 <memmove>
 8004a08:	68a3      	ldr	r3, [r4, #8]
 8004a0a:	2000      	movs	r0, #0
 8004a0c:	1b9b      	subs	r3, r3, r6
 8004a0e:	60a3      	str	r3, [r4, #8]
 8004a10:	6823      	ldr	r3, [r4, #0]
 8004a12:	199e      	adds	r6, r3, r6
 8004a14:	6026      	str	r6, [r4, #0]
 8004a16:	e7da      	b.n	80049ce <__ssputs_r+0x5e>
 8004a18:	002a      	movs	r2, r5
 8004a1a:	0038      	movs	r0, r7
 8004a1c:	f000 fb8e 	bl	800513c <_realloc_r>
 8004a20:	1e06      	subs	r6, r0, #0
 8004a22:	d1e0      	bne.n	80049e6 <__ssputs_r+0x76>
 8004a24:	0038      	movs	r0, r7
 8004a26:	6921      	ldr	r1, [r4, #16]
 8004a28:	f000 faa6 	bl	8004f78 <_free_r>
 8004a2c:	e7c7      	b.n	80049be <__ssputs_r+0x4e>
 8004a2e:	46c0      	nop			; (mov r8, r8)
 8004a30:	fffffb7f 	.word	0xfffffb7f

08004a34 <_svfiprintf_r>:
 8004a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a36:	b0a1      	sub	sp, #132	; 0x84
 8004a38:	9003      	str	r0, [sp, #12]
 8004a3a:	001d      	movs	r5, r3
 8004a3c:	898b      	ldrh	r3, [r1, #12]
 8004a3e:	000f      	movs	r7, r1
 8004a40:	0016      	movs	r6, r2
 8004a42:	061b      	lsls	r3, r3, #24
 8004a44:	d511      	bpl.n	8004a6a <_svfiprintf_r+0x36>
 8004a46:	690b      	ldr	r3, [r1, #16]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10e      	bne.n	8004a6a <_svfiprintf_r+0x36>
 8004a4c:	2140      	movs	r1, #64	; 0x40
 8004a4e:	f000 faff 	bl	8005050 <_malloc_r>
 8004a52:	6038      	str	r0, [r7, #0]
 8004a54:	6138      	str	r0, [r7, #16]
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d105      	bne.n	8004a66 <_svfiprintf_r+0x32>
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	9a03      	ldr	r2, [sp, #12]
 8004a5e:	3801      	subs	r0, #1
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	b021      	add	sp, #132	; 0x84
 8004a64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	ac08      	add	r4, sp, #32
 8004a6e:	6163      	str	r3, [r4, #20]
 8004a70:	3320      	adds	r3, #32
 8004a72:	7663      	strb	r3, [r4, #25]
 8004a74:	3310      	adds	r3, #16
 8004a76:	76a3      	strb	r3, [r4, #26]
 8004a78:	9507      	str	r5, [sp, #28]
 8004a7a:	0035      	movs	r5, r6
 8004a7c:	782b      	ldrb	r3, [r5, #0]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <_svfiprintf_r+0x52>
 8004a82:	2b25      	cmp	r3, #37	; 0x25
 8004a84:	d147      	bne.n	8004b16 <_svfiprintf_r+0xe2>
 8004a86:	1bab      	subs	r3, r5, r6
 8004a88:	9305      	str	r3, [sp, #20]
 8004a8a:	42b5      	cmp	r5, r6
 8004a8c:	d00c      	beq.n	8004aa8 <_svfiprintf_r+0x74>
 8004a8e:	0032      	movs	r2, r6
 8004a90:	0039      	movs	r1, r7
 8004a92:	9803      	ldr	r0, [sp, #12]
 8004a94:	f7ff ff6c 	bl	8004970 <__ssputs_r>
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d100      	bne.n	8004a9e <_svfiprintf_r+0x6a>
 8004a9c:	e0ae      	b.n	8004bfc <_svfiprintf_r+0x1c8>
 8004a9e:	6962      	ldr	r2, [r4, #20]
 8004aa0:	9b05      	ldr	r3, [sp, #20]
 8004aa2:	4694      	mov	ip, r2
 8004aa4:	4463      	add	r3, ip
 8004aa6:	6163      	str	r3, [r4, #20]
 8004aa8:	782b      	ldrb	r3, [r5, #0]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d100      	bne.n	8004ab0 <_svfiprintf_r+0x7c>
 8004aae:	e0a5      	b.n	8004bfc <_svfiprintf_r+0x1c8>
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	4252      	negs	r2, r2
 8004ab6:	6062      	str	r2, [r4, #4]
 8004ab8:	a904      	add	r1, sp, #16
 8004aba:	3254      	adds	r2, #84	; 0x54
 8004abc:	1852      	adds	r2, r2, r1
 8004abe:	1c6e      	adds	r6, r5, #1
 8004ac0:	6023      	str	r3, [r4, #0]
 8004ac2:	60e3      	str	r3, [r4, #12]
 8004ac4:	60a3      	str	r3, [r4, #8]
 8004ac6:	7013      	strb	r3, [r2, #0]
 8004ac8:	65a3      	str	r3, [r4, #88]	; 0x58
 8004aca:	2205      	movs	r2, #5
 8004acc:	7831      	ldrb	r1, [r6, #0]
 8004ace:	4854      	ldr	r0, [pc, #336]	; (8004c20 <_svfiprintf_r+0x1ec>)
 8004ad0:	f000 fa34 	bl	8004f3c <memchr>
 8004ad4:	1c75      	adds	r5, r6, #1
 8004ad6:	2800      	cmp	r0, #0
 8004ad8:	d11f      	bne.n	8004b1a <_svfiprintf_r+0xe6>
 8004ada:	6822      	ldr	r2, [r4, #0]
 8004adc:	06d3      	lsls	r3, r2, #27
 8004ade:	d504      	bpl.n	8004aea <_svfiprintf_r+0xb6>
 8004ae0:	2353      	movs	r3, #83	; 0x53
 8004ae2:	a904      	add	r1, sp, #16
 8004ae4:	185b      	adds	r3, r3, r1
 8004ae6:	2120      	movs	r1, #32
 8004ae8:	7019      	strb	r1, [r3, #0]
 8004aea:	0713      	lsls	r3, r2, #28
 8004aec:	d504      	bpl.n	8004af8 <_svfiprintf_r+0xc4>
 8004aee:	2353      	movs	r3, #83	; 0x53
 8004af0:	a904      	add	r1, sp, #16
 8004af2:	185b      	adds	r3, r3, r1
 8004af4:	212b      	movs	r1, #43	; 0x2b
 8004af6:	7019      	strb	r1, [r3, #0]
 8004af8:	7833      	ldrb	r3, [r6, #0]
 8004afa:	2b2a      	cmp	r3, #42	; 0x2a
 8004afc:	d016      	beq.n	8004b2c <_svfiprintf_r+0xf8>
 8004afe:	0035      	movs	r5, r6
 8004b00:	2100      	movs	r1, #0
 8004b02:	200a      	movs	r0, #10
 8004b04:	68e3      	ldr	r3, [r4, #12]
 8004b06:	782a      	ldrb	r2, [r5, #0]
 8004b08:	1c6e      	adds	r6, r5, #1
 8004b0a:	3a30      	subs	r2, #48	; 0x30
 8004b0c:	2a09      	cmp	r2, #9
 8004b0e:	d94e      	bls.n	8004bae <_svfiprintf_r+0x17a>
 8004b10:	2900      	cmp	r1, #0
 8004b12:	d111      	bne.n	8004b38 <_svfiprintf_r+0x104>
 8004b14:	e017      	b.n	8004b46 <_svfiprintf_r+0x112>
 8004b16:	3501      	adds	r5, #1
 8004b18:	e7b0      	b.n	8004a7c <_svfiprintf_r+0x48>
 8004b1a:	4b41      	ldr	r3, [pc, #260]	; (8004c20 <_svfiprintf_r+0x1ec>)
 8004b1c:	6822      	ldr	r2, [r4, #0]
 8004b1e:	1ac0      	subs	r0, r0, r3
 8004b20:	2301      	movs	r3, #1
 8004b22:	4083      	lsls	r3, r0
 8004b24:	4313      	orrs	r3, r2
 8004b26:	002e      	movs	r6, r5
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	e7ce      	b.n	8004aca <_svfiprintf_r+0x96>
 8004b2c:	9b07      	ldr	r3, [sp, #28]
 8004b2e:	1d19      	adds	r1, r3, #4
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	9107      	str	r1, [sp, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	db01      	blt.n	8004b3c <_svfiprintf_r+0x108>
 8004b38:	930b      	str	r3, [sp, #44]	; 0x2c
 8004b3a:	e004      	b.n	8004b46 <_svfiprintf_r+0x112>
 8004b3c:	425b      	negs	r3, r3
 8004b3e:	60e3      	str	r3, [r4, #12]
 8004b40:	2302      	movs	r3, #2
 8004b42:	4313      	orrs	r3, r2
 8004b44:	6023      	str	r3, [r4, #0]
 8004b46:	782b      	ldrb	r3, [r5, #0]
 8004b48:	2b2e      	cmp	r3, #46	; 0x2e
 8004b4a:	d10a      	bne.n	8004b62 <_svfiprintf_r+0x12e>
 8004b4c:	786b      	ldrb	r3, [r5, #1]
 8004b4e:	2b2a      	cmp	r3, #42	; 0x2a
 8004b50:	d135      	bne.n	8004bbe <_svfiprintf_r+0x18a>
 8004b52:	9b07      	ldr	r3, [sp, #28]
 8004b54:	3502      	adds	r5, #2
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	9207      	str	r2, [sp, #28]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	db2b      	blt.n	8004bb8 <_svfiprintf_r+0x184>
 8004b60:	9309      	str	r3, [sp, #36]	; 0x24
 8004b62:	4e30      	ldr	r6, [pc, #192]	; (8004c24 <_svfiprintf_r+0x1f0>)
 8004b64:	2203      	movs	r2, #3
 8004b66:	0030      	movs	r0, r6
 8004b68:	7829      	ldrb	r1, [r5, #0]
 8004b6a:	f000 f9e7 	bl	8004f3c <memchr>
 8004b6e:	2800      	cmp	r0, #0
 8004b70:	d006      	beq.n	8004b80 <_svfiprintf_r+0x14c>
 8004b72:	2340      	movs	r3, #64	; 0x40
 8004b74:	1b80      	subs	r0, r0, r6
 8004b76:	4083      	lsls	r3, r0
 8004b78:	6822      	ldr	r2, [r4, #0]
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	6023      	str	r3, [r4, #0]
 8004b80:	7829      	ldrb	r1, [r5, #0]
 8004b82:	2206      	movs	r2, #6
 8004b84:	4828      	ldr	r0, [pc, #160]	; (8004c28 <_svfiprintf_r+0x1f4>)
 8004b86:	1c6e      	adds	r6, r5, #1
 8004b88:	7621      	strb	r1, [r4, #24]
 8004b8a:	f000 f9d7 	bl	8004f3c <memchr>
 8004b8e:	2800      	cmp	r0, #0
 8004b90:	d03c      	beq.n	8004c0c <_svfiprintf_r+0x1d8>
 8004b92:	4b26      	ldr	r3, [pc, #152]	; (8004c2c <_svfiprintf_r+0x1f8>)
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d125      	bne.n	8004be4 <_svfiprintf_r+0x1b0>
 8004b98:	2207      	movs	r2, #7
 8004b9a:	9b07      	ldr	r3, [sp, #28]
 8004b9c:	3307      	adds	r3, #7
 8004b9e:	4393      	bics	r3, r2
 8004ba0:	3308      	adds	r3, #8
 8004ba2:	9307      	str	r3, [sp, #28]
 8004ba4:	6963      	ldr	r3, [r4, #20]
 8004ba6:	9a04      	ldr	r2, [sp, #16]
 8004ba8:	189b      	adds	r3, r3, r2
 8004baa:	6163      	str	r3, [r4, #20]
 8004bac:	e765      	b.n	8004a7a <_svfiprintf_r+0x46>
 8004bae:	4343      	muls	r3, r0
 8004bb0:	0035      	movs	r5, r6
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	189b      	adds	r3, r3, r2
 8004bb6:	e7a6      	b.n	8004b06 <_svfiprintf_r+0xd2>
 8004bb8:	2301      	movs	r3, #1
 8004bba:	425b      	negs	r3, r3
 8004bbc:	e7d0      	b.n	8004b60 <_svfiprintf_r+0x12c>
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	200a      	movs	r0, #10
 8004bc2:	001a      	movs	r2, r3
 8004bc4:	3501      	adds	r5, #1
 8004bc6:	6063      	str	r3, [r4, #4]
 8004bc8:	7829      	ldrb	r1, [r5, #0]
 8004bca:	1c6e      	adds	r6, r5, #1
 8004bcc:	3930      	subs	r1, #48	; 0x30
 8004bce:	2909      	cmp	r1, #9
 8004bd0:	d903      	bls.n	8004bda <_svfiprintf_r+0x1a6>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0c5      	beq.n	8004b62 <_svfiprintf_r+0x12e>
 8004bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8004bd8:	e7c3      	b.n	8004b62 <_svfiprintf_r+0x12e>
 8004bda:	4342      	muls	r2, r0
 8004bdc:	0035      	movs	r5, r6
 8004bde:	2301      	movs	r3, #1
 8004be0:	1852      	adds	r2, r2, r1
 8004be2:	e7f1      	b.n	8004bc8 <_svfiprintf_r+0x194>
 8004be4:	ab07      	add	r3, sp, #28
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	003a      	movs	r2, r7
 8004bea:	0021      	movs	r1, r4
 8004bec:	4b10      	ldr	r3, [pc, #64]	; (8004c30 <_svfiprintf_r+0x1fc>)
 8004bee:	9803      	ldr	r0, [sp, #12]
 8004bf0:	e000      	b.n	8004bf4 <_svfiprintf_r+0x1c0>
 8004bf2:	bf00      	nop
 8004bf4:	9004      	str	r0, [sp, #16]
 8004bf6:	9b04      	ldr	r3, [sp, #16]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	d1d3      	bne.n	8004ba4 <_svfiprintf_r+0x170>
 8004bfc:	89bb      	ldrh	r3, [r7, #12]
 8004bfe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004c00:	065b      	lsls	r3, r3, #25
 8004c02:	d400      	bmi.n	8004c06 <_svfiprintf_r+0x1d2>
 8004c04:	e72d      	b.n	8004a62 <_svfiprintf_r+0x2e>
 8004c06:	2001      	movs	r0, #1
 8004c08:	4240      	negs	r0, r0
 8004c0a:	e72a      	b.n	8004a62 <_svfiprintf_r+0x2e>
 8004c0c:	ab07      	add	r3, sp, #28
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	003a      	movs	r2, r7
 8004c12:	0021      	movs	r1, r4
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <_svfiprintf_r+0x1fc>)
 8004c16:	9803      	ldr	r0, [sp, #12]
 8004c18:	f000 f87c 	bl	8004d14 <_printf_i>
 8004c1c:	e7ea      	b.n	8004bf4 <_svfiprintf_r+0x1c0>
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	08005be0 	.word	0x08005be0
 8004c24:	08005be6 	.word	0x08005be6
 8004c28:	08005bea 	.word	0x08005bea
 8004c2c:	00000000 	.word	0x00000000
 8004c30:	08004971 	.word	0x08004971

08004c34 <_printf_common>:
 8004c34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c36:	0015      	movs	r5, r2
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	688a      	ldr	r2, [r1, #8]
 8004c3c:	690b      	ldr	r3, [r1, #16]
 8004c3e:	000c      	movs	r4, r1
 8004c40:	9000      	str	r0, [sp, #0]
 8004c42:	4293      	cmp	r3, r2
 8004c44:	da00      	bge.n	8004c48 <_printf_common+0x14>
 8004c46:	0013      	movs	r3, r2
 8004c48:	0022      	movs	r2, r4
 8004c4a:	602b      	str	r3, [r5, #0]
 8004c4c:	3243      	adds	r2, #67	; 0x43
 8004c4e:	7812      	ldrb	r2, [r2, #0]
 8004c50:	2a00      	cmp	r2, #0
 8004c52:	d001      	beq.n	8004c58 <_printf_common+0x24>
 8004c54:	3301      	adds	r3, #1
 8004c56:	602b      	str	r3, [r5, #0]
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	069b      	lsls	r3, r3, #26
 8004c5c:	d502      	bpl.n	8004c64 <_printf_common+0x30>
 8004c5e:	682b      	ldr	r3, [r5, #0]
 8004c60:	3302      	adds	r3, #2
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	6822      	ldr	r2, [r4, #0]
 8004c66:	2306      	movs	r3, #6
 8004c68:	0017      	movs	r7, r2
 8004c6a:	401f      	ands	r7, r3
 8004c6c:	421a      	tst	r2, r3
 8004c6e:	d027      	beq.n	8004cc0 <_printf_common+0x8c>
 8004c70:	0023      	movs	r3, r4
 8004c72:	3343      	adds	r3, #67	; 0x43
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	1e5a      	subs	r2, r3, #1
 8004c78:	4193      	sbcs	r3, r2
 8004c7a:	6822      	ldr	r2, [r4, #0]
 8004c7c:	0692      	lsls	r2, r2, #26
 8004c7e:	d430      	bmi.n	8004ce2 <_printf_common+0xae>
 8004c80:	0022      	movs	r2, r4
 8004c82:	9901      	ldr	r1, [sp, #4]
 8004c84:	9800      	ldr	r0, [sp, #0]
 8004c86:	9e08      	ldr	r6, [sp, #32]
 8004c88:	3243      	adds	r2, #67	; 0x43
 8004c8a:	47b0      	blx	r6
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d025      	beq.n	8004cdc <_printf_common+0xa8>
 8004c90:	2306      	movs	r3, #6
 8004c92:	6820      	ldr	r0, [r4, #0]
 8004c94:	682a      	ldr	r2, [r5, #0]
 8004c96:	68e1      	ldr	r1, [r4, #12]
 8004c98:	2500      	movs	r5, #0
 8004c9a:	4003      	ands	r3, r0
 8004c9c:	2b04      	cmp	r3, #4
 8004c9e:	d103      	bne.n	8004ca8 <_printf_common+0x74>
 8004ca0:	1a8d      	subs	r5, r1, r2
 8004ca2:	43eb      	mvns	r3, r5
 8004ca4:	17db      	asrs	r3, r3, #31
 8004ca6:	401d      	ands	r5, r3
 8004ca8:	68a3      	ldr	r3, [r4, #8]
 8004caa:	6922      	ldr	r2, [r4, #16]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	dd01      	ble.n	8004cb4 <_printf_common+0x80>
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	18ed      	adds	r5, r5, r3
 8004cb4:	2700      	movs	r7, #0
 8004cb6:	42bd      	cmp	r5, r7
 8004cb8:	d120      	bne.n	8004cfc <_printf_common+0xc8>
 8004cba:	2000      	movs	r0, #0
 8004cbc:	e010      	b.n	8004ce0 <_printf_common+0xac>
 8004cbe:	3701      	adds	r7, #1
 8004cc0:	68e3      	ldr	r3, [r4, #12]
 8004cc2:	682a      	ldr	r2, [r5, #0]
 8004cc4:	1a9b      	subs	r3, r3, r2
 8004cc6:	42bb      	cmp	r3, r7
 8004cc8:	ddd2      	ble.n	8004c70 <_printf_common+0x3c>
 8004cca:	0022      	movs	r2, r4
 8004ccc:	2301      	movs	r3, #1
 8004cce:	9901      	ldr	r1, [sp, #4]
 8004cd0:	9800      	ldr	r0, [sp, #0]
 8004cd2:	9e08      	ldr	r6, [sp, #32]
 8004cd4:	3219      	adds	r2, #25
 8004cd6:	47b0      	blx	r6
 8004cd8:	1c43      	adds	r3, r0, #1
 8004cda:	d1f0      	bne.n	8004cbe <_printf_common+0x8a>
 8004cdc:	2001      	movs	r0, #1
 8004cde:	4240      	negs	r0, r0
 8004ce0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ce2:	2030      	movs	r0, #48	; 0x30
 8004ce4:	18e1      	adds	r1, r4, r3
 8004ce6:	3143      	adds	r1, #67	; 0x43
 8004ce8:	7008      	strb	r0, [r1, #0]
 8004cea:	0021      	movs	r1, r4
 8004cec:	1c5a      	adds	r2, r3, #1
 8004cee:	3145      	adds	r1, #69	; 0x45
 8004cf0:	7809      	ldrb	r1, [r1, #0]
 8004cf2:	18a2      	adds	r2, r4, r2
 8004cf4:	3243      	adds	r2, #67	; 0x43
 8004cf6:	3302      	adds	r3, #2
 8004cf8:	7011      	strb	r1, [r2, #0]
 8004cfa:	e7c1      	b.n	8004c80 <_printf_common+0x4c>
 8004cfc:	0022      	movs	r2, r4
 8004cfe:	2301      	movs	r3, #1
 8004d00:	9901      	ldr	r1, [sp, #4]
 8004d02:	9800      	ldr	r0, [sp, #0]
 8004d04:	9e08      	ldr	r6, [sp, #32]
 8004d06:	321a      	adds	r2, #26
 8004d08:	47b0      	blx	r6
 8004d0a:	1c43      	adds	r3, r0, #1
 8004d0c:	d0e6      	beq.n	8004cdc <_printf_common+0xa8>
 8004d0e:	3701      	adds	r7, #1
 8004d10:	e7d1      	b.n	8004cb6 <_printf_common+0x82>
	...

08004d14 <_printf_i>:
 8004d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d16:	b08b      	sub	sp, #44	; 0x2c
 8004d18:	9206      	str	r2, [sp, #24]
 8004d1a:	000a      	movs	r2, r1
 8004d1c:	3243      	adds	r2, #67	; 0x43
 8004d1e:	9307      	str	r3, [sp, #28]
 8004d20:	9005      	str	r0, [sp, #20]
 8004d22:	9204      	str	r2, [sp, #16]
 8004d24:	7e0a      	ldrb	r2, [r1, #24]
 8004d26:	000c      	movs	r4, r1
 8004d28:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d2a:	2a78      	cmp	r2, #120	; 0x78
 8004d2c:	d807      	bhi.n	8004d3e <_printf_i+0x2a>
 8004d2e:	2a62      	cmp	r2, #98	; 0x62
 8004d30:	d809      	bhi.n	8004d46 <_printf_i+0x32>
 8004d32:	2a00      	cmp	r2, #0
 8004d34:	d100      	bne.n	8004d38 <_printf_i+0x24>
 8004d36:	e0c1      	b.n	8004ebc <_printf_i+0x1a8>
 8004d38:	2a58      	cmp	r2, #88	; 0x58
 8004d3a:	d100      	bne.n	8004d3e <_printf_i+0x2a>
 8004d3c:	e08c      	b.n	8004e58 <_printf_i+0x144>
 8004d3e:	0026      	movs	r6, r4
 8004d40:	3642      	adds	r6, #66	; 0x42
 8004d42:	7032      	strb	r2, [r6, #0]
 8004d44:	e022      	b.n	8004d8c <_printf_i+0x78>
 8004d46:	0010      	movs	r0, r2
 8004d48:	3863      	subs	r0, #99	; 0x63
 8004d4a:	2815      	cmp	r0, #21
 8004d4c:	d8f7      	bhi.n	8004d3e <_printf_i+0x2a>
 8004d4e:	f7fb f9e3 	bl	8000118 <__gnu_thumb1_case_shi>
 8004d52:	0016      	.short	0x0016
 8004d54:	fff6001f 	.word	0xfff6001f
 8004d58:	fff6fff6 	.word	0xfff6fff6
 8004d5c:	001ffff6 	.word	0x001ffff6
 8004d60:	fff6fff6 	.word	0xfff6fff6
 8004d64:	fff6fff6 	.word	0xfff6fff6
 8004d68:	003600a8 	.word	0x003600a8
 8004d6c:	fff6009a 	.word	0xfff6009a
 8004d70:	00b9fff6 	.word	0x00b9fff6
 8004d74:	0036fff6 	.word	0x0036fff6
 8004d78:	fff6fff6 	.word	0xfff6fff6
 8004d7c:	009e      	.short	0x009e
 8004d7e:	0026      	movs	r6, r4
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	3642      	adds	r6, #66	; 0x42
 8004d84:	1d11      	adds	r1, r2, #4
 8004d86:	6019      	str	r1, [r3, #0]
 8004d88:	6813      	ldr	r3, [r2, #0]
 8004d8a:	7033      	strb	r3, [r6, #0]
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e0a7      	b.n	8004ee0 <_printf_i+0x1cc>
 8004d90:	6808      	ldr	r0, [r1, #0]
 8004d92:	6819      	ldr	r1, [r3, #0]
 8004d94:	1d0a      	adds	r2, r1, #4
 8004d96:	0605      	lsls	r5, r0, #24
 8004d98:	d50b      	bpl.n	8004db2 <_printf_i+0x9e>
 8004d9a:	680d      	ldr	r5, [r1, #0]
 8004d9c:	601a      	str	r2, [r3, #0]
 8004d9e:	2d00      	cmp	r5, #0
 8004da0:	da03      	bge.n	8004daa <_printf_i+0x96>
 8004da2:	232d      	movs	r3, #45	; 0x2d
 8004da4:	9a04      	ldr	r2, [sp, #16]
 8004da6:	426d      	negs	r5, r5
 8004da8:	7013      	strb	r3, [r2, #0]
 8004daa:	4b61      	ldr	r3, [pc, #388]	; (8004f30 <_printf_i+0x21c>)
 8004dac:	270a      	movs	r7, #10
 8004dae:	9303      	str	r3, [sp, #12]
 8004db0:	e01b      	b.n	8004dea <_printf_i+0xd6>
 8004db2:	680d      	ldr	r5, [r1, #0]
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	0641      	lsls	r1, r0, #25
 8004db8:	d5f1      	bpl.n	8004d9e <_printf_i+0x8a>
 8004dba:	b22d      	sxth	r5, r5
 8004dbc:	e7ef      	b.n	8004d9e <_printf_i+0x8a>
 8004dbe:	680d      	ldr	r5, [r1, #0]
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	1d08      	adds	r0, r1, #4
 8004dc4:	6018      	str	r0, [r3, #0]
 8004dc6:	062e      	lsls	r6, r5, #24
 8004dc8:	d501      	bpl.n	8004dce <_printf_i+0xba>
 8004dca:	680d      	ldr	r5, [r1, #0]
 8004dcc:	e003      	b.n	8004dd6 <_printf_i+0xc2>
 8004dce:	066d      	lsls	r5, r5, #25
 8004dd0:	d5fb      	bpl.n	8004dca <_printf_i+0xb6>
 8004dd2:	680d      	ldr	r5, [r1, #0]
 8004dd4:	b2ad      	uxth	r5, r5
 8004dd6:	4b56      	ldr	r3, [pc, #344]	; (8004f30 <_printf_i+0x21c>)
 8004dd8:	2708      	movs	r7, #8
 8004dda:	9303      	str	r3, [sp, #12]
 8004ddc:	2a6f      	cmp	r2, #111	; 0x6f
 8004dde:	d000      	beq.n	8004de2 <_printf_i+0xce>
 8004de0:	3702      	adds	r7, #2
 8004de2:	0023      	movs	r3, r4
 8004de4:	2200      	movs	r2, #0
 8004de6:	3343      	adds	r3, #67	; 0x43
 8004de8:	701a      	strb	r2, [r3, #0]
 8004dea:	6863      	ldr	r3, [r4, #4]
 8004dec:	60a3      	str	r3, [r4, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	db03      	blt.n	8004dfa <_printf_i+0xe6>
 8004df2:	2204      	movs	r2, #4
 8004df4:	6821      	ldr	r1, [r4, #0]
 8004df6:	4391      	bics	r1, r2
 8004df8:	6021      	str	r1, [r4, #0]
 8004dfa:	2d00      	cmp	r5, #0
 8004dfc:	d102      	bne.n	8004e04 <_printf_i+0xf0>
 8004dfe:	9e04      	ldr	r6, [sp, #16]
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d00c      	beq.n	8004e1e <_printf_i+0x10a>
 8004e04:	9e04      	ldr	r6, [sp, #16]
 8004e06:	0028      	movs	r0, r5
 8004e08:	0039      	movs	r1, r7
 8004e0a:	f7fb fa15 	bl	8000238 <__aeabi_uidivmod>
 8004e0e:	9b03      	ldr	r3, [sp, #12]
 8004e10:	3e01      	subs	r6, #1
 8004e12:	5c5b      	ldrb	r3, [r3, r1]
 8004e14:	7033      	strb	r3, [r6, #0]
 8004e16:	002b      	movs	r3, r5
 8004e18:	0005      	movs	r5, r0
 8004e1a:	429f      	cmp	r7, r3
 8004e1c:	d9f3      	bls.n	8004e06 <_printf_i+0xf2>
 8004e1e:	2f08      	cmp	r7, #8
 8004e20:	d109      	bne.n	8004e36 <_printf_i+0x122>
 8004e22:	6823      	ldr	r3, [r4, #0]
 8004e24:	07db      	lsls	r3, r3, #31
 8004e26:	d506      	bpl.n	8004e36 <_printf_i+0x122>
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	6922      	ldr	r2, [r4, #16]
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	dc02      	bgt.n	8004e36 <_printf_i+0x122>
 8004e30:	2330      	movs	r3, #48	; 0x30
 8004e32:	3e01      	subs	r6, #1
 8004e34:	7033      	strb	r3, [r6, #0]
 8004e36:	9b04      	ldr	r3, [sp, #16]
 8004e38:	1b9b      	subs	r3, r3, r6
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	9b07      	ldr	r3, [sp, #28]
 8004e3e:	0021      	movs	r1, r4
 8004e40:	9300      	str	r3, [sp, #0]
 8004e42:	9805      	ldr	r0, [sp, #20]
 8004e44:	9b06      	ldr	r3, [sp, #24]
 8004e46:	aa09      	add	r2, sp, #36	; 0x24
 8004e48:	f7ff fef4 	bl	8004c34 <_printf_common>
 8004e4c:	1c43      	adds	r3, r0, #1
 8004e4e:	d14c      	bne.n	8004eea <_printf_i+0x1d6>
 8004e50:	2001      	movs	r0, #1
 8004e52:	4240      	negs	r0, r0
 8004e54:	b00b      	add	sp, #44	; 0x2c
 8004e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e58:	3145      	adds	r1, #69	; 0x45
 8004e5a:	700a      	strb	r2, [r1, #0]
 8004e5c:	4a34      	ldr	r2, [pc, #208]	; (8004f30 <_printf_i+0x21c>)
 8004e5e:	9203      	str	r2, [sp, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	6821      	ldr	r1, [r4, #0]
 8004e64:	ca20      	ldmia	r2!, {r5}
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	0608      	lsls	r0, r1, #24
 8004e6a:	d516      	bpl.n	8004e9a <_printf_i+0x186>
 8004e6c:	07cb      	lsls	r3, r1, #31
 8004e6e:	d502      	bpl.n	8004e76 <_printf_i+0x162>
 8004e70:	2320      	movs	r3, #32
 8004e72:	4319      	orrs	r1, r3
 8004e74:	6021      	str	r1, [r4, #0]
 8004e76:	2710      	movs	r7, #16
 8004e78:	2d00      	cmp	r5, #0
 8004e7a:	d1b2      	bne.n	8004de2 <_printf_i+0xce>
 8004e7c:	2320      	movs	r3, #32
 8004e7e:	6822      	ldr	r2, [r4, #0]
 8004e80:	439a      	bics	r2, r3
 8004e82:	6022      	str	r2, [r4, #0]
 8004e84:	e7ad      	b.n	8004de2 <_printf_i+0xce>
 8004e86:	2220      	movs	r2, #32
 8004e88:	6809      	ldr	r1, [r1, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	6022      	str	r2, [r4, #0]
 8004e8e:	0022      	movs	r2, r4
 8004e90:	2178      	movs	r1, #120	; 0x78
 8004e92:	3245      	adds	r2, #69	; 0x45
 8004e94:	7011      	strb	r1, [r2, #0]
 8004e96:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <_printf_i+0x220>)
 8004e98:	e7e1      	b.n	8004e5e <_printf_i+0x14a>
 8004e9a:	0648      	lsls	r0, r1, #25
 8004e9c:	d5e6      	bpl.n	8004e6c <_printf_i+0x158>
 8004e9e:	b2ad      	uxth	r5, r5
 8004ea0:	e7e4      	b.n	8004e6c <_printf_i+0x158>
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	680d      	ldr	r5, [r1, #0]
 8004ea6:	1d10      	adds	r0, r2, #4
 8004ea8:	6949      	ldr	r1, [r1, #20]
 8004eaa:	6018      	str	r0, [r3, #0]
 8004eac:	6813      	ldr	r3, [r2, #0]
 8004eae:	062e      	lsls	r6, r5, #24
 8004eb0:	d501      	bpl.n	8004eb6 <_printf_i+0x1a2>
 8004eb2:	6019      	str	r1, [r3, #0]
 8004eb4:	e002      	b.n	8004ebc <_printf_i+0x1a8>
 8004eb6:	066d      	lsls	r5, r5, #25
 8004eb8:	d5fb      	bpl.n	8004eb2 <_printf_i+0x19e>
 8004eba:	8019      	strh	r1, [r3, #0]
 8004ebc:	2300      	movs	r3, #0
 8004ebe:	9e04      	ldr	r6, [sp, #16]
 8004ec0:	6123      	str	r3, [r4, #16]
 8004ec2:	e7bb      	b.n	8004e3c <_printf_i+0x128>
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	1d11      	adds	r1, r2, #4
 8004ec8:	6019      	str	r1, [r3, #0]
 8004eca:	6816      	ldr	r6, [r2, #0]
 8004ecc:	2100      	movs	r1, #0
 8004ece:	0030      	movs	r0, r6
 8004ed0:	6862      	ldr	r2, [r4, #4]
 8004ed2:	f000 f833 	bl	8004f3c <memchr>
 8004ed6:	2800      	cmp	r0, #0
 8004ed8:	d001      	beq.n	8004ede <_printf_i+0x1ca>
 8004eda:	1b80      	subs	r0, r0, r6
 8004edc:	6060      	str	r0, [r4, #4]
 8004ede:	6863      	ldr	r3, [r4, #4]
 8004ee0:	6123      	str	r3, [r4, #16]
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	9a04      	ldr	r2, [sp, #16]
 8004ee6:	7013      	strb	r3, [r2, #0]
 8004ee8:	e7a8      	b.n	8004e3c <_printf_i+0x128>
 8004eea:	6923      	ldr	r3, [r4, #16]
 8004eec:	0032      	movs	r2, r6
 8004eee:	9906      	ldr	r1, [sp, #24]
 8004ef0:	9805      	ldr	r0, [sp, #20]
 8004ef2:	9d07      	ldr	r5, [sp, #28]
 8004ef4:	47a8      	blx	r5
 8004ef6:	1c43      	adds	r3, r0, #1
 8004ef8:	d0aa      	beq.n	8004e50 <_printf_i+0x13c>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	079b      	lsls	r3, r3, #30
 8004efe:	d415      	bmi.n	8004f2c <_printf_i+0x218>
 8004f00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f02:	68e0      	ldr	r0, [r4, #12]
 8004f04:	4298      	cmp	r0, r3
 8004f06:	daa5      	bge.n	8004e54 <_printf_i+0x140>
 8004f08:	0018      	movs	r0, r3
 8004f0a:	e7a3      	b.n	8004e54 <_printf_i+0x140>
 8004f0c:	0022      	movs	r2, r4
 8004f0e:	2301      	movs	r3, #1
 8004f10:	9906      	ldr	r1, [sp, #24]
 8004f12:	9805      	ldr	r0, [sp, #20]
 8004f14:	9e07      	ldr	r6, [sp, #28]
 8004f16:	3219      	adds	r2, #25
 8004f18:	47b0      	blx	r6
 8004f1a:	1c43      	adds	r3, r0, #1
 8004f1c:	d098      	beq.n	8004e50 <_printf_i+0x13c>
 8004f1e:	3501      	adds	r5, #1
 8004f20:	68e3      	ldr	r3, [r4, #12]
 8004f22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f24:	1a9b      	subs	r3, r3, r2
 8004f26:	42ab      	cmp	r3, r5
 8004f28:	dcf0      	bgt.n	8004f0c <_printf_i+0x1f8>
 8004f2a:	e7e9      	b.n	8004f00 <_printf_i+0x1ec>
 8004f2c:	2500      	movs	r5, #0
 8004f2e:	e7f7      	b.n	8004f20 <_printf_i+0x20c>
 8004f30:	08005bf1 	.word	0x08005bf1
 8004f34:	08005c02 	.word	0x08005c02

08004f38 <__retarget_lock_acquire_recursive>:
 8004f38:	4770      	bx	lr

08004f3a <__retarget_lock_release_recursive>:
 8004f3a:	4770      	bx	lr

08004f3c <memchr>:
 8004f3c:	b2c9      	uxtb	r1, r1
 8004f3e:	1882      	adds	r2, r0, r2
 8004f40:	4290      	cmp	r0, r2
 8004f42:	d101      	bne.n	8004f48 <memchr+0xc>
 8004f44:	2000      	movs	r0, #0
 8004f46:	4770      	bx	lr
 8004f48:	7803      	ldrb	r3, [r0, #0]
 8004f4a:	428b      	cmp	r3, r1
 8004f4c:	d0fb      	beq.n	8004f46 <memchr+0xa>
 8004f4e:	3001      	adds	r0, #1
 8004f50:	e7f6      	b.n	8004f40 <memchr+0x4>

08004f52 <memmove>:
 8004f52:	b510      	push	{r4, lr}
 8004f54:	4288      	cmp	r0, r1
 8004f56:	d902      	bls.n	8004f5e <memmove+0xc>
 8004f58:	188b      	adds	r3, r1, r2
 8004f5a:	4298      	cmp	r0, r3
 8004f5c:	d303      	bcc.n	8004f66 <memmove+0x14>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	e007      	b.n	8004f72 <memmove+0x20>
 8004f62:	5c8b      	ldrb	r3, [r1, r2]
 8004f64:	5483      	strb	r3, [r0, r2]
 8004f66:	3a01      	subs	r2, #1
 8004f68:	d2fb      	bcs.n	8004f62 <memmove+0x10>
 8004f6a:	bd10      	pop	{r4, pc}
 8004f6c:	5ccc      	ldrb	r4, [r1, r3]
 8004f6e:	54c4      	strb	r4, [r0, r3]
 8004f70:	3301      	adds	r3, #1
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d1fa      	bne.n	8004f6c <memmove+0x1a>
 8004f76:	e7f8      	b.n	8004f6a <memmove+0x18>

08004f78 <_free_r>:
 8004f78:	b570      	push	{r4, r5, r6, lr}
 8004f7a:	0005      	movs	r5, r0
 8004f7c:	2900      	cmp	r1, #0
 8004f7e:	d010      	beq.n	8004fa2 <_free_r+0x2a>
 8004f80:	1f0c      	subs	r4, r1, #4
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	da00      	bge.n	8004f8a <_free_r+0x12>
 8004f88:	18e4      	adds	r4, r4, r3
 8004f8a:	0028      	movs	r0, r5
 8004f8c:	f000 f918 	bl	80051c0 <__malloc_lock>
 8004f90:	4a1d      	ldr	r2, [pc, #116]	; (8005008 <_free_r+0x90>)
 8004f92:	6813      	ldr	r3, [r2, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d105      	bne.n	8004fa4 <_free_r+0x2c>
 8004f98:	6063      	str	r3, [r4, #4]
 8004f9a:	6014      	str	r4, [r2, #0]
 8004f9c:	0028      	movs	r0, r5
 8004f9e:	f000 f917 	bl	80051d0 <__malloc_unlock>
 8004fa2:	bd70      	pop	{r4, r5, r6, pc}
 8004fa4:	42a3      	cmp	r3, r4
 8004fa6:	d908      	bls.n	8004fba <_free_r+0x42>
 8004fa8:	6821      	ldr	r1, [r4, #0]
 8004faa:	1860      	adds	r0, r4, r1
 8004fac:	4283      	cmp	r3, r0
 8004fae:	d1f3      	bne.n	8004f98 <_free_r+0x20>
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	1841      	adds	r1, r0, r1
 8004fb6:	6021      	str	r1, [r4, #0]
 8004fb8:	e7ee      	b.n	8004f98 <_free_r+0x20>
 8004fba:	001a      	movs	r2, r3
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d001      	beq.n	8004fc6 <_free_r+0x4e>
 8004fc2:	42a3      	cmp	r3, r4
 8004fc4:	d9f9      	bls.n	8004fba <_free_r+0x42>
 8004fc6:	6811      	ldr	r1, [r2, #0]
 8004fc8:	1850      	adds	r0, r2, r1
 8004fca:	42a0      	cmp	r0, r4
 8004fcc:	d10b      	bne.n	8004fe6 <_free_r+0x6e>
 8004fce:	6820      	ldr	r0, [r4, #0]
 8004fd0:	1809      	adds	r1, r1, r0
 8004fd2:	1850      	adds	r0, r2, r1
 8004fd4:	6011      	str	r1, [r2, #0]
 8004fd6:	4283      	cmp	r3, r0
 8004fd8:	d1e0      	bne.n	8004f9c <_free_r+0x24>
 8004fda:	6818      	ldr	r0, [r3, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	1841      	adds	r1, r0, r1
 8004fe0:	6011      	str	r1, [r2, #0]
 8004fe2:	6053      	str	r3, [r2, #4]
 8004fe4:	e7da      	b.n	8004f9c <_free_r+0x24>
 8004fe6:	42a0      	cmp	r0, r4
 8004fe8:	d902      	bls.n	8004ff0 <_free_r+0x78>
 8004fea:	230c      	movs	r3, #12
 8004fec:	602b      	str	r3, [r5, #0]
 8004fee:	e7d5      	b.n	8004f9c <_free_r+0x24>
 8004ff0:	6821      	ldr	r1, [r4, #0]
 8004ff2:	1860      	adds	r0, r4, r1
 8004ff4:	4283      	cmp	r3, r0
 8004ff6:	d103      	bne.n	8005000 <_free_r+0x88>
 8004ff8:	6818      	ldr	r0, [r3, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	1841      	adds	r1, r0, r1
 8004ffe:	6021      	str	r1, [r4, #0]
 8005000:	6063      	str	r3, [r4, #4]
 8005002:	6054      	str	r4, [r2, #4]
 8005004:	e7ca      	b.n	8004f9c <_free_r+0x24>
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	20000278 	.word	0x20000278

0800500c <sbrk_aligned>:
 800500c:	b570      	push	{r4, r5, r6, lr}
 800500e:	4e0f      	ldr	r6, [pc, #60]	; (800504c <sbrk_aligned+0x40>)
 8005010:	000d      	movs	r5, r1
 8005012:	6831      	ldr	r1, [r6, #0]
 8005014:	0004      	movs	r4, r0
 8005016:	2900      	cmp	r1, #0
 8005018:	d102      	bne.n	8005020 <sbrk_aligned+0x14>
 800501a:	f000 f8bf 	bl	800519c <_sbrk_r>
 800501e:	6030      	str	r0, [r6, #0]
 8005020:	0029      	movs	r1, r5
 8005022:	0020      	movs	r0, r4
 8005024:	f000 f8ba 	bl	800519c <_sbrk_r>
 8005028:	1c43      	adds	r3, r0, #1
 800502a:	d00a      	beq.n	8005042 <sbrk_aligned+0x36>
 800502c:	2303      	movs	r3, #3
 800502e:	1cc5      	adds	r5, r0, #3
 8005030:	439d      	bics	r5, r3
 8005032:	42a8      	cmp	r0, r5
 8005034:	d007      	beq.n	8005046 <sbrk_aligned+0x3a>
 8005036:	1a29      	subs	r1, r5, r0
 8005038:	0020      	movs	r0, r4
 800503a:	f000 f8af 	bl	800519c <_sbrk_r>
 800503e:	1c43      	adds	r3, r0, #1
 8005040:	d101      	bne.n	8005046 <sbrk_aligned+0x3a>
 8005042:	2501      	movs	r5, #1
 8005044:	426d      	negs	r5, r5
 8005046:	0028      	movs	r0, r5
 8005048:	bd70      	pop	{r4, r5, r6, pc}
 800504a:	46c0      	nop			; (mov r8, r8)
 800504c:	2000027c 	.word	0x2000027c

08005050 <_malloc_r>:
 8005050:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005052:	2203      	movs	r2, #3
 8005054:	1ccb      	adds	r3, r1, #3
 8005056:	4393      	bics	r3, r2
 8005058:	3308      	adds	r3, #8
 800505a:	0006      	movs	r6, r0
 800505c:	001f      	movs	r7, r3
 800505e:	2b0c      	cmp	r3, #12
 8005060:	d232      	bcs.n	80050c8 <_malloc_r+0x78>
 8005062:	270c      	movs	r7, #12
 8005064:	42b9      	cmp	r1, r7
 8005066:	d831      	bhi.n	80050cc <_malloc_r+0x7c>
 8005068:	0030      	movs	r0, r6
 800506a:	f000 f8a9 	bl	80051c0 <__malloc_lock>
 800506e:	4d32      	ldr	r5, [pc, #200]	; (8005138 <_malloc_r+0xe8>)
 8005070:	682b      	ldr	r3, [r5, #0]
 8005072:	001c      	movs	r4, r3
 8005074:	2c00      	cmp	r4, #0
 8005076:	d12e      	bne.n	80050d6 <_malloc_r+0x86>
 8005078:	0039      	movs	r1, r7
 800507a:	0030      	movs	r0, r6
 800507c:	f7ff ffc6 	bl	800500c <sbrk_aligned>
 8005080:	0004      	movs	r4, r0
 8005082:	1c43      	adds	r3, r0, #1
 8005084:	d11e      	bne.n	80050c4 <_malloc_r+0x74>
 8005086:	682c      	ldr	r4, [r5, #0]
 8005088:	0025      	movs	r5, r4
 800508a:	2d00      	cmp	r5, #0
 800508c:	d14a      	bne.n	8005124 <_malloc_r+0xd4>
 800508e:	6823      	ldr	r3, [r4, #0]
 8005090:	0029      	movs	r1, r5
 8005092:	18e3      	adds	r3, r4, r3
 8005094:	0030      	movs	r0, r6
 8005096:	9301      	str	r3, [sp, #4]
 8005098:	f000 f880 	bl	800519c <_sbrk_r>
 800509c:	9b01      	ldr	r3, [sp, #4]
 800509e:	4283      	cmp	r3, r0
 80050a0:	d143      	bne.n	800512a <_malloc_r+0xda>
 80050a2:	6823      	ldr	r3, [r4, #0]
 80050a4:	3703      	adds	r7, #3
 80050a6:	1aff      	subs	r7, r7, r3
 80050a8:	2303      	movs	r3, #3
 80050aa:	439f      	bics	r7, r3
 80050ac:	3708      	adds	r7, #8
 80050ae:	2f0c      	cmp	r7, #12
 80050b0:	d200      	bcs.n	80050b4 <_malloc_r+0x64>
 80050b2:	270c      	movs	r7, #12
 80050b4:	0039      	movs	r1, r7
 80050b6:	0030      	movs	r0, r6
 80050b8:	f7ff ffa8 	bl	800500c <sbrk_aligned>
 80050bc:	1c43      	adds	r3, r0, #1
 80050be:	d034      	beq.n	800512a <_malloc_r+0xda>
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	19df      	adds	r7, r3, r7
 80050c4:	6027      	str	r7, [r4, #0]
 80050c6:	e013      	b.n	80050f0 <_malloc_r+0xa0>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	dacb      	bge.n	8005064 <_malloc_r+0x14>
 80050cc:	230c      	movs	r3, #12
 80050ce:	2500      	movs	r5, #0
 80050d0:	6033      	str	r3, [r6, #0]
 80050d2:	0028      	movs	r0, r5
 80050d4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80050d6:	6822      	ldr	r2, [r4, #0]
 80050d8:	1bd1      	subs	r1, r2, r7
 80050da:	d420      	bmi.n	800511e <_malloc_r+0xce>
 80050dc:	290b      	cmp	r1, #11
 80050de:	d917      	bls.n	8005110 <_malloc_r+0xc0>
 80050e0:	19e2      	adds	r2, r4, r7
 80050e2:	6027      	str	r7, [r4, #0]
 80050e4:	42a3      	cmp	r3, r4
 80050e6:	d111      	bne.n	800510c <_malloc_r+0xbc>
 80050e8:	602a      	str	r2, [r5, #0]
 80050ea:	6863      	ldr	r3, [r4, #4]
 80050ec:	6011      	str	r1, [r2, #0]
 80050ee:	6053      	str	r3, [r2, #4]
 80050f0:	0030      	movs	r0, r6
 80050f2:	0025      	movs	r5, r4
 80050f4:	f000 f86c 	bl	80051d0 <__malloc_unlock>
 80050f8:	2207      	movs	r2, #7
 80050fa:	350b      	adds	r5, #11
 80050fc:	1d23      	adds	r3, r4, #4
 80050fe:	4395      	bics	r5, r2
 8005100:	1aea      	subs	r2, r5, r3
 8005102:	429d      	cmp	r5, r3
 8005104:	d0e5      	beq.n	80050d2 <_malloc_r+0x82>
 8005106:	1b5b      	subs	r3, r3, r5
 8005108:	50a3      	str	r3, [r4, r2]
 800510a:	e7e2      	b.n	80050d2 <_malloc_r+0x82>
 800510c:	605a      	str	r2, [r3, #4]
 800510e:	e7ec      	b.n	80050ea <_malloc_r+0x9a>
 8005110:	6862      	ldr	r2, [r4, #4]
 8005112:	42a3      	cmp	r3, r4
 8005114:	d101      	bne.n	800511a <_malloc_r+0xca>
 8005116:	602a      	str	r2, [r5, #0]
 8005118:	e7ea      	b.n	80050f0 <_malloc_r+0xa0>
 800511a:	605a      	str	r2, [r3, #4]
 800511c:	e7e8      	b.n	80050f0 <_malloc_r+0xa0>
 800511e:	0023      	movs	r3, r4
 8005120:	6864      	ldr	r4, [r4, #4]
 8005122:	e7a7      	b.n	8005074 <_malloc_r+0x24>
 8005124:	002c      	movs	r4, r5
 8005126:	686d      	ldr	r5, [r5, #4]
 8005128:	e7af      	b.n	800508a <_malloc_r+0x3a>
 800512a:	230c      	movs	r3, #12
 800512c:	0030      	movs	r0, r6
 800512e:	6033      	str	r3, [r6, #0]
 8005130:	f000 f84e 	bl	80051d0 <__malloc_unlock>
 8005134:	e7cd      	b.n	80050d2 <_malloc_r+0x82>
 8005136:	46c0      	nop			; (mov r8, r8)
 8005138:	20000278 	.word	0x20000278

0800513c <_realloc_r>:
 800513c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800513e:	0007      	movs	r7, r0
 8005140:	000e      	movs	r6, r1
 8005142:	0014      	movs	r4, r2
 8005144:	2900      	cmp	r1, #0
 8005146:	d105      	bne.n	8005154 <_realloc_r+0x18>
 8005148:	0011      	movs	r1, r2
 800514a:	f7ff ff81 	bl	8005050 <_malloc_r>
 800514e:	0005      	movs	r5, r0
 8005150:	0028      	movs	r0, r5
 8005152:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005154:	2a00      	cmp	r2, #0
 8005156:	d103      	bne.n	8005160 <_realloc_r+0x24>
 8005158:	f7ff ff0e 	bl	8004f78 <_free_r>
 800515c:	0025      	movs	r5, r4
 800515e:	e7f7      	b.n	8005150 <_realloc_r+0x14>
 8005160:	f000 f83e 	bl	80051e0 <_malloc_usable_size_r>
 8005164:	9001      	str	r0, [sp, #4]
 8005166:	4284      	cmp	r4, r0
 8005168:	d803      	bhi.n	8005172 <_realloc_r+0x36>
 800516a:	0035      	movs	r5, r6
 800516c:	0843      	lsrs	r3, r0, #1
 800516e:	42a3      	cmp	r3, r4
 8005170:	d3ee      	bcc.n	8005150 <_realloc_r+0x14>
 8005172:	0021      	movs	r1, r4
 8005174:	0038      	movs	r0, r7
 8005176:	f7ff ff6b 	bl	8005050 <_malloc_r>
 800517a:	1e05      	subs	r5, r0, #0
 800517c:	d0e8      	beq.n	8005150 <_realloc_r+0x14>
 800517e:	9b01      	ldr	r3, [sp, #4]
 8005180:	0022      	movs	r2, r4
 8005182:	429c      	cmp	r4, r3
 8005184:	d900      	bls.n	8005188 <_realloc_r+0x4c>
 8005186:	001a      	movs	r2, r3
 8005188:	0031      	movs	r1, r6
 800518a:	0028      	movs	r0, r5
 800518c:	f7ff fbbe 	bl	800490c <memcpy>
 8005190:	0031      	movs	r1, r6
 8005192:	0038      	movs	r0, r7
 8005194:	f7ff fef0 	bl	8004f78 <_free_r>
 8005198:	e7da      	b.n	8005150 <_realloc_r+0x14>
	...

0800519c <_sbrk_r>:
 800519c:	2300      	movs	r3, #0
 800519e:	b570      	push	{r4, r5, r6, lr}
 80051a0:	4d06      	ldr	r5, [pc, #24]	; (80051bc <_sbrk_r+0x20>)
 80051a2:	0004      	movs	r4, r0
 80051a4:	0008      	movs	r0, r1
 80051a6:	602b      	str	r3, [r5, #0]
 80051a8:	f7fb ffe2 	bl	8001170 <_sbrk>
 80051ac:	1c43      	adds	r3, r0, #1
 80051ae:	d103      	bne.n	80051b8 <_sbrk_r+0x1c>
 80051b0:	682b      	ldr	r3, [r5, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d000      	beq.n	80051b8 <_sbrk_r+0x1c>
 80051b6:	6023      	str	r3, [r4, #0]
 80051b8:	bd70      	pop	{r4, r5, r6, pc}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	20000270 	.word	0x20000270

080051c0 <__malloc_lock>:
 80051c0:	b510      	push	{r4, lr}
 80051c2:	4802      	ldr	r0, [pc, #8]	; (80051cc <__malloc_lock+0xc>)
 80051c4:	f7ff feb8 	bl	8004f38 <__retarget_lock_acquire_recursive>
 80051c8:	bd10      	pop	{r4, pc}
 80051ca:	46c0      	nop			; (mov r8, r8)
 80051cc:	20000274 	.word	0x20000274

080051d0 <__malloc_unlock>:
 80051d0:	b510      	push	{r4, lr}
 80051d2:	4802      	ldr	r0, [pc, #8]	; (80051dc <__malloc_unlock+0xc>)
 80051d4:	f7ff feb1 	bl	8004f3a <__retarget_lock_release_recursive>
 80051d8:	bd10      	pop	{r4, pc}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	20000274 	.word	0x20000274

080051e0 <_malloc_usable_size_r>:
 80051e0:	1f0b      	subs	r3, r1, #4
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	1f18      	subs	r0, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	da01      	bge.n	80051ee <_malloc_usable_size_r+0xe>
 80051ea:	580b      	ldr	r3, [r1, r0]
 80051ec:	18c0      	adds	r0, r0, r3
 80051ee:	4770      	bx	lr

080051f0 <_init>:
 80051f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051f6:	bc08      	pop	{r3}
 80051f8:	469e      	mov	lr, r3
 80051fa:	4770      	bx	lr

080051fc <_fini>:
 80051fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005202:	bc08      	pop	{r3}
 8005204:	469e      	mov	lr, r3
 8005206:	4770      	bx	lr
