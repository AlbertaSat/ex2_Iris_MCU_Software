
ex2_Iris_MCU_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000533c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000aa8  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ea4  08005ea4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005ea4  08005ea4  00015ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005eac  08005eac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eac  08005eac  00015eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005eb0  08005eb0  00015eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000074  08005f28  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08005f28  00020280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001114e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002998  00000000  00000000  000311ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  00033b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce0  00000000  00000000  00034980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000148d7  00000000  00000000  00035660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001289c  00000000  00000000  00049f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00075039  00000000  00000000  0005c7d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d180c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036ac  00000000  00000000  000d185c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000074 	.word	0x20000074
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080053e4 	.word	0x080053e4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000078 	.word	0x20000078
 8000104:	080053e4 	.word	0x080053e4

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8d8 	bl	80004b4 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8d3 	bl	80004b4 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzsi2>:
 8000478:	211c      	movs	r1, #28
 800047a:	2301      	movs	r3, #1
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0xe>
 8000482:	0c00      	lsrs	r0, r0, #16
 8000484:	3910      	subs	r1, #16
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	4298      	cmp	r0, r3
 800048a:	d301      	bcc.n	8000490 <__clzsi2+0x18>
 800048c:	0a00      	lsrs	r0, r0, #8
 800048e:	3908      	subs	r1, #8
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0x22>
 8000496:	0900      	lsrs	r0, r0, #4
 8000498:	3904      	subs	r1, #4
 800049a:	a202      	add	r2, pc, #8	; (adr r2, 80004a4 <__clzsi2+0x2c>)
 800049c:	5c10      	ldrb	r0, [r2, r0]
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	02020304 	.word	0x02020304
 80004a8:	01010101 	.word	0x01010101
	...

080004b4 <__clzdi2>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d103      	bne.n	80004c2 <__clzdi2+0xe>
 80004ba:	f7ff ffdd 	bl	8000478 <__clzsi2>
 80004be:	3020      	adds	r0, #32
 80004c0:	e002      	b.n	80004c8 <__clzdi2+0x14>
 80004c2:	0008      	movs	r0, r1
 80004c4:	f7ff ffd8 	bl	8000478 <__clzsi2>
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <DBG_PUT>:
#include <stdio.h>
#include <string.h>

extern UART_HandleTypeDef huart1;

static inline void DBG_PUT(char *str) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	0018      	movs	r0, r3
 80004d8:	f7ff fe16 	bl	8000108 <strlen>
 80004dc:	0003      	movs	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <DBG_PUT+0x28>)
 80004e4:	2364      	movs	r3, #100	; 0x64
 80004e6:	f003 fdd9 	bl	800409c <HAL_UART_Transmit>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200001e0 	.word	0x200001e0

080004f8 <i2c2_read8_8>:
void i2c2_write16_8(uint8_t addr, uint16_t register_pointer, uint16_t register_value){
	hi2c_write16_8(hi2c2, addr, register_pointer, register_value);
	return;
}

uint8_t i2c2_read8_8(uint8_t addr, uint8_t register_pointer){
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b097      	sub	sp, #92	; 0x5c
 80004fc:	af12      	add	r7, sp, #72	; 0x48
 80004fe:	0002      	movs	r2, r0
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	1c0a      	adds	r2, r1, #0
 8000508:	701a      	strb	r2, [r3, #0]
	uint8_t val = hi2c_read8_8(hi2c2, addr, register_pointer);
 800050a:	260f      	movs	r6, #15
 800050c:	19bd      	adds	r5, r7, r6
 800050e:	4c0e      	ldr	r4, [pc, #56]	; (8000548 <i2c2_read8_8+0x50>)
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	9310      	str	r3, [sp, #64]	; 0x40
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	930f      	str	r3, [sp, #60]	; 0x3c
 800051c:	466b      	mov	r3, sp
 800051e:	0018      	movs	r0, r3
 8000520:	0023      	movs	r3, r4
 8000522:	3310      	adds	r3, #16
 8000524:	223c      	movs	r2, #60	; 0x3c
 8000526:	0019      	movs	r1, r3
 8000528:	f004 faea 	bl	8004b00 <memcpy>
 800052c:	6820      	ldr	r0, [r4, #0]
 800052e:	6861      	ldr	r1, [r4, #4]
 8000530:	68a2      	ldr	r2, [r4, #8]
 8000532:	68e3      	ldr	r3, [r4, #12]
 8000534:	f000 f838 	bl	80005a8 <hi2c_read8_8>
 8000538:	0003      	movs	r3, r0
 800053a:	702b      	strb	r3, [r5, #0]
	return val;
 800053c:	19bb      	adds	r3, r7, r6
 800053e:	781b      	ldrb	r3, [r3, #0]
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b005      	add	sp, #20
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	200000e4 	.word	0x200000e4

0800054c <i2c2_write8_8>:
void i2c2_write8_8(uint8_t addr, uint8_t register_pointer, uint8_t register_value){
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b095      	sub	sp, #84	; 0x54
 8000550:	af12      	add	r7, sp, #72	; 0x48
 8000552:	0004      	movs	r4, r0
 8000554:	0008      	movs	r0, r1
 8000556:	0011      	movs	r1, r2
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	1c22      	adds	r2, r4, #0
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	1c02      	adds	r2, r0, #0
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	1d7b      	adds	r3, r7, #5
 8000566:	1c0a      	adds	r2, r1, #0
 8000568:	701a      	strb	r2, [r3, #0]
	hi2c_write8_8(hi2c2, addr, register_pointer, register_value);
 800056a:	4c0e      	ldr	r4, [pc, #56]	; (80005a4 <i2c2_write8_8+0x58>)
 800056c:	1d7b      	adds	r3, r7, #5
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	9311      	str	r3, [sp, #68]	; 0x44
 8000572:	1dbb      	adds	r3, r7, #6
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	9310      	str	r3, [sp, #64]	; 0x40
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	930f      	str	r3, [sp, #60]	; 0x3c
 800057e:	466b      	mov	r3, sp
 8000580:	0018      	movs	r0, r3
 8000582:	0023      	movs	r3, r4
 8000584:	3310      	adds	r3, #16
 8000586:	223c      	movs	r2, #60	; 0x3c
 8000588:	0019      	movs	r1, r3
 800058a:	f004 fab9 	bl	8004b00 <memcpy>
 800058e:	6820      	ldr	r0, [r4, #0]
 8000590:	6861      	ldr	r1, [r4, #4]
 8000592:	68a2      	ldr	r2, [r4, #8]
 8000594:	68e3      	ldr	r3, [r4, #12]
 8000596:	f000 f861 	bl	800065c <hi2c_write8_8>
	return;
 800059a:	46c0      	nop			; (mov r8, r8)
}
 800059c:	46bd      	mov	sp, r7
 800059e:	b003      	add	sp, #12
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	200000e4 	.word	0x200000e4

080005a8 <hi2c_read8_8>:
        }
}

// UNTESTED BELOW
uint8_t hi2c_read8_8(I2C_HandleTypeDef hi2c, uint8_t addr, uint8_t register_pointer)
{
 80005a8:	b084      	sub	sp, #16
 80005aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ac:	b097      	sub	sp, #92	; 0x5c
 80005ae:	af04      	add	r7, sp, #16
 80005b0:	2558      	movs	r5, #88	; 0x58
 80005b2:	2608      	movs	r6, #8
 80005b4:	19ac      	adds	r4, r5, r6
 80005b6:	19e4      	adds	r4, r4, r7
 80005b8:	6020      	str	r0, [r4, #0]
 80005ba:	6061      	str	r1, [r4, #4]
 80005bc:	60a2      	str	r2, [r4, #8]
 80005be:	60e3      	str	r3, [r4, #12]
    uint16_t return_value = 0;
 80005c0:	2344      	movs	r3, #68	; 0x44
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	2200      	movs	r2, #0
 80005c6:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80005c8:	2047      	movs	r0, #71	; 0x47
 80005ca:	183b      	adds	r3, r7, r0
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Read(&hi2c, addr << 1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 80005d0:	234c      	movs	r3, #76	; 0x4c
 80005d2:	195a      	adds	r2, r3, r5
 80005d4:	19bb      	adds	r3, r7, r6
 80005d6:	18d3      	adds	r3, r2, r3
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	18db      	adds	r3, r3, r3
 80005de:	b299      	uxth	r1, r3
 80005e0:	2350      	movs	r3, #80	; 0x50
 80005e2:	195a      	adds	r2, r3, r5
 80005e4:	19bc      	adds	r4, r7, r6
 80005e6:	1913      	adds	r3, r2, r4
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	0006      	movs	r6, r0
 80005ee:	183c      	adds	r4, r7, r0
 80005f0:	2308      	movs	r3, #8
 80005f2:	18eb      	adds	r3, r5, r3
 80005f4:	19d8      	adds	r0, r3, r7
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2344      	movs	r3, #68	; 0x44
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	f001 fbe9 	bl	8001ddc <HAL_I2C_Mem_Read>
 800060a:	0003      	movs	r3, r0
 800060c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800060e:	19bb      	adds	r3, r7, r6
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d015      	beq.n	8000642 <hi2c_read8_8+0x9a>
            char buf[64];
            sprintf(buf, "I2C8_8 read from 0x%x register 0x%x failed\r\n", addr, register_pointer);
 8000616:	234c      	movs	r3, #76	; 0x4c
 8000618:	195b      	adds	r3, r3, r5
 800061a:	2208      	movs	r2, #8
 800061c:	4694      	mov	ip, r2
 800061e:	44bc      	add	ip, r7
 8000620:	4463      	add	r3, ip
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	2350      	movs	r3, #80	; 0x50
 8000626:	195b      	adds	r3, r3, r5
 8000628:	2108      	movs	r1, #8
 800062a:	468c      	mov	ip, r1
 800062c:	44bc      	add	ip, r7
 800062e:	4463      	add	r3, ip
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <hi2c_read8_8+0xb0>)
 8000634:	1d38      	adds	r0, r7, #4
 8000636:	f004 fa75 	bl	8004b24 <siprintf>
            DBG_PUT(buf);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff ff45 	bl	80004cc <DBG_PUT>
        }
    return return_value;
 8000642:	2344      	movs	r3, #68	; 0x44
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	b013      	add	sp, #76	; 0x4c
 8000650:	bcf0      	pop	{r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	b004      	add	sp, #16
 8000656:	4718      	bx	r3
 8000658:	08005454 	.word	0x08005454

0800065c <hi2c_write8_8>:

void hi2c_write8_8(I2C_HandleTypeDef hi2c, uint8_t addr, uint8_t register_pointer, uint8_t register_value)
{
 800065c:	b084      	sub	sp, #16
 800065e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000660:	b097      	sub	sp, #92	; 0x5c
 8000662:	af04      	add	r7, sp, #16
 8000664:	2558      	movs	r5, #88	; 0x58
 8000666:	2608      	movs	r6, #8
 8000668:	19ac      	adds	r4, r5, r6
 800066a:	19e4      	adds	r4, r4, r7
 800066c:	6020      	str	r0, [r4, #0]
 800066e:	6061      	str	r1, [r4, #4]
 8000670:	60a2      	str	r2, [r4, #8]
 8000672:	60e3      	str	r3, [r4, #12]
    uint8_t dataBuffer[1];
	HAL_StatusTypeDef status = HAL_OK;
 8000674:	2047      	movs	r0, #71	; 0x47
 8000676:	183b      	adds	r3, r7, r0
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
    dataBuffer[0] = register_value;
 800067c:	2344      	movs	r3, #68	; 0x44
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	2254      	movs	r2, #84	; 0x54
 8000682:	1952      	adds	r2, r2, r5
 8000684:	2108      	movs	r1, #8
 8000686:	468c      	mov	ip, r1
 8000688:	44bc      	add	ip, r7
 800068a:	4462      	add	r2, ip
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c, addr << 1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, dataBuffer, 1, 100);
 8000690:	234c      	movs	r3, #76	; 0x4c
 8000692:	195a      	adds	r2, r3, r5
 8000694:	19bb      	adds	r3, r7, r6
 8000696:	18d3      	adds	r3, r2, r3
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b29b      	uxth	r3, r3
 800069c:	18db      	adds	r3, r3, r3
 800069e:	b299      	uxth	r1, r3
 80006a0:	2350      	movs	r3, #80	; 0x50
 80006a2:	195a      	adds	r2, r3, r5
 80006a4:	19bc      	adds	r4, r7, r6
 80006a6:	1913      	adds	r3, r2, r4
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	0006      	movs	r6, r0
 80006ae:	183c      	adds	r4, r7, r0
 80006b0:	2308      	movs	r3, #8
 80006b2:	18eb      	adds	r3, r5, r3
 80006b4:	19d8      	adds	r0, r3, r7
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	2301      	movs	r3, #1
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	2344      	movs	r3, #68	; 0x44
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	f001 fa5b 	bl	8001b80 <HAL_I2C_Mem_Write>
 80006ca:	0003      	movs	r3, r0
 80006cc:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80006ce:	19bb      	adds	r3, r7, r6
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d015      	beq.n	8000702 <hi2c_write8_8+0xa6>
            char buf[64];
            sprintf(buf, "I2C8_8 write to 0x%x failed: 0x%x\r\n", addr, register_pointer);
 80006d6:	234c      	movs	r3, #76	; 0x4c
 80006d8:	195b      	adds	r3, r3, r5
 80006da:	2208      	movs	r2, #8
 80006dc:	4694      	mov	ip, r2
 80006de:	44bc      	add	ip, r7
 80006e0:	4463      	add	r3, ip
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	2350      	movs	r3, #80	; 0x50
 80006e6:	195b      	adds	r3, r3, r5
 80006e8:	2108      	movs	r1, #8
 80006ea:	468c      	mov	ip, r1
 80006ec:	44bc      	add	ip, r7
 80006ee:	4463      	add	r3, ip
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4907      	ldr	r1, [pc, #28]	; (8000710 <hi2c_write8_8+0xb4>)
 80006f4:	1d38      	adds	r0, r7, #4
 80006f6:	f004 fa15 	bl	8004b24 <siprintf>
            DBG_PUT(buf);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff fee5 	bl	80004cc <DBG_PUT>
        }
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b013      	add	sp, #76	; 0x4c
 8000708:	bcf0      	pop	{r4, r5, r6, r7}
 800070a:	bc08      	pop	{r3}
 800070c:	b004      	add	sp, #16
 800070e:	4718      	bx	r3
 8000710:	08005484 	.word	0x08005484

08000714 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fcf2 	bl	8000108 <strlen>
 8000724:	0003      	movs	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <DBG_PUT+0x28>)
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	f003 fcb5 	bl	800409c <HAL_UART_Transmit>
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	200001e0 	.word	0x200001e0

08000740 <sensor_togglepower>:
		 	 }
	  	}
	 DBG_PUT("Scan Complete.\r\n");
}

void sensor_togglepower(int i){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if (i == 1){
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d10c      	bne.n	8000768 <sensor_togglepower+0x28>
		HAL_GPIO_WritePin(CAM_EN_GPIO_Port, CAM_EN_Pin, GPIO_PIN_SET);
 800074e:	2380      	movs	r3, #128	; 0x80
 8000750:	0119      	lsls	r1, r3, #4
 8000752:	23a0      	movs	r3, #160	; 0xa0
 8000754:	05db      	lsls	r3, r3, #23
 8000756:	2201      	movs	r2, #1
 8000758:	0018      	movs	r0, r3
 800075a:	f001 f95d 	bl	8001a18 <HAL_GPIO_WritePin>
		DBG_PUT("Sensor Power Enabled.\r\n");
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <sensor_togglepower+0x48>)
 8000760:	0018      	movs	r0, r3
 8000762:	f7ff ffd7 	bl	8000714 <DBG_PUT>
		return;
 8000766:	e00b      	b.n	8000780 <sensor_togglepower+0x40>
	}
	HAL_GPIO_WritePin(CAM_EN_GPIO_Port, CAM_EN_Pin, GPIO_PIN_RESET);
 8000768:	2380      	movs	r3, #128	; 0x80
 800076a:	0119      	lsls	r1, r3, #4
 800076c:	23a0      	movs	r3, #160	; 0xa0
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	2200      	movs	r2, #0
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f950 	bl	8001a18 <HAL_GPIO_WritePin>
	DBG_PUT("Sensor Power Disabled.\r\n");
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <sensor_togglepower+0x4c>)
 800077a:	0018      	movs	r0, r3
 800077c:	f7ff ffca 	bl	8000714 <DBG_PUT>


}
 8000780:	46bd      	mov	sp, r7
 8000782:	b002      	add	sp, #8
 8000784:	bd80      	pop	{r7, pc}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	08005a94 	.word	0x08005a94
 800078c:	08005aac 	.word	0x08005aac

08000790 <get_housekeeping_packet>:
	}
	DBG_PUT(buf);

}

housekeeping_packet_t get_housekeeping_packet(){
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b087      	sub	sp, #28
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
	housekeeping_packet_t hk;
	hk = _get_housekeeping();
 8000798:	240c      	movs	r4, #12
 800079a:	193b      	adds	r3, r7, r4
 800079c:	0018      	movs	r0, r3
 800079e:	f000 f8a7 	bl	80008f0 <_get_housekeeping>
	return hk;
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	193b      	adds	r3, r7, r4
 80007a6:	0010      	movs	r0, r2
 80007a8:	0019      	movs	r1, r3
 80007aa:	230a      	movs	r3, #10
 80007ac:	001a      	movs	r2, r3
 80007ae:	f004 f9a7 	bl	8004b00 <memcpy>
}
 80007b2:	6878      	ldr	r0, [r7, #4]
 80007b4:	46bd      	mov	sp, r7
 80007b6:	b007      	add	sp, #28
 80007b8:	bd90      	pop	{r4, r7, pc}
	...

080007bc <handle_command>:

void handle_command(uint8_t cmd) {
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b097      	sub	sp, #92	; 0x5c
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	0002      	movs	r2, r0
 80007c4:	1dfb      	adds	r3, r7, #7
 80007c6:	701a      	strb	r2, [r3, #0]
	char buf[64];
	housekeeping_packet_t hk;
    switch(cmd) {
 80007c8:	1dfb      	adds	r3, r7, #7
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	2b50      	cmp	r3, #80	; 0x50
 80007ce:	d00e      	beq.n	80007ee <handle_command+0x32>
 80007d0:	dc52      	bgt.n	8000878 <handle_command+0xbc>
 80007d2:	2b40      	cmp	r3, #64	; 0x40
 80007d4:	d048      	beq.n	8000868 <handle_command+0xac>
 80007d6:	dc4f      	bgt.n	8000878 <handle_command+0xbc>
 80007d8:	2b35      	cmp	r3, #53	; 0x35
 80007da:	d038      	beq.n	800084e <handle_command+0x92>
 80007dc:	dc4c      	bgt.n	8000878 <handle_command+0xbc>
 80007de:	2b30      	cmp	r3, #48	; 0x30
 80007e0:	d046      	beq.n	8000870 <handle_command+0xb4>
 80007e2:	dc49      	bgt.n	8000878 <handle_command+0xbc>
 80007e4:	2b10      	cmp	r3, #16
 80007e6:	d012      	beq.n	800080e <handle_command+0x52>
 80007e8:	2b15      	cmp	r3, #21
 80007ea:	d021      	beq.n	8000830 <handle_command+0x74>
//						break;
//				}
//		}
//		break;
//    }
}
 80007ec:	e044      	b.n	8000878 <handle_command+0xbc>
    	DBG_PUT("Getting Housekeeping Data:\r\n");
 80007ee:	4b24      	ldr	r3, [pc, #144]	; (8000880 <handle_command+0xc4>)
 80007f0:	0018      	movs	r0, r3
 80007f2:	f7ff ff8f 	bl	8000714 <DBG_PUT>
    	hk = get_housekeeping_packet();
 80007f6:	240c      	movs	r4, #12
 80007f8:	193b      	adds	r3, r7, r4
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff ffc8 	bl	8000790 <get_housekeeping_packet>
    	decode_hk_packet(hk);
 8000800:	193b      	adds	r3, r7, r4
 8000802:	6818      	ldr	r0, [r3, #0]
 8000804:	6859      	ldr	r1, [r3, #4]
 8000806:	689a      	ldr	r2, [r3, #8]
 8000808:	f000 f8a8 	bl	800095c <decode_hk_packet>
    	break;
 800080c:	e034      	b.n	8000878 <handle_command+0xbc>
    	iterate_image_num();
 800080e:	f000 f841 	bl	8000894 <iterate_image_num>
    	sprintf(buf, "(Placeholder)Captured Image %d\r\n", get_image_num());
 8000812:	f000 f84d 	bl	80008b0 <get_image_num>
 8000816:	0003      	movs	r3, r0
 8000818:	001a      	movs	r2, r3
 800081a:	491a      	ldr	r1, [pc, #104]	; (8000884 <handle_command+0xc8>)
 800081c:	2418      	movs	r4, #24
 800081e:	193b      	adds	r3, r7, r4
 8000820:	0018      	movs	r0, r3
 8000822:	f004 f97f 	bl	8004b24 <siprintf>
    	DBG_PUT(buf);
 8000826:	193b      	adds	r3, r7, r4
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff ff73 	bl	8000714 <DBG_PUT>
    	break;
 800082e:	e023      	b.n	8000878 <handle_command+0xbc>
    	sprintf(buf, "Current Image: %d\r\n", get_image_num());
 8000830:	f000 f83e 	bl	80008b0 <get_image_num>
 8000834:	0003      	movs	r3, r0
 8000836:	001a      	movs	r2, r3
 8000838:	4913      	ldr	r1, [pc, #76]	; (8000888 <handle_command+0xcc>)
 800083a:	2418      	movs	r4, #24
 800083c:	193b      	adds	r3, r7, r4
 800083e:	0018      	movs	r0, r3
 8000840:	f004 f970 	bl	8004b24 <siprintf>
    	DBG_PUT(buf);
 8000844:	193b      	adds	r3, r7, r4
 8000846:	0018      	movs	r0, r3
 8000848:	f7ff ff64 	bl	8000714 <DBG_PUT>
    	break;
 800084c:	e014      	b.n	8000878 <handle_command+0xbc>
    	sprintf(buf, "Number of Images: %d\r\n", imagenum);
 800084e:	4b0f      	ldr	r3, [pc, #60]	; (800088c <handle_command+0xd0>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	490f      	ldr	r1, [pc, #60]	; (8000890 <handle_command+0xd4>)
 8000854:	2418      	movs	r4, #24
 8000856:	193b      	adds	r3, r7, r4
 8000858:	0018      	movs	r0, r3
 800085a:	f004 f963 	bl	8004b24 <siprintf>
    	DBG_PUT(buf);
 800085e:	193b      	adds	r3, r7, r4
 8000860:	0018      	movs	r0, r3
 8000862:	f7ff ff57 	bl	8000714 <DBG_PUT>
    	break;
 8000866:	e007      	b.n	8000878 <handle_command+0xbc>
		sensor_togglepower(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f7ff ff69 	bl	8000740 <sensor_togglepower>
		break;
 800086e:	e003      	b.n	8000878 <handle_command+0xbc>
		sensor_togglepower(0);
 8000870:	2000      	movs	r0, #0
 8000872:	f7ff ff65 	bl	8000740 <sensor_togglepower>
		break;
 8000876:	46c0      	nop			; (mov r8, r8)
}
 8000878:	46c0      	nop			; (mov r8, r8)
 800087a:	46bd      	mov	sp, r7
 800087c:	b017      	add	sp, #92	; 0x5c
 800087e:	bd90      	pop	{r4, r7, pc}
 8000880:	08005c38 	.word	0x08005c38
 8000884:	08005c58 	.word	0x08005c58
 8000888:	08005c7c 	.word	0x08005c7c
 800088c:	20000090 	.word	0x20000090
 8000890:	08005c90 	.word	0x08005c90

08000894 <iterate_image_num>:
	 */

	return;
}

void iterate_image_num(){
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	total_image_num += 2;
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <iterate_image_num+0x18>)
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	3302      	adds	r3, #2
 800089e:	b2da      	uxtb	r2, r3
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <iterate_image_num+0x18>)
 80008a2:	701a      	strb	r2, [r3, #0]
}
 80008a4:	46c0      	nop			; (mov r8, r8)
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	20000094 	.word	0x20000094

080008b0 <get_image_num>:

uint8_t get_image_num(){
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	return total_image_num;
 80008b4:	4b02      	ldr	r3, [pc, #8]	; (80008c0 <get_image_num+0x10>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
}
 80008b8:	0018      	movs	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	46c0      	nop			; (mov r8, r8)
 80008c0:	20000094 	.word	0x20000094

080008c4 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff fc1a 	bl	8000108 <strlen>
 80008d4:	0003      	movs	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <DBG_PUT+0x28>)
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	f003 fbdd 	bl	800409c <HAL_UART_Transmit>
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	200001e0 	.word	0x200001e0

080008f0 <_get_housekeeping>:
#include "debug.h"
#include "housekeeping.h"



housekeeping_packet_t _get_housekeeping(){
 80008f0:	b590      	push	{r4, r7, lr}
 80008f2:	b087      	sub	sp, #28
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	housekeeping_packet_t hk;
	hk.vis_temp = get_temp(VIS_TEMP_SENSOR);
 80008f8:	204c      	movs	r0, #76	; 0x4c
 80008fa:	f000 fd0e 	bl	800131a <get_temp>
 80008fe:	0003      	movs	r3, r0
 8000900:	001a      	movs	r2, r3
 8000902:	240c      	movs	r4, #12
 8000904:	193b      	adds	r3, r7, r4
 8000906:	801a      	strh	r2, [r3, #0]
	hk.nir_temp = get_temp(NIR_TEMP_SENSOR);
 8000908:	204d      	movs	r0, #77	; 0x4d
 800090a:	f000 fd06 	bl	800131a <get_temp>
 800090e:	0003      	movs	r3, r0
 8000910:	001a      	movs	r2, r3
 8000912:	193b      	adds	r3, r7, r4
 8000914:	805a      	strh	r2, [r3, #2]
	hk.flash_temp = get_temp(TEMP3);
 8000916:	204e      	movs	r0, #78	; 0x4e
 8000918:	f000 fcff 	bl	800131a <get_temp>
 800091c:	0003      	movs	r3, r0
 800091e:	001a      	movs	r2, r3
 8000920:	193b      	adds	r3, r7, r4
 8000922:	809a      	strh	r2, [r3, #4]
	hk.gate_temp = get_temp(TEMP4);
 8000924:	204f      	movs	r0, #79	; 0x4f
 8000926:	f000 fcf8 	bl	800131a <get_temp>
 800092a:	0003      	movs	r3, r0
 800092c:	001a      	movs	r2, r3
 800092e:	193b      	adds	r3, r7, r4
 8000930:	80da      	strh	r2, [r3, #6]
	hk.imagenum = get_image_num();
 8000932:	f7ff ffbd 	bl	80008b0 <get_image_num>
 8000936:	0003      	movs	r3, r0
 8000938:	b2da      	uxtb	r2, r3
 800093a:	193b      	adds	r3, r7, r4
 800093c:	721a      	strb	r2, [r3, #8]
	hk.software_version = software_ver;
 800093e:	193b      	adds	r3, r7, r4
 8000940:	2211      	movs	r2, #17
 8000942:	725a      	strb	r2, [r3, #9]
	return hk;
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	193b      	adds	r3, r7, r4
 8000948:	0010      	movs	r0, r2
 800094a:	0019      	movs	r1, r3
 800094c:	230a      	movs	r3, #10
 800094e:	001a      	movs	r2, r3
 8000950:	f004 f8d6 	bl	8004b00 <memcpy>
}
 8000954:	6878      	ldr	r0, [r7, #4]
 8000956:	46bd      	mov	sp, r7
 8000958:	b007      	add	sp, #28
 800095a:	bd90      	pop	{r4, r7, pc}

0800095c <decode_hk_packet>:



void decode_hk_packet (housekeeping_packet_t hk){
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b095      	sub	sp, #84	; 0x54
 8000960:	af00      	add	r7, sp, #0
 8000962:	1d3b      	adds	r3, r7, #4
 8000964:	6018      	str	r0, [r3, #0]
 8000966:	6059      	str	r1, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
	char buf[64];
	sprintf(buf, "hk.vis_temp:0x%x\r\n", hk.vis_temp);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	881b      	ldrh	r3, [r3, #0]
 800096e:	001a      	movs	r2, r3
 8000970:	4924      	ldr	r1, [pc, #144]	; (8000a04 <decode_hk_packet+0xa8>)
 8000972:	2410      	movs	r4, #16
 8000974:	193b      	adds	r3, r7, r4
 8000976:	0018      	movs	r0, r3
 8000978:	f004 f8d4 	bl	8004b24 <siprintf>
	DBG_PUT(buf);
 800097c:	193b      	adds	r3, r7, r4
 800097e:	0018      	movs	r0, r3
 8000980:	f7ff ffa0 	bl	80008c4 <DBG_PUT>
	sprintf(buf, "hk.nir_temp: 0x%x\r\n", hk.nir_temp);
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	885b      	ldrh	r3, [r3, #2]
 8000988:	001a      	movs	r2, r3
 800098a:	491f      	ldr	r1, [pc, #124]	; (8000a08 <decode_hk_packet+0xac>)
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	f004 f8c8 	bl	8004b24 <siprintf>
	DBG_PUT(buf);
 8000994:	193b      	adds	r3, r7, r4
 8000996:	0018      	movs	r0, r3
 8000998:	f7ff ff94 	bl	80008c4 <DBG_PUT>
	sprintf(buf, "hk.flash_temp: 0x%x\r\n", hk.flash_temp);
 800099c:	1d3b      	adds	r3, r7, #4
 800099e:	889b      	ldrh	r3, [r3, #4]
 80009a0:	001a      	movs	r2, r3
 80009a2:	491a      	ldr	r1, [pc, #104]	; (8000a0c <decode_hk_packet+0xb0>)
 80009a4:	193b      	adds	r3, r7, r4
 80009a6:	0018      	movs	r0, r3
 80009a8:	f004 f8bc 	bl	8004b24 <siprintf>
	DBG_PUT(buf);
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	0018      	movs	r0, r3
 80009b0:	f7ff ff88 	bl	80008c4 <DBG_PUT>
	sprintf(buf, "hk.gate_temp: 0x%x\r\n", hk.gate_temp);
 80009b4:	1d3b      	adds	r3, r7, #4
 80009b6:	88db      	ldrh	r3, [r3, #6]
 80009b8:	001a      	movs	r2, r3
 80009ba:	4915      	ldr	r1, [pc, #84]	; (8000a10 <decode_hk_packet+0xb4>)
 80009bc:	193b      	adds	r3, r7, r4
 80009be:	0018      	movs	r0, r3
 80009c0:	f004 f8b0 	bl	8004b24 <siprintf>
	DBG_PUT(buf);
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	f7ff ff7c 	bl	80008c4 <DBG_PUT>
	sprintf(buf, "hk.imgnum: 0x%x\r\n", hk.imagenum);
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	7a1b      	ldrb	r3, [r3, #8]
 80009d0:	001a      	movs	r2, r3
 80009d2:	4910      	ldr	r1, [pc, #64]	; (8000a14 <decode_hk_packet+0xb8>)
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	0018      	movs	r0, r3
 80009d8:	f004 f8a4 	bl	8004b24 <siprintf>
	DBG_PUT(buf);
 80009dc:	193b      	adds	r3, r7, r4
 80009de:	0018      	movs	r0, r3
 80009e0:	f7ff ff70 	bl	80008c4 <DBG_PUT>
	sprintf(buf, "hk.software_version: 0x%x\r\n", hk.software_version);
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	7a5b      	ldrb	r3, [r3, #9]
 80009e8:	001a      	movs	r2, r3
 80009ea:	490b      	ldr	r1, [pc, #44]	; (8000a18 <decode_hk_packet+0xbc>)
 80009ec:	193b      	adds	r3, r7, r4
 80009ee:	0018      	movs	r0, r3
 80009f0:	f004 f898 	bl	8004b24 <siprintf>
	DBG_PUT(buf);
 80009f4:	193b      	adds	r3, r7, r4
 80009f6:	0018      	movs	r0, r3
 80009f8:	f7ff ff64 	bl	80008c4 <DBG_PUT>
}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	b015      	add	sp, #84	; 0x54
 8000a02:	bd90      	pop	{r4, r7, pc}
 8000a04:	08005ca8 	.word	0x08005ca8
 8000a08:	08005cbc 	.word	0x08005cbc
 8000a0c:	08005cd0 	.word	0x08005cd0
 8000a10:	08005ce8 	.word	0x08005ce8
 8000a14:	08005d00 	.word	0x08005d00
 8000a18:	08005d14 	.word	0x08005d14

08000a1c <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	0018      	movs	r0, r3
 8000a28:	f7ff fb6e 	bl	8000108 <strlen>
 8000a2c:	0003      	movs	r3, r0
 8000a2e:	b29a      	uxth	r2, r3
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	4804      	ldr	r0, [pc, #16]	; (8000a44 <DBG_PUT+0x28>)
 8000a34:	2364      	movs	r3, #100	; 0x64
 8000a36:	f003 fb31 	bl	800409c <HAL_UART_Transmit>
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	b002      	add	sp, #8
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	200001e0 	.word	0x200001e0

08000a48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a4c:	f000 fcd0 	bl	80013f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a50:	f000 f84c 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a54:	f000 f9d2 	bl	8000dfc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a58:	f000 f8b6 	bl	8000bc8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a5c:	f000 f8f4 	bl	8000c48 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000a60:	f000 f932 	bl	8000cc8 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000a64:	f000 f962 	bl	8000d2c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000a68:	f000 f998 	bl	8000d9c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // init nand flash
//  NAND_SPI_Init(&hspi2);
  DBG_PUT("-----------------------------------\r\n");
 8000a6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ad8 <main+0x90>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f7ff ffd4 	bl	8000a1c <DBG_PUT>
  DBG_PUT("Iris Electronics Test Software\r\nSlave Side\r\n");
 8000a74:	4b19      	ldr	r3, [pc, #100]	; (8000adc <main+0x94>)
 8000a76:	0018      	movs	r0, r3
 8000a78:	f7ff ffd0 	bl	8000a1c <DBG_PUT>
  DBG_PUT("-----------------------------------\r\n");
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <main+0x90>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f7ff ffcc 	bl	8000a1c <DBG_PUT>
  init_temp_sensors();
 8000a84:	f000 fc71 	bl	800136a <init_temp_sensors>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  switch (state){
 8000a88:	4b15      	ldr	r3, [pc, #84]	; (8000ae0 <main+0x98>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d018      	beq.n	8000ac2 <main+0x7a>
 8000a90:	dcfa      	bgt.n	8000a88 <main+0x40>
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d00e      	beq.n	8000ab4 <main+0x6c>
 8000a96:	dcf7      	bgt.n	8000a88 <main+0x40>
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d01b      	beq.n	8000ad4 <main+0x8c>
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d1f3      	bne.n	8000a88 <main+0x40>
			case idle:
				break;
			case receiving:
				state = idle;
 8000aa0:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <main+0x98>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
				HAL_SPI_Receive_IT(&hspi1, &RX_Data, sizeof(RX_Data));
 8000aa6:	490f      	ldr	r1, [pc, #60]	; (8000ae4 <main+0x9c>)
 8000aa8:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <main+0xa0>)
 8000aaa:	2201      	movs	r2, #1
 8000aac:	0018      	movs	r0, r3
 8000aae:	f002 fd2b 	bl	8003508 <HAL_SPI_Receive_IT>
//				HAL_SPI_TransmitReceive_IT(&hspi1, &RX_Data, &RX_Data, sizeof(RX_Data));
				break;
 8000ab2:	e010      	b.n	8000ad6 <main+0x8e>
			case transmitting:
				state = receiving;
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	; (8000ae0 <main+0x98>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	701a      	strb	r2, [r3, #0]
//				HAL_Delay(100);
//				HAL_SPI_Transmit_IT(&hspi1, &RX_Data, sizeof(RX_Data));
//				HAL_SPI_Transmit(&hspi1, &RX_Data, sizeof(RX_Data), 1000);
				RX_Data = 0x00;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <main+0x9c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	701a      	strb	r2, [r3, #0]
				break;
 8000ac0:	e009      	b.n	8000ad6 <main+0x8e>
			case handling_command:
				state = transmitting;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <main+0x98>)
 8000ac4:	2202      	movs	r2, #2
 8000ac6:	701a      	strb	r2, [r3, #0]
				handle_command(RX_Data);
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <main+0x9c>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	0018      	movs	r0, r3
 8000ace:	f7ff fe75 	bl	80007bc <handle_command>
				break;
 8000ad2:	e000      	b.n	8000ad6 <main+0x8e>
				break;
 8000ad4:	46c0      	nop			; (mov r8, r8)
	  switch (state){
 8000ad6:	e7d7      	b.n	8000a88 <main+0x40>
 8000ad8:	08005d30 	.word	0x08005d30
 8000adc:	08005d58 	.word	0x08005d58
 8000ae0:	20000000 	.word	0x20000000
 8000ae4:	20000264 	.word	0x20000264
 8000ae8:	20000130 	.word	0x20000130

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b5b0      	push	{r4, r5, r7, lr}
 8000aee:	b09a      	sub	sp, #104	; 0x68
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	2434      	movs	r4, #52	; 0x34
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	0018      	movs	r0, r3
 8000af8:	2334      	movs	r3, #52	; 0x34
 8000afa:	001a      	movs	r2, r3
 8000afc:	2100      	movs	r1, #0
 8000afe:	f004 f808 	bl	8004b12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b02:	2520      	movs	r5, #32
 8000b04:	197b      	adds	r3, r7, r5
 8000b06:	0018      	movs	r0, r3
 8000b08:	2314      	movs	r3, #20
 8000b0a:	001a      	movs	r2, r3
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	f004 f800 	bl	8004b12 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b12:	003b      	movs	r3, r7
 8000b14:	0018      	movs	r0, r3
 8000b16:	2320      	movs	r3, #32
 8000b18:	001a      	movs	r2, r3
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f003 fff9 	bl	8004b12 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a27      	ldr	r2, [pc, #156]	; (8000bc4 <SystemClock_Config+0xd8>)
 8000b26:	401a      	ands	r2, r3
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b2a:	2180      	movs	r1, #128	; 0x80
 8000b2c:	0109      	lsls	r1, r1, #4
 8000b2e:	430a      	orrs	r2, r1
 8000b30:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000b32:	0021      	movs	r1, r4
 8000b34:	187b      	adds	r3, r7, r1
 8000b36:	2210      	movs	r2, #16
 8000b38:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000b3a:	187b      	adds	r3, r7, r1
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000b40:	187b      	adds	r3, r7, r1
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000b46:	187b      	adds	r3, r7, r1
 8000b48:	22a0      	movs	r2, #160	; 0xa0
 8000b4a:	0212      	lsls	r2, r2, #8
 8000b4c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	0018      	movs	r0, r3
 8000b58:	f001 fd5e 	bl	8002618 <HAL_RCC_OscConfig>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d02b      	beq.n	8000bb8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000b60:	f000 f9f6 	bl	8000f50 <Error_Handler>


  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	0029      	movs	r1, r5
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	220f      	movs	r2, #15
 8000b6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2100      	movs	r1, #0
 8000b88:	0018      	movs	r0, r3
 8000b8a:	f002 f8c1 	bl	8002d10 <HAL_RCC_ClockConfig>
 8000b8e:	1e03      	subs	r3, r0, #0
 8000b90:	d001      	beq.n	8000b96 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000b92:	f000 f9dd 	bl	8000f50 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2209      	movs	r2, #9
 8000b9a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000b9c:	003b      	movs	r3, r7
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000ba2:	003b      	movs	r3, r7
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba8:	003b      	movs	r3, r7
 8000baa:	0018      	movs	r0, r3
 8000bac:	f002 fad2 	bl	8003154 <HAL_RCCEx_PeriphCLKConfig>
 8000bb0:	1e03      	subs	r3, r0, #0
 8000bb2:	d001      	beq.n	8000bb8 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000bb4:	f000 f9cc 	bl	8000f50 <Error_Handler>
  }
}
}
 8000bb8:	46c0      	nop			; (mov r8, r8)
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	b01a      	add	sp, #104	; 0x68
 8000bbe:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc0:	40007000 	.word	0x40007000
 8000bc4:	ffffe7ff 	.word	0xffffe7ff

08000bc8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bcc:	4b1c      	ldr	r3, [pc, #112]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000bce:	4a1d      	ldr	r2, [pc, #116]	; (8000c44 <MX_I2C1_Init+0x7c>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000bd2:	4b1b      	ldr	r3, [pc, #108]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000bd4:	22e1      	movs	r2, #225	; 0xe1
 8000bd6:	00d2      	lsls	r2, r2, #3
 8000bd8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000bda:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000be0:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000be6:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000bec:	4b14      	ldr	r3, [pc, #80]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000bf2:	4b13      	ldr	r3, [pc, #76]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c04:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 ff24 	bl	8001a54 <HAL_I2C_Init>
 8000c0c:	1e03      	subs	r3, r0, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c10:	f000 f99e 	bl	8000f50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c14:	4b0a      	ldr	r3, [pc, #40]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000c16:	2100      	movs	r1, #0
 8000c18:	0018      	movs	r0, r3
 8000c1a:	f001 fc65 	bl	80024e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c1e:	1e03      	subs	r3, r0, #0
 8000c20:	d001      	beq.n	8000c26 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000c22:	f000 f995 	bl	8000f50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_I2C1_Init+0x78>)
 8000c28:	2100      	movs	r1, #0
 8000c2a:	0018      	movs	r0, r3
 8000c2c:	f001 fca8 	bl	8002580 <HAL_I2CEx_ConfigDigitalFilter>
 8000c30:	1e03      	subs	r3, r0, #0
 8000c32:	d001      	beq.n	8000c38 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000c34:	f000 f98c 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	46c0      	nop			; (mov r8, r8)
 8000c40:	20000098 	.word	0x20000098
 8000c44:	40005400 	.word	0x40005400

08000c48 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <MX_I2C2_Init+0x7c>)
 8000c50:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c54:	22e1      	movs	r2, #225	; 0xe1
 8000c56:	00d2      	lsls	r2, r2, #3
 8000c58:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c84:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c86:	0018      	movs	r0, r3
 8000c88:	f000 fee4 	bl	8001a54 <HAL_I2C_Init>
 8000c8c:	1e03      	subs	r3, r0, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c90:	f000 f95e 	bl	8000f50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000c96:	2100      	movs	r1, #0
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 fc25 	bl	80024e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000ca2:	f000 f955 	bl	8000f50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_I2C2_Init+0x78>)
 8000ca8:	2100      	movs	r1, #0
 8000caa:	0018      	movs	r0, r3
 8000cac:	f001 fc68 	bl	8002580 <HAL_I2CEx_ConfigDigitalFilter>
 8000cb0:	1e03      	subs	r3, r0, #0
 8000cb2:	d001      	beq.n	8000cb8 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000cb4:	f000 f94c 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	46c0      	nop			; (mov r8, r8)
 8000cc0:	200000e4 	.word	0x200000e4
 8000cc4:	40005800 	.word	0x40005800

08000cc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ccc:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000cce:	4a16      	ldr	r2, [pc, #88]	; (8000d28 <MX_SPI1_Init+0x60>)
 8000cd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd8:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cde:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000d0a:	2207      	movs	r2, #7
 8000d0c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000d0e:	4b05      	ldr	r3, [pc, #20]	; (8000d24 <MX_SPI1_Init+0x5c>)
 8000d10:	0018      	movs	r0, r3
 8000d12:	f002 fb65 	bl	80033e0 <HAL_SPI_Init>
 8000d16:	1e03      	subs	r3, r0, #0
 8000d18:	d001      	beq.n	8000d1e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000d1a:	f000 f919 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000130 	.word	0x20000130
 8000d28:	40013000 	.word	0x40013000

08000d2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d30:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d32:	4a19      	ldr	r2, [pc, #100]	; (8000d98 <MX_SPI2_Init+0x6c>)
 8000d34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d36:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d38:	2282      	movs	r2, #130	; 0x82
 8000d3a:	0052      	lsls	r2, r2, #1
 8000d3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d3e:	4b15      	ldr	r3, [pc, #84]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d44:	4b13      	ldr	r3, [pc, #76]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d4a:	4b12      	ldr	r3, [pc, #72]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d50:	4b10      	ldr	r3, [pc, #64]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d56:	4b0f      	ldr	r3, [pc, #60]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0092      	lsls	r2, r2, #2
 8000d5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d5e:	4b0d      	ldr	r3, [pc, #52]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d64:	4b0b      	ldr	r3, [pc, #44]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d66:	2200      	movs	r2, #0
 8000d68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d76:	4b07      	ldr	r3, [pc, #28]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d78:	2207      	movs	r2, #7
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <MX_SPI2_Init+0x68>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f002 fb2e 	bl	80033e0 <HAL_SPI_Init>
 8000d84:	1e03      	subs	r3, r0, #0
 8000d86:	d001      	beq.n	8000d8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d88:	f000 f8e2 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d8c:	46c0      	nop			; (mov r8, r8)
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	20000188 	.word	0x20000188
 8000d98:	40003800 	.word	0x40003800

08000d9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000da2:	4a15      	ldr	r2, [pc, #84]	; (8000df8 <MX_USART1_UART_Init+0x5c>)
 8000da4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000da6:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000da8:	22e1      	movs	r2, #225	; 0xe1
 8000daa:	0252      	lsls	r2, r2, #9
 8000dac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <MX_USART1_UART_Init+0x58>)
 8000de0:	0018      	movs	r0, r3
 8000de2:	f003 f907 	bl	8003ff4 <HAL_UART_Init>
 8000de6:	1e03      	subs	r3, r0, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000dea:	f000 f8b1 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200001e0 	.word	0x200001e0
 8000df8:	40013800 	.word	0x40013800

08000dfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dfc:	b590      	push	{r4, r7, lr}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e02:	240c      	movs	r4, #12
 8000e04:	193b      	adds	r3, r7, r4
 8000e06:	0018      	movs	r0, r3
 8000e08:	2314      	movs	r3, #20
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	f003 fe80 	bl	8004b12 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e12:	4b35      	ldr	r3, [pc, #212]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e16:	4b34      	ldr	r3, [pc, #208]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e1e:	4b32      	ldr	r3, [pc, #200]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e22:	2280      	movs	r2, #128	; 0x80
 8000e24:	4013      	ands	r3, r2
 8000e26:	60bb      	str	r3, [r7, #8]
 8000e28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2a:	4b2f      	ldr	r3, [pc, #188]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e2e:	4b2e      	ldr	r3, [pc, #184]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e30:	2101      	movs	r1, #1
 8000e32:	430a      	orrs	r2, r1
 8000e34:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e36:	4b2c      	ldr	r3, [pc, #176]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	607b      	str	r3, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e42:	4b29      	ldr	r3, [pc, #164]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e46:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e48:	2102      	movs	r1, #2
 8000e4a:	430a      	orrs	r2, r1
 8000e4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <MX_GPIO_Init+0xec>)
 8000e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e52:	2202      	movs	r2, #2
 8000e54:	4013      	ands	r3, r2
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8000e5a:	4924      	ldr	r1, [pc, #144]	; (8000eec <MX_GPIO_Init+0xf0>)
 8000e5c:	23a0      	movs	r3, #160	; 0xa0
 8000e5e:	05db      	lsls	r3, r3, #23
 8000e60:	2200      	movs	r2, #0
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fdd8 	bl	8001a18 <HAL_GPIO_WritePin>
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_OUT1_Pin|NAND_CS1_Pin, GPIO_PIN_RESET);
 8000e68:	4921      	ldr	r1, [pc, #132]	; (8000ef0 <MX_GPIO_Init+0xf4>)
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0xf8>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 fdd2 	bl	8001a18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_CS1_Pin USART2_CS2_Pin USART2_MOSI_Pin USART2_CLK_Pin
                           WP__Pin CAM_EN_Pin NAND_CS2_Pin */
  GPIO_InitStruct.Pin = USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	4a1d      	ldr	r2, [pc, #116]	; (8000eec <MX_GPIO_Init+0xf0>)
 8000e78:	601a      	str	r2, [r3, #0]
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	193b      	adds	r3, r7, r4
 8000e82:	2200      	movs	r2, #0
 8000e84:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	193b      	adds	r3, r7, r4
 8000e88:	2200      	movs	r2, #0
 8000e8a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e8c:	193a      	adds	r2, r7, r4
 8000e8e:	23a0      	movs	r3, #160	; 0xa0
 8000e90:	05db      	lsls	r3, r3, #23
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f000 fc41 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_MISO_Pin */
  GPIO_InitStruct.Pin = USART2_MISO_Pin;
 8000e9a:	193b      	adds	r3, r7, r4
 8000e9c:	2208      	movs	r2, #8
 8000e9e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea0:	193b      	adds	r3, r7, r4
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	193b      	adds	r3, r7, r4
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USART2_MISO_GPIO_Port, &GPIO_InitStruct);
 8000eac:	193a      	adds	r2, r7, r4
 8000eae:	23a0      	movs	r3, #160	; 0xa0
 8000eb0:	05db      	lsls	r3, r3, #23
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 fc31 	bl	800171c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_OUT1_Pin NAND_CS1_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin|NAND_CS1_Pin;
 8000eba:	0021      	movs	r1, r4
 8000ebc:	187b      	adds	r3, r7, r1
 8000ebe:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <MX_GPIO_Init+0xf4>)
 8000ec0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec2:	187b      	adds	r3, r7, r1
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <MX_GPIO_Init+0xf8>)
 8000ed8:	0019      	movs	r1, r3
 8000eda:	0010      	movs	r0, r2
 8000edc:	f000 fc1e 	bl	800171c <HAL_GPIO_Init>

}
 8000ee0:	46c0      	nop			; (mov r8, r8)
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	b009      	add	sp, #36	; 0x24
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	40021000 	.word	0x40021000
 8000eec:	00001917 	.word	0x00001917
 8000ef0:	00001001 	.word	0x00001001
 8000ef4:	50000400 	.word	0x50000400

08000ef8 <HAL_SPI_RxCpltCallback>:
	RX_Data = 0x00;
}

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)

{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b093      	sub	sp, #76	; 0x4c
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	state = handling_command;
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <HAL_SPI_RxCpltCallback+0x30>)
 8000f02:	2203      	movs	r2, #3
 8000f04:	701a      	strb	r2, [r3, #0]
	char buf[64];
	sprintf(buf, "Received 0x%x\r\n", RX_Data);
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_SPI_RxCpltCallback+0x34>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	4908      	ldr	r1, [pc, #32]	; (8000f30 <HAL_SPI_RxCpltCallback+0x38>)
 8000f0e:	2408      	movs	r4, #8
 8000f10:	193b      	adds	r3, r7, r4
 8000f12:	0018      	movs	r0, r3
 8000f14:	f003 fe06 	bl	8004b24 <siprintf>
	DBG_PUT(buf);
 8000f18:	193b      	adds	r3, r7, r4
 8000f1a:	0018      	movs	r0, r3
 8000f1c:	f7ff fd7e 	bl	8000a1c <DBG_PUT>

}
 8000f20:	46c0      	nop			; (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	b013      	add	sp, #76	; 0x4c
 8000f26:	bd90      	pop	{r4, r7, pc}
 8000f28:	20000000 	.word	0x20000000
 8000f2c:	20000264 	.word	0x20000264
 8000f30:	08005d94 	.word	0x08005d94

08000f34 <HAL_SPI_TxRxCpltCallback>:
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef * hspi)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
		state = receiving;
 8000f3c:	4b03      	ldr	r3, [pc, #12]	; (8000f4c <HAL_SPI_TxRxCpltCallback+0x18>)
 8000f3e:	2201      	movs	r2, #1
 8000f40:	701a      	strb	r2, [r3, #0]
//		char buf[64];
//		sprintf(buf, "Received 0x%x\r\n", RX_Data);
//		DBG_PUT(buf);
}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	20000000 	.word	0x20000000

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <Error_Handler+0x8>
	...

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	4b07      	ldr	r3, [pc, #28]	; (8000f80 <HAL_MspInit+0x24>)
 8000f62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_MspInit+0x24>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f6c:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <HAL_MspInit+0x24>)
 8000f6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f70:	4b03      	ldr	r3, [pc, #12]	; (8000f80 <HAL_MspInit+0x24>)
 8000f72:	2180      	movs	r1, #128	; 0x80
 8000f74:	0549      	lsls	r1, r1, #21
 8000f76:	430a      	orrs	r2, r1
 8000f78:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f7a:	46c0      	nop			; (mov r8, r8)
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000

08000f84 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f84:	b590      	push	{r4, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	2414      	movs	r4, #20
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	0018      	movs	r0, r3
 8000f92:	2314      	movs	r3, #20
 8000f94:	001a      	movs	r2, r3
 8000f96:	2100      	movs	r1, #0
 8000f98:	f003 fdbb 	bl	8004b12 <memset>
  if(hi2c->Instance==I2C1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a3b      	ldr	r2, [pc, #236]	; (8001090 <HAL_I2C_MspInit+0x10c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d129      	bne.n	8000ffa <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa6:	4b3b      	ldr	r3, [pc, #236]	; (8001094 <HAL_I2C_MspInit+0x110>)
 8000fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000faa:	4b3a      	ldr	r3, [pc, #232]	; (8001094 <HAL_I2C_MspInit+0x110>)
 8000fac:	2102      	movs	r1, #2
 8000fae:	430a      	orrs	r2, r1
 8000fb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fb2:	4b38      	ldr	r3, [pc, #224]	; (8001094 <HAL_I2C_MspInit+0x110>)
 8000fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fb6:	2202      	movs	r2, #2
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fbe:	0021      	movs	r1, r4
 8000fc0:	187b      	adds	r3, r7, r1
 8000fc2:	22c0      	movs	r2, #192	; 0xc0
 8000fc4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc6:	187b      	adds	r3, r7, r1
 8000fc8:	2212      	movs	r2, #18
 8000fca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fcc:	187b      	adds	r3, r7, r1
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd2:	187b      	adds	r3, r7, r1
 8000fd4:	2203      	movs	r2, #3
 8000fd6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000fd8:	187b      	adds	r3, r7, r1
 8000fda:	2201      	movs	r2, #1
 8000fdc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fde:	187b      	adds	r3, r7, r1
 8000fe0:	4a2d      	ldr	r2, [pc, #180]	; (8001098 <HAL_I2C_MspInit+0x114>)
 8000fe2:	0019      	movs	r1, r3
 8000fe4:	0010      	movs	r0, r2
 8000fe6:	f000 fb99 	bl	800171c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fea:	4b2a      	ldr	r3, [pc, #168]	; (8001094 <HAL_I2C_MspInit+0x110>)
 8000fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fee:	4b29      	ldr	r3, [pc, #164]	; (8001094 <HAL_I2C_MspInit+0x110>)
 8000ff0:	2180      	movs	r1, #128	; 0x80
 8000ff2:	0389      	lsls	r1, r1, #14
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000ff8:	e046      	b.n	8001088 <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <HAL_I2C_MspInit+0x118>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d141      	bne.n	8001088 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b23      	ldr	r3, [pc, #140]	; (8001094 <HAL_I2C_MspInit+0x110>)
 8001006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <HAL_I2C_MspInit+0x110>)
 800100a:	2102      	movs	r1, #2
 800100c:	430a      	orrs	r2, r1
 800100e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001010:	4b20      	ldr	r3, [pc, #128]	; (8001094 <HAL_I2C_MspInit+0x110>)
 8001012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001014:	2202      	movs	r2, #2
 8001016:	4013      	ands	r3, r2
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800101c:	2114      	movs	r1, #20
 800101e:	187b      	adds	r3, r7, r1
 8001020:	2280      	movs	r2, #128	; 0x80
 8001022:	0112      	lsls	r2, r2, #4
 8001024:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001026:	000c      	movs	r4, r1
 8001028:	193b      	adds	r3, r7, r4
 800102a:	2212      	movs	r2, #18
 800102c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102e:	193b      	adds	r3, r7, r4
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	193b      	adds	r3, r7, r4
 8001036:	2203      	movs	r2, #3
 8001038:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 800103a:	193b      	adds	r3, r7, r4
 800103c:	2206      	movs	r2, #6
 800103e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	193b      	adds	r3, r7, r4
 8001042:	4a15      	ldr	r2, [pc, #84]	; (8001098 <HAL_I2C_MspInit+0x114>)
 8001044:	0019      	movs	r1, r3
 8001046:	0010      	movs	r0, r2
 8001048:	f000 fb68 	bl	800171c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800104c:	0021      	movs	r1, r4
 800104e:	187b      	adds	r3, r7, r1
 8001050:	2280      	movs	r2, #128	; 0x80
 8001052:	0192      	lsls	r2, r2, #6
 8001054:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001056:	187b      	adds	r3, r7, r1
 8001058:	2212      	movs	r2, #18
 800105a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	187b      	adds	r3, r7, r1
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001062:	187b      	adds	r3, r7, r1
 8001064:	2203      	movs	r2, #3
 8001066:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8001068:	187b      	adds	r3, r7, r1
 800106a:	2205      	movs	r2, #5
 800106c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106e:	187b      	adds	r3, r7, r1
 8001070:	4a09      	ldr	r2, [pc, #36]	; (8001098 <HAL_I2C_MspInit+0x114>)
 8001072:	0019      	movs	r1, r3
 8001074:	0010      	movs	r0, r2
 8001076:	f000 fb51 	bl	800171c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_I2C_MspInit+0x110>)
 800107c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800107e:	4b05      	ldr	r3, [pc, #20]	; (8001094 <HAL_I2C_MspInit+0x110>)
 8001080:	2180      	movs	r1, #128	; 0x80
 8001082:	03c9      	lsls	r1, r1, #15
 8001084:	430a      	orrs	r2, r1
 8001086:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001088:	46c0      	nop			; (mov r8, r8)
 800108a:	46bd      	mov	sp, r7
 800108c:	b00b      	add	sp, #44	; 0x2c
 800108e:	bd90      	pop	{r4, r7, pc}
 8001090:	40005400 	.word	0x40005400
 8001094:	40021000 	.word	0x40021000
 8001098:	50000400 	.word	0x50000400
 800109c:	40005800 	.word	0x40005800

080010a0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b08b      	sub	sp, #44	; 0x2c
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a8:	2414      	movs	r4, #20
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	0018      	movs	r0, r3
 80010ae:	2314      	movs	r3, #20
 80010b0:	001a      	movs	r2, r3
 80010b2:	2100      	movs	r1, #0
 80010b4:	f003 fd2d 	bl	8004b12 <memset>
  if(hspi->Instance==SPI1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a40      	ldr	r2, [pc, #256]	; (80011c0 <HAL_SPI_MspInit+0x120>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d132      	bne.n	8001128 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80010c2:	4b40      	ldr	r3, [pc, #256]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 80010c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80010c6:	4b3f      	ldr	r3, [pc, #252]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 80010c8:	2180      	movs	r1, #128	; 0x80
 80010ca:	0149      	lsls	r1, r1, #5
 80010cc:	430a      	orrs	r2, r1
 80010ce:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d0:	4b3c      	ldr	r3, [pc, #240]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 80010d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 80010d6:	2101      	movs	r1, #1
 80010d8:	430a      	orrs	r2, r1
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
 80010dc:	4b39      	ldr	r3, [pc, #228]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 80010de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010e0:	2201      	movs	r2, #1
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 80010e8:	0021      	movs	r1, r4
 80010ea:	187b      	adds	r3, r7, r1
 80010ec:	4a36      	ldr	r2, [pc, #216]	; (80011c8 <HAL_SPI_MspInit+0x128>)
 80010ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f0:	187b      	adds	r3, r7, r1
 80010f2:	2202      	movs	r2, #2
 80010f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f6:	187b      	adds	r3, r7, r1
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010fc:	187b      	adds	r3, r7, r1
 80010fe:	2203      	movs	r2, #3
 8001100:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001102:	187b      	adds	r3, r7, r1
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001108:	187a      	adds	r2, r7, r1
 800110a:	23a0      	movs	r3, #160	; 0xa0
 800110c:	05db      	lsls	r3, r3, #23
 800110e:	0011      	movs	r1, r2
 8001110:	0018      	movs	r0, r3
 8001112:	f000 fb03 	bl	800171c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001116:	2200      	movs	r2, #0
 8001118:	2100      	movs	r1, #0
 800111a:	2019      	movs	r0, #25
 800111c:	f000 fa84 	bl	8001628 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001120:	2019      	movs	r0, #25
 8001122:	f000 fa96 	bl	8001652 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001126:	e046      	b.n	80011b6 <HAL_SPI_MspInit+0x116>
  else if(hspi->Instance==SPI2)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a27      	ldr	r2, [pc, #156]	; (80011cc <HAL_SPI_MspInit+0x12c>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d141      	bne.n	80011b6 <HAL_SPI_MspInit+0x116>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001132:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 8001134:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 8001138:	2180      	movs	r1, #128	; 0x80
 800113a:	01c9      	lsls	r1, r1, #7
 800113c:	430a      	orrs	r2, r1
 800113e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001140:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 8001142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001144:	4b1f      	ldr	r3, [pc, #124]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 8001146:	2102      	movs	r1, #2
 8001148:	430a      	orrs	r2, r1
 800114a:	62da      	str	r2, [r3, #44]	; 0x2c
 800114c:	4b1d      	ldr	r3, [pc, #116]	; (80011c4 <HAL_SPI_MspInit+0x124>)
 800114e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001150:	2202      	movs	r2, #2
 8001152:	4013      	ands	r3, r2
 8001154:	60fb      	str	r3, [r7, #12]
 8001156:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001158:	2114      	movs	r1, #20
 800115a:	187b      	adds	r3, r7, r1
 800115c:	2280      	movs	r2, #128	; 0x80
 800115e:	00d2      	lsls	r2, r2, #3
 8001160:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	000c      	movs	r4, r1
 8001164:	193b      	adds	r3, r7, r4
 8001166:	2202      	movs	r2, #2
 8001168:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	193b      	adds	r3, r7, r4
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001170:	193b      	adds	r3, r7, r4
 8001172:	2203      	movs	r2, #3
 8001174:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001176:	193b      	adds	r3, r7, r4
 8001178:	2205      	movs	r2, #5
 800117a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	193b      	adds	r3, r7, r4
 800117e:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <HAL_SPI_MspInit+0x130>)
 8001180:	0019      	movs	r1, r3
 8001182:	0010      	movs	r0, r2
 8001184:	f000 faca 	bl	800171c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001188:	0021      	movs	r1, r4
 800118a:	187b      	adds	r3, r7, r1
 800118c:	22c0      	movs	r2, #192	; 0xc0
 800118e:	0212      	lsls	r2, r2, #8
 8001190:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001192:	187b      	adds	r3, r7, r1
 8001194:	2202      	movs	r2, #2
 8001196:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001198:	187b      	adds	r3, r7, r1
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119e:	187b      	adds	r3, r7, r1
 80011a0:	2203      	movs	r2, #3
 80011a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	187b      	adds	r3, r7, r1
 80011ac:	4a08      	ldr	r2, [pc, #32]	; (80011d0 <HAL_SPI_MspInit+0x130>)
 80011ae:	0019      	movs	r1, r3
 80011b0:	0010      	movs	r0, r2
 80011b2:	f000 fab3 	bl	800171c <HAL_GPIO_Init>
}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	46bd      	mov	sp, r7
 80011ba:	b00b      	add	sp, #44	; 0x2c
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	40013000 	.word	0x40013000
 80011c4:	40021000 	.word	0x40021000
 80011c8:	000080e0 	.word	0x000080e0
 80011cc:	40003800 	.word	0x40003800
 80011d0:	50000400 	.word	0x50000400

080011d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011d4:	b590      	push	{r4, r7, lr}
 80011d6:	b089      	sub	sp, #36	; 0x24
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	240c      	movs	r4, #12
 80011de:	193b      	adds	r3, r7, r4
 80011e0:	0018      	movs	r0, r3
 80011e2:	2314      	movs	r3, #20
 80011e4:	001a      	movs	r2, r3
 80011e6:	2100      	movs	r1, #0
 80011e8:	f003 fc93 	bl	8004b12 <memset>
  if(huart->Instance==USART1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a18      	ldr	r2, [pc, #96]	; (8001254 <HAL_UART_MspInit+0x80>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12a      	bne.n	800124c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_UART_MspInit+0x84>)
 80011f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011fa:	4b17      	ldr	r3, [pc, #92]	; (8001258 <HAL_UART_MspInit+0x84>)
 80011fc:	2180      	movs	r1, #128	; 0x80
 80011fe:	01c9      	lsls	r1, r1, #7
 8001200:	430a      	orrs	r2, r1
 8001202:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	4b14      	ldr	r3, [pc, #80]	; (8001258 <HAL_UART_MspInit+0x84>)
 8001206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001208:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_UART_MspInit+0x84>)
 800120a:	2101      	movs	r1, #1
 800120c:	430a      	orrs	r2, r1
 800120e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_UART_MspInit+0x84>)
 8001212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001214:	2201      	movs	r2, #1
 8001216:	4013      	ands	r3, r2
 8001218:	60bb      	str	r3, [r7, #8]
 800121a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800121c:	193b      	adds	r3, r7, r4
 800121e:	22c0      	movs	r2, #192	; 0xc0
 8001220:	00d2      	lsls	r2, r2, #3
 8001222:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001224:	0021      	movs	r1, r4
 8001226:	187b      	adds	r3, r7, r1
 8001228:	2202      	movs	r2, #2
 800122a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122c:	187b      	adds	r3, r7, r1
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001232:	187b      	adds	r3, r7, r1
 8001234:	2203      	movs	r2, #3
 8001236:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001238:	187b      	adds	r3, r7, r1
 800123a:	2204      	movs	r2, #4
 800123c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123e:	187a      	adds	r2, r7, r1
 8001240:	23a0      	movs	r3, #160	; 0xa0
 8001242:	05db      	lsls	r3, r3, #23
 8001244:	0011      	movs	r1, r2
 8001246:	0018      	movs	r0, r3
 8001248:	f000 fa68 	bl	800171c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800124c:	46c0      	nop			; (mov r8, r8)
 800124e:	46bd      	mov	sp, r7
 8001250:	b009      	add	sp, #36	; 0x24
 8001252:	bd90      	pop	{r4, r7, pc}
 8001254:	40013800 	.word	0x40013800
 8001258:	40021000 	.word	0x40021000

0800125c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001260:	e7fe      	b.n	8001260 <NMI_Handler+0x4>

08001262 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001262:	b580      	push	{r7, lr}
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001266:	e7fe      	b.n	8001266 <HardFault_Handler+0x4>

08001268 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800126c:	46c0      	nop			; (mov r8, r8)
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}

0800127c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001280:	f000 f90a 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001284:	46c0      	nop			; (mov r8, r8)
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001290:	4b03      	ldr	r3, [pc, #12]	; (80012a0 <SPI1_IRQHandler+0x14>)
 8001292:	0018      	movs	r0, r3
 8001294:	f002 fa8e 	bl	80037b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000130 	.word	0x20000130

080012a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b086      	sub	sp, #24
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012ac:	4a14      	ldr	r2, [pc, #80]	; (8001300 <_sbrk+0x5c>)
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <_sbrk+0x60>)
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b8:	4b13      	ldr	r3, [pc, #76]	; (8001308 <_sbrk+0x64>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d102      	bne.n	80012c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c0:	4b11      	ldr	r3, [pc, #68]	; (8001308 <_sbrk+0x64>)
 80012c2:	4a12      	ldr	r2, [pc, #72]	; (800130c <_sbrk+0x68>)
 80012c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c6:	4b10      	ldr	r3, [pc, #64]	; (8001308 <_sbrk+0x64>)
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	18d3      	adds	r3, r2, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d207      	bcs.n	80012e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d4:	f003 fbea 	bl	8004aac <__errno>
 80012d8:	0003      	movs	r3, r0
 80012da:	220c      	movs	r2, #12
 80012dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012de:	2301      	movs	r3, #1
 80012e0:	425b      	negs	r3, r3
 80012e2:	e009      	b.n	80012f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e4:	4b08      	ldr	r3, [pc, #32]	; (8001308 <_sbrk+0x64>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ea:	4b07      	ldr	r3, [pc, #28]	; (8001308 <_sbrk+0x64>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	18d2      	adds	r2, r2, r3
 80012f2:	4b05      	ldr	r3, [pc, #20]	; (8001308 <_sbrk+0x64>)
 80012f4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012f6:	68fb      	ldr	r3, [r7, #12]
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b006      	add	sp, #24
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	20005000 	.word	0x20005000
 8001304:	00000400 	.word	0x00000400
 8001308:	20000268 	.word	0x20000268
 800130c:	20000280 	.word	0x20000280

08001310 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001314:	46c0      	nop			; (mov r8, r8)
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}

0800131a <get_temp>:
 */
#include "tmp421.h"
#include "debug.h"

// add reset function to the stuff n things
uint16_t get_temp(uint8_t sensor_addr){
 800131a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800131c:	b085      	sub	sp, #20
 800131e:	af00      	add	r7, sp, #0
 8001320:	0002      	movs	r2, r0
 8001322:	1dfb      	adds	r3, r7, #7
 8001324:	701a      	strb	r2, [r3, #0]
	// returns a 16 bit unsigned integer with bits [15:8] as the 'high' byte,
	// and the bits [7:4] bits as the 'low' byte. High byte is the integer value with a -64 celsius offset
	// Low byte is [7:4] with 0.0625 celsius per count. Temp is the sum of the high and low byte.
	uint8_t highbyte = i2c2_read8_8(sensor_addr, 0x00);
 8001326:	250f      	movs	r5, #15
 8001328:	197c      	adds	r4, r7, r5
 800132a:	1dfb      	adds	r3, r7, #7
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2100      	movs	r1, #0
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff f8e1 	bl	80004f8 <i2c2_read8_8>
 8001336:	0003      	movs	r3, r0
 8001338:	7023      	strb	r3, [r4, #0]
	uint8_t lowbyte = i2c2_read8_8(sensor_addr, 0x10);
 800133a:	260e      	movs	r6, #14
 800133c:	19bc      	adds	r4, r7, r6
 800133e:	1dfb      	adds	r3, r7, #7
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2110      	movs	r1, #16
 8001344:	0018      	movs	r0, r3
 8001346:	f7ff f8d7 	bl	80004f8 <i2c2_read8_8>
 800134a:	0003      	movs	r3, r0
 800134c:	7023      	strb	r3, [r4, #0]
	return ((uint16_t)highbyte << 8) | lowbyte;
 800134e:	197b      	adds	r3, r7, r5
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	021b      	lsls	r3, r3, #8
 8001354:	b21a      	sxth	r2, r3
 8001356:	19bb      	adds	r3, r7, r6
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21b      	sxth	r3, r3
 8001360:	b29b      	uxth	r3, r3
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b005      	add	sp, #20
 8001368:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800136a <init_temp_sensors>:

void init_temp_sensors(void){
 800136a:	b580      	push	{r7, lr}
 800136c:	af00      	add	r7, sp, #0
	// change bit 2 of config 1 to set to extended binary
	// and make life easier.
	i2c2_write8_8(VIS_TEMP_SENSOR, 0x09, 0x04);
 800136e:	2204      	movs	r2, #4
 8001370:	2109      	movs	r1, #9
 8001372:	204c      	movs	r0, #76	; 0x4c
 8001374:	f7ff f8ea 	bl	800054c <i2c2_write8_8>
	i2c2_write8_8(NIR_TEMP_SENSOR, 0x09, 0x04);
 8001378:	2204      	movs	r2, #4
 800137a:	2109      	movs	r1, #9
 800137c:	204d      	movs	r0, #77	; 0x4d
 800137e:	f7ff f8e5 	bl	800054c <i2c2_write8_8>
	i2c2_write8_8(TEMP3, 0x09, 0x04);
 8001382:	2204      	movs	r2, #4
 8001384:	2109      	movs	r1, #9
 8001386:	204e      	movs	r0, #78	; 0x4e
 8001388:	f7ff f8e0 	bl	800054c <i2c2_write8_8>
	i2c2_write8_8(TEMP4, 0x09, 0x04);
 800138c:	2204      	movs	r2, #4
 800138e:	2109      	movs	r1, #9
 8001390:	204f      	movs	r0, #79	; 0x4f
 8001392:	f7ff f8db 	bl	800054c <i2c2_write8_8>
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800139c:	480d      	ldr	r0, [pc, #52]	; (80013d4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800139e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80013a2:	490e      	ldr	r1, [pc, #56]	; (80013dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a4:	4a0e      	ldr	r2, [pc, #56]	; (80013e0 <LoopForever+0xe>)
  movs r3, #0
 80013a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013a8:	e002      	b.n	80013b0 <LoopCopyDataInit>

080013aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013ae:	3304      	adds	r3, #4

080013b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b4:	d3f9      	bcc.n	80013aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013b6:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013b8:	4c0b      	ldr	r4, [pc, #44]	; (80013e8 <LoopForever+0x16>)
  movs r3, #0
 80013ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013bc:	e001      	b.n	80013c2 <LoopFillZerobss>

080013be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c0:	3204      	adds	r2, #4

080013c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c4:	d3fb      	bcc.n	80013be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013c6:	f7ff ffa3 	bl	8001310 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ca:	f003 fb75 	bl	8004ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ce:	f7ff fb3b 	bl	8000a48 <main>

080013d2 <LoopForever>:

LoopForever:
    b LoopForever
 80013d2:	e7fe      	b.n	80013d2 <LoopForever>
   ldr   r0, =_estack
 80013d4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80013d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013dc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80013e0:	08005eb4 	.word	0x08005eb4
  ldr r2, =_sbss
 80013e4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80013e8:	20000280 	.word	0x20000280

080013ec <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013ec:	e7fe      	b.n	80013ec <ADC1_COMP_IRQHandler>
	...

080013f0 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f6:	1dfb      	adds	r3, r7, #7
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80013fc:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_Init+0x3c>)
 80013fe:	681a      	ldr	r2, [r3, #0]
 8001400:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_Init+0x3c>)
 8001402:	2140      	movs	r1, #64	; 0x40
 8001404:	430a      	orrs	r2, r1
 8001406:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001408:	2003      	movs	r0, #3
 800140a:	f000 f811 	bl	8001430 <HAL_InitTick>
 800140e:	1e03      	subs	r3, r0, #0
 8001410:	d003      	beq.n	800141a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	2201      	movs	r2, #1
 8001416:	701a      	strb	r2, [r3, #0]
 8001418:	e001      	b.n	800141e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800141a:	f7ff fd9f 	bl	8000f5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800141e:	1dfb      	adds	r3, r7, #7
 8001420:	781b      	ldrb	r3, [r3, #0]
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40022000 	.word	0x40022000

08001430 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <HAL_InitTick+0x5c>)
 800143a:	681c      	ldr	r4, [r3, #0]
 800143c:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_InitTick+0x60>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	0019      	movs	r1, r3
 8001442:	23fa      	movs	r3, #250	; 0xfa
 8001444:	0098      	lsls	r0, r3, #2
 8001446:	f7fe fe71 	bl	800012c <__udivsi3>
 800144a:	0003      	movs	r3, r0
 800144c:	0019      	movs	r1, r3
 800144e:	0020      	movs	r0, r4
 8001450:	f7fe fe6c 	bl	800012c <__udivsi3>
 8001454:	0003      	movs	r3, r0
 8001456:	0018      	movs	r0, r3
 8001458:	f000 f90b 	bl	8001672 <HAL_SYSTICK_Config>
 800145c:	1e03      	subs	r3, r0, #0
 800145e:	d001      	beq.n	8001464 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e00f      	b.n	8001484 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b03      	cmp	r3, #3
 8001468:	d80b      	bhi.n	8001482 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	2301      	movs	r3, #1
 800146e:	425b      	negs	r3, r3
 8001470:	2200      	movs	r2, #0
 8001472:	0018      	movs	r0, r3
 8001474:	f000 f8d8 	bl	8001628 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_InitTick+0x64>)
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	e000      	b.n	8001484 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
}
 8001484:	0018      	movs	r0, r3
 8001486:	46bd      	mov	sp, r7
 8001488:	b003      	add	sp, #12
 800148a:	bd90      	pop	{r4, r7, pc}
 800148c:	20000004 	.word	0x20000004
 8001490:	2000000c 	.word	0x2000000c
 8001494:	20000008 	.word	0x20000008

08001498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x1c>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	001a      	movs	r2, r3
 80014a2:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x20>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	18d2      	adds	r2, r2, r3
 80014a8:	4b03      	ldr	r3, [pc, #12]	; (80014b8 <HAL_IncTick+0x20>)
 80014aa:	601a      	str	r2, [r3, #0]
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	46c0      	nop			; (mov r8, r8)
 80014b4:	2000000c 	.word	0x2000000c
 80014b8:	2000026c 	.word	0x2000026c

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b02      	ldr	r3, [pc, #8]	; (80014cc <HAL_GetTick+0x10>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	0018      	movs	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	46c0      	nop			; (mov r8, r8)
 80014cc:	2000026c 	.word	0x2000026c

080014d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	0002      	movs	r2, r0
 80014d8:	1dfb      	adds	r3, r7, #7
 80014da:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014dc:	1dfb      	adds	r3, r7, #7
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b7f      	cmp	r3, #127	; 0x7f
 80014e2:	d809      	bhi.n	80014f8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014e4:	1dfb      	adds	r3, r7, #7
 80014e6:	781b      	ldrb	r3, [r3, #0]
 80014e8:	001a      	movs	r2, r3
 80014ea:	231f      	movs	r3, #31
 80014ec:	401a      	ands	r2, r3
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <__NVIC_EnableIRQ+0x30>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	4091      	lsls	r1, r2
 80014f4:	000a      	movs	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]
  }
}
 80014f8:	46c0      	nop			; (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b002      	add	sp, #8
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	e000e100 	.word	0xe000e100

08001504 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001504:	b590      	push	{r4, r7, lr}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	0002      	movs	r2, r0
 800150c:	6039      	str	r1, [r7, #0]
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b7f      	cmp	r3, #127	; 0x7f
 8001518:	d828      	bhi.n	800156c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800151a:	4a2f      	ldr	r2, [pc, #188]	; (80015d8 <__NVIC_SetPriority+0xd4>)
 800151c:	1dfb      	adds	r3, r7, #7
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	b25b      	sxtb	r3, r3
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	33c0      	adds	r3, #192	; 0xc0
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	589b      	ldr	r3, [r3, r2]
 800152a:	1dfa      	adds	r2, r7, #7
 800152c:	7812      	ldrb	r2, [r2, #0]
 800152e:	0011      	movs	r1, r2
 8001530:	2203      	movs	r2, #3
 8001532:	400a      	ands	r2, r1
 8001534:	00d2      	lsls	r2, r2, #3
 8001536:	21ff      	movs	r1, #255	; 0xff
 8001538:	4091      	lsls	r1, r2
 800153a:	000a      	movs	r2, r1
 800153c:	43d2      	mvns	r2, r2
 800153e:	401a      	ands	r2, r3
 8001540:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	019b      	lsls	r3, r3, #6
 8001546:	22ff      	movs	r2, #255	; 0xff
 8001548:	401a      	ands	r2, r3
 800154a:	1dfb      	adds	r3, r7, #7
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	0018      	movs	r0, r3
 8001550:	2303      	movs	r3, #3
 8001552:	4003      	ands	r3, r0
 8001554:	00db      	lsls	r3, r3, #3
 8001556:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001558:	481f      	ldr	r0, [pc, #124]	; (80015d8 <__NVIC_SetPriority+0xd4>)
 800155a:	1dfb      	adds	r3, r7, #7
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	b25b      	sxtb	r3, r3
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	430a      	orrs	r2, r1
 8001564:	33c0      	adds	r3, #192	; 0xc0
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800156a:	e031      	b.n	80015d0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800156c:	4a1b      	ldr	r2, [pc, #108]	; (80015dc <__NVIC_SetPriority+0xd8>)
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	0019      	movs	r1, r3
 8001574:	230f      	movs	r3, #15
 8001576:	400b      	ands	r3, r1
 8001578:	3b08      	subs	r3, #8
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	3306      	adds	r3, #6
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	18d3      	adds	r3, r2, r3
 8001582:	3304      	adds	r3, #4
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	1dfa      	adds	r2, r7, #7
 8001588:	7812      	ldrb	r2, [r2, #0]
 800158a:	0011      	movs	r1, r2
 800158c:	2203      	movs	r2, #3
 800158e:	400a      	ands	r2, r1
 8001590:	00d2      	lsls	r2, r2, #3
 8001592:	21ff      	movs	r1, #255	; 0xff
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	43d2      	mvns	r2, r2
 800159a:	401a      	ands	r2, r3
 800159c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	019b      	lsls	r3, r3, #6
 80015a2:	22ff      	movs	r2, #255	; 0xff
 80015a4:	401a      	ands	r2, r3
 80015a6:	1dfb      	adds	r3, r7, #7
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	0018      	movs	r0, r3
 80015ac:	2303      	movs	r3, #3
 80015ae:	4003      	ands	r3, r0
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80015b4:	4809      	ldr	r0, [pc, #36]	; (80015dc <__NVIC_SetPriority+0xd8>)
 80015b6:	1dfb      	adds	r3, r7, #7
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	001c      	movs	r4, r3
 80015bc:	230f      	movs	r3, #15
 80015be:	4023      	ands	r3, r4
 80015c0:	3b08      	subs	r3, #8
 80015c2:	089b      	lsrs	r3, r3, #2
 80015c4:	430a      	orrs	r2, r1
 80015c6:	3306      	adds	r3, #6
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	18c3      	adds	r3, r0, r3
 80015cc:	3304      	adds	r3, #4
 80015ce:	601a      	str	r2, [r3, #0]
}
 80015d0:	46c0      	nop			; (mov r8, r8)
 80015d2:	46bd      	mov	sp, r7
 80015d4:	b003      	add	sp, #12
 80015d6:	bd90      	pop	{r4, r7, pc}
 80015d8:	e000e100 	.word	0xe000e100
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	1e5a      	subs	r2, r3, #1
 80015ec:	2380      	movs	r3, #128	; 0x80
 80015ee:	045b      	lsls	r3, r3, #17
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d301      	bcc.n	80015f8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015f4:	2301      	movs	r3, #1
 80015f6:	e010      	b.n	800161a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <SysTick_Config+0x44>)
 80015fa:	687a      	ldr	r2, [r7, #4]
 80015fc:	3a01      	subs	r2, #1
 80015fe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001600:	2301      	movs	r3, #1
 8001602:	425b      	negs	r3, r3
 8001604:	2103      	movs	r1, #3
 8001606:	0018      	movs	r0, r3
 8001608:	f7ff ff7c 	bl	8001504 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800160c:	4b05      	ldr	r3, [pc, #20]	; (8001624 <SysTick_Config+0x44>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001612:	4b04      	ldr	r3, [pc, #16]	; (8001624 <SysTick_Config+0x44>)
 8001614:	2207      	movs	r2, #7
 8001616:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001618:	2300      	movs	r3, #0
}
 800161a:	0018      	movs	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	b002      	add	sp, #8
 8001620:	bd80      	pop	{r7, pc}
 8001622:	46c0      	nop			; (mov r8, r8)
 8001624:	e000e010 	.word	0xe000e010

08001628 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001628:	b580      	push	{r7, lr}
 800162a:	b084      	sub	sp, #16
 800162c:	af00      	add	r7, sp, #0
 800162e:	60b9      	str	r1, [r7, #8]
 8001630:	607a      	str	r2, [r7, #4]
 8001632:	210f      	movs	r1, #15
 8001634:	187b      	adds	r3, r7, r1
 8001636:	1c02      	adds	r2, r0, #0
 8001638:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800163a:	68ba      	ldr	r2, [r7, #8]
 800163c:	187b      	adds	r3, r7, r1
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	b25b      	sxtb	r3, r3
 8001642:	0011      	movs	r1, r2
 8001644:	0018      	movs	r0, r3
 8001646:	f7ff ff5d 	bl	8001504 <__NVIC_SetPriority>
}
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	46bd      	mov	sp, r7
 800164e:	b004      	add	sp, #16
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b082      	sub	sp, #8
 8001656:	af00      	add	r7, sp, #0
 8001658:	0002      	movs	r2, r0
 800165a:	1dfb      	adds	r3, r7, #7
 800165c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800165e:	1dfb      	adds	r3, r7, #7
 8001660:	781b      	ldrb	r3, [r3, #0]
 8001662:	b25b      	sxtb	r3, r3
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff ff33 	bl	80014d0 <__NVIC_EnableIRQ>
}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	46bd      	mov	sp, r7
 800166e:	b002      	add	sp, #8
 8001670:	bd80      	pop	{r7, pc}

08001672 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001672:	b580      	push	{r7, lr}
 8001674:	b082      	sub	sp, #8
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	0018      	movs	r0, r3
 800167e:	f7ff ffaf 	bl	80015e0 <SysTick_Config>
 8001682:	0003      	movs	r3, r0
}
 8001684:	0018      	movs	r0, r3
 8001686:	46bd      	mov	sp, r7
 8001688:	b002      	add	sp, #8
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001694:	210f      	movs	r1, #15
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2225      	movs	r2, #37	; 0x25
 80016a0:	5c9b      	ldrb	r3, [r3, r2]
 80016a2:	b2db      	uxtb	r3, r3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d006      	beq.n	80016b6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2204      	movs	r2, #4
 80016ac:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016ae:	187b      	adds	r3, r7, r1
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
 80016b4:	e02a      	b.n	800170c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	210e      	movs	r1, #14
 80016c2:	438a      	bics	r2, r1
 80016c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	438a      	bics	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	221c      	movs	r2, #28
 80016dc:	401a      	ands	r2, r3
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2101      	movs	r1, #1
 80016e4:	4091      	lsls	r1, r2
 80016e6:	000a      	movs	r2, r1
 80016e8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2225      	movs	r2, #37	; 0x25
 80016ee:	2101      	movs	r1, #1
 80016f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2224      	movs	r2, #36	; 0x24
 80016f6:	2100      	movs	r1, #0
 80016f8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d004      	beq.n	800170c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	0010      	movs	r0, r2
 800170a:	4798      	blx	r3
    }
  }
  return status;
 800170c:	230f      	movs	r3, #15
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	781b      	ldrb	r3, [r3, #0]
}
 8001712:	0018      	movs	r0, r3
 8001714:	46bd      	mov	sp, r7
 8001716:	b004      	add	sp, #16
 8001718:	bd80      	pop	{r7, pc}
	...

0800171c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001726:	2300      	movs	r3, #0
 8001728:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800172a:	2300      	movs	r3, #0
 800172c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001732:	e155      	b.n	80019e0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	697a      	ldr	r2, [r7, #20]
 800173c:	4091      	lsls	r1, r2
 800173e:	000a      	movs	r2, r1
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d100      	bne.n	800174c <HAL_GPIO_Init+0x30>
 800174a:	e146      	b.n	80019da <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	4013      	ands	r3, r2
 8001754:	2b01      	cmp	r3, #1
 8001756:	d005      	beq.n	8001764 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	2203      	movs	r2, #3
 800175e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001760:	2b02      	cmp	r3, #2
 8001762:	d130      	bne.n	80017c6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	43da      	mvns	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	409a      	lsls	r2, r3
 8001786:	0013      	movs	r3, r2
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800179a:	2201      	movs	r2, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	409a      	lsls	r2, r3
 80017a0:	0013      	movs	r3, r2
 80017a2:	43da      	mvns	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	2201      	movs	r2, #1
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
 80017b8:	0013      	movs	r3, r2
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	2203      	movs	r2, #3
 80017cc:	4013      	ands	r3, r2
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d017      	beq.n	8001802 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	409a      	lsls	r2, r3
 80017e0:	0013      	movs	r3, r2
 80017e2:	43da      	mvns	r2, r3
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	409a      	lsls	r2, r3
 80017f4:	0013      	movs	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	2203      	movs	r2, #3
 8001808:	4013      	ands	r3, r2
 800180a:	2b02      	cmp	r3, #2
 800180c:	d123      	bne.n	8001856 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	0092      	lsls	r2, r2, #2
 8001818:	58d3      	ldr	r3, [r2, r3]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2207      	movs	r2, #7
 8001820:	4013      	ands	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	409a      	lsls	r2, r3
 8001828:	0013      	movs	r3, r2
 800182a:	43da      	mvns	r2, r3
 800182c:	693b      	ldr	r3, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2107      	movs	r1, #7
 800183a:	400b      	ands	r3, r1
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	409a      	lsls	r2, r3
 8001840:	0013      	movs	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	0092      	lsls	r2, r2, #2
 8001852:	6939      	ldr	r1, [r7, #16]
 8001854:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	409a      	lsls	r2, r3
 8001864:	0013      	movs	r3, r2
 8001866:	43da      	mvns	r2, r3
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2203      	movs	r2, #3
 8001874:	401a      	ands	r2, r3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	409a      	lsls	r2, r3
 800187c:	0013      	movs	r3, r2
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685a      	ldr	r2, [r3, #4]
 800188e:	23c0      	movs	r3, #192	; 0xc0
 8001890:	029b      	lsls	r3, r3, #10
 8001892:	4013      	ands	r3, r2
 8001894:	d100      	bne.n	8001898 <HAL_GPIO_Init+0x17c>
 8001896:	e0a0      	b.n	80019da <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001898:	4b57      	ldr	r3, [pc, #348]	; (80019f8 <HAL_GPIO_Init+0x2dc>)
 800189a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800189c:	4b56      	ldr	r3, [pc, #344]	; (80019f8 <HAL_GPIO_Init+0x2dc>)
 800189e:	2101      	movs	r1, #1
 80018a0:	430a      	orrs	r2, r1
 80018a2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80018a4:	4a55      	ldr	r2, [pc, #340]	; (80019fc <HAL_GPIO_Init+0x2e0>)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	089b      	lsrs	r3, r3, #2
 80018aa:	3302      	adds	r3, #2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	589b      	ldr	r3, [r3, r2]
 80018b0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	2203      	movs	r2, #3
 80018b6:	4013      	ands	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	409a      	lsls	r2, r3
 80018be:	0013      	movs	r3, r2
 80018c0:	43da      	mvns	r2, r3
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	23a0      	movs	r3, #160	; 0xa0
 80018cc:	05db      	lsls	r3, r3, #23
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d01f      	beq.n	8001912 <HAL_GPIO_Init+0x1f6>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4a      	ldr	r2, [pc, #296]	; (8001a00 <HAL_GPIO_Init+0x2e4>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d019      	beq.n	800190e <HAL_GPIO_Init+0x1f2>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a49      	ldr	r2, [pc, #292]	; (8001a04 <HAL_GPIO_Init+0x2e8>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d013      	beq.n	800190a <HAL_GPIO_Init+0x1ee>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a48      	ldr	r2, [pc, #288]	; (8001a08 <HAL_GPIO_Init+0x2ec>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d00d      	beq.n	8001906 <HAL_GPIO_Init+0x1ea>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a47      	ldr	r2, [pc, #284]	; (8001a0c <HAL_GPIO_Init+0x2f0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d007      	beq.n	8001902 <HAL_GPIO_Init+0x1e6>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a46      	ldr	r2, [pc, #280]	; (8001a10 <HAL_GPIO_Init+0x2f4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d101      	bne.n	80018fe <HAL_GPIO_Init+0x1e2>
 80018fa:	2305      	movs	r3, #5
 80018fc:	e00a      	b.n	8001914 <HAL_GPIO_Init+0x1f8>
 80018fe:	2306      	movs	r3, #6
 8001900:	e008      	b.n	8001914 <HAL_GPIO_Init+0x1f8>
 8001902:	2304      	movs	r3, #4
 8001904:	e006      	b.n	8001914 <HAL_GPIO_Init+0x1f8>
 8001906:	2303      	movs	r3, #3
 8001908:	e004      	b.n	8001914 <HAL_GPIO_Init+0x1f8>
 800190a:	2302      	movs	r3, #2
 800190c:	e002      	b.n	8001914 <HAL_GPIO_Init+0x1f8>
 800190e:	2301      	movs	r3, #1
 8001910:	e000      	b.n	8001914 <HAL_GPIO_Init+0x1f8>
 8001912:	2300      	movs	r3, #0
 8001914:	697a      	ldr	r2, [r7, #20]
 8001916:	2103      	movs	r1, #3
 8001918:	400a      	ands	r2, r1
 800191a:	0092      	lsls	r2, r2, #2
 800191c:	4093      	lsls	r3, r2
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001924:	4935      	ldr	r1, [pc, #212]	; (80019fc <HAL_GPIO_Init+0x2e0>)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	089b      	lsrs	r3, r3, #2
 800192a:	3302      	adds	r3, #2
 800192c:	009b      	lsls	r3, r3, #2
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001932:	4b38      	ldr	r3, [pc, #224]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	43da      	mvns	r2, r3
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	4013      	ands	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	2380      	movs	r3, #128	; 0x80
 8001948:	025b      	lsls	r3, r3, #9
 800194a:	4013      	ands	r3, r2
 800194c:	d003      	beq.n	8001956 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001956:	4b2f      	ldr	r3, [pc, #188]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800195c:	4b2d      	ldr	r3, [pc, #180]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	43da      	mvns	r2, r3
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	4013      	ands	r3, r2
 800196a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685a      	ldr	r2, [r3, #4]
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	029b      	lsls	r3, r3, #10
 8001974:	4013      	ands	r3, r2
 8001976:	d003      	beq.n	8001980 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4313      	orrs	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	43da      	mvns	r2, r3
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	4013      	ands	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	035b      	lsls	r3, r3, #13
 800199e:	4013      	ands	r3, r2
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80019aa:	4b1a      	ldr	r3, [pc, #104]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80019b0:	4b18      	ldr	r3, [pc, #96]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	43da      	mvns	r2, r3
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4013      	ands	r3, r2
 80019be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685a      	ldr	r2, [r3, #4]
 80019c4:	2380      	movs	r3, #128	; 0x80
 80019c6:	039b      	lsls	r3, r3, #14
 80019c8:	4013      	ands	r3, r2
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80019cc:	693a      	ldr	r2, [r7, #16]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019d4:	4b0f      	ldr	r3, [pc, #60]	; (8001a14 <HAL_GPIO_Init+0x2f8>)
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	3301      	adds	r3, #1
 80019de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	40da      	lsrs	r2, r3
 80019e8:	1e13      	subs	r3, r2, #0
 80019ea:	d000      	beq.n	80019ee <HAL_GPIO_Init+0x2d2>
 80019ec:	e6a2      	b.n	8001734 <HAL_GPIO_Init+0x18>
  }
}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	46c0      	nop			; (mov r8, r8)
 80019f2:	46bd      	mov	sp, r7
 80019f4:	b006      	add	sp, #24
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40021000 	.word	0x40021000
 80019fc:	40010000 	.word	0x40010000
 8001a00:	50000400 	.word	0x50000400
 8001a04:	50000800 	.word	0x50000800
 8001a08:	50000c00 	.word	0x50000c00
 8001a0c:	50001000 	.word	0x50001000
 8001a10:	50001c00 	.word	0x50001c00
 8001a14:	40010400 	.word	0x40010400

08001a18 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
 8001a20:	0008      	movs	r0, r1
 8001a22:	0011      	movs	r1, r2
 8001a24:	1cbb      	adds	r3, r7, #2
 8001a26:	1c02      	adds	r2, r0, #0
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	1c7b      	adds	r3, r7, #1
 8001a2c:	1c0a      	adds	r2, r1, #0
 8001a2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a30:	1c7b      	adds	r3, r7, #1
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d004      	beq.n	8001a42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a38:	1cbb      	adds	r3, r7, #2
 8001a3a:	881a      	ldrh	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001a40:	e003      	b.n	8001a4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001a42:	1cbb      	adds	r3, r7, #2
 8001a44:	881a      	ldrh	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a4a:	46c0      	nop			; (mov r8, r8)
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	b002      	add	sp, #8
 8001a50:	bd80      	pop	{r7, pc}
	...

08001a54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e082      	b.n	8001b6c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2241      	movs	r2, #65	; 0x41
 8001a6a:	5c9b      	ldrb	r3, [r3, r2]
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d107      	bne.n	8001a82 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2240      	movs	r2, #64	; 0x40
 8001a76:	2100      	movs	r1, #0
 8001a78:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	0018      	movs	r0, r3
 8001a7e:	f7ff fa81 	bl	8000f84 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2241      	movs	r2, #65	; 0x41
 8001a86:	2124      	movs	r1, #36	; 0x24
 8001a88:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	2101      	movs	r1, #1
 8001a96:	438a      	bics	r2, r1
 8001a98:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685a      	ldr	r2, [r3, #4]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4934      	ldr	r1, [pc, #208]	; (8001b74 <HAL_I2C_Init+0x120>)
 8001aa4:	400a      	ands	r2, r1
 8001aa6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	689a      	ldr	r2, [r3, #8]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4931      	ldr	r1, [pc, #196]	; (8001b78 <HAL_I2C_Init+0x124>)
 8001ab4:	400a      	ands	r2, r1
 8001ab6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d108      	bne.n	8001ad2 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689a      	ldr	r2, [r3, #8]
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0209      	lsls	r1, r1, #8
 8001acc:	430a      	orrs	r2, r1
 8001ace:	609a      	str	r2, [r3, #8]
 8001ad0:	e007      	b.n	8001ae2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2184      	movs	r1, #132	; 0x84
 8001adc:	0209      	lsls	r1, r1, #8
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	68db      	ldr	r3, [r3, #12]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d104      	bne.n	8001af4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2280      	movs	r2, #128	; 0x80
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	491f      	ldr	r1, [pc, #124]	; (8001b7c <HAL_I2C_Init+0x128>)
 8001b00:	430a      	orrs	r2, r1
 8001b02:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	491a      	ldr	r1, [pc, #104]	; (8001b78 <HAL_I2C_Init+0x124>)
 8001b10:	400a      	ands	r2, r1
 8001b12:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	691a      	ldr	r2, [r3, #16]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	431a      	orrs	r2, r3
 8001b1e:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69d9      	ldr	r1, [r3, #28]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1a      	ldr	r2, [r3, #32]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	430a      	orrs	r2, r1
 8001b3c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	2101      	movs	r1, #1
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2241      	movs	r2, #65	; 0x41
 8001b58:	2120      	movs	r1, #32
 8001b5a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2200      	movs	r2, #0
 8001b60:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2242      	movs	r2, #66	; 0x42
 8001b66:	2100      	movs	r1, #0
 8001b68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	0018      	movs	r0, r3
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	b002      	add	sp, #8
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	f0ffffff 	.word	0xf0ffffff
 8001b78:	ffff7fff 	.word	0xffff7fff
 8001b7c:	02008000 	.word	0x02008000

08001b80 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af02      	add	r7, sp, #8
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	000c      	movs	r4, r1
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	0019      	movs	r1, r3
 8001b8e:	230a      	movs	r3, #10
 8001b90:	18fb      	adds	r3, r7, r3
 8001b92:	1c22      	adds	r2, r4, #0
 8001b94:	801a      	strh	r2, [r3, #0]
 8001b96:	2308      	movs	r3, #8
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	1c02      	adds	r2, r0, #0
 8001b9c:	801a      	strh	r2, [r3, #0]
 8001b9e:	1dbb      	adds	r3, r7, #6
 8001ba0:	1c0a      	adds	r2, r1, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2241      	movs	r2, #65	; 0x41
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b20      	cmp	r3, #32
 8001bae:	d000      	beq.n	8001bb2 <HAL_I2C_Mem_Write+0x32>
 8001bb0:	e10c      	b.n	8001dcc <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d004      	beq.n	8001bc2 <HAL_I2C_Mem_Write+0x42>
 8001bb8:	232c      	movs	r3, #44	; 0x2c
 8001bba:	18fb      	adds	r3, r7, r3
 8001bbc:	881b      	ldrh	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2280      	movs	r2, #128	; 0x80
 8001bc6:	0092      	lsls	r2, r2, #2
 8001bc8:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	e0ff      	b.n	8001dce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2240      	movs	r2, #64	; 0x40
 8001bd2:	5c9b      	ldrb	r3, [r3, r2]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d101      	bne.n	8001bdc <HAL_I2C_Mem_Write+0x5c>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e0f8      	b.n	8001dce <HAL_I2C_Mem_Write+0x24e>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	2240      	movs	r2, #64	; 0x40
 8001be0:	2101      	movs	r1, #1
 8001be2:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001be4:	f7ff fc6a 	bl	80014bc <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	0219      	lsls	r1, r3, #8
 8001bf0:	68f8      	ldr	r0, [r7, #12]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	9300      	str	r3, [sp, #0]
 8001bf6:	2319      	movs	r3, #25
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f000 fb0b 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8001bfe:	1e03      	subs	r3, r0, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0e3      	b.n	8001dce <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2241      	movs	r2, #65	; 0x41
 8001c0a:	2121      	movs	r1, #33	; 0x21
 8001c0c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	2242      	movs	r2, #66	; 0x42
 8001c12:	2140      	movs	r1, #64	; 0x40
 8001c14:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c20:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	222c      	movs	r2, #44	; 0x2c
 8001c26:	18ba      	adds	r2, r7, r2
 8001c28:	8812      	ldrh	r2, [r2, #0]
 8001c2a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001c32:	1dbb      	adds	r3, r7, #6
 8001c34:	881c      	ldrh	r4, [r3, #0]
 8001c36:	2308      	movs	r3, #8
 8001c38:	18fb      	adds	r3, r7, r3
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	230a      	movs	r3, #10
 8001c3e:	18fb      	adds	r3, r7, r3
 8001c40:	8819      	ldrh	r1, [r3, #0]
 8001c42:	68f8      	ldr	r0, [r7, #12]
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	9301      	str	r3, [sp, #4]
 8001c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	0023      	movs	r3, r4
 8001c4e:	f000 f9f9 	bl	8002044 <I2C_RequestMemoryWrite>
 8001c52:	1e03      	subs	r3, r0, #0
 8001c54:	d005      	beq.n	8001c62 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2240      	movs	r2, #64	; 0x40
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0b5      	b.n	8001dce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	2bff      	cmp	r3, #255	; 0xff
 8001c6a:	d911      	bls.n	8001c90 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	22ff      	movs	r2, #255	; 0xff
 8001c70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c76:	b2da      	uxtb	r2, r3
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	045c      	lsls	r4, r3, #17
 8001c7c:	230a      	movs	r3, #10
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	8819      	ldrh	r1, [r3, #0]
 8001c82:	68f8      	ldr	r0, [r7, #12]
 8001c84:	2300      	movs	r3, #0
 8001c86:	9300      	str	r3, [sp, #0]
 8001c88:	0023      	movs	r3, r4
 8001c8a:	f000 fbf7 	bl	800247c <I2C_TransferConfig>
 8001c8e:	e012      	b.n	8001cb6 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c94:	b29a      	uxth	r2, r3
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c9e:	b2da      	uxtb	r2, r3
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	049c      	lsls	r4, r3, #18
 8001ca4:	230a      	movs	r3, #10
 8001ca6:	18fb      	adds	r3, r7, r3
 8001ca8:	8819      	ldrh	r1, [r3, #0]
 8001caa:	68f8      	ldr	r0, [r7, #12]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	0023      	movs	r3, r4
 8001cb2:	f000 fbe3 	bl	800247c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 fae8 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d001      	beq.n	8001cca <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e081      	b.n	8001dce <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cce:	781a      	ldrb	r2, [r3, #0]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	b29a      	uxth	r2, r3
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cf2:	3b01      	subs	r3, #1
 8001cf4:	b29a      	uxth	r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d03a      	beq.n	8001d7a <HAL_I2C_Mem_Write+0x1fa>
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d136      	bne.n	8001d7a <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	0013      	movs	r3, r2
 8001d16:	2200      	movs	r2, #0
 8001d18:	2180      	movs	r1, #128	; 0x80
 8001d1a:	f000 fa7b 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e053      	b.n	8001dce <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	2bff      	cmp	r3, #255	; 0xff
 8001d2e:	d911      	bls.n	8001d54 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	22ff      	movs	r2, #255	; 0xff
 8001d34:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	b2da      	uxtb	r2, r3
 8001d3c:	2380      	movs	r3, #128	; 0x80
 8001d3e:	045c      	lsls	r4, r3, #17
 8001d40:	230a      	movs	r3, #10
 8001d42:	18fb      	adds	r3, r7, r3
 8001d44:	8819      	ldrh	r1, [r3, #0]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	2300      	movs	r3, #0
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	0023      	movs	r3, r4
 8001d4e:	f000 fb95 	bl	800247c <I2C_TransferConfig>
 8001d52:	e012      	b.n	8001d7a <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29a      	uxth	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	2380      	movs	r3, #128	; 0x80
 8001d66:	049c      	lsls	r4, r3, #18
 8001d68:	230a      	movs	r3, #10
 8001d6a:	18fb      	adds	r3, r7, r3
 8001d6c:	8819      	ldrh	r1, [r3, #0]
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	2300      	movs	r3, #0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	0023      	movs	r3, r4
 8001d76:	f000 fb81 	bl	800247c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d198      	bne.n	8001cb6 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d84:	697a      	ldr	r2, [r7, #20]
 8001d86:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	f000 fac0 	bl	8002310 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001d90:	1e03      	subs	r3, r0, #0
 8001d92:	d001      	beq.n	8001d98 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e01a      	b.n	8001dce <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2220      	movs	r2, #32
 8001d9e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	490b      	ldr	r1, [pc, #44]	; (8001dd8 <HAL_I2C_Mem_Write+0x258>)
 8001dac:	400a      	ands	r2, r1
 8001dae:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2241      	movs	r2, #65	; 0x41
 8001db4:	2120      	movs	r1, #32
 8001db6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2242      	movs	r2, #66	; 0x42
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2240      	movs	r2, #64	; 0x40
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	e000      	b.n	8001dce <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001dcc:	2302      	movs	r3, #2
  }
}
 8001dce:	0018      	movs	r0, r3
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	b007      	add	sp, #28
 8001dd4:	bd90      	pop	{r4, r7, pc}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	fe00e800 	.word	0xfe00e800

08001ddc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ddc:	b590      	push	{r4, r7, lr}
 8001dde:	b089      	sub	sp, #36	; 0x24
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	000c      	movs	r4, r1
 8001de6:	0010      	movs	r0, r2
 8001de8:	0019      	movs	r1, r3
 8001dea:	230a      	movs	r3, #10
 8001dec:	18fb      	adds	r3, r7, r3
 8001dee:	1c22      	adds	r2, r4, #0
 8001df0:	801a      	strh	r2, [r3, #0]
 8001df2:	2308      	movs	r3, #8
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	1c02      	adds	r2, r0, #0
 8001df8:	801a      	strh	r2, [r3, #0]
 8001dfa:	1dbb      	adds	r3, r7, #6
 8001dfc:	1c0a      	adds	r2, r1, #0
 8001dfe:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2241      	movs	r2, #65	; 0x41
 8001e04:	5c9b      	ldrb	r3, [r3, r2]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d000      	beq.n	8001e0e <HAL_I2C_Mem_Read+0x32>
 8001e0c:	e110      	b.n	8002030 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <HAL_I2C_Mem_Read+0x42>
 8001e14:	232c      	movs	r3, #44	; 0x2c
 8001e16:	18fb      	adds	r3, r7, r3
 8001e18:	881b      	ldrh	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d105      	bne.n	8001e2a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	2280      	movs	r2, #128	; 0x80
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e103      	b.n	8002032 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	2240      	movs	r2, #64	; 0x40
 8001e2e:	5c9b      	ldrb	r3, [r3, r2]
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_I2C_Mem_Read+0x5c>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e0fc      	b.n	8002032 <HAL_I2C_Mem_Read+0x256>
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2240      	movs	r2, #64	; 0x40
 8001e3c:	2101      	movs	r1, #1
 8001e3e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e40:	f7ff fb3c 	bl	80014bc <HAL_GetTick>
 8001e44:	0003      	movs	r3, r0
 8001e46:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	0219      	lsls	r1, r3, #8
 8001e4c:	68f8      	ldr	r0, [r7, #12]
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2319      	movs	r3, #25
 8001e54:	2201      	movs	r2, #1
 8001e56:	f000 f9dd 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8001e5a:	1e03      	subs	r3, r0, #0
 8001e5c:	d001      	beq.n	8001e62 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e0e7      	b.n	8002032 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	2241      	movs	r2, #65	; 0x41
 8001e66:	2122      	movs	r1, #34	; 0x22
 8001e68:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	2242      	movs	r2, #66	; 0x42
 8001e6e:	2140      	movs	r1, #64	; 0x40
 8001e70:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2200      	movs	r2, #0
 8001e76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001e7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	222c      	movs	r2, #44	; 0x2c
 8001e82:	18ba      	adds	r2, r7, r2
 8001e84:	8812      	ldrh	r2, [r2, #0]
 8001e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e8e:	1dbb      	adds	r3, r7, #6
 8001e90:	881c      	ldrh	r4, [r3, #0]
 8001e92:	2308      	movs	r3, #8
 8001e94:	18fb      	adds	r3, r7, r3
 8001e96:	881a      	ldrh	r2, [r3, #0]
 8001e98:	230a      	movs	r3, #10
 8001e9a:	18fb      	adds	r3, r7, r3
 8001e9c:	8819      	ldrh	r1, [r3, #0]
 8001e9e:	68f8      	ldr	r0, [r7, #12]
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	9301      	str	r3, [sp, #4]
 8001ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ea6:	9300      	str	r3, [sp, #0]
 8001ea8:	0023      	movs	r3, r4
 8001eaa:	f000 f92f 	bl	800210c <I2C_RequestMemoryRead>
 8001eae:	1e03      	subs	r3, r0, #0
 8001eb0:	d005      	beq.n	8001ebe <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0b9      	b.n	8002032 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2bff      	cmp	r3, #255	; 0xff
 8001ec6:	d911      	bls.n	8001eec <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	22ff      	movs	r2, #255	; 0xff
 8001ecc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ed2:	b2da      	uxtb	r2, r3
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	045c      	lsls	r4, r3, #17
 8001ed8:	230a      	movs	r3, #10
 8001eda:	18fb      	adds	r3, r7, r3
 8001edc:	8819      	ldrh	r1, [r3, #0]
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	4b56      	ldr	r3, [pc, #344]	; (800203c <HAL_I2C_Mem_Read+0x260>)
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	0023      	movs	r3, r4
 8001ee6:	f000 fac9 	bl	800247c <I2C_TransferConfig>
 8001eea:	e012      	b.n	8001f12 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	049c      	lsls	r4, r3, #18
 8001f00:	230a      	movs	r3, #10
 8001f02:	18fb      	adds	r3, r7, r3
 8001f04:	8819      	ldrh	r1, [r3, #0]
 8001f06:	68f8      	ldr	r0, [r7, #12]
 8001f08:	4b4c      	ldr	r3, [pc, #304]	; (800203c <HAL_I2C_Mem_Read+0x260>)
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	0023      	movs	r3, r4
 8001f0e:	f000 fab5 	bl	800247c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	2104      	movs	r1, #4
 8001f20:	f000 f978 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8001f24:	1e03      	subs	r3, r0, #0
 8001f26:	d001      	beq.n	8001f2c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e082      	b.n	8002032 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	b2d2      	uxtb	r2, r2
 8001f38:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	1c5a      	adds	r2, r3, #1
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f48:	3b01      	subs	r3, #1
 8001f4a:	b29a      	uxth	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	3b01      	subs	r3, #1
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d03a      	beq.n	8001fde <HAL_I2C_Mem_Read+0x202>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d136      	bne.n	8001fde <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001f72:	68f8      	ldr	r0, [r7, #12]
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	0013      	movs	r3, r2
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2180      	movs	r1, #128	; 0x80
 8001f7e:	f000 f949 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 8001f82:	1e03      	subs	r3, r0, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e053      	b.n	8002032 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2bff      	cmp	r3, #255	; 0xff
 8001f92:	d911      	bls.n	8001fb8 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	22ff      	movs	r2, #255	; 0xff
 8001f98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f9e:	b2da      	uxtb	r2, r3
 8001fa0:	2380      	movs	r3, #128	; 0x80
 8001fa2:	045c      	lsls	r4, r3, #17
 8001fa4:	230a      	movs	r3, #10
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	8819      	ldrh	r1, [r3, #0]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	2300      	movs	r3, #0
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	0023      	movs	r3, r4
 8001fb2:	f000 fa63 	bl	800247c <I2C_TransferConfig>
 8001fb6:	e012      	b.n	8001fde <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbc:	b29a      	uxth	r2, r3
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	2380      	movs	r3, #128	; 0x80
 8001fca:	049c      	lsls	r4, r3, #18
 8001fcc:	230a      	movs	r3, #10
 8001fce:	18fb      	adds	r3, r7, r3
 8001fd0:	8819      	ldrh	r1, [r3, #0]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	0023      	movs	r3, r4
 8001fda:	f000 fa4f 	bl	800247c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe2:	b29b      	uxth	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d194      	bne.n	8001f12 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	0018      	movs	r0, r3
 8001ff0:	f000 f98e 	bl	8002310 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001ff4:	1e03      	subs	r3, r0, #0
 8001ff6:	d001      	beq.n	8001ffc <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e01a      	b.n	8002032 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2220      	movs	r2, #32
 8002002:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	490c      	ldr	r1, [pc, #48]	; (8002040 <HAL_I2C_Mem_Read+0x264>)
 8002010:	400a      	ands	r2, r1
 8002012:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2241      	movs	r2, #65	; 0x41
 8002018:	2120      	movs	r1, #32
 800201a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2242      	movs	r2, #66	; 0x42
 8002020:	2100      	movs	r1, #0
 8002022:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	2240      	movs	r2, #64	; 0x40
 8002028:	2100      	movs	r1, #0
 800202a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800202c:	2300      	movs	r3, #0
 800202e:	e000      	b.n	8002032 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002030:	2302      	movs	r3, #2
  }
}
 8002032:	0018      	movs	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	b007      	add	sp, #28
 8002038:	bd90      	pop	{r4, r7, pc}
 800203a:	46c0      	nop			; (mov r8, r8)
 800203c:	80002400 	.word	0x80002400
 8002040:	fe00e800 	.word	0xfe00e800

08002044 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002044:	b5b0      	push	{r4, r5, r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	000c      	movs	r4, r1
 800204e:	0010      	movs	r0, r2
 8002050:	0019      	movs	r1, r3
 8002052:	250a      	movs	r5, #10
 8002054:	197b      	adds	r3, r7, r5
 8002056:	1c22      	adds	r2, r4, #0
 8002058:	801a      	strh	r2, [r3, #0]
 800205a:	2308      	movs	r3, #8
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	1c02      	adds	r2, r0, #0
 8002060:	801a      	strh	r2, [r3, #0]
 8002062:	1dbb      	adds	r3, r7, #6
 8002064:	1c0a      	adds	r2, r1, #0
 8002066:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002068:	1dbb      	adds	r3, r7, #6
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	b2da      	uxtb	r2, r3
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	045c      	lsls	r4, r3, #17
 8002072:	197b      	adds	r3, r7, r5
 8002074:	8819      	ldrh	r1, [r3, #0]
 8002076:	68f8      	ldr	r0, [r7, #12]
 8002078:	4b23      	ldr	r3, [pc, #140]	; (8002108 <I2C_RequestMemoryWrite+0xc4>)
 800207a:	9300      	str	r3, [sp, #0]
 800207c:	0023      	movs	r3, r4
 800207e:	f000 f9fd 	bl	800247c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002082:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002084:	6a39      	ldr	r1, [r7, #32]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	0018      	movs	r0, r3
 800208a:	f000 f902 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 800208e:	1e03      	subs	r3, r0, #0
 8002090:	d001      	beq.n	8002096 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e033      	b.n	80020fe <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002096:	1dbb      	adds	r3, r7, #6
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d107      	bne.n	80020ae <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800209e:	2308      	movs	r3, #8
 80020a0:	18fb      	adds	r3, r7, r3
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	629a      	str	r2, [r3, #40]	; 0x28
 80020ac:	e019      	b.n	80020e2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020ae:	2308      	movs	r3, #8
 80020b0:	18fb      	adds	r3, r7, r3
 80020b2:	881b      	ldrh	r3, [r3, #0]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020c2:	6a39      	ldr	r1, [r7, #32]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	0018      	movs	r0, r3
 80020c8:	f000 f8e3 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 80020cc:	1e03      	subs	r3, r0, #0
 80020ce:	d001      	beq.n	80020d4 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e014      	b.n	80020fe <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020d4:	2308      	movs	r3, #8
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b2da      	uxtb	r2, r3
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80020e2:	6a3a      	ldr	r2, [r7, #32]
 80020e4:	68f8      	ldr	r0, [r7, #12]
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	0013      	movs	r3, r2
 80020ec:	2200      	movs	r2, #0
 80020ee:	2180      	movs	r1, #128	; 0x80
 80020f0:	f000 f890 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 80020f4:	1e03      	subs	r3, r0, #0
 80020f6:	d001      	beq.n	80020fc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e000      	b.n	80020fe <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80020fc:	2300      	movs	r3, #0
}
 80020fe:	0018      	movs	r0, r3
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bdb0      	pop	{r4, r5, r7, pc}
 8002106:	46c0      	nop			; (mov r8, r8)
 8002108:	80002000 	.word	0x80002000

0800210c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800210c:	b5b0      	push	{r4, r5, r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
 8002112:	60f8      	str	r0, [r7, #12]
 8002114:	000c      	movs	r4, r1
 8002116:	0010      	movs	r0, r2
 8002118:	0019      	movs	r1, r3
 800211a:	250a      	movs	r5, #10
 800211c:	197b      	adds	r3, r7, r5
 800211e:	1c22      	adds	r2, r4, #0
 8002120:	801a      	strh	r2, [r3, #0]
 8002122:	2308      	movs	r3, #8
 8002124:	18fb      	adds	r3, r7, r3
 8002126:	1c02      	adds	r2, r0, #0
 8002128:	801a      	strh	r2, [r3, #0]
 800212a:	1dbb      	adds	r3, r7, #6
 800212c:	1c0a      	adds	r2, r1, #0
 800212e:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002130:	1dbb      	adds	r3, r7, #6
 8002132:	881b      	ldrh	r3, [r3, #0]
 8002134:	b2da      	uxtb	r2, r3
 8002136:	197b      	adds	r3, r7, r5
 8002138:	8819      	ldrh	r1, [r3, #0]
 800213a:	68f8      	ldr	r0, [r7, #12]
 800213c:	4b23      	ldr	r3, [pc, #140]	; (80021cc <I2C_RequestMemoryRead+0xc0>)
 800213e:	9300      	str	r3, [sp, #0]
 8002140:	2300      	movs	r3, #0
 8002142:	f000 f99b 	bl	800247c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002148:	6a39      	ldr	r1, [r7, #32]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	0018      	movs	r0, r3
 800214e:	f000 f8a0 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 8002152:	1e03      	subs	r3, r0, #0
 8002154:	d001      	beq.n	800215a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e033      	b.n	80021c2 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800215a:	1dbb      	adds	r3, r7, #6
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d107      	bne.n	8002172 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002162:	2308      	movs	r3, #8
 8002164:	18fb      	adds	r3, r7, r3
 8002166:	881b      	ldrh	r3, [r3, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	629a      	str	r2, [r3, #40]	; 0x28
 8002170:	e019      	b.n	80021a6 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002172:	2308      	movs	r3, #8
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	0a1b      	lsrs	r3, r3, #8
 800217a:	b29b      	uxth	r3, r3
 800217c:	b2da      	uxtb	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002186:	6a39      	ldr	r1, [r7, #32]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	0018      	movs	r0, r3
 800218c:	f000 f881 	bl	8002292 <I2C_WaitOnTXISFlagUntilTimeout>
 8002190:	1e03      	subs	r3, r0, #0
 8002192:	d001      	beq.n	8002198 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e014      	b.n	80021c2 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002198:	2308      	movs	r3, #8
 800219a:	18fb      	adds	r3, r7, r3
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b2da      	uxtb	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80021a6:	6a3a      	ldr	r2, [r7, #32]
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	0013      	movs	r3, r2
 80021b0:	2200      	movs	r2, #0
 80021b2:	2140      	movs	r1, #64	; 0x40
 80021b4:	f000 f82e 	bl	8002214 <I2C_WaitOnFlagUntilTimeout>
 80021b8:	1e03      	subs	r3, r0, #0
 80021ba:	d001      	beq.n	80021c0 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	0018      	movs	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	b004      	add	sp, #16
 80021c8:	bdb0      	pop	{r4, r5, r7, pc}
 80021ca:	46c0      	nop			; (mov r8, r8)
 80021cc:	80002000 	.word	0x80002000

080021d0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d103      	bne.n	80021ee <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2201      	movs	r2, #1
 80021f6:	4013      	ands	r3, r2
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d007      	beq.n	800220c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2101      	movs	r1, #1
 8002208:	430a      	orrs	r2, r1
 800220a:	619a      	str	r2, [r3, #24]
  }
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	b002      	add	sp, #8
 8002212:	bd80      	pop	{r7, pc}

08002214 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	603b      	str	r3, [r7, #0]
 8002220:	1dfb      	adds	r3, r7, #7
 8002222:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002224:	e021      	b.n	800226a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	3301      	adds	r3, #1
 800222a:	d01e      	beq.n	800226a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800222c:	f7ff f946 	bl	80014bc <HAL_GetTick>
 8002230:	0002      	movs	r2, r0
 8002232:	69bb      	ldr	r3, [r7, #24]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	429a      	cmp	r2, r3
 800223a:	d302      	bcc.n	8002242 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d113      	bne.n	800226a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	2220      	movs	r2, #32
 8002248:	431a      	orrs	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2241      	movs	r2, #65	; 0x41
 8002252:	2120      	movs	r1, #32
 8002254:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2242      	movs	r2, #66	; 0x42
 800225a:	2100      	movs	r1, #0
 800225c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2240      	movs	r2, #64	; 0x40
 8002262:	2100      	movs	r1, #0
 8002264:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e00f      	b.n	800228a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4013      	ands	r3, r2
 8002274:	68ba      	ldr	r2, [r7, #8]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	425a      	negs	r2, r3
 800227a:	4153      	adcs	r3, r2
 800227c:	b2db      	uxtb	r3, r3
 800227e:	001a      	movs	r2, r3
 8002280:	1dfb      	adds	r3, r7, #7
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	429a      	cmp	r2, r3
 8002286:	d0ce      	beq.n	8002226 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	0018      	movs	r0, r3
 800228c:	46bd      	mov	sp, r7
 800228e:	b004      	add	sp, #16
 8002290:	bd80      	pop	{r7, pc}

08002292 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b084      	sub	sp, #16
 8002296:	af00      	add	r7, sp, #0
 8002298:	60f8      	str	r0, [r7, #12]
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800229e:	e02b      	b.n	80022f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	68b9      	ldr	r1, [r7, #8]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	0018      	movs	r0, r3
 80022a8:	f000 f86e 	bl	8002388 <I2C_IsAcknowledgeFailed>
 80022ac:	1e03      	subs	r3, r0, #0
 80022ae:	d001      	beq.n	80022b4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e029      	b.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	3301      	adds	r3, #1
 80022b8:	d01e      	beq.n	80022f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ba:	f7ff f8ff 	bl	80014bc <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d302      	bcc.n	80022d0 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d113      	bne.n	80022f8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d4:	2220      	movs	r2, #32
 80022d6:	431a      	orrs	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2241      	movs	r2, #65	; 0x41
 80022e0:	2120      	movs	r1, #32
 80022e2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2242      	movs	r2, #66	; 0x42
 80022e8:	2100      	movs	r1, #0
 80022ea:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2240      	movs	r2, #64	; 0x40
 80022f0:	2100      	movs	r1, #0
 80022f2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e007      	b.n	8002308 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2202      	movs	r2, #2
 8002300:	4013      	ands	r3, r2
 8002302:	2b02      	cmp	r3, #2
 8002304:	d1cc      	bne.n	80022a0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	0018      	movs	r0, r3
 800230a:	46bd      	mov	sp, r7
 800230c:	b004      	add	sp, #16
 800230e:	bd80      	pop	{r7, pc}

08002310 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800231c:	e028      	b.n	8002370 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	68b9      	ldr	r1, [r7, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0018      	movs	r0, r3
 8002326:	f000 f82f 	bl	8002388 <I2C_IsAcknowledgeFailed>
 800232a:	1e03      	subs	r3, r0, #0
 800232c:	d001      	beq.n	8002332 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e026      	b.n	8002380 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002332:	f7ff f8c3 	bl	80014bc <HAL_GetTick>
 8002336:	0002      	movs	r2, r0
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	68ba      	ldr	r2, [r7, #8]
 800233e:	429a      	cmp	r2, r3
 8002340:	d302      	bcc.n	8002348 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d113      	bne.n	8002370 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	2220      	movs	r2, #32
 800234e:	431a      	orrs	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2241      	movs	r2, #65	; 0x41
 8002358:	2120      	movs	r1, #32
 800235a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2242      	movs	r2, #66	; 0x42
 8002360:	2100      	movs	r1, #0
 8002362:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	2100      	movs	r1, #0
 800236a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800236c:	2301      	movs	r3, #1
 800236e:	e007      	b.n	8002380 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	699b      	ldr	r3, [r3, #24]
 8002376:	2220      	movs	r2, #32
 8002378:	4013      	ands	r3, r2
 800237a:	2b20      	cmp	r3, #32
 800237c:	d1cf      	bne.n	800231e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	0018      	movs	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	b004      	add	sp, #16
 8002386:	bd80      	pop	{r7, pc}

08002388 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	60f8      	str	r0, [r7, #12]
 8002390:	60b9      	str	r1, [r7, #8]
 8002392:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	699b      	ldr	r3, [r3, #24]
 800239a:	2210      	movs	r2, #16
 800239c:	4013      	ands	r3, r2
 800239e:	2b10      	cmp	r3, #16
 80023a0:	d164      	bne.n	800246c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	685a      	ldr	r2, [r3, #4]
 80023a8:	2380      	movs	r3, #128	; 0x80
 80023aa:	049b      	lsls	r3, r3, #18
 80023ac:	401a      	ands	r2, r3
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	049b      	lsls	r3, r3, #18
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d02b      	beq.n	800240e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2180      	movs	r1, #128	; 0x80
 80023c2:	01c9      	lsls	r1, r1, #7
 80023c4:	430a      	orrs	r2, r1
 80023c6:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023c8:	e021      	b.n	800240e <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3301      	adds	r3, #1
 80023ce:	d01e      	beq.n	800240e <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023d0:	f7ff f874 	bl	80014bc <HAL_GetTick>
 80023d4:	0002      	movs	r2, r0
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d302      	bcc.n	80023e6 <I2C_IsAcknowledgeFailed+0x5e>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d113      	bne.n	800240e <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ea:	2220      	movs	r2, #32
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2241      	movs	r2, #65	; 0x41
 80023f6:	2120      	movs	r1, #32
 80023f8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2242      	movs	r2, #66	; 0x42
 80023fe:	2100      	movs	r1, #0
 8002400:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2240      	movs	r2, #64	; 0x40
 8002406:	2100      	movs	r1, #0
 8002408:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e02f      	b.n	800246e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	2220      	movs	r2, #32
 8002416:	4013      	ands	r3, r2
 8002418:	2b20      	cmp	r3, #32
 800241a:	d1d6      	bne.n	80023ca <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2210      	movs	r2, #16
 8002422:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2220      	movs	r2, #32
 800242a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	0018      	movs	r0, r3
 8002430:	f7ff fece 	bl	80021d0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	490e      	ldr	r1, [pc, #56]	; (8002478 <I2C_IsAcknowledgeFailed+0xf0>)
 8002440:	400a      	ands	r2, r1
 8002442:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002448:	2204      	movs	r2, #4
 800244a:	431a      	orrs	r2, r3
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2241      	movs	r2, #65	; 0x41
 8002454:	2120      	movs	r1, #32
 8002456:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2242      	movs	r2, #66	; 0x42
 800245c:	2100      	movs	r1, #0
 800245e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2240      	movs	r2, #64	; 0x40
 8002464:	2100      	movs	r1, #0
 8002466:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	0018      	movs	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	fe00e800 	.word	0xfe00e800

0800247c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	0008      	movs	r0, r1
 8002486:	0011      	movs	r1, r2
 8002488:	607b      	str	r3, [r7, #4]
 800248a:	240a      	movs	r4, #10
 800248c:	193b      	adds	r3, r7, r4
 800248e:	1c02      	adds	r2, r0, #0
 8002490:	801a      	strh	r2, [r3, #0]
 8002492:	2009      	movs	r0, #9
 8002494:	183b      	adds	r3, r7, r0
 8002496:	1c0a      	adds	r2, r1, #0
 8002498:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	6a3a      	ldr	r2, [r7, #32]
 80024a2:	0d51      	lsrs	r1, r2, #21
 80024a4:	2280      	movs	r2, #128	; 0x80
 80024a6:	00d2      	lsls	r2, r2, #3
 80024a8:	400a      	ands	r2, r1
 80024aa:	490e      	ldr	r1, [pc, #56]	; (80024e4 <I2C_TransferConfig+0x68>)
 80024ac:	430a      	orrs	r2, r1
 80024ae:	43d2      	mvns	r2, r2
 80024b0:	401a      	ands	r2, r3
 80024b2:	0011      	movs	r1, r2
 80024b4:	193b      	adds	r3, r7, r4
 80024b6:	881b      	ldrh	r3, [r3, #0]
 80024b8:	059b      	lsls	r3, r3, #22
 80024ba:	0d9a      	lsrs	r2, r3, #22
 80024bc:	183b      	adds	r3, r7, r0
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	0418      	lsls	r0, r3, #16
 80024c2:	23ff      	movs	r3, #255	; 0xff
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	4003      	ands	r3, r0
 80024c8:	431a      	orrs	r2, r3
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	431a      	orrs	r2, r3
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	431a      	orrs	r2, r3
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b005      	add	sp, #20
 80024e0:	bd90      	pop	{r4, r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	03ff63ff 	.word	0x03ff63ff

080024e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2241      	movs	r2, #65	; 0x41
 80024f6:	5c9b      	ldrb	r3, [r3, r2]
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b20      	cmp	r3, #32
 80024fc:	d138      	bne.n	8002570 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2240      	movs	r2, #64	; 0x40
 8002502:	5c9b      	ldrb	r3, [r3, r2]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d101      	bne.n	800250c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002508:	2302      	movs	r3, #2
 800250a:	e032      	b.n	8002572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2240      	movs	r2, #64	; 0x40
 8002510:	2101      	movs	r1, #1
 8002512:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2241      	movs	r2, #65	; 0x41
 8002518:	2124      	movs	r1, #36	; 0x24
 800251a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2101      	movs	r1, #1
 8002528:	438a      	bics	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4911      	ldr	r1, [pc, #68]	; (800257c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8002538:	400a      	ands	r2, r1
 800253a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	430a      	orrs	r2, r1
 800254a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2101      	movs	r1, #1
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2241      	movs	r2, #65	; 0x41
 8002560:	2120      	movs	r1, #32
 8002562:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2240      	movs	r2, #64	; 0x40
 8002568:	2100      	movs	r1, #0
 800256a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800256c:	2300      	movs	r3, #0
 800256e:	e000      	b.n	8002572 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002570:	2302      	movs	r3, #2
  }
}
 8002572:	0018      	movs	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	b002      	add	sp, #8
 8002578:	bd80      	pop	{r7, pc}
 800257a:	46c0      	nop			; (mov r8, r8)
 800257c:	ffffefff 	.word	0xffffefff

08002580 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2241      	movs	r2, #65	; 0x41
 800258e:	5c9b      	ldrb	r3, [r3, r2]
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b20      	cmp	r3, #32
 8002594:	d139      	bne.n	800260a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2240      	movs	r2, #64	; 0x40
 800259a:	5c9b      	ldrb	r3, [r3, r2]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80025a0:	2302      	movs	r3, #2
 80025a2:	e033      	b.n	800260c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2240      	movs	r2, #64	; 0x40
 80025a8:	2101      	movs	r1, #1
 80025aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2241      	movs	r2, #65	; 0x41
 80025b0:	2124      	movs	r1, #36	; 0x24
 80025b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2101      	movs	r1, #1
 80025c0:	438a      	bics	r2, r1
 80025c2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	4a11      	ldr	r2, [pc, #68]	; (8002614 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80025d0:	4013      	ands	r3, r2
 80025d2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	021b      	lsls	r3, r3, #8
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	4313      	orrs	r3, r2
 80025dc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	68fa      	ldr	r2, [r7, #12]
 80025e4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2101      	movs	r1, #1
 80025f2:	430a      	orrs	r2, r1
 80025f4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2241      	movs	r2, #65	; 0x41
 80025fa:	2120      	movs	r1, #32
 80025fc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2240      	movs	r2, #64	; 0x40
 8002602:	2100      	movs	r1, #0
 8002604:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002606:	2300      	movs	r3, #0
 8002608:	e000      	b.n	800260c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800260a:	2302      	movs	r3, #2
  }
}
 800260c:	0018      	movs	r0, r3
 800260e:	46bd      	mov	sp, r7
 8002610:	b004      	add	sp, #16
 8002612:	bd80      	pop	{r7, pc}
 8002614:	fffff0ff 	.word	0xfffff0ff

08002618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002618:	b5b0      	push	{r4, r5, r7, lr}
 800261a:	b08a      	sub	sp, #40	; 0x28
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d102      	bne.n	800262c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	f000 fb6c 	bl	8002d04 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800262c:	4bc8      	ldr	r3, [pc, #800]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	220c      	movs	r2, #12
 8002632:	4013      	ands	r3, r2
 8002634:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002636:	4bc6      	ldr	r3, [pc, #792]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002638:	68da      	ldr	r2, [r3, #12]
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	025b      	lsls	r3, r3, #9
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2201      	movs	r2, #1
 8002648:	4013      	ands	r3, r2
 800264a:	d100      	bne.n	800264e <HAL_RCC_OscConfig+0x36>
 800264c:	e07d      	b.n	800274a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d007      	beq.n	8002664 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d112      	bne.n	8002680 <HAL_RCC_OscConfig+0x68>
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	2380      	movs	r3, #128	; 0x80
 800265e:	025b      	lsls	r3, r3, #9
 8002660:	429a      	cmp	r2, r3
 8002662:	d10d      	bne.n	8002680 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002664:	4bba      	ldr	r3, [pc, #744]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	029b      	lsls	r3, r3, #10
 800266c:	4013      	ands	r3, r2
 800266e:	d100      	bne.n	8002672 <HAL_RCC_OscConfig+0x5a>
 8002670:	e06a      	b.n	8002748 <HAL_RCC_OscConfig+0x130>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d166      	bne.n	8002748 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	f000 fb42 	bl	8002d04 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	2380      	movs	r3, #128	; 0x80
 8002686:	025b      	lsls	r3, r3, #9
 8002688:	429a      	cmp	r2, r3
 800268a:	d107      	bne.n	800269c <HAL_RCC_OscConfig+0x84>
 800268c:	4bb0      	ldr	r3, [pc, #704]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4baf      	ldr	r3, [pc, #700]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	0249      	lsls	r1, r1, #9
 8002696:	430a      	orrs	r2, r1
 8002698:	601a      	str	r2, [r3, #0]
 800269a:	e027      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	23a0      	movs	r3, #160	; 0xa0
 80026a2:	02db      	lsls	r3, r3, #11
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d10e      	bne.n	80026c6 <HAL_RCC_OscConfig+0xae>
 80026a8:	4ba9      	ldr	r3, [pc, #676]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	4ba8      	ldr	r3, [pc, #672]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026ae:	2180      	movs	r1, #128	; 0x80
 80026b0:	02c9      	lsls	r1, r1, #11
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	4ba6      	ldr	r3, [pc, #664]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	4ba5      	ldr	r3, [pc, #660]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026bc:	2180      	movs	r1, #128	; 0x80
 80026be:	0249      	lsls	r1, r1, #9
 80026c0:	430a      	orrs	r2, r1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e012      	b.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026c6:	4ba2      	ldr	r3, [pc, #648]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	4ba1      	ldr	r3, [pc, #644]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026cc:	49a1      	ldr	r1, [pc, #644]	; (8002954 <HAL_RCC_OscConfig+0x33c>)
 80026ce:	400a      	ands	r2, r1
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	4b9f      	ldr	r3, [pc, #636]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	2380      	movs	r3, #128	; 0x80
 80026d8:	025b      	lsls	r3, r3, #9
 80026da:	4013      	ands	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	4b9b      	ldr	r3, [pc, #620]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	4b9a      	ldr	r3, [pc, #616]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80026e6:	499c      	ldr	r1, [pc, #624]	; (8002958 <HAL_RCC_OscConfig+0x340>)
 80026e8:	400a      	ands	r2, r1
 80026ea:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d014      	beq.n	800271e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f4:	f7fe fee2 	bl	80014bc <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026fe:	f7fe fedd 	bl	80014bc <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	; 0x64
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e2f9      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002710:	4b8f      	ldr	r3, [pc, #572]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	029b      	lsls	r3, r3, #10
 8002718:	4013      	ands	r3, r2
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0xe6>
 800271c:	e015      	b.n	800274a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800271e:	f7fe fecd 	bl	80014bc <HAL_GetTick>
 8002722:	0003      	movs	r3, r0
 8002724:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002728:	f7fe fec8 	bl	80014bc <HAL_GetTick>
 800272c:	0002      	movs	r2, r0
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b64      	cmp	r3, #100	; 0x64
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e2e4      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800273a:	4b85      	ldr	r3, [pc, #532]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	2380      	movs	r3, #128	; 0x80
 8002740:	029b      	lsls	r3, r3, #10
 8002742:	4013      	ands	r3, r2
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x110>
 8002746:	e000      	b.n	800274a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002748:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2202      	movs	r2, #2
 8002750:	4013      	ands	r3, r2
 8002752:	d100      	bne.n	8002756 <HAL_RCC_OscConfig+0x13e>
 8002754:	e099      	b.n	800288a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	2220      	movs	r2, #32
 8002760:	4013      	ands	r3, r2
 8002762:	d009      	beq.n	8002778 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002764:	4b7a      	ldr	r3, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	4b79      	ldr	r3, [pc, #484]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800276a:	2120      	movs	r1, #32
 800276c:	430a      	orrs	r2, r1
 800276e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002772:	2220      	movs	r2, #32
 8002774:	4393      	bics	r3, r2
 8002776:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	2b04      	cmp	r3, #4
 800277c:	d005      	beq.n	800278a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	2b0c      	cmp	r3, #12
 8002782:	d13e      	bne.n	8002802 <HAL_RCC_OscConfig+0x1ea>
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d13b      	bne.n	8002802 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800278a:	4b71      	ldr	r3, [pc, #452]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2204      	movs	r2, #4
 8002790:	4013      	ands	r3, r2
 8002792:	d004      	beq.n	800279e <HAL_RCC_OscConfig+0x186>
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e2b2      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279e:	4b6c      	ldr	r3, [pc, #432]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	4a6e      	ldr	r2, [pc, #440]	; (800295c <HAL_RCC_OscConfig+0x344>)
 80027a4:	4013      	ands	r3, r2
 80027a6:	0019      	movs	r1, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	021a      	lsls	r2, r3, #8
 80027ae:	4b68      	ldr	r3, [pc, #416]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027b0:	430a      	orrs	r2, r1
 80027b2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80027b4:	4b66      	ldr	r3, [pc, #408]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	2209      	movs	r2, #9
 80027ba:	4393      	bics	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	4b64      	ldr	r3, [pc, #400]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c2:	430a      	orrs	r2, r1
 80027c4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027c6:	f000 fbeb 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 80027ca:	0001      	movs	r1, r0
 80027cc:	4b60      	ldr	r3, [pc, #384]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	220f      	movs	r2, #15
 80027d4:	4013      	ands	r3, r2
 80027d6:	4a62      	ldr	r2, [pc, #392]	; (8002960 <HAL_RCC_OscConfig+0x348>)
 80027d8:	5cd3      	ldrb	r3, [r2, r3]
 80027da:	000a      	movs	r2, r1
 80027dc:	40da      	lsrs	r2, r3
 80027de:	4b61      	ldr	r3, [pc, #388]	; (8002964 <HAL_RCC_OscConfig+0x34c>)
 80027e0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80027e2:	4b61      	ldr	r3, [pc, #388]	; (8002968 <HAL_RCC_OscConfig+0x350>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2513      	movs	r5, #19
 80027e8:	197c      	adds	r4, r7, r5
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7fe fe20 	bl	8001430 <HAL_InitTick>
 80027f0:	0003      	movs	r3, r0
 80027f2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80027f4:	197b      	adds	r3, r7, r5
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d046      	beq.n	800288a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80027fc:	197b      	adds	r3, r7, r5
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	e280      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002804:	2b00      	cmp	r3, #0
 8002806:	d027      	beq.n	8002858 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002808:	4b51      	ldr	r3, [pc, #324]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2209      	movs	r2, #9
 800280e:	4393      	bics	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	4b4f      	ldr	r3, [pc, #316]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002816:	430a      	orrs	r2, r1
 8002818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800281a:	f7fe fe4f 	bl	80014bc <HAL_GetTick>
 800281e:	0003      	movs	r3, r0
 8002820:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002822:	e008      	b.n	8002836 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002824:	f7fe fe4a 	bl	80014bc <HAL_GetTick>
 8002828:	0002      	movs	r2, r0
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e266      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002836:	4b46      	ldr	r3, [pc, #280]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2204      	movs	r2, #4
 800283c:	4013      	ands	r3, r2
 800283e:	d0f1      	beq.n	8002824 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4a45      	ldr	r2, [pc, #276]	; (800295c <HAL_RCC_OscConfig+0x344>)
 8002846:	4013      	ands	r3, r2
 8002848:	0019      	movs	r1, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	021a      	lsls	r2, r3, #8
 8002850:	4b3f      	ldr	r3, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002852:	430a      	orrs	r2, r1
 8002854:	605a      	str	r2, [r3, #4]
 8002856:	e018      	b.n	800288a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002858:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b3c      	ldr	r3, [pc, #240]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800285e:	2101      	movs	r1, #1
 8002860:	438a      	bics	r2, r1
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002864:	f7fe fe2a 	bl	80014bc <HAL_GetTick>
 8002868:	0003      	movs	r3, r0
 800286a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286e:	f7fe fe25 	bl	80014bc <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e241      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002880:	4b33      	ldr	r3, [pc, #204]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2204      	movs	r2, #4
 8002886:	4013      	ands	r3, r2
 8002888:	d1f1      	bne.n	800286e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2210      	movs	r2, #16
 8002890:	4013      	ands	r3, r2
 8002892:	d100      	bne.n	8002896 <HAL_RCC_OscConfig+0x27e>
 8002894:	e0a1      	b.n	80029da <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d140      	bne.n	800291e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800289c:	4b2c      	ldr	r3, [pc, #176]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4013      	ands	r3, r2
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_OscConfig+0x29c>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d101      	bne.n	80028b4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	e227      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028b4:	4b26      	ldr	r3, [pc, #152]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	4a2c      	ldr	r2, [pc, #176]	; (800296c <HAL_RCC_OscConfig+0x354>)
 80028ba:	4013      	ands	r3, r2
 80028bc:	0019      	movs	r1, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6a1a      	ldr	r2, [r3, #32]
 80028c2:	4b23      	ldr	r3, [pc, #140]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028c4:	430a      	orrs	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028c8:	4b21      	ldr	r3, [pc, #132]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	0a19      	lsrs	r1, r3, #8
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	061a      	lsls	r2, r3, #24
 80028d6:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028d8:	430a      	orrs	r2, r1
 80028da:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6a1b      	ldr	r3, [r3, #32]
 80028e0:	0b5b      	lsrs	r3, r3, #13
 80028e2:	3301      	adds	r3, #1
 80028e4:	2280      	movs	r2, #128	; 0x80
 80028e6:	0212      	lsls	r2, r2, #8
 80028e8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028ea:	4b19      	ldr	r3, [pc, #100]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	210f      	movs	r1, #15
 80028f2:	400b      	ands	r3, r1
 80028f4:	491a      	ldr	r1, [pc, #104]	; (8002960 <HAL_RCC_OscConfig+0x348>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028fa:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <HAL_RCC_OscConfig+0x34c>)
 80028fc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80028fe:	4b1a      	ldr	r3, [pc, #104]	; (8002968 <HAL_RCC_OscConfig+0x350>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2513      	movs	r5, #19
 8002904:	197c      	adds	r4, r7, r5
 8002906:	0018      	movs	r0, r3
 8002908:	f7fe fd92 	bl	8001430 <HAL_InitTick>
 800290c:	0003      	movs	r3, r0
 800290e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002910:	197b      	adds	r3, r7, r5
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d060      	beq.n	80029da <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8002918:	197b      	adds	r3, r7, r5
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	e1f2      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	699b      	ldr	r3, [r3, #24]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d03f      	beq.n	80029a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_OscConfig+0x338>)
 800292c:	2180      	movs	r1, #128	; 0x80
 800292e:	0049      	lsls	r1, r1, #1
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002934:	f7fe fdc2 	bl	80014bc <HAL_GetTick>
 8002938:	0003      	movs	r3, r0
 800293a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800293c:	e018      	b.n	8002970 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800293e:	f7fe fdbd 	bl	80014bc <HAL_GetTick>
 8002942:	0002      	movs	r2, r0
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d911      	bls.n	8002970 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e1d9      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
 8002950:	40021000 	.word	0x40021000
 8002954:	fffeffff 	.word	0xfffeffff
 8002958:	fffbffff 	.word	0xfffbffff
 800295c:	ffffe0ff 	.word	0xffffe0ff
 8002960:	08005da4 	.word	0x08005da4
 8002964:	20000004 	.word	0x20000004
 8002968:	20000008 	.word	0x20000008
 800296c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002970:	4bc9      	ldr	r3, [pc, #804]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	4013      	ands	r3, r2
 800297a:	d0e0      	beq.n	800293e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800297c:	4bc6      	ldr	r3, [pc, #792]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4ac6      	ldr	r2, [pc, #792]	; (8002c9c <HAL_RCC_OscConfig+0x684>)
 8002982:	4013      	ands	r3, r2
 8002984:	0019      	movs	r1, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a1a      	ldr	r2, [r3, #32]
 800298a:	4bc3      	ldr	r3, [pc, #780]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 800298c:	430a      	orrs	r2, r1
 800298e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002990:	4bc1      	ldr	r3, [pc, #772]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	0a19      	lsrs	r1, r3, #8
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	69db      	ldr	r3, [r3, #28]
 800299c:	061a      	lsls	r2, r3, #24
 800299e:	4bbe      	ldr	r3, [pc, #760]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 80029a0:	430a      	orrs	r2, r1
 80029a2:	605a      	str	r2, [r3, #4]
 80029a4:	e019      	b.n	80029da <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80029a6:	4bbc      	ldr	r3, [pc, #752]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4bbb      	ldr	r3, [pc, #748]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 80029ac:	49bc      	ldr	r1, [pc, #752]	; (8002ca0 <HAL_RCC_OscConfig+0x688>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b2:	f7fe fd83 	bl	80014bc <HAL_GetTick>
 80029b6:	0003      	movs	r3, r0
 80029b8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029bc:	f7fe fd7e 	bl	80014bc <HAL_GetTick>
 80029c0:	0002      	movs	r2, r0
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e19a      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029ce:	4bb2      	ldr	r3, [pc, #712]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4013      	ands	r3, r2
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2208      	movs	r2, #8
 80029e0:	4013      	ands	r3, r2
 80029e2:	d036      	beq.n	8002a52 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d019      	beq.n	8002a20 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ec:	4baa      	ldr	r3, [pc, #680]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 80029ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80029f0:	4ba9      	ldr	r3, [pc, #676]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	430a      	orrs	r2, r1
 80029f6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029f8:	f7fe fd60 	bl	80014bc <HAL_GetTick>
 80029fc:	0003      	movs	r3, r0
 80029fe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a00:	e008      	b.n	8002a14 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a02:	f7fe fd5b 	bl	80014bc <HAL_GetTick>
 8002a06:	0002      	movs	r2, r0
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e177      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a14:	4ba0      	ldr	r3, [pc, #640]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	d0f1      	beq.n	8002a02 <HAL_RCC_OscConfig+0x3ea>
 8002a1e:	e018      	b.n	8002a52 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a20:	4b9d      	ldr	r3, [pc, #628]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002a22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002a24:	4b9c      	ldr	r3, [pc, #624]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002a26:	2101      	movs	r1, #1
 8002a28:	438a      	bics	r2, r1
 8002a2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a2c:	f7fe fd46 	bl	80014bc <HAL_GetTick>
 8002a30:	0003      	movs	r3, r0
 8002a32:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a34:	e008      	b.n	8002a48 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a36:	f7fe fd41 	bl	80014bc <HAL_GetTick>
 8002a3a:	0002      	movs	r2, r0
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d901      	bls.n	8002a48 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002a44:	2303      	movs	r3, #3
 8002a46:	e15d      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a48:	4b93      	ldr	r3, [pc, #588]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002a4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d1f1      	bne.n	8002a36 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2204      	movs	r2, #4
 8002a58:	4013      	ands	r3, r2
 8002a5a:	d100      	bne.n	8002a5e <HAL_RCC_OscConfig+0x446>
 8002a5c:	e0ae      	b.n	8002bbc <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a5e:	2023      	movs	r0, #35	; 0x23
 8002a60:	183b      	adds	r3, r7, r0
 8002a62:	2200      	movs	r2, #0
 8002a64:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a66:	4b8c      	ldr	r3, [pc, #560]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a6a:	2380      	movs	r3, #128	; 0x80
 8002a6c:	055b      	lsls	r3, r3, #21
 8002a6e:	4013      	ands	r3, r2
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a72:	4b89      	ldr	r3, [pc, #548]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002a74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a76:	4b88      	ldr	r3, [pc, #544]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002a78:	2180      	movs	r1, #128	; 0x80
 8002a7a:	0549      	lsls	r1, r1, #21
 8002a7c:	430a      	orrs	r2, r1
 8002a7e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002a80:	183b      	adds	r3, r7, r0
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a86:	4b87      	ldr	r3, [pc, #540]	; (8002ca4 <HAL_RCC_OscConfig+0x68c>)
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	005b      	lsls	r3, r3, #1
 8002a8e:	4013      	ands	r3, r2
 8002a90:	d11a      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a92:	4b84      	ldr	r3, [pc, #528]	; (8002ca4 <HAL_RCC_OscConfig+0x68c>)
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	4b83      	ldr	r3, [pc, #524]	; (8002ca4 <HAL_RCC_OscConfig+0x68c>)
 8002a98:	2180      	movs	r1, #128	; 0x80
 8002a9a:	0049      	lsls	r1, r1, #1
 8002a9c:	430a      	orrs	r2, r1
 8002a9e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002aa0:	f7fe fd0c 	bl	80014bc <HAL_GetTick>
 8002aa4:	0003      	movs	r3, r0
 8002aa6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa8:	e008      	b.n	8002abc <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aaa:	f7fe fd07 	bl	80014bc <HAL_GetTick>
 8002aae:	0002      	movs	r2, r0
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	2b64      	cmp	r3, #100	; 0x64
 8002ab6:	d901      	bls.n	8002abc <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	e123      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	4b79      	ldr	r3, [pc, #484]	; (8002ca4 <HAL_RCC_OscConfig+0x68c>)
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	2380      	movs	r3, #128	; 0x80
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	d0f0      	beq.n	8002aaa <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	689a      	ldr	r2, [r3, #8]
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	005b      	lsls	r3, r3, #1
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d107      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x4cc>
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002ad6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ad8:	4b6f      	ldr	r3, [pc, #444]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002ada:	2180      	movs	r1, #128	; 0x80
 8002adc:	0049      	lsls	r1, r1, #1
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ae2:	e031      	b.n	8002b48 <HAL_RCC_OscConfig+0x530>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d10c      	bne.n	8002b06 <HAL_RCC_OscConfig+0x4ee>
 8002aec:	4b6a      	ldr	r3, [pc, #424]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002aee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002af0:	4b69      	ldr	r3, [pc, #420]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002af2:	496b      	ldr	r1, [pc, #428]	; (8002ca0 <HAL_RCC_OscConfig+0x688>)
 8002af4:	400a      	ands	r2, r1
 8002af6:	651a      	str	r2, [r3, #80]	; 0x50
 8002af8:	4b67      	ldr	r3, [pc, #412]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002afa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002afc:	4b66      	ldr	r3, [pc, #408]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002afe:	496a      	ldr	r1, [pc, #424]	; (8002ca8 <HAL_RCC_OscConfig+0x690>)
 8002b00:	400a      	ands	r2, r1
 8002b02:	651a      	str	r2, [r3, #80]	; 0x50
 8002b04:	e020      	b.n	8002b48 <HAL_RCC_OscConfig+0x530>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	23a0      	movs	r3, #160	; 0xa0
 8002b0c:	00db      	lsls	r3, r3, #3
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d10e      	bne.n	8002b30 <HAL_RCC_OscConfig+0x518>
 8002b12:	4b61      	ldr	r3, [pc, #388]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b16:	4b60      	ldr	r3, [pc, #384]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b18:	2180      	movs	r1, #128	; 0x80
 8002b1a:	00c9      	lsls	r1, r1, #3
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	651a      	str	r2, [r3, #80]	; 0x50
 8002b20:	4b5d      	ldr	r3, [pc, #372]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b24:	4b5c      	ldr	r3, [pc, #368]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b26:	2180      	movs	r1, #128	; 0x80
 8002b28:	0049      	lsls	r1, r1, #1
 8002b2a:	430a      	orrs	r2, r1
 8002b2c:	651a      	str	r2, [r3, #80]	; 0x50
 8002b2e:	e00b      	b.n	8002b48 <HAL_RCC_OscConfig+0x530>
 8002b30:	4b59      	ldr	r3, [pc, #356]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b34:	4b58      	ldr	r3, [pc, #352]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b36:	495a      	ldr	r1, [pc, #360]	; (8002ca0 <HAL_RCC_OscConfig+0x688>)
 8002b38:	400a      	ands	r2, r1
 8002b3a:	651a      	str	r2, [r3, #80]	; 0x50
 8002b3c:	4b56      	ldr	r3, [pc, #344]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b40:	4b55      	ldr	r3, [pc, #340]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b42:	4959      	ldr	r1, [pc, #356]	; (8002ca8 <HAL_RCC_OscConfig+0x690>)
 8002b44:	400a      	ands	r2, r1
 8002b46:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d015      	beq.n	8002b7c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b50:	f7fe fcb4 	bl	80014bc <HAL_GetTick>
 8002b54:	0003      	movs	r3, r0
 8002b56:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b58:	e009      	b.n	8002b6e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b5a:	f7fe fcaf 	bl	80014bc <HAL_GetTick>
 8002b5e:	0002      	movs	r2, r0
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	4a51      	ldr	r2, [pc, #324]	; (8002cac <HAL_RCC_OscConfig+0x694>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d901      	bls.n	8002b6e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e0ca      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b6e:	4b4a      	ldr	r3, [pc, #296]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	4013      	ands	r3, r2
 8002b78:	d0ef      	beq.n	8002b5a <HAL_RCC_OscConfig+0x542>
 8002b7a:	e014      	b.n	8002ba6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b7c:	f7fe fc9e 	bl	80014bc <HAL_GetTick>
 8002b80:	0003      	movs	r3, r0
 8002b82:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b84:	e009      	b.n	8002b9a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b86:	f7fe fc99 	bl	80014bc <HAL_GetTick>
 8002b8a:	0002      	movs	r2, r0
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	4a46      	ldr	r2, [pc, #280]	; (8002cac <HAL_RCC_OscConfig+0x694>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e0b4      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b9a:	4b3f      	ldr	r3, [pc, #252]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002b9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b9e:	2380      	movs	r3, #128	; 0x80
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	d1ef      	bne.n	8002b86 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002ba6:	2323      	movs	r3, #35	; 0x23
 8002ba8:	18fb      	adds	r3, r7, r3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d105      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb0:	4b39      	ldr	r3, [pc, #228]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bb4:	4b38      	ldr	r3, [pc, #224]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002bb6:	493e      	ldr	r1, [pc, #248]	; (8002cb0 <HAL_RCC_OscConfig+0x698>)
 8002bb8:	400a      	ands	r2, r1
 8002bba:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d100      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x5ae>
 8002bc4:	e09d      	b.n	8002d02 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	2b0c      	cmp	r3, #12
 8002bca:	d100      	bne.n	8002bce <HAL_RCC_OscConfig+0x5b6>
 8002bcc:	e076      	b.n	8002cbc <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d145      	bne.n	8002c62 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	4b2f      	ldr	r3, [pc, #188]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002bdc:	4935      	ldr	r1, [pc, #212]	; (8002cb4 <HAL_RCC_OscConfig+0x69c>)
 8002bde:	400a      	ands	r2, r1
 8002be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be2:	f7fe fc6b 	bl	80014bc <HAL_GetTick>
 8002be6:	0003      	movs	r3, r0
 8002be8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bec:	f7fe fc66 	bl	80014bc <HAL_GetTick>
 8002bf0:	0002      	movs	r2, r0
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b02      	cmp	r3, #2
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e082      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002bfe:	4b26      	ldr	r3, [pc, #152]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	2380      	movs	r3, #128	; 0x80
 8002c04:	049b      	lsls	r3, r3, #18
 8002c06:	4013      	ands	r3, r2
 8002c08:	d1f0      	bne.n	8002bec <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c0a:	4b23      	ldr	r3, [pc, #140]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c0c:	68db      	ldr	r3, [r3, #12]
 8002c0e:	4a2a      	ldr	r2, [pc, #168]	; (8002cb8 <HAL_RCC_OscConfig+0x6a0>)
 8002c10:	4013      	ands	r3, r2
 8002c12:	0019      	movs	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c22:	431a      	orrs	r2, r3
 8002c24:	4b1c      	ldr	r3, [pc, #112]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c26:	430a      	orrs	r2, r1
 8002c28:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c2a:	4b1b      	ldr	r3, [pc, #108]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	4b1a      	ldr	r3, [pc, #104]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c30:	2180      	movs	r1, #128	; 0x80
 8002c32:	0449      	lsls	r1, r1, #17
 8002c34:	430a      	orrs	r2, r1
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c38:	f7fe fc40 	bl	80014bc <HAL_GetTick>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c40:	e008      	b.n	8002c54 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c42:	f7fe fc3b 	bl	80014bc <HAL_GetTick>
 8002c46:	0002      	movs	r2, r0
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	1ad3      	subs	r3, r2, r3
 8002c4c:	2b02      	cmp	r3, #2
 8002c4e:	d901      	bls.n	8002c54 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e057      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002c54:	4b10      	ldr	r3, [pc, #64]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	2380      	movs	r3, #128	; 0x80
 8002c5a:	049b      	lsls	r3, r3, #18
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d0f0      	beq.n	8002c42 <HAL_RCC_OscConfig+0x62a>
 8002c60:	e04f      	b.n	8002d02 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	4b0c      	ldr	r3, [pc, #48]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c68:	4912      	ldr	r1, [pc, #72]	; (8002cb4 <HAL_RCC_OscConfig+0x69c>)
 8002c6a:	400a      	ands	r2, r1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe fc25 	bl	80014bc <HAL_GetTick>
 8002c72:	0003      	movs	r3, r0
 8002c74:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c78:	f7fe fc20 	bl	80014bc <HAL_GetTick>
 8002c7c:	0002      	movs	r2, r0
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e03c      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002c8a:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_RCC_OscConfig+0x680>)
 8002c8c:	681a      	ldr	r2, [r3, #0]
 8002c8e:	2380      	movs	r3, #128	; 0x80
 8002c90:	049b      	lsls	r3, r3, #18
 8002c92:	4013      	ands	r3, r2
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x660>
 8002c96:	e034      	b.n	8002d02 <HAL_RCC_OscConfig+0x6ea>
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	ffff1fff 	.word	0xffff1fff
 8002ca0:	fffffeff 	.word	0xfffffeff
 8002ca4:	40007000 	.word	0x40007000
 8002ca8:	fffffbff 	.word	0xfffffbff
 8002cac:	00001388 	.word	0x00001388
 8002cb0:	efffffff 	.word	0xefffffff
 8002cb4:	feffffff 	.word	0xfeffffff
 8002cb8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d101      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	e01d      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cc8:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_RCC_OscConfig+0x6f4>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	2380      	movs	r3, #128	; 0x80
 8002cd2:	025b      	lsls	r3, r3, #9
 8002cd4:	401a      	ands	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d10f      	bne.n	8002cfe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cde:	69ba      	ldr	r2, [r7, #24]
 8002ce0:	23f0      	movs	r3, #240	; 0xf0
 8002ce2:	039b      	lsls	r3, r3, #14
 8002ce4:	401a      	ands	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	23c0      	movs	r3, #192	; 0xc0
 8002cf2:	041b      	lsls	r3, r3, #16
 8002cf4:	401a      	ands	r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d001      	beq.n	8002d02 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e000      	b.n	8002d04 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002d02:	2300      	movs	r3, #0
}
 8002d04:	0018      	movs	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b00a      	add	sp, #40	; 0x28
 8002d0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d0c:	40021000 	.word	0x40021000

08002d10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d10:	b5b0      	push	{r4, r5, r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e128      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d24:	4b96      	ldr	r3, [pc, #600]	; (8002f80 <HAL_RCC_ClockConfig+0x270>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	683a      	ldr	r2, [r7, #0]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d91e      	bls.n	8002d70 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d32:	4b93      	ldr	r3, [pc, #588]	; (8002f80 <HAL_RCC_ClockConfig+0x270>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	4393      	bics	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	4b90      	ldr	r3, [pc, #576]	; (8002f80 <HAL_RCC_ClockConfig+0x270>)
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002d44:	f7fe fbba 	bl	80014bc <HAL_GetTick>
 8002d48:	0003      	movs	r3, r0
 8002d4a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4c:	e009      	b.n	8002d62 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d4e:	f7fe fbb5 	bl	80014bc <HAL_GetTick>
 8002d52:	0002      	movs	r2, r0
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	4a8a      	ldr	r2, [pc, #552]	; (8002f84 <HAL_RCC_ClockConfig+0x274>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e109      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d62:	4b87      	ldr	r3, [pc, #540]	; (8002f80 <HAL_RCC_ClockConfig+0x270>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	4013      	ands	r3, r2
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d1ee      	bne.n	8002d4e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2202      	movs	r2, #2
 8002d76:	4013      	ands	r3, r2
 8002d78:	d009      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d7a:	4b83      	ldr	r3, [pc, #524]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	22f0      	movs	r2, #240	; 0xf0
 8002d80:	4393      	bics	r3, r2
 8002d82:	0019      	movs	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	4b7f      	ldr	r3, [pc, #508]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2201      	movs	r2, #1
 8002d94:	4013      	ands	r3, r2
 8002d96:	d100      	bne.n	8002d9a <HAL_RCC_ClockConfig+0x8a>
 8002d98:	e089      	b.n	8002eae <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b02      	cmp	r3, #2
 8002da0:	d107      	bne.n	8002db2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002da2:	4b79      	ldr	r3, [pc, #484]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	2380      	movs	r3, #128	; 0x80
 8002da8:	029b      	lsls	r3, r3, #10
 8002daa:	4013      	ands	r3, r2
 8002dac:	d120      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0e1      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b03      	cmp	r3, #3
 8002db8:	d107      	bne.n	8002dca <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002dba:	4b73      	ldr	r3, [pc, #460]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	049b      	lsls	r3, r3, #18
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d114      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0d5      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d106      	bne.n	8002de0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002dd2:	4b6d      	ldr	r3, [pc, #436]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2204      	movs	r2, #4
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d109      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0ca      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002de0:	4b69      	ldr	r3, [pc, #420]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	2380      	movs	r3, #128	; 0x80
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4013      	ands	r3, r2
 8002dea:	d101      	bne.n	8002df0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0c2      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002df0:	4b65      	ldr	r3, [pc, #404]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2203      	movs	r2, #3
 8002df6:	4393      	bics	r3, r2
 8002df8:	0019      	movs	r1, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	4b62      	ldr	r3, [pc, #392]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002e00:	430a      	orrs	r2, r1
 8002e02:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e04:	f7fe fb5a 	bl	80014bc <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d111      	bne.n	8002e38 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e14:	e009      	b.n	8002e2a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e16:	f7fe fb51 	bl	80014bc <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	4a58      	ldr	r2, [pc, #352]	; (8002f84 <HAL_RCC_ClockConfig+0x274>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e0a5      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e2a:	4b57      	ldr	r3, [pc, #348]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	220c      	movs	r2, #12
 8002e30:	4013      	ands	r3, r2
 8002e32:	2b08      	cmp	r3, #8
 8002e34:	d1ef      	bne.n	8002e16 <HAL_RCC_ClockConfig+0x106>
 8002e36:	e03a      	b.n	8002eae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d111      	bne.n	8002e64 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e40:	e009      	b.n	8002e56 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e42:	f7fe fb3b 	bl	80014bc <HAL_GetTick>
 8002e46:	0002      	movs	r2, r0
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	1ad3      	subs	r3, r2, r3
 8002e4c:	4a4d      	ldr	r2, [pc, #308]	; (8002f84 <HAL_RCC_ClockConfig+0x274>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e08f      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e56:	4b4c      	ldr	r3, [pc, #304]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	220c      	movs	r2, #12
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	2b0c      	cmp	r3, #12
 8002e60:	d1ef      	bne.n	8002e42 <HAL_RCC_ClockConfig+0x132>
 8002e62:	e024      	b.n	8002eae <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d11b      	bne.n	8002ea4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e6c:	e009      	b.n	8002e82 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e6e:	f7fe fb25 	bl	80014bc <HAL_GetTick>
 8002e72:	0002      	movs	r2, r0
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	4a42      	ldr	r2, [pc, #264]	; (8002f84 <HAL_RCC_ClockConfig+0x274>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e079      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e82:	4b41      	ldr	r3, [pc, #260]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	220c      	movs	r2, #12
 8002e88:	4013      	ands	r3, r2
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d1ef      	bne.n	8002e6e <HAL_RCC_ClockConfig+0x15e>
 8002e8e:	e00e      	b.n	8002eae <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e90:	f7fe fb14 	bl	80014bc <HAL_GetTick>
 8002e94:	0002      	movs	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	4a3a      	ldr	r2, [pc, #232]	; (8002f84 <HAL_RCC_ClockConfig+0x274>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d901      	bls.n	8002ea4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e068      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002ea4:	4b38      	ldr	r3, [pc, #224]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	220c      	movs	r2, #12
 8002eaa:	4013      	ands	r3, r2
 8002eac:	d1f0      	bne.n	8002e90 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eae:	4b34      	ldr	r3, [pc, #208]	; (8002f80 <HAL_RCC_ClockConfig+0x270>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	683a      	ldr	r2, [r7, #0]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d21e      	bcs.n	8002efa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ebc:	4b30      	ldr	r3, [pc, #192]	; (8002f80 <HAL_RCC_ClockConfig+0x270>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	4393      	bics	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_RCC_ClockConfig+0x270>)
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002ece:	f7fe faf5 	bl	80014bc <HAL_GetTick>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ed6:	e009      	b.n	8002eec <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed8:	f7fe faf0 	bl	80014bc <HAL_GetTick>
 8002edc:	0002      	movs	r2, r0
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	4a28      	ldr	r2, [pc, #160]	; (8002f84 <HAL_RCC_ClockConfig+0x274>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e044      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eec:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_RCC_ClockConfig+0x270>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d1ee      	bne.n	8002ed8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	2204      	movs	r2, #4
 8002f00:	4013      	ands	r3, r2
 8002f02:	d009      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f04:	4b20      	ldr	r3, [pc, #128]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a20      	ldr	r2, [pc, #128]	; (8002f8c <HAL_RCC_ClockConfig+0x27c>)
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	0019      	movs	r1, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	4b1d      	ldr	r3, [pc, #116]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002f14:	430a      	orrs	r2, r1
 8002f16:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2208      	movs	r2, #8
 8002f1e:	4013      	ands	r3, r2
 8002f20:	d00a      	beq.n	8002f38 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f22:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <HAL_RCC_ClockConfig+0x280>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	691b      	ldr	r3, [r3, #16]
 8002f30:	00da      	lsls	r2, r3, #3
 8002f32:	4b15      	ldr	r3, [pc, #84]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002f34:	430a      	orrs	r2, r1
 8002f36:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f38:	f000 f832 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8002f3c:	0001      	movs	r1, r0
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x278>)
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	091b      	lsrs	r3, r3, #4
 8002f44:	220f      	movs	r2, #15
 8002f46:	4013      	ands	r3, r2
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x284>)
 8002f4a:	5cd3      	ldrb	r3, [r2, r3]
 8002f4c:	000a      	movs	r2, r1
 8002f4e:	40da      	lsrs	r2, r3
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_RCC_ClockConfig+0x288>)
 8002f52:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f54:	4b11      	ldr	r3, [pc, #68]	; (8002f9c <HAL_RCC_ClockConfig+0x28c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	250b      	movs	r5, #11
 8002f5a:	197c      	adds	r4, r7, r5
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7fe fa67 	bl	8001430 <HAL_InitTick>
 8002f62:	0003      	movs	r3, r0
 8002f64:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002f66:	197b      	adds	r3, r7, r5
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d002      	beq.n	8002f74 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002f6e:	197b      	adds	r3, r7, r5
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	e000      	b.n	8002f76 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	0018      	movs	r0, r3
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	b004      	add	sp, #16
 8002f7c:	bdb0      	pop	{r4, r5, r7, pc}
 8002f7e:	46c0      	nop			; (mov r8, r8)
 8002f80:	40022000 	.word	0x40022000
 8002f84:	00001388 	.word	0x00001388
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	fffff8ff 	.word	0xfffff8ff
 8002f90:	ffffc7ff 	.word	0xffffc7ff
 8002f94:	08005da4 	.word	0x08005da4
 8002f98:	20000004 	.word	0x20000004
 8002f9c:	20000008 	.word	0x20000008

08002fa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa0:	b5b0      	push	{r4, r5, r7, lr}
 8002fa2:	b08e      	sub	sp, #56	; 0x38
 8002fa4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002fa6:	4b4c      	ldr	r3, [pc, #304]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fae:	230c      	movs	r3, #12
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	2b0c      	cmp	r3, #12
 8002fb4:	d014      	beq.n	8002fe0 <HAL_RCC_GetSysClockFreq+0x40>
 8002fb6:	d900      	bls.n	8002fba <HAL_RCC_GetSysClockFreq+0x1a>
 8002fb8:	e07b      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x112>
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d002      	beq.n	8002fc4 <HAL_RCC_GetSysClockFreq+0x24>
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d00b      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x3a>
 8002fc2:	e076      	b.n	80030b2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002fc4:	4b44      	ldr	r3, [pc, #272]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fd0:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002fd2:	e07c      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fd8:	e079      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fda:	4b41      	ldr	r3, [pc, #260]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8002fdc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002fde:	e076      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe2:	0c9a      	lsrs	r2, r3, #18
 8002fe4:	230f      	movs	r3, #15
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	4b3e      	ldr	r3, [pc, #248]	; (80030e4 <HAL_RCC_GetSysClockFreq+0x144>)
 8002fea:	5c9b      	ldrb	r3, [r3, r2]
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ff0:	0d9a      	lsrs	r2, r3, #22
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	3301      	adds	r3, #1
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ffa:	4b37      	ldr	r3, [pc, #220]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x138>)
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	2380      	movs	r3, #128	; 0x80
 8003000:	025b      	lsls	r3, r3, #9
 8003002:	4013      	ands	r3, r2
 8003004:	d01a      	beq.n	800303c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003008:	61bb      	str	r3, [r7, #24]
 800300a:	2300      	movs	r3, #0
 800300c:	61fb      	str	r3, [r7, #28]
 800300e:	4a34      	ldr	r2, [pc, #208]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003010:	2300      	movs	r3, #0
 8003012:	69b8      	ldr	r0, [r7, #24]
 8003014:	69f9      	ldr	r1, [r7, #28]
 8003016:	f7fd f935 	bl	8000284 <__aeabi_lmul>
 800301a:	0002      	movs	r2, r0
 800301c:	000b      	movs	r3, r1
 800301e:	0010      	movs	r0, r2
 8003020:	0019      	movs	r1, r3
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	613b      	str	r3, [r7, #16]
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	f7fd f909 	bl	8000244 <__aeabi_uldivmod>
 8003032:	0002      	movs	r2, r0
 8003034:	000b      	movs	r3, r1
 8003036:	0013      	movs	r3, r2
 8003038:	637b      	str	r3, [r7, #52]	; 0x34
 800303a:	e037      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800303c:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x138>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2210      	movs	r2, #16
 8003042:	4013      	ands	r3, r2
 8003044:	d01a      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003046:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4a23      	ldr	r2, [pc, #140]	; (80030dc <HAL_RCC_GetSysClockFreq+0x13c>)
 8003050:	2300      	movs	r3, #0
 8003052:	68b8      	ldr	r0, [r7, #8]
 8003054:	68f9      	ldr	r1, [r7, #12]
 8003056:	f7fd f915 	bl	8000284 <__aeabi_lmul>
 800305a:	0002      	movs	r2, r0
 800305c:	000b      	movs	r3, r1
 800305e:	0010      	movs	r0, r2
 8003060:	0019      	movs	r1, r3
 8003062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f7fd f8e9 	bl	8000244 <__aeabi_uldivmod>
 8003072:	0002      	movs	r2, r0
 8003074:	000b      	movs	r3, r1
 8003076:	0013      	movs	r3, r2
 8003078:	637b      	str	r3, [r7, #52]	; 0x34
 800307a:	e017      	b.n	80030ac <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800307c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800307e:	0018      	movs	r0, r3
 8003080:	2300      	movs	r3, #0
 8003082:	0019      	movs	r1, r3
 8003084:	4a16      	ldr	r2, [pc, #88]	; (80030e0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003086:	2300      	movs	r3, #0
 8003088:	f7fd f8fc 	bl	8000284 <__aeabi_lmul>
 800308c:	0002      	movs	r2, r0
 800308e:	000b      	movs	r3, r1
 8003090:	0010      	movs	r0, r2
 8003092:	0019      	movs	r1, r3
 8003094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003096:	001c      	movs	r4, r3
 8003098:	2300      	movs	r3, #0
 800309a:	001d      	movs	r5, r3
 800309c:	0022      	movs	r2, r4
 800309e:	002b      	movs	r3, r5
 80030a0:	f7fd f8d0 	bl	8000244 <__aeabi_uldivmod>
 80030a4:	0002      	movs	r2, r0
 80030a6:	000b      	movs	r3, r1
 80030a8:	0013      	movs	r3, r2
 80030aa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80030ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030ae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030b0:	e00d      	b.n	80030ce <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80030b2:	4b09      	ldr	r3, [pc, #36]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x138>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	0b5b      	lsrs	r3, r3, #13
 80030b8:	2207      	movs	r2, #7
 80030ba:	4013      	ands	r3, r2
 80030bc:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80030be:	6a3b      	ldr	r3, [r7, #32]
 80030c0:	3301      	adds	r3, #1
 80030c2:	2280      	movs	r2, #128	; 0x80
 80030c4:	0212      	lsls	r2, r2, #8
 80030c6:	409a      	lsls	r2, r3
 80030c8:	0013      	movs	r3, r2
 80030ca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80030cc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80030ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80030d0:	0018      	movs	r0, r3
 80030d2:	46bd      	mov	sp, r7
 80030d4:	b00e      	add	sp, #56	; 0x38
 80030d6:	bdb0      	pop	{r4, r5, r7, pc}
 80030d8:	40021000 	.word	0x40021000
 80030dc:	003d0900 	.word	0x003d0900
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	08005dbc 	.word	0x08005dbc

080030e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ec:	4b02      	ldr	r3, [pc, #8]	; (80030f8 <HAL_RCC_GetHCLKFreq+0x10>)
 80030ee:	681b      	ldr	r3, [r3, #0]
}
 80030f0:	0018      	movs	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	46c0      	nop			; (mov r8, r8)
 80030f8:	20000004 	.word	0x20000004

080030fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003100:	f7ff fff2 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003104:	0001      	movs	r1, r0
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	0a1b      	lsrs	r3, r3, #8
 800310c:	2207      	movs	r2, #7
 800310e:	4013      	ands	r3, r2
 8003110:	4a04      	ldr	r2, [pc, #16]	; (8003124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003112:	5cd3      	ldrb	r3, [r2, r3]
 8003114:	40d9      	lsrs	r1, r3
 8003116:	000b      	movs	r3, r1
}
 8003118:	0018      	movs	r0, r3
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	40021000 	.word	0x40021000
 8003124:	08005db4 	.word	0x08005db4

08003128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800312c:	f7ff ffdc 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003130:	0001      	movs	r1, r0
 8003132:	4b06      	ldr	r3, [pc, #24]	; (800314c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	0adb      	lsrs	r3, r3, #11
 8003138:	2207      	movs	r2, #7
 800313a:	4013      	ands	r3, r2
 800313c:	4a04      	ldr	r2, [pc, #16]	; (8003150 <HAL_RCC_GetPCLK2Freq+0x28>)
 800313e:	5cd3      	ldrb	r3, [r2, r3]
 8003140:	40d9      	lsrs	r1, r3
 8003142:	000b      	movs	r3, r1
}
 8003144:	0018      	movs	r0, r3
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	40021000 	.word	0x40021000
 8003150:	08005db4 	.word	0x08005db4

08003154 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800315c:	2017      	movs	r0, #23
 800315e:	183b      	adds	r3, r7, r0
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	2220      	movs	r2, #32
 800316a:	4013      	ands	r3, r2
 800316c:	d100      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800316e:	e0c2      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003170:	4b91      	ldr	r3, [pc, #580]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003172:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003174:	2380      	movs	r3, #128	; 0x80
 8003176:	055b      	lsls	r3, r3, #21
 8003178:	4013      	ands	r3, r2
 800317a:	d109      	bne.n	8003190 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800317c:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800317e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003180:	4b8d      	ldr	r3, [pc, #564]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003182:	2180      	movs	r1, #128	; 0x80
 8003184:	0549      	lsls	r1, r1, #21
 8003186:	430a      	orrs	r2, r1
 8003188:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800318a:	183b      	adds	r3, r7, r0
 800318c:	2201      	movs	r2, #1
 800318e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003190:	4b8a      	ldr	r3, [pc, #552]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	4013      	ands	r3, r2
 800319a:	d11a      	bne.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800319c:	4b87      	ldr	r3, [pc, #540]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	4b86      	ldr	r3, [pc, #536]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031a2:	2180      	movs	r1, #128	; 0x80
 80031a4:	0049      	lsls	r1, r1, #1
 80031a6:	430a      	orrs	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031aa:	f7fe f987 	bl	80014bc <HAL_GetTick>
 80031ae:	0003      	movs	r3, r0
 80031b0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031b2:	e008      	b.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031b4:	f7fe f982 	bl	80014bc <HAL_GetTick>
 80031b8:	0002      	movs	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b64      	cmp	r3, #100	; 0x64
 80031c0:	d901      	bls.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0f3      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c6:	4b7d      	ldr	r3, [pc, #500]	; (80033bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	d0f0      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80031d2:	4b79      	ldr	r3, [pc, #484]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	23c0      	movs	r3, #192	; 0xc0
 80031d8:	039b      	lsls	r3, r3, #14
 80031da:	4013      	ands	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	23c0      	movs	r3, #192	; 0xc0
 80031e4:	039b      	lsls	r3, r3, #14
 80031e6:	4013      	ands	r3, r2
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d013      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685a      	ldr	r2, [r3, #4]
 80031f2:	23c0      	movs	r3, #192	; 0xc0
 80031f4:	029b      	lsls	r3, r3, #10
 80031f6:	401a      	ands	r2, r3
 80031f8:	23c0      	movs	r3, #192	; 0xc0
 80031fa:	029b      	lsls	r3, r3, #10
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d10a      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003200:	4b6d      	ldr	r3, [pc, #436]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	2380      	movs	r3, #128	; 0x80
 8003206:	029b      	lsls	r3, r3, #10
 8003208:	401a      	ands	r2, r3
 800320a:	2380      	movs	r3, #128	; 0x80
 800320c:	029b      	lsls	r3, r3, #10
 800320e:	429a      	cmp	r2, r3
 8003210:	d101      	bne.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e0cb      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003216:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003218:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800321a:	23c0      	movs	r3, #192	; 0xc0
 800321c:	029b      	lsls	r3, r3, #10
 800321e:	4013      	ands	r3, r2
 8003220:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03b      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	23c0      	movs	r3, #192	; 0xc0
 800322e:	029b      	lsls	r3, r3, #10
 8003230:	4013      	ands	r3, r2
 8003232:	68fa      	ldr	r2, [r7, #12]
 8003234:	429a      	cmp	r2, r3
 8003236:	d033      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2220      	movs	r2, #32
 800323e:	4013      	ands	r3, r2
 8003240:	d02e      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003242:	4b5d      	ldr	r3, [pc, #372]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003244:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003246:	4a5e      	ldr	r2, [pc, #376]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003248:	4013      	ands	r3, r2
 800324a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800324c:	4b5a      	ldr	r3, [pc, #360]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800324e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003252:	2180      	movs	r1, #128	; 0x80
 8003254:	0309      	lsls	r1, r1, #12
 8003256:	430a      	orrs	r2, r1
 8003258:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800325a:	4b57      	ldr	r3, [pc, #348]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800325c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800325e:	4b56      	ldr	r3, [pc, #344]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003260:	4958      	ldr	r1, [pc, #352]	; (80033c4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003262:	400a      	ands	r2, r1
 8003264:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003266:	4b54      	ldr	r3, [pc, #336]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003268:	68fa      	ldr	r2, [r7, #12]
 800326a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	2380      	movs	r3, #128	; 0x80
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4013      	ands	r3, r2
 8003274:	d014      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003276:	f7fe f921 	bl	80014bc <HAL_GetTick>
 800327a:	0003      	movs	r3, r0
 800327c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800327e:	e009      	b.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003280:	f7fe f91c 	bl	80014bc <HAL_GetTick>
 8003284:	0002      	movs	r2, r0
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	1ad3      	subs	r3, r2, r3
 800328a:	4a4f      	ldr	r2, [pc, #316]	; (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d901      	bls.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e08c      	b.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003294:	4b48      	ldr	r3, [pc, #288]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003296:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003298:	2380      	movs	r3, #128	; 0x80
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d0ef      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685a      	ldr	r2, [r3, #4]
 80032a4:	23c0      	movs	r3, #192	; 0xc0
 80032a6:	029b      	lsls	r3, r3, #10
 80032a8:	401a      	ands	r2, r3
 80032aa:	23c0      	movs	r3, #192	; 0xc0
 80032ac:	029b      	lsls	r3, r3, #10
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d10c      	bne.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a45      	ldr	r2, [pc, #276]	; (80033cc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80032b8:	4013      	ands	r3, r2
 80032ba:	0019      	movs	r1, r3
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685a      	ldr	r2, [r3, #4]
 80032c0:	23c0      	movs	r3, #192	; 0xc0
 80032c2:	039b      	lsls	r3, r3, #14
 80032c4:	401a      	ands	r2, r3
 80032c6:	4b3c      	ldr	r3, [pc, #240]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c8:	430a      	orrs	r2, r1
 80032ca:	601a      	str	r2, [r3, #0]
 80032cc:	4b3a      	ldr	r3, [pc, #232]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	23c0      	movs	r3, #192	; 0xc0
 80032d6:	029b      	lsls	r3, r3, #10
 80032d8:	401a      	ands	r2, r3
 80032da:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032dc:	430a      	orrs	r2, r1
 80032de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032e0:	2317      	movs	r3, #23
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d105      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ea:	4b33      	ldr	r3, [pc, #204]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ee:	4b32      	ldr	r3, [pc, #200]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032f0:	4937      	ldr	r1, [pc, #220]	; (80033d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80032f2:	400a      	ands	r2, r1
 80032f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2201      	movs	r2, #1
 80032fc:	4013      	ands	r3, r2
 80032fe:	d009      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003300:	4b2d      	ldr	r3, [pc, #180]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003304:	2203      	movs	r2, #3
 8003306:	4393      	bics	r3, r2
 8003308:	0019      	movs	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689a      	ldr	r2, [r3, #8]
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003310:	430a      	orrs	r2, r1
 8003312:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800331e:	4b26      	ldr	r3, [pc, #152]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003322:	220c      	movs	r2, #12
 8003324:	4393      	bics	r3, r2
 8003326:	0019      	movs	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	4b22      	ldr	r3, [pc, #136]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800332e:	430a      	orrs	r2, r1
 8003330:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	2204      	movs	r2, #4
 8003338:	4013      	ands	r3, r2
 800333a:	d009      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800333c:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800333e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003340:	4a24      	ldr	r2, [pc, #144]	; (80033d4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003342:	4013      	ands	r3, r2
 8003344:	0019      	movs	r1, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800334c:	430a      	orrs	r2, r1
 800334e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2208      	movs	r2, #8
 8003356:	4013      	ands	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800335a:	4b17      	ldr	r3, [pc, #92]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800335c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800335e:	4a1e      	ldr	r2, [pc, #120]	; (80033d8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003360:	4013      	ands	r3, r2
 8003362:	0019      	movs	r1, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	695a      	ldr	r2, [r3, #20]
 8003368:	4b13      	ldr	r3, [pc, #76]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800336a:	430a      	orrs	r2, r1
 800336c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	2380      	movs	r3, #128	; 0x80
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	4013      	ands	r3, r2
 8003378:	d009      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800337a:	4b0f      	ldr	r3, [pc, #60]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800337c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800337e:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003380:	4013      	ands	r3, r2
 8003382:	0019      	movs	r1, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699a      	ldr	r2, [r3, #24]
 8003388:	4b0b      	ldr	r3, [pc, #44]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338a:	430a      	orrs	r2, r1
 800338c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2280      	movs	r2, #128	; 0x80
 8003394:	4013      	ands	r3, r2
 8003396:	d009      	beq.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003398:	4b07      	ldr	r3, [pc, #28]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800339c:	4a0f      	ldr	r2, [pc, #60]	; (80033dc <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800339e:	4013      	ands	r3, r2
 80033a0:	0019      	movs	r1, r3
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	69da      	ldr	r2, [r3, #28]
 80033a6:	4b04      	ldr	r3, [pc, #16]	; (80033b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033a8:	430a      	orrs	r2, r1
 80033aa:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	0018      	movs	r0, r3
 80033b0:	46bd      	mov	sp, r7
 80033b2:	b006      	add	sp, #24
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40007000 	.word	0x40007000
 80033c0:	fffcffff 	.word	0xfffcffff
 80033c4:	fff7ffff 	.word	0xfff7ffff
 80033c8:	00001388 	.word	0x00001388
 80033cc:	ffcfffff 	.word	0xffcfffff
 80033d0:	efffffff 	.word	0xefffffff
 80033d4:	fffff3ff 	.word	0xfffff3ff
 80033d8:	ffffcfff 	.word	0xffffcfff
 80033dc:	fff3ffff 	.word	0xfff3ffff

080033e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e083      	b.n	80034fa <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	2382      	movs	r3, #130	; 0x82
 8003400:	005b      	lsls	r3, r3, #1
 8003402:	429a      	cmp	r2, r3
 8003404:	d009      	beq.n	800341a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	61da      	str	r2, [r3, #28]
 800340c:	e005      	b.n	800341a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2251      	movs	r2, #81	; 0x51
 8003424:	5c9b      	ldrb	r3, [r3, r2]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d107      	bne.n	800343c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2250      	movs	r2, #80	; 0x50
 8003430:	2100      	movs	r1, #0
 8003432:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	0018      	movs	r0, r3
 8003438:	f7fd fe32 	bl	80010a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2251      	movs	r2, #81	; 0x51
 8003440:	2102      	movs	r1, #2
 8003442:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2140      	movs	r1, #64	; 0x40
 8003450:	438a      	bics	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	2382      	movs	r3, #130	; 0x82
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	401a      	ands	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6899      	ldr	r1, [r3, #8]
 8003462:	2384      	movs	r3, #132	; 0x84
 8003464:	021b      	lsls	r3, r3, #8
 8003466:	400b      	ands	r3, r1
 8003468:	431a      	orrs	r2, r3
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68d9      	ldr	r1, [r3, #12]
 800346e:	2380      	movs	r3, #128	; 0x80
 8003470:	011b      	lsls	r3, r3, #4
 8003472:	400b      	ands	r3, r1
 8003474:	431a      	orrs	r2, r3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2102      	movs	r1, #2
 800347c:	400b      	ands	r3, r1
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	695b      	ldr	r3, [r3, #20]
 8003484:	2101      	movs	r1, #1
 8003486:	400b      	ands	r3, r1
 8003488:	431a      	orrs	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6999      	ldr	r1, [r3, #24]
 800348e:	2380      	movs	r3, #128	; 0x80
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	400b      	ands	r3, r1
 8003494:	431a      	orrs	r2, r3
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69db      	ldr	r3, [r3, #28]
 800349a:	2138      	movs	r1, #56	; 0x38
 800349c:	400b      	ands	r3, r1
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	2180      	movs	r1, #128	; 0x80
 80034a6:	400b      	ands	r3, r1
 80034a8:	431a      	orrs	r2, r3
 80034aa:	0011      	movs	r1, r2
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034b0:	2380      	movs	r3, #128	; 0x80
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	401a      	ands	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	0c1b      	lsrs	r3, r3, #16
 80034c4:	2204      	movs	r2, #4
 80034c6:	4013      	ands	r3, r2
 80034c8:	0019      	movs	r1, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	2210      	movs	r2, #16
 80034d0:	401a      	ands	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	69da      	ldr	r2, [r3, #28]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4907      	ldr	r1, [pc, #28]	; (8003504 <HAL_SPI_Init+0x124>)
 80034e6:	400a      	ands	r2, r1
 80034e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2200      	movs	r2, #0
 80034ee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2251      	movs	r2, #81	; 0x51
 80034f4:	2101      	movs	r1, #1
 80034f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	0018      	movs	r0, r3
 80034fc:	46bd      	mov	sp, r7
 80034fe:	b002      	add	sp, #8
 8003500:	bd80      	pop	{r7, pc}
 8003502:	46c0      	nop			; (mov r8, r8)
 8003504:	fffff7ff 	.word	0xfffff7ff

08003508 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b086      	sub	sp, #24
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	1dbb      	adds	r3, r7, #6
 8003514:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003516:	2317      	movs	r3, #23
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	2200      	movs	r2, #0
 800351c:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d112      	bne.n	800354c <HAL_SPI_Receive_IT+0x44>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	2382      	movs	r3, #130	; 0x82
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	429a      	cmp	r2, r3
 8003530:	d10c      	bne.n	800354c <HAL_SPI_Receive_IT+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2251      	movs	r2, #81	; 0x51
 8003536:	2104      	movs	r1, #4
 8003538:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800353a:	1dbb      	adds	r3, r7, #6
 800353c:	881b      	ldrh	r3, [r3, #0]
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	68b9      	ldr	r1, [r7, #8]
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f88e 	bl	8003664 <HAL_SPI_TransmitReceive_IT>
 8003548:	0003      	movs	r3, r0
 800354a:	e080      	b.n	800364e <HAL_SPI_Receive_IT+0x146>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2250      	movs	r2, #80	; 0x50
 8003550:	5c9b      	ldrb	r3, [r3, r2]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d101      	bne.n	800355a <HAL_SPI_Receive_IT+0x52>
 8003556:	2302      	movs	r3, #2
 8003558:	e079      	b.n	800364e <HAL_SPI_Receive_IT+0x146>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2250      	movs	r2, #80	; 0x50
 800355e:	2101      	movs	r1, #1
 8003560:	5499      	strb	r1, [r3, r2]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2251      	movs	r2, #81	; 0x51
 8003566:	5c9b      	ldrb	r3, [r3, r2]
 8003568:	b2db      	uxtb	r3, r3
 800356a:	2b01      	cmp	r3, #1
 800356c:	d004      	beq.n	8003578 <HAL_SPI_Receive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 800356e:	2317      	movs	r3, #23
 8003570:	18fb      	adds	r3, r7, r3
 8003572:	2202      	movs	r2, #2
 8003574:	701a      	strb	r2, [r3, #0]
    goto error;
 8003576:	e063      	b.n	8003640 <HAL_SPI_Receive_IT+0x138>
  }

  if ((pData == NULL) || (Size == 0U))
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d003      	beq.n	8003586 <HAL_SPI_Receive_IT+0x7e>
 800357e:	1dbb      	adds	r3, r7, #6
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d104      	bne.n	8003590 <HAL_SPI_Receive_IT+0x88>
  {
    errorcode = HAL_ERROR;
 8003586:	2317      	movs	r3, #23
 8003588:	18fb      	adds	r3, r7, r3
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
    goto error;
 800358e:	e057      	b.n	8003640 <HAL_SPI_Receive_IT+0x138>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2251      	movs	r2, #81	; 0x51
 8003594:	2104      	movs	r1, #4
 8003596:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	1dba      	adds	r2, r7, #6
 80035a8:	8812      	ldrh	r2, [r2, #0]
 80035aa:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	1dba      	adds	r2, r7, #6
 80035b0:	8812      	ldrh	r2, [r2, #0]
 80035b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d003      	beq.n	80035dc <HAL_SPI_Receive_IT+0xd4>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4a20      	ldr	r2, [pc, #128]	; (8003658 <HAL_SPI_Receive_IT+0x150>)
 80035d8:	641a      	str	r2, [r3, #64]	; 0x40
 80035da:	e002      	b.n	80035e2 <HAL_SPI_Receive_IT+0xda>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	4a1f      	ldr	r2, [pc, #124]	; (800365c <HAL_SPI_Receive_IT+0x154>)
 80035e0:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	689a      	ldr	r2, [r3, #8]
 80035e6:	2380      	movs	r3, #128	; 0x80
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d10f      	bne.n	800360e <HAL_SPI_Receive_IT+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2140      	movs	r1, #64	; 0x40
 80035fa:	438a      	bics	r2, r1
 80035fc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4915      	ldr	r1, [pc, #84]	; (8003660 <HAL_SPI_Receive_IT+0x158>)
 800360a:	400a      	ands	r2, r1
 800360c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	685a      	ldr	r2, [r3, #4]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2160      	movs	r1, #96	; 0x60
 800361a:	430a      	orrs	r2, r1
 800361c:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2240      	movs	r2, #64	; 0x40
 8003626:	4013      	ands	r3, r2
 8003628:	2b40      	cmp	r3, #64	; 0x40
 800362a:	d008      	beq.n	800363e <HAL_SPI_Receive_IT+0x136>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2140      	movs	r1, #64	; 0x40
 8003638:	430a      	orrs	r2, r1
 800363a:	601a      	str	r2, [r3, #0]
 800363c:	e000      	b.n	8003640 <HAL_SPI_Receive_IT+0x138>
  }

error :
 800363e:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2250      	movs	r2, #80	; 0x50
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003648:	2317      	movs	r3, #23
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	781b      	ldrb	r3, [r3, #0]
}
 800364e:	0018      	movs	r0, r3
 8003650:	46bd      	mov	sp, r7
 8003652:	b006      	add	sp, #24
 8003654:	bd80      	pop	{r7, pc}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	08003bc1 	.word	0x08003bc1
 800365c:	08003b75 	.word	0x08003b75
 8003660:	ffffbfff 	.word	0xffffbfff

08003664 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b086      	sub	sp, #24
 8003668:	af00      	add	r7, sp, #0
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	001a      	movs	r2, r3
 8003672:	1cbb      	adds	r3, r7, #2
 8003674:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003676:	2317      	movs	r3, #23
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	2200      	movs	r2, #0
 800367c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2250      	movs	r2, #80	; 0x50
 8003682:	5c9b      	ldrb	r3, [r3, r2]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_SPI_TransmitReceive_IT+0x28>
 8003688:	2302      	movs	r3, #2
 800368a:	e086      	b.n	800379a <HAL_SPI_TransmitReceive_IT+0x136>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2250      	movs	r2, #80	; 0x50
 8003690:	2101      	movs	r1, #1
 8003692:	5499      	strb	r1, [r3, r2]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003694:	2016      	movs	r0, #22
 8003696:	183b      	adds	r3, r7, r0
 8003698:	68fa      	ldr	r2, [r7, #12]
 800369a:	2151      	movs	r1, #81	; 0x51
 800369c:	5c52      	ldrb	r2, [r2, r1]
 800369e:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	685b      	ldr	r3, [r3, #4]
 80036a4:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80036a6:	0001      	movs	r1, r0
 80036a8:	187b      	adds	r3, r7, r1
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d011      	beq.n	80036d4 <HAL_SPI_TransmitReceive_IT+0x70>
 80036b0:	693a      	ldr	r2, [r7, #16]
 80036b2:	2382      	movs	r3, #130	; 0x82
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d107      	bne.n	80036ca <HAL_SPI_TransmitReceive_IT+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d103      	bne.n	80036ca <HAL_SPI_TransmitReceive_IT+0x66>
 80036c2:	187b      	adds	r3, r7, r1
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b04      	cmp	r3, #4
 80036c8:	d004      	beq.n	80036d4 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_BUSY;
 80036ca:	2317      	movs	r3, #23
 80036cc:	18fb      	adds	r3, r7, r3
 80036ce:	2202      	movs	r2, #2
 80036d0:	701a      	strb	r2, [r3, #0]
    goto error;
 80036d2:	e05b      	b.n	800378c <HAL_SPI_TransmitReceive_IT+0x128>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <HAL_SPI_TransmitReceive_IT+0x84>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_SPI_TransmitReceive_IT+0x84>
 80036e0:	1cbb      	adds	r3, r7, #2
 80036e2:	881b      	ldrh	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d104      	bne.n	80036f2 <HAL_SPI_TransmitReceive_IT+0x8e>
  {
    errorcode = HAL_ERROR;
 80036e8:	2317      	movs	r3, #23
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2201      	movs	r2, #1
 80036ee:	701a      	strb	r2, [r3, #0]
    goto error;
 80036f0:	e04c      	b.n	800378c <HAL_SPI_TransmitReceive_IT+0x128>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2251      	movs	r2, #81	; 0x51
 80036f6:	5c9b      	ldrb	r3, [r3, r2]
 80036f8:	b2db      	uxtb	r3, r3
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d003      	beq.n	8003706 <HAL_SPI_TransmitReceive_IT+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2251      	movs	r2, #81	; 0x51
 8003702:	2105      	movs	r1, #5
 8003704:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	1cba      	adds	r2, r7, #2
 8003716:	8812      	ldrh	r2, [r2, #0]
 8003718:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	1cba      	adds	r2, r7, #2
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	1cba      	adds	r2, r7, #2
 800372c:	8812      	ldrh	r2, [r2, #0]
 800372e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	1cba      	adds	r2, r7, #2
 8003734:	8812      	ldrh	r2, [r2, #0]
 8003736:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d006      	beq.n	800374e <HAL_SPI_TransmitReceive_IT+0xea>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	4a18      	ldr	r2, [pc, #96]	; (80037a4 <HAL_SPI_TransmitReceive_IT+0x140>)
 8003744:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	4a17      	ldr	r2, [pc, #92]	; (80037a8 <HAL_SPI_TransmitReceive_IT+0x144>)
 800374a:	645a      	str	r2, [r3, #68]	; 0x44
 800374c:	e005      	b.n	800375a <HAL_SPI_TransmitReceive_IT+0xf6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	4a16      	ldr	r2, [pc, #88]	; (80037ac <HAL_SPI_TransmitReceive_IT+0x148>)
 8003752:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	4a16      	ldr	r2, [pc, #88]	; (80037b0 <HAL_SPI_TransmitReceive_IT+0x14c>)
 8003758:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	21e0      	movs	r1, #224	; 0xe0
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2240      	movs	r2, #64	; 0x40
 8003772:	4013      	ands	r3, r2
 8003774:	2b40      	cmp	r3, #64	; 0x40
 8003776:	d008      	beq.n	800378a <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681a      	ldr	r2, [r3, #0]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2140      	movs	r1, #64	; 0x40
 8003784:	430a      	orrs	r2, r1
 8003786:	601a      	str	r2, [r3, #0]
 8003788:	e000      	b.n	800378c <HAL_SPI_TransmitReceive_IT+0x128>
  }

error :
 800378a:	46c0      	nop			; (mov r8, r8)
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2250      	movs	r2, #80	; 0x50
 8003790:	2100      	movs	r1, #0
 8003792:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8003794:	2317      	movs	r3, #23
 8003796:	18fb      	adds	r3, r7, r3
 8003798:	781b      	ldrb	r3, [r3, #0]
}
 800379a:	0018      	movs	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	b006      	add	sp, #24
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	08003ab3 	.word	0x08003ab3
 80037a8:	08003b15 	.word	0x08003b15
 80037ac:	080039eb 	.word	0x080039eb
 80037b0:	08003a51 	.word	0x08003a51

080037b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	099b      	lsrs	r3, r3, #6
 80037d0:	001a      	movs	r2, r3
 80037d2:	2301      	movs	r3, #1
 80037d4:	4013      	ands	r3, r2
 80037d6:	d10f      	bne.n	80037f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037d8:	69bb      	ldr	r3, [r7, #24]
 80037da:	2201      	movs	r2, #1
 80037dc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80037de:	d00b      	beq.n	80037f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	099b      	lsrs	r3, r3, #6
 80037e4:	001a      	movs	r2, r3
 80037e6:	2301      	movs	r3, #1
 80037e8:	4013      	ands	r3, r2
 80037ea:	d005      	beq.n	80037f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	0010      	movs	r0, r2
 80037f4:	4798      	blx	r3
    return;
 80037f6:	e0d5      	b.n	80039a4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	085b      	lsrs	r3, r3, #1
 80037fc:	001a      	movs	r2, r3
 80037fe:	2301      	movs	r3, #1
 8003800:	4013      	ands	r3, r2
 8003802:	d00b      	beq.n	800381c <HAL_SPI_IRQHandler+0x68>
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	09db      	lsrs	r3, r3, #7
 8003808:	001a      	movs	r2, r3
 800380a:	2301      	movs	r3, #1
 800380c:	4013      	ands	r3, r2
 800380e:	d005      	beq.n	800381c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	687a      	ldr	r2, [r7, #4]
 8003816:	0010      	movs	r0, r2
 8003818:	4798      	blx	r3
    return;
 800381a:	e0c3      	b.n	80039a4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	001a      	movs	r2, r3
 8003822:	2301      	movs	r3, #1
 8003824:	4013      	ands	r3, r2
 8003826:	d10c      	bne.n	8003842 <HAL_SPI_IRQHandler+0x8e>
 8003828:	69bb      	ldr	r3, [r7, #24]
 800382a:	099b      	lsrs	r3, r3, #6
 800382c:	001a      	movs	r2, r3
 800382e:	2301      	movs	r3, #1
 8003830:	4013      	ands	r3, r2
 8003832:	d106      	bne.n	8003842 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003834:	69bb      	ldr	r3, [r7, #24]
 8003836:	0a1b      	lsrs	r3, r3, #8
 8003838:	001a      	movs	r2, r3
 800383a:	2301      	movs	r3, #1
 800383c:	4013      	ands	r3, r2
 800383e:	d100      	bne.n	8003842 <HAL_SPI_IRQHandler+0x8e>
 8003840:	e0b0      	b.n	80039a4 <HAL_SPI_IRQHandler+0x1f0>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	095b      	lsrs	r3, r3, #5
 8003846:	001a      	movs	r2, r3
 8003848:	2301      	movs	r3, #1
 800384a:	4013      	ands	r3, r2
 800384c:	d100      	bne.n	8003850 <HAL_SPI_IRQHandler+0x9c>
 800384e:	e0a9      	b.n	80039a4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	099b      	lsrs	r3, r3, #6
 8003854:	001a      	movs	r2, r3
 8003856:	2301      	movs	r3, #1
 8003858:	4013      	ands	r3, r2
 800385a:	d023      	beq.n	80038a4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2251      	movs	r2, #81	; 0x51
 8003860:	5c9b      	ldrb	r3, [r3, r2]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b03      	cmp	r3, #3
 8003866:	d011      	beq.n	800388c <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800386c:	2204      	movs	r2, #4
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	617b      	str	r3, [r7, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	689b      	ldr	r3, [r3, #8]
 8003886:	617b      	str	r3, [r7, #20]
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	e00b      	b.n	80038a4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800388c:	2300      	movs	r3, #0
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68db      	ldr	r3, [r3, #12]
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	613b      	str	r3, [r7, #16]
 80038a0:	693b      	ldr	r3, [r7, #16]
        return;
 80038a2:	e07f      	b.n	80039a4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	095b      	lsrs	r3, r3, #5
 80038a8:	001a      	movs	r2, r3
 80038aa:	2301      	movs	r3, #1
 80038ac:	4013      	ands	r3, r2
 80038ae:	d014      	beq.n	80038da <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038b4:	2201      	movs	r2, #1
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60fb      	str	r3, [r7, #12]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2140      	movs	r1, #64	; 0x40
 80038d4:	438a      	bics	r2, r1
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	0a1b      	lsrs	r3, r3, #8
 80038de:	001a      	movs	r2, r3
 80038e0:	2301      	movs	r3, #1
 80038e2:	4013      	ands	r3, r2
 80038e4:	d00c      	beq.n	8003900 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	2208      	movs	r2, #8
 80038ec:	431a      	orrs	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003904:	2b00      	cmp	r3, #0
 8003906:	d04c      	beq.n	80039a2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	685a      	ldr	r2, [r3, #4]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	21e0      	movs	r1, #224	; 0xe0
 8003914:	438a      	bics	r2, r1
 8003916:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2251      	movs	r2, #81	; 0x51
 800391c:	2101      	movs	r1, #1
 800391e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	2202      	movs	r2, #2
 8003924:	4013      	ands	r3, r2
 8003926:	d103      	bne.n	8003930 <HAL_SPI_IRQHandler+0x17c>
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2201      	movs	r2, #1
 800392c:	4013      	ands	r3, r2
 800392e:	d032      	beq.n	8003996 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2103      	movs	r1, #3
 800393c:	438a      	bics	r2, r1
 800393e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003944:	2b00      	cmp	r3, #0
 8003946:	d010      	beq.n	800396a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_SPI_IRQHandler+0x1f8>)
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003954:	0018      	movs	r0, r3
 8003956:	f7fd fe99 	bl	800168c <HAL_DMA_Abort_IT>
 800395a:	1e03      	subs	r3, r0, #0
 800395c:	d005      	beq.n	800396a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	2240      	movs	r2, #64	; 0x40
 8003964:	431a      	orrs	r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396e:	2b00      	cmp	r3, #0
 8003970:	d016      	beq.n	80039a0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003976:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <HAL_SPI_IRQHandler+0x1f8>)
 8003978:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800397e:	0018      	movs	r0, r3
 8003980:	f7fd fe84 	bl	800168c <HAL_DMA_Abort_IT>
 8003984:	1e03      	subs	r3, r0, #0
 8003986:	d00b      	beq.n	80039a0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800398c:	2240      	movs	r2, #64	; 0x40
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8003994:	e004      	b.n	80039a0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	0018      	movs	r0, r3
 800399a:	f000 f809 	bl	80039b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800399e:	e000      	b.n	80039a2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80039a0:	46c0      	nop			; (mov r8, r8)
    return;
 80039a2:	46c0      	nop			; (mov r8, r8)
  }
}
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b008      	add	sp, #32
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			; (mov r8, r8)
 80039ac:	080039c1 	.word	0x080039c1

080039b0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80039b8:	46c0      	nop			; (mov r8, r8)
 80039ba:	46bd      	mov	sp, r7
 80039bc:	b002      	add	sp, #8
 80039be:	bd80      	pop	{r7, pc}

080039c0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039cc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	2200      	movs	r2, #0
 80039d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	0018      	movs	r0, r3
 80039de:	f7ff ffe7 	bl	80039b0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80039e2:	46c0      	nop			; (mov r8, r8)
 80039e4:	46bd      	mov	sp, r7
 80039e6:	b004      	add	sp, #16
 80039e8:	bd80      	pop	{r7, pc}

080039ea <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80039ea:	b580      	push	{r7, lr}
 80039ec:	b082      	sub	sp, #8
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	001a      	movs	r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039fe:	7812      	ldrb	r2, [r2, #0]
 8003a00:	b2d2      	uxtb	r2, r2
 8003a02:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a08:	1c5a      	adds	r2, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a12:	b29b      	uxth	r3, r3
 8003a14:	3b01      	subs	r3, #1
 8003a16:	b29a      	uxth	r2, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a20:	b29b      	uxth	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d110      	bne.n	8003a48 <SPI_2linesRxISR_8BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2160      	movs	r1, #96	; 0x60
 8003a32:	438a      	bics	r2, r1
 8003a34:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d103      	bne.n	8003a48 <SPI_2linesRxISR_8BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	0018      	movs	r0, r3
 8003a44:	f000 fa1e 	bl	8003e84 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	330c      	adds	r3, #12
 8003a62:	7812      	ldrb	r2, [r2, #0]
 8003a64:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	1c5a      	adds	r2, r3, #1
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	3b01      	subs	r3, #1
 8003a78:	b29a      	uxth	r2, r3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d110      	bne.n	8003aaa <SPI_2linesTxISR_8BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	685a      	ldr	r2, [r3, #4]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	2180      	movs	r1, #128	; 0x80
 8003a94:	438a      	bics	r2, r1
 8003a96:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d103      	bne.n	8003aaa <SPI_2linesTxISR_8BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f000 f9ed 	bl	8003e84 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003aaa:	46c0      	nop			; (mov r8, r8)
 8003aac:	46bd      	mov	sp, r7
 8003aae:	b002      	add	sp, #8
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b082      	sub	sp, #8
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	b292      	uxth	r2, r2
 8003ac6:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d110      	bne.n	8003b0c <SPI_2linesRxISR_16BIT+0x5a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	685a      	ldr	r2, [r3, #4]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2140      	movs	r1, #64	; 0x40
 8003af6:	438a      	bics	r2, r1
 8003af8:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003afe:	b29b      	uxth	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d103      	bne.n	8003b0c <SPI_2linesRxISR_16BIT+0x5a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	0018      	movs	r0, r3
 8003b08:	f000 f9bc 	bl	8003e84 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b0c:	46c0      	nop			; (mov r8, r8)
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	b002      	add	sp, #8
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b44:	b29b      	uxth	r3, r3
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d110      	bne.n	8003b6c <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2180      	movs	r1, #128	; 0x80
 8003b56:	438a      	bics	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d103      	bne.n	8003b6c <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	0018      	movs	r0, r3
 8003b68:	f000 f98c 	bl	8003e84 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	001a      	movs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b88:	7812      	ldrb	r2, [r2, #0]
 8003b8a:	b2d2      	uxtb	r2, r2
 8003b8c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	1c5a      	adds	r2, r3, #1
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	b29a      	uxth	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d103      	bne.n	8003bb8 <SPI_RxISR_8BIT+0x44>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 f9de 	bl	8003f74 <SPI_CloseRx_ISR>
  }
}
 8003bb8:	46c0      	nop			; (mov r8, r8)
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	b002      	add	sp, #8
 8003bbe:	bd80      	pop	{r7, pc}

08003bc0 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	b082      	sub	sp, #8
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bd2:	b292      	uxth	r2, r2
 8003bd4:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bda:	1c9a      	adds	r2, r3, #2
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d103      	bne.n	8003c00 <SPI_RxISR_16BIT+0x40>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	0018      	movs	r0, r3
 8003bfc:	f000 f9ba 	bl	8003f74 <SPI_CloseRx_ISR>
  }
}
 8003c00:	46c0      	nop			; (mov r8, r8)
 8003c02:	46bd      	mov	sp, r7
 8003c04:	b002      	add	sp, #8
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b088      	sub	sp, #32
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	60f8      	str	r0, [r7, #12]
 8003c10:	60b9      	str	r1, [r7, #8]
 8003c12:	603b      	str	r3, [r7, #0]
 8003c14:	1dfb      	adds	r3, r7, #7
 8003c16:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c18:	f7fd fc50 	bl	80014bc <HAL_GetTick>
 8003c1c:	0002      	movs	r2, r0
 8003c1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c20:	1a9b      	subs	r3, r3, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	18d3      	adds	r3, r2, r3
 8003c26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c28:	f7fd fc48 	bl	80014bc <HAL_GetTick>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c30:	4b3a      	ldr	r3, [pc, #232]	; (8003d1c <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	015b      	lsls	r3, r3, #5
 8003c36:	0d1b      	lsrs	r3, r3, #20
 8003c38:	69fa      	ldr	r2, [r7, #28]
 8003c3a:	4353      	muls	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c3e:	e058      	b.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	3301      	adds	r3, #1
 8003c44:	d055      	beq.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c46:	f7fd fc39 	bl	80014bc <HAL_GetTick>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	69fa      	ldr	r2, [r7, #28]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	d902      	bls.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x54>
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d142      	bne.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	685a      	ldr	r2, [r3, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	21e0      	movs	r1, #224	; 0xe0
 8003c68:	438a      	bics	r2, r1
 8003c6a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	685a      	ldr	r2, [r3, #4]
 8003c70:	2382      	movs	r3, #130	; 0x82
 8003c72:	005b      	lsls	r3, r3, #1
 8003c74:	429a      	cmp	r2, r3
 8003c76:	d113      	bne.n	8003ca0 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	2380      	movs	r3, #128	; 0x80
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d005      	beq.n	8003c90 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	00db      	lsls	r3, r3, #3
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d107      	bne.n	8003ca0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2140      	movs	r1, #64	; 0x40
 8003c9c:	438a      	bics	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ca4:	2380      	movs	r3, #128	; 0x80
 8003ca6:	019b      	lsls	r3, r3, #6
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d110      	bne.n	8003cce <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	491a      	ldr	r1, [pc, #104]	; (8003d20 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003cb8:	400a      	ands	r2, r1
 8003cba:	601a      	str	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	2180      	movs	r1, #128	; 0x80
 8003cc8:	0189      	lsls	r1, r1, #6
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2251      	movs	r2, #81	; 0x51
 8003cd2:	2101      	movs	r1, #1
 8003cd4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2250      	movs	r2, #80	; 0x50
 8003cda:	2100      	movs	r1, #0
 8003cdc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e017      	b.n	8003d12 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	68ba      	ldr	r2, [r7, #8]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	425a      	negs	r2, r3
 8003d02:	4153      	adcs	r3, r2
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	001a      	movs	r2, r3
 8003d08:	1dfb      	adds	r3, r7, #7
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d197      	bne.n	8003c40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b008      	add	sp, #32
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	20000004 	.word	0x20000004
 8003d20:	ffffdfff 	.word	0xffffdfff

08003d24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b086      	sub	sp, #24
 8003d28:	af02      	add	r7, sp, #8
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685a      	ldr	r2, [r3, #4]
 8003d34:	2382      	movs	r3, #130	; 0x82
 8003d36:	005b      	lsls	r3, r3, #1
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d113      	bne.n	8003d64 <SPI_EndRxTransaction+0x40>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	2380      	movs	r3, #128	; 0x80
 8003d42:	021b      	lsls	r3, r3, #8
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d005      	beq.n	8003d54 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	689a      	ldr	r2, [r3, #8]
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	00db      	lsls	r3, r3, #3
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d107      	bne.n	8003d64 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	438a      	bics	r2, r1
 8003d62:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	2382      	movs	r3, #130	; 0x82
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d12b      	bne.n	8003dc8 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	2380      	movs	r3, #128	; 0x80
 8003d76:	00db      	lsls	r3, r3, #3
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d012      	beq.n	8003da2 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	9300      	str	r3, [sp, #0]
 8003d84:	0013      	movs	r3, r2
 8003d86:	2200      	movs	r2, #0
 8003d88:	2180      	movs	r1, #128	; 0x80
 8003d8a:	f7ff ff3d 	bl	8003c08 <SPI_WaitFlagStateUntilTimeout>
 8003d8e:	1e03      	subs	r3, r0, #0
 8003d90:	d02d      	beq.n	8003dee <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	2220      	movs	r2, #32
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e026      	b.n	8003df0 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	9300      	str	r3, [sp, #0]
 8003daa:	0013      	movs	r3, r2
 8003dac:	2200      	movs	r2, #0
 8003dae:	2101      	movs	r1, #1
 8003db0:	f7ff ff2a 	bl	8003c08 <SPI_WaitFlagStateUntilTimeout>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d01a      	beq.n	8003dee <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e013      	b.n	8003df0 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	68f8      	ldr	r0, [r7, #12]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	0013      	movs	r3, r2
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	2101      	movs	r1, #1
 8003dd6:	f7ff ff17 	bl	8003c08 <SPI_WaitFlagStateUntilTimeout>
 8003dda:	1e03      	subs	r3, r0, #0
 8003ddc:	d007      	beq.n	8003dee <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003de2:	2220      	movs	r2, #32
 8003de4:	431a      	orrs	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e000      	b.n	8003df0 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	0018      	movs	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	b004      	add	sp, #16
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b088      	sub	sp, #32
 8003dfc:	af02      	add	r7, sp, #8
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e04:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <SPI_EndRxTxTransaction+0x84>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	491d      	ldr	r1, [pc, #116]	; (8003e80 <SPI_EndRxTxTransaction+0x88>)
 8003e0a:	0018      	movs	r0, r3
 8003e0c:	f7fc f98e 	bl	800012c <__udivsi3>
 8003e10:	0003      	movs	r3, r0
 8003e12:	001a      	movs	r2, r3
 8003e14:	0013      	movs	r3, r2
 8003e16:	015b      	lsls	r3, r3, #5
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	189b      	adds	r3, r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	2382      	movs	r3, #130	; 0x82
 8003e28:	005b      	lsls	r3, r3, #1
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d112      	bne.n	8003e54 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	68f8      	ldr	r0, [r7, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	0013      	movs	r3, r2
 8003e38:	2200      	movs	r2, #0
 8003e3a:	2180      	movs	r1, #128	; 0x80
 8003e3c:	f7ff fee4 	bl	8003c08 <SPI_WaitFlagStateUntilTimeout>
 8003e40:	1e03      	subs	r3, r0, #0
 8003e42:	d016      	beq.n	8003e72 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e48:	2220      	movs	r2, #32
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e00f      	b.n	8003e74 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00a      	beq.n	8003e70 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	3b01      	subs	r3, #1
 8003e5e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2280      	movs	r2, #128	; 0x80
 8003e68:	4013      	ands	r3, r2
 8003e6a:	2b80      	cmp	r3, #128	; 0x80
 8003e6c:	d0f2      	beq.n	8003e54 <SPI_EndRxTxTransaction+0x5c>
 8003e6e:	e000      	b.n	8003e72 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003e70:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	0018      	movs	r0, r3
 8003e76:	46bd      	mov	sp, r7
 8003e78:	b006      	add	sp, #24
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	20000004 	.word	0x20000004
 8003e80:	016e3600 	.word	0x016e3600

08003e84 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b086      	sub	sp, #24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 8003e8c:	4b37      	ldr	r3, [pc, #220]	; (8003f6c <SPI_CloseRxTx_ISR+0xe8>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4937      	ldr	r1, [pc, #220]	; (8003f70 <SPI_CloseRxTx_ISR+0xec>)
 8003e92:	0018      	movs	r0, r3
 8003e94:	f7fc f94a 	bl	800012c <__udivsi3>
 8003e98:	0003      	movs	r3, r0
 8003e9a:	001a      	movs	r2, r3
 8003e9c:	2364      	movs	r3, #100	; 0x64
 8003e9e:	4353      	muls	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ea2:	f7fd fb0b 	bl	80014bc <HAL_GetTick>
 8003ea6:	0003      	movs	r3, r0
 8003ea8:	617b      	str	r3, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2120      	movs	r1, #32
 8003eb6:	438a      	bics	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d106      	bne.n	8003ece <SPI_CloseRxTx_ISR+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec4:	2220      	movs	r2, #32
 8003ec6:	431a      	orrs	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003ecc:	e008      	b.n	8003ee0 <SPI_CloseRxTx_ISR+0x5c>
    }
    count--;
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2202      	movs	r2, #2
 8003edc:	4013      	ands	r3, r2
 8003ede:	d0ec      	beq.n	8003eba <SPI_CloseRxTx_ISR+0x36>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003ee0:	697a      	ldr	r2, [r7, #20]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2164      	movs	r1, #100	; 0x64
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff ff86 	bl	8003df8 <SPI_EndRxTxTransaction>
 8003eec:	1e03      	subs	r3, r0, #0
 8003eee:	d005      	beq.n	8003efc <SPI_CloseRxTx_ISR+0x78>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <SPI_CloseRxTx_ISR+0x96>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d117      	bne.n	8003f52 <SPI_CloseRxTx_ISR+0xce>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2251      	movs	r2, #81	; 0x51
 8003f26:	5c9b      	ldrb	r3, [r3, r2]
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d108      	bne.n	8003f40 <SPI_CloseRxTx_ISR+0xbc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2251      	movs	r2, #81	; 0x51
 8003f32:	2101      	movs	r1, #1
 8003f34:	5499      	strb	r1, [r3, r2]
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f7fc ffdd 	bl	8000ef8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003f3e:	e010      	b.n	8003f62 <SPI_CloseRxTx_ISR+0xde>
        hspi->State = HAL_SPI_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2251      	movs	r2, #81	; 0x51
 8003f44:	2101      	movs	r1, #1
 8003f46:	5499      	strb	r1, [r3, r2]
        HAL_SPI_TxRxCpltCallback(hspi);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7fc fff2 	bl	8000f34 <HAL_SPI_TxRxCpltCallback>
}
 8003f50:	e007      	b.n	8003f62 <SPI_CloseRxTx_ISR+0xde>
      hspi->State = HAL_SPI_STATE_READY;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2251      	movs	r2, #81	; 0x51
 8003f56:	2101      	movs	r1, #1
 8003f58:	5499      	strb	r1, [r3, r2]
      HAL_SPI_ErrorCallback(hspi);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	0018      	movs	r0, r3
 8003f5e:	f7ff fd27 	bl	80039b0 <HAL_SPI_ErrorCallback>
}
 8003f62:	46c0      	nop			; (mov r8, r8)
 8003f64:	46bd      	mov	sp, r7
 8003f66:	b006      	add	sp, #24
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	46c0      	nop			; (mov r8, r8)
 8003f6c:	20000004 	.word	0x20000004
 8003f70:	00005dc0 	.word	0x00005dc0

08003f74 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	685a      	ldr	r2, [r3, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2160      	movs	r1, #96	; 0x60
 8003f88:	438a      	bics	r2, r1
 8003f8a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8003f8c:	f7fd fa96 	bl	80014bc <HAL_GetTick>
 8003f90:	0002      	movs	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2164      	movs	r1, #100	; 0x64
 8003f96:	0018      	movs	r0, r3
 8003f98:	f7ff fec4 	bl	8003d24 <SPI_EndRxTransaction>
 8003f9c:	1e03      	subs	r3, r0, #0
 8003f9e:	d005      	beq.n	8003fac <SPI_CloseRx_ISR+0x38>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <SPI_CloseRx_ISR+0x56>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60fb      	str	r3, [r7, #12]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2251      	movs	r2, #81	; 0x51
 8003fce:	2101      	movs	r1, #1
 8003fd0:	5499      	strb	r1, [r3, r2]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	0018      	movs	r0, r3
 8003fde:	f7fc ff8b 	bl	8000ef8 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8003fe2:	e003      	b.n	8003fec <SPI_CloseRx_ISR+0x78>
      HAL_SPI_ErrorCallback(hspi);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f7ff fce2 	bl	80039b0 <HAL_SPI_ErrorCallback>
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b004      	add	sp, #16
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e044      	b.n	8004090 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800400a:	2b00      	cmp	r3, #0
 800400c:	d107      	bne.n	800401e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2274      	movs	r2, #116	; 0x74
 8004012:	2100      	movs	r1, #0
 8004014:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	0018      	movs	r0, r3
 800401a:	f7fd f8db 	bl	80011d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2224      	movs	r2, #36	; 0x24
 8004022:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	2101      	movs	r1, #1
 8004030:	438a      	bics	r2, r1
 8004032:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	0018      	movs	r0, r3
 8004038:	f000 f8d8 	bl	80041ec <UART_SetConfig>
 800403c:	0003      	movs	r3, r0
 800403e:	2b01      	cmp	r3, #1
 8004040:	d101      	bne.n	8004046 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e024      	b.n	8004090 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	0018      	movs	r0, r3
 8004052:	f000 fb6b 	bl	800472c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	490d      	ldr	r1, [pc, #52]	; (8004098 <HAL_UART_Init+0xa4>)
 8004062:	400a      	ands	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	689a      	ldr	r2, [r3, #8]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	212a      	movs	r1, #42	; 0x2a
 8004072:	438a      	bics	r2, r1
 8004074:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2101      	movs	r1, #1
 8004082:	430a      	orrs	r2, r1
 8004084:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	0018      	movs	r0, r3
 800408a:	f000 fc03 	bl	8004894 <UART_CheckIdleState>
 800408e:	0003      	movs	r3, r0
}
 8004090:	0018      	movs	r0, r3
 8004092:	46bd      	mov	sp, r7
 8004094:	b002      	add	sp, #8
 8004096:	bd80      	pop	{r7, pc}
 8004098:	ffffb7ff 	.word	0xffffb7ff

0800409c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b08a      	sub	sp, #40	; 0x28
 80040a0:	af02      	add	r7, sp, #8
 80040a2:	60f8      	str	r0, [r7, #12]
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	1dbb      	adds	r3, r7, #6
 80040aa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040b0:	2b20      	cmp	r3, #32
 80040b2:	d000      	beq.n	80040b6 <HAL_UART_Transmit+0x1a>
 80040b4:	e095      	b.n	80041e2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_UART_Transmit+0x28>
 80040bc:	1dbb      	adds	r3, r7, #6
 80040be:	881b      	ldrh	r3, [r3, #0]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e08d      	b.n	80041e4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	2380      	movs	r3, #128	; 0x80
 80040ce:	015b      	lsls	r3, r3, #5
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d109      	bne.n	80040e8 <HAL_UART_Transmit+0x4c>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	691b      	ldr	r3, [r3, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d105      	bne.n	80040e8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	2201      	movs	r2, #1
 80040e0:	4013      	ands	r3, r2
 80040e2:	d001      	beq.n	80040e8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e07d      	b.n	80041e4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2274      	movs	r2, #116	; 0x74
 80040ec:	5c9b      	ldrb	r3, [r3, r2]
 80040ee:	2b01      	cmp	r3, #1
 80040f0:	d101      	bne.n	80040f6 <HAL_UART_Transmit+0x5a>
 80040f2:	2302      	movs	r3, #2
 80040f4:	e076      	b.n	80041e4 <HAL_UART_Transmit+0x148>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2274      	movs	r2, #116	; 0x74
 80040fa:	2101      	movs	r1, #1
 80040fc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2280      	movs	r2, #128	; 0x80
 8004102:	2100      	movs	r1, #0
 8004104:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2221      	movs	r2, #33	; 0x21
 800410a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800410c:	f7fd f9d6 	bl	80014bc <HAL_GetTick>
 8004110:	0003      	movs	r3, r0
 8004112:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1dba      	adds	r2, r7, #6
 8004118:	2150      	movs	r1, #80	; 0x50
 800411a:	8812      	ldrh	r2, [r2, #0]
 800411c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1dba      	adds	r2, r7, #6
 8004122:	2152      	movs	r1, #82	; 0x52
 8004124:	8812      	ldrh	r2, [r2, #0]
 8004126:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	689a      	ldr	r2, [r3, #8]
 800412c:	2380      	movs	r3, #128	; 0x80
 800412e:	015b      	lsls	r3, r3, #5
 8004130:	429a      	cmp	r2, r3
 8004132:	d108      	bne.n	8004146 <HAL_UART_Transmit+0xaa>
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d104      	bne.n	8004146 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800413c:	2300      	movs	r3, #0
 800413e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	61bb      	str	r3, [r7, #24]
 8004144:	e003      	b.n	800414e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800414a:	2300      	movs	r3, #0
 800414c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2274      	movs	r2, #116	; 0x74
 8004152:	2100      	movs	r1, #0
 8004154:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8004156:	e02c      	b.n	80041b2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004158:	697a      	ldr	r2, [r7, #20]
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	0013      	movs	r3, r2
 8004162:	2200      	movs	r2, #0
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	f000 fbdd 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 800416a:	1e03      	subs	r3, r0, #0
 800416c:	d001      	beq.n	8004172 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e038      	b.n	80041e4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10b      	bne.n	8004190 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004178:	69bb      	ldr	r3, [r7, #24]
 800417a:	881b      	ldrh	r3, [r3, #0]
 800417c:	001a      	movs	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	05d2      	lsls	r2, r2, #23
 8004184:	0dd2      	lsrs	r2, r2, #23
 8004186:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	3302      	adds	r3, #2
 800418c:	61bb      	str	r3, [r7, #24]
 800418e:	e007      	b.n	80041a0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	781a      	ldrb	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	3301      	adds	r3, #1
 800419e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2252      	movs	r2, #82	; 0x52
 80041a4:	5a9b      	ldrh	r3, [r3, r2]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	3b01      	subs	r3, #1
 80041aa:	b299      	uxth	r1, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2252      	movs	r2, #82	; 0x52
 80041b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2252      	movs	r2, #82	; 0x52
 80041b6:	5a9b      	ldrh	r3, [r3, r2]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1cc      	bne.n	8004158 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	0013      	movs	r3, r2
 80041c8:	2200      	movs	r2, #0
 80041ca:	2140      	movs	r1, #64	; 0x40
 80041cc:	f000 fbaa 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 80041d0:	1e03      	subs	r3, r0, #0
 80041d2:	d001      	beq.n	80041d8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e005      	b.n	80041e4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2220      	movs	r2, #32
 80041dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	e000      	b.n	80041e4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80041e2:	2302      	movs	r3, #2
  }
}
 80041e4:	0018      	movs	r0, r3
 80041e6:	46bd      	mov	sp, r7
 80041e8:	b008      	add	sp, #32
 80041ea:	bd80      	pop	{r7, pc}

080041ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041ec:	b5b0      	push	{r4, r5, r7, lr}
 80041ee:	b08e      	sub	sp, #56	; 0x38
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041f4:	231a      	movs	r3, #26
 80041f6:	2218      	movs	r2, #24
 80041f8:	189b      	adds	r3, r3, r2
 80041fa:	19db      	adds	r3, r3, r7
 80041fc:	2200      	movs	r2, #0
 80041fe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	691b      	ldr	r3, [r3, #16]
 8004208:	431a      	orrs	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	431a      	orrs	r2, r3
 8004210:	69fb      	ldr	r3, [r7, #28]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	4313      	orrs	r3, r2
 8004216:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4ac3      	ldr	r2, [pc, #780]	; (800452c <UART_SetConfig+0x340>)
 8004220:	4013      	ands	r3, r2
 8004222:	0019      	movs	r1, r3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800422a:	430a      	orrs	r2, r1
 800422c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	4abe      	ldr	r2, [pc, #760]	; (8004530 <UART_SetConfig+0x344>)
 8004236:	4013      	ands	r3, r2
 8004238:	0019      	movs	r1, r3
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	699b      	ldr	r3, [r3, #24]
 800424a:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	4ab8      	ldr	r2, [pc, #736]	; (8004534 <UART_SetConfig+0x348>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d004      	beq.n	8004260 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800425c:	4313      	orrs	r3, r2
 800425e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	689b      	ldr	r3, [r3, #8]
 8004266:	4ab4      	ldr	r2, [pc, #720]	; (8004538 <UART_SetConfig+0x34c>)
 8004268:	4013      	ands	r3, r2
 800426a:	0019      	movs	r1, r3
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4ab0      	ldr	r2, [pc, #704]	; (800453c <UART_SetConfig+0x350>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d131      	bne.n	80042e4 <UART_SetConfig+0xf8>
 8004280:	4baf      	ldr	r3, [pc, #700]	; (8004540 <UART_SetConfig+0x354>)
 8004282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004284:	2203      	movs	r2, #3
 8004286:	4013      	ands	r3, r2
 8004288:	2b03      	cmp	r3, #3
 800428a:	d01d      	beq.n	80042c8 <UART_SetConfig+0xdc>
 800428c:	d823      	bhi.n	80042d6 <UART_SetConfig+0xea>
 800428e:	2b02      	cmp	r3, #2
 8004290:	d00c      	beq.n	80042ac <UART_SetConfig+0xc0>
 8004292:	d820      	bhi.n	80042d6 <UART_SetConfig+0xea>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d002      	beq.n	800429e <UART_SetConfig+0xb2>
 8004298:	2b01      	cmp	r3, #1
 800429a:	d00e      	beq.n	80042ba <UART_SetConfig+0xce>
 800429c:	e01b      	b.n	80042d6 <UART_SetConfig+0xea>
 800429e:	231b      	movs	r3, #27
 80042a0:	2218      	movs	r2, #24
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	19db      	adds	r3, r3, r7
 80042a6:	2201      	movs	r2, #1
 80042a8:	701a      	strb	r2, [r3, #0]
 80042aa:	e0b4      	b.n	8004416 <UART_SetConfig+0x22a>
 80042ac:	231b      	movs	r3, #27
 80042ae:	2218      	movs	r2, #24
 80042b0:	189b      	adds	r3, r3, r2
 80042b2:	19db      	adds	r3, r3, r7
 80042b4:	2202      	movs	r2, #2
 80042b6:	701a      	strb	r2, [r3, #0]
 80042b8:	e0ad      	b.n	8004416 <UART_SetConfig+0x22a>
 80042ba:	231b      	movs	r3, #27
 80042bc:	2218      	movs	r2, #24
 80042be:	189b      	adds	r3, r3, r2
 80042c0:	19db      	adds	r3, r3, r7
 80042c2:	2204      	movs	r2, #4
 80042c4:	701a      	strb	r2, [r3, #0]
 80042c6:	e0a6      	b.n	8004416 <UART_SetConfig+0x22a>
 80042c8:	231b      	movs	r3, #27
 80042ca:	2218      	movs	r2, #24
 80042cc:	189b      	adds	r3, r3, r2
 80042ce:	19db      	adds	r3, r3, r7
 80042d0:	2208      	movs	r2, #8
 80042d2:	701a      	strb	r2, [r3, #0]
 80042d4:	e09f      	b.n	8004416 <UART_SetConfig+0x22a>
 80042d6:	231b      	movs	r3, #27
 80042d8:	2218      	movs	r2, #24
 80042da:	189b      	adds	r3, r3, r2
 80042dc:	19db      	adds	r3, r3, r7
 80042de:	2210      	movs	r2, #16
 80042e0:	701a      	strb	r2, [r3, #0]
 80042e2:	e098      	b.n	8004416 <UART_SetConfig+0x22a>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a96      	ldr	r2, [pc, #600]	; (8004544 <UART_SetConfig+0x358>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d131      	bne.n	8004352 <UART_SetConfig+0x166>
 80042ee:	4b94      	ldr	r3, [pc, #592]	; (8004540 <UART_SetConfig+0x354>)
 80042f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042f2:	220c      	movs	r2, #12
 80042f4:	4013      	ands	r3, r2
 80042f6:	2b0c      	cmp	r3, #12
 80042f8:	d01d      	beq.n	8004336 <UART_SetConfig+0x14a>
 80042fa:	d823      	bhi.n	8004344 <UART_SetConfig+0x158>
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d00c      	beq.n	800431a <UART_SetConfig+0x12e>
 8004300:	d820      	bhi.n	8004344 <UART_SetConfig+0x158>
 8004302:	2b00      	cmp	r3, #0
 8004304:	d002      	beq.n	800430c <UART_SetConfig+0x120>
 8004306:	2b04      	cmp	r3, #4
 8004308:	d00e      	beq.n	8004328 <UART_SetConfig+0x13c>
 800430a:	e01b      	b.n	8004344 <UART_SetConfig+0x158>
 800430c:	231b      	movs	r3, #27
 800430e:	2218      	movs	r2, #24
 8004310:	189b      	adds	r3, r3, r2
 8004312:	19db      	adds	r3, r3, r7
 8004314:	2200      	movs	r2, #0
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e07d      	b.n	8004416 <UART_SetConfig+0x22a>
 800431a:	231b      	movs	r3, #27
 800431c:	2218      	movs	r2, #24
 800431e:	189b      	adds	r3, r3, r2
 8004320:	19db      	adds	r3, r3, r7
 8004322:	2202      	movs	r2, #2
 8004324:	701a      	strb	r2, [r3, #0]
 8004326:	e076      	b.n	8004416 <UART_SetConfig+0x22a>
 8004328:	231b      	movs	r3, #27
 800432a:	2218      	movs	r2, #24
 800432c:	189b      	adds	r3, r3, r2
 800432e:	19db      	adds	r3, r3, r7
 8004330:	2204      	movs	r2, #4
 8004332:	701a      	strb	r2, [r3, #0]
 8004334:	e06f      	b.n	8004416 <UART_SetConfig+0x22a>
 8004336:	231b      	movs	r3, #27
 8004338:	2218      	movs	r2, #24
 800433a:	189b      	adds	r3, r3, r2
 800433c:	19db      	adds	r3, r3, r7
 800433e:	2208      	movs	r2, #8
 8004340:	701a      	strb	r2, [r3, #0]
 8004342:	e068      	b.n	8004416 <UART_SetConfig+0x22a>
 8004344:	231b      	movs	r3, #27
 8004346:	2218      	movs	r2, #24
 8004348:	189b      	adds	r3, r3, r2
 800434a:	19db      	adds	r3, r3, r7
 800434c:	2210      	movs	r2, #16
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e061      	b.n	8004416 <UART_SetConfig+0x22a>
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a7c      	ldr	r2, [pc, #496]	; (8004548 <UART_SetConfig+0x35c>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d106      	bne.n	800436a <UART_SetConfig+0x17e>
 800435c:	231b      	movs	r3, #27
 800435e:	2218      	movs	r2, #24
 8004360:	189b      	adds	r3, r3, r2
 8004362:	19db      	adds	r3, r3, r7
 8004364:	2200      	movs	r2, #0
 8004366:	701a      	strb	r2, [r3, #0]
 8004368:	e055      	b.n	8004416 <UART_SetConfig+0x22a>
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a77      	ldr	r2, [pc, #476]	; (800454c <UART_SetConfig+0x360>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d106      	bne.n	8004382 <UART_SetConfig+0x196>
 8004374:	231b      	movs	r3, #27
 8004376:	2218      	movs	r2, #24
 8004378:	189b      	adds	r3, r3, r2
 800437a:	19db      	adds	r3, r3, r7
 800437c:	2200      	movs	r2, #0
 800437e:	701a      	strb	r2, [r3, #0]
 8004380:	e049      	b.n	8004416 <UART_SetConfig+0x22a>
 8004382:	69fb      	ldr	r3, [r7, #28]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a6b      	ldr	r2, [pc, #428]	; (8004534 <UART_SetConfig+0x348>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d13e      	bne.n	800440a <UART_SetConfig+0x21e>
 800438c:	4b6c      	ldr	r3, [pc, #432]	; (8004540 <UART_SetConfig+0x354>)
 800438e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004390:	23c0      	movs	r3, #192	; 0xc0
 8004392:	011b      	lsls	r3, r3, #4
 8004394:	4013      	ands	r3, r2
 8004396:	22c0      	movs	r2, #192	; 0xc0
 8004398:	0112      	lsls	r2, r2, #4
 800439a:	4293      	cmp	r3, r2
 800439c:	d027      	beq.n	80043ee <UART_SetConfig+0x202>
 800439e:	22c0      	movs	r2, #192	; 0xc0
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d82a      	bhi.n	80043fc <UART_SetConfig+0x210>
 80043a6:	2280      	movs	r2, #128	; 0x80
 80043a8:	0112      	lsls	r2, r2, #4
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d011      	beq.n	80043d2 <UART_SetConfig+0x1e6>
 80043ae:	2280      	movs	r2, #128	; 0x80
 80043b0:	0112      	lsls	r2, r2, #4
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d822      	bhi.n	80043fc <UART_SetConfig+0x210>
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d004      	beq.n	80043c4 <UART_SetConfig+0x1d8>
 80043ba:	2280      	movs	r2, #128	; 0x80
 80043bc:	00d2      	lsls	r2, r2, #3
 80043be:	4293      	cmp	r3, r2
 80043c0:	d00e      	beq.n	80043e0 <UART_SetConfig+0x1f4>
 80043c2:	e01b      	b.n	80043fc <UART_SetConfig+0x210>
 80043c4:	231b      	movs	r3, #27
 80043c6:	2218      	movs	r2, #24
 80043c8:	189b      	adds	r3, r3, r2
 80043ca:	19db      	adds	r3, r3, r7
 80043cc:	2200      	movs	r2, #0
 80043ce:	701a      	strb	r2, [r3, #0]
 80043d0:	e021      	b.n	8004416 <UART_SetConfig+0x22a>
 80043d2:	231b      	movs	r3, #27
 80043d4:	2218      	movs	r2, #24
 80043d6:	189b      	adds	r3, r3, r2
 80043d8:	19db      	adds	r3, r3, r7
 80043da:	2202      	movs	r2, #2
 80043dc:	701a      	strb	r2, [r3, #0]
 80043de:	e01a      	b.n	8004416 <UART_SetConfig+0x22a>
 80043e0:	231b      	movs	r3, #27
 80043e2:	2218      	movs	r2, #24
 80043e4:	189b      	adds	r3, r3, r2
 80043e6:	19db      	adds	r3, r3, r7
 80043e8:	2204      	movs	r2, #4
 80043ea:	701a      	strb	r2, [r3, #0]
 80043ec:	e013      	b.n	8004416 <UART_SetConfig+0x22a>
 80043ee:	231b      	movs	r3, #27
 80043f0:	2218      	movs	r2, #24
 80043f2:	189b      	adds	r3, r3, r2
 80043f4:	19db      	adds	r3, r3, r7
 80043f6:	2208      	movs	r2, #8
 80043f8:	701a      	strb	r2, [r3, #0]
 80043fa:	e00c      	b.n	8004416 <UART_SetConfig+0x22a>
 80043fc:	231b      	movs	r3, #27
 80043fe:	2218      	movs	r2, #24
 8004400:	189b      	adds	r3, r3, r2
 8004402:	19db      	adds	r3, r3, r7
 8004404:	2210      	movs	r2, #16
 8004406:	701a      	strb	r2, [r3, #0]
 8004408:	e005      	b.n	8004416 <UART_SetConfig+0x22a>
 800440a:	231b      	movs	r3, #27
 800440c:	2218      	movs	r2, #24
 800440e:	189b      	adds	r3, r3, r2
 8004410:	19db      	adds	r3, r3, r7
 8004412:	2210      	movs	r2, #16
 8004414:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004416:	69fb      	ldr	r3, [r7, #28]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a46      	ldr	r2, [pc, #280]	; (8004534 <UART_SetConfig+0x348>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d000      	beq.n	8004422 <UART_SetConfig+0x236>
 8004420:	e09a      	b.n	8004558 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004422:	231b      	movs	r3, #27
 8004424:	2218      	movs	r2, #24
 8004426:	189b      	adds	r3, r3, r2
 8004428:	19db      	adds	r3, r3, r7
 800442a:	781b      	ldrb	r3, [r3, #0]
 800442c:	2b08      	cmp	r3, #8
 800442e:	d01d      	beq.n	800446c <UART_SetConfig+0x280>
 8004430:	dc20      	bgt.n	8004474 <UART_SetConfig+0x288>
 8004432:	2b04      	cmp	r3, #4
 8004434:	d015      	beq.n	8004462 <UART_SetConfig+0x276>
 8004436:	dc1d      	bgt.n	8004474 <UART_SetConfig+0x288>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <UART_SetConfig+0x256>
 800443c:	2b02      	cmp	r3, #2
 800443e:	d005      	beq.n	800444c <UART_SetConfig+0x260>
 8004440:	e018      	b.n	8004474 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004442:	f7fe fe5b 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004446:	0003      	movs	r3, r0
 8004448:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800444a:	e01c      	b.n	8004486 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800444c:	4b3c      	ldr	r3, [pc, #240]	; (8004540 <UART_SetConfig+0x354>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2210      	movs	r2, #16
 8004452:	4013      	ands	r3, r2
 8004454:	d002      	beq.n	800445c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004456:	4b3e      	ldr	r3, [pc, #248]	; (8004550 <UART_SetConfig+0x364>)
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800445a:	e014      	b.n	8004486 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800445c:	4b3d      	ldr	r3, [pc, #244]	; (8004554 <UART_SetConfig+0x368>)
 800445e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004460:	e011      	b.n	8004486 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004462:	f7fe fd9d 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8004466:	0003      	movs	r3, r0
 8004468:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800446a:	e00c      	b.n	8004486 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446c:	2380      	movs	r3, #128	; 0x80
 800446e:	021b      	lsls	r3, r3, #8
 8004470:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004472:	e008      	b.n	8004486 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004478:	231a      	movs	r3, #26
 800447a:	2218      	movs	r2, #24
 800447c:	189b      	adds	r3, r3, r2
 800447e:	19db      	adds	r3, r3, r7
 8004480:	2201      	movs	r2, #1
 8004482:	701a      	strb	r2, [r3, #0]
        break;
 8004484:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004488:	2b00      	cmp	r3, #0
 800448a:	d100      	bne.n	800448e <UART_SetConfig+0x2a2>
 800448c:	e134      	b.n	80046f8 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	685a      	ldr	r2, [r3, #4]
 8004492:	0013      	movs	r3, r2
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	189b      	adds	r3, r3, r2
 8004498:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800449a:	429a      	cmp	r2, r3
 800449c:	d305      	bcc.n	80044aa <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80044a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d906      	bls.n	80044b8 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80044aa:	231a      	movs	r3, #26
 80044ac:	2218      	movs	r2, #24
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	19db      	adds	r3, r3, r7
 80044b2:	2201      	movs	r2, #1
 80044b4:	701a      	strb	r2, [r3, #0]
 80044b6:	e11f      	b.n	80046f8 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80044b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]
 80044c0:	6939      	ldr	r1, [r7, #16]
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	000b      	movs	r3, r1
 80044c6:	0e1b      	lsrs	r3, r3, #24
 80044c8:	0010      	movs	r0, r2
 80044ca:	0205      	lsls	r5, r0, #8
 80044cc:	431d      	orrs	r5, r3
 80044ce:	000b      	movs	r3, r1
 80044d0:	021c      	lsls	r4, r3, #8
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	2300      	movs	r3, #0
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	68b8      	ldr	r0, [r7, #8]
 80044e0:	68f9      	ldr	r1, [r7, #12]
 80044e2:	1900      	adds	r0, r0, r4
 80044e4:	4169      	adcs	r1, r5
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	2300      	movs	r3, #0
 80044ee:	607b      	str	r3, [r7, #4]
 80044f0:	683a      	ldr	r2, [r7, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f7fb fea6 	bl	8000244 <__aeabi_uldivmod>
 80044f8:	0002      	movs	r2, r0
 80044fa:	000b      	movs	r3, r1
 80044fc:	0013      	movs	r3, r2
 80044fe:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004502:	23c0      	movs	r3, #192	; 0xc0
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	429a      	cmp	r2, r3
 8004508:	d309      	bcc.n	800451e <UART_SetConfig+0x332>
 800450a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	035b      	lsls	r3, r3, #13
 8004510:	429a      	cmp	r2, r3
 8004512:	d204      	bcs.n	800451e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800451a:	60da      	str	r2, [r3, #12]
 800451c:	e0ec      	b.n	80046f8 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 800451e:	231a      	movs	r3, #26
 8004520:	2218      	movs	r2, #24
 8004522:	189b      	adds	r3, r3, r2
 8004524:	19db      	adds	r3, r3, r7
 8004526:	2201      	movs	r2, #1
 8004528:	701a      	strb	r2, [r3, #0]
 800452a:	e0e5      	b.n	80046f8 <UART_SetConfig+0x50c>
 800452c:	efff69f3 	.word	0xefff69f3
 8004530:	ffffcfff 	.word	0xffffcfff
 8004534:	40004800 	.word	0x40004800
 8004538:	fffff4ff 	.word	0xfffff4ff
 800453c:	40013800 	.word	0x40013800
 8004540:	40021000 	.word	0x40021000
 8004544:	40004400 	.word	0x40004400
 8004548:	40004c00 	.word	0x40004c00
 800454c:	40005000 	.word	0x40005000
 8004550:	003d0900 	.word	0x003d0900
 8004554:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	69da      	ldr	r2, [r3, #28]
 800455c:	2380      	movs	r3, #128	; 0x80
 800455e:	021b      	lsls	r3, r3, #8
 8004560:	429a      	cmp	r2, r3
 8004562:	d000      	beq.n	8004566 <UART_SetConfig+0x37a>
 8004564:	e071      	b.n	800464a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004566:	231b      	movs	r3, #27
 8004568:	2218      	movs	r2, #24
 800456a:	189b      	adds	r3, r3, r2
 800456c:	19db      	adds	r3, r3, r7
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b08      	cmp	r3, #8
 8004572:	d822      	bhi.n	80045ba <UART_SetConfig+0x3ce>
 8004574:	009a      	lsls	r2, r3, #2
 8004576:	4b68      	ldr	r3, [pc, #416]	; (8004718 <UART_SetConfig+0x52c>)
 8004578:	18d3      	adds	r3, r2, r3
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800457e:	f7fe fdbd 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004582:	0003      	movs	r3, r0
 8004584:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004586:	e021      	b.n	80045cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004588:	f7fe fdce 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 800458c:	0003      	movs	r3, r0
 800458e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004590:	e01c      	b.n	80045cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004592:	4b62      	ldr	r3, [pc, #392]	; (800471c <UART_SetConfig+0x530>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2210      	movs	r2, #16
 8004598:	4013      	ands	r3, r2
 800459a:	d002      	beq.n	80045a2 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800459c:	4b60      	ldr	r3, [pc, #384]	; (8004720 <UART_SetConfig+0x534>)
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80045a0:	e014      	b.n	80045cc <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80045a2:	4b60      	ldr	r3, [pc, #384]	; (8004724 <UART_SetConfig+0x538>)
 80045a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045a6:	e011      	b.n	80045cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045a8:	f7fe fcfa 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 80045ac:	0003      	movs	r3, r0
 80045ae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045b0:	e00c      	b.n	80045cc <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045b2:	2380      	movs	r3, #128	; 0x80
 80045b4:	021b      	lsls	r3, r3, #8
 80045b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80045b8:	e008      	b.n	80045cc <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80045be:	231a      	movs	r3, #26
 80045c0:	2218      	movs	r2, #24
 80045c2:	189b      	adds	r3, r3, r2
 80045c4:	19db      	adds	r3, r3, r7
 80045c6:	2201      	movs	r2, #1
 80045c8:	701a      	strb	r2, [r3, #0]
        break;
 80045ca:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d100      	bne.n	80045d4 <UART_SetConfig+0x3e8>
 80045d2:	e091      	b.n	80046f8 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80045d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d6:	005a      	lsls	r2, r3, #1
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	085b      	lsrs	r3, r3, #1
 80045de:	18d2      	adds	r2, r2, r3
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	0019      	movs	r1, r3
 80045e6:	0010      	movs	r0, r2
 80045e8:	f7fb fda0 	bl	800012c <__udivsi3>
 80045ec:	0003      	movs	r3, r0
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	2b0f      	cmp	r3, #15
 80045f6:	d921      	bls.n	800463c <UART_SetConfig+0x450>
 80045f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80045fa:	2380      	movs	r3, #128	; 0x80
 80045fc:	025b      	lsls	r3, r3, #9
 80045fe:	429a      	cmp	r2, r3
 8004600:	d21c      	bcs.n	800463c <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	b29a      	uxth	r2, r3
 8004606:	200e      	movs	r0, #14
 8004608:	2418      	movs	r4, #24
 800460a:	1903      	adds	r3, r0, r4
 800460c:	19db      	adds	r3, r3, r7
 800460e:	210f      	movs	r1, #15
 8004610:	438a      	bics	r2, r1
 8004612:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	b29b      	uxth	r3, r3
 800461a:	2207      	movs	r2, #7
 800461c:	4013      	ands	r3, r2
 800461e:	b299      	uxth	r1, r3
 8004620:	1903      	adds	r3, r0, r4
 8004622:	19db      	adds	r3, r3, r7
 8004624:	1902      	adds	r2, r0, r4
 8004626:	19d2      	adds	r2, r2, r7
 8004628:	8812      	ldrh	r2, [r2, #0]
 800462a:	430a      	orrs	r2, r1
 800462c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	1902      	adds	r2, r0, r4
 8004634:	19d2      	adds	r2, r2, r7
 8004636:	8812      	ldrh	r2, [r2, #0]
 8004638:	60da      	str	r2, [r3, #12]
 800463a:	e05d      	b.n	80046f8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 800463c:	231a      	movs	r3, #26
 800463e:	2218      	movs	r2, #24
 8004640:	189b      	adds	r3, r3, r2
 8004642:	19db      	adds	r3, r3, r7
 8004644:	2201      	movs	r2, #1
 8004646:	701a      	strb	r2, [r3, #0]
 8004648:	e056      	b.n	80046f8 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800464a:	231b      	movs	r3, #27
 800464c:	2218      	movs	r2, #24
 800464e:	189b      	adds	r3, r3, r2
 8004650:	19db      	adds	r3, r3, r7
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b08      	cmp	r3, #8
 8004656:	d822      	bhi.n	800469e <UART_SetConfig+0x4b2>
 8004658:	009a      	lsls	r2, r3, #2
 800465a:	4b33      	ldr	r3, [pc, #204]	; (8004728 <UART_SetConfig+0x53c>)
 800465c:	18d3      	adds	r3, r2, r3
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004662:	f7fe fd4b 	bl	80030fc <HAL_RCC_GetPCLK1Freq>
 8004666:	0003      	movs	r3, r0
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800466a:	e021      	b.n	80046b0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800466c:	f7fe fd5c 	bl	8003128 <HAL_RCC_GetPCLK2Freq>
 8004670:	0003      	movs	r3, r0
 8004672:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004674:	e01c      	b.n	80046b0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004676:	4b29      	ldr	r3, [pc, #164]	; (800471c <UART_SetConfig+0x530>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	2210      	movs	r2, #16
 800467c:	4013      	ands	r3, r2
 800467e:	d002      	beq.n	8004686 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004680:	4b27      	ldr	r3, [pc, #156]	; (8004720 <UART_SetConfig+0x534>)
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004684:	e014      	b.n	80046b0 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8004686:	4b27      	ldr	r3, [pc, #156]	; (8004724 <UART_SetConfig+0x538>)
 8004688:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800468a:	e011      	b.n	80046b0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468c:	f7fe fc88 	bl	8002fa0 <HAL_RCC_GetSysClockFreq>
 8004690:	0003      	movs	r3, r0
 8004692:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004694:	e00c      	b.n	80046b0 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004696:	2380      	movs	r3, #128	; 0x80
 8004698:	021b      	lsls	r3, r3, #8
 800469a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800469c:	e008      	b.n	80046b0 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 800469e:	2300      	movs	r3, #0
 80046a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80046a2:	231a      	movs	r3, #26
 80046a4:	2218      	movs	r2, #24
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	19db      	adds	r3, r3, r7
 80046aa:	2201      	movs	r2, #1
 80046ac:	701a      	strb	r2, [r3, #0]
        break;
 80046ae:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d020      	beq.n	80046f8 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	085a      	lsrs	r2, r3, #1
 80046bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046be:	18d2      	adds	r2, r2, r3
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	0019      	movs	r1, r3
 80046c6:	0010      	movs	r0, r2
 80046c8:	f7fb fd30 	bl	800012c <__udivsi3>
 80046cc:	0003      	movs	r3, r0
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d4:	2b0f      	cmp	r3, #15
 80046d6:	d909      	bls.n	80046ec <UART_SetConfig+0x500>
 80046d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046da:	2380      	movs	r3, #128	; 0x80
 80046dc:	025b      	lsls	r3, r3, #9
 80046de:	429a      	cmp	r2, r3
 80046e0:	d204      	bcs.n	80046ec <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046e8:	60da      	str	r2, [r3, #12]
 80046ea:	e005      	b.n	80046f8 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80046ec:	231a      	movs	r3, #26
 80046ee:	2218      	movs	r2, #24
 80046f0:	189b      	adds	r3, r3, r2
 80046f2:	19db      	adds	r3, r3, r7
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2200      	movs	r2, #0
 80046fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80046fe:	69fb      	ldr	r3, [r7, #28]
 8004700:	2200      	movs	r2, #0
 8004702:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004704:	231a      	movs	r3, #26
 8004706:	2218      	movs	r2, #24
 8004708:	189b      	adds	r3, r3, r2
 800470a:	19db      	adds	r3, r3, r7
 800470c:	781b      	ldrb	r3, [r3, #0]
}
 800470e:	0018      	movs	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	b00e      	add	sp, #56	; 0x38
 8004714:	bdb0      	pop	{r4, r5, r7, pc}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	08005dc8 	.word	0x08005dc8
 800471c:	40021000 	.word	0x40021000
 8004720:	003d0900 	.word	0x003d0900
 8004724:	00f42400 	.word	0x00f42400
 8004728:	08005dec 	.word	0x08005dec

0800472c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	2201      	movs	r2, #1
 800473a:	4013      	ands	r3, r2
 800473c:	d00b      	beq.n	8004756 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	4a4a      	ldr	r2, [pc, #296]	; (8004870 <UART_AdvFeatureConfig+0x144>)
 8004746:	4013      	ands	r3, r2
 8004748:	0019      	movs	r1, r3
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	430a      	orrs	r2, r1
 8004754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475a:	2202      	movs	r2, #2
 800475c:	4013      	ands	r3, r2
 800475e:	d00b      	beq.n	8004778 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	4a43      	ldr	r2, [pc, #268]	; (8004874 <UART_AdvFeatureConfig+0x148>)
 8004768:	4013      	ands	r3, r2
 800476a:	0019      	movs	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2204      	movs	r2, #4
 800477e:	4013      	ands	r3, r2
 8004780:	d00b      	beq.n	800479a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	4a3b      	ldr	r2, [pc, #236]	; (8004878 <UART_AdvFeatureConfig+0x14c>)
 800478a:	4013      	ands	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	430a      	orrs	r2, r1
 8004798:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	2208      	movs	r2, #8
 80047a0:	4013      	ands	r3, r2
 80047a2:	d00b      	beq.n	80047bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a34      	ldr	r2, [pc, #208]	; (800487c <UART_AdvFeatureConfig+0x150>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	0019      	movs	r1, r3
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c0:	2210      	movs	r2, #16
 80047c2:	4013      	ands	r3, r2
 80047c4:	d00b      	beq.n	80047de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	4a2c      	ldr	r2, [pc, #176]	; (8004880 <UART_AdvFeatureConfig+0x154>)
 80047ce:	4013      	ands	r3, r2
 80047d0:	0019      	movs	r1, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	430a      	orrs	r2, r1
 80047dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e2:	2220      	movs	r2, #32
 80047e4:	4013      	ands	r3, r2
 80047e6:	d00b      	beq.n	8004800 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4a25      	ldr	r2, [pc, #148]	; (8004884 <UART_AdvFeatureConfig+0x158>)
 80047f0:	4013      	ands	r3, r2
 80047f2:	0019      	movs	r1, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	2240      	movs	r2, #64	; 0x40
 8004806:	4013      	ands	r3, r2
 8004808:	d01d      	beq.n	8004846 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	4a1d      	ldr	r2, [pc, #116]	; (8004888 <UART_AdvFeatureConfig+0x15c>)
 8004812:	4013      	ands	r3, r2
 8004814:	0019      	movs	r1, r3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	430a      	orrs	r2, r1
 8004820:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004826:	2380      	movs	r3, #128	; 0x80
 8004828:	035b      	lsls	r3, r3, #13
 800482a:	429a      	cmp	r2, r3
 800482c:	d10b      	bne.n	8004846 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	4a15      	ldr	r2, [pc, #84]	; (800488c <UART_AdvFeatureConfig+0x160>)
 8004836:	4013      	ands	r3, r2
 8004838:	0019      	movs	r1, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	4013      	ands	r3, r2
 800484e:	d00b      	beq.n	8004868 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <UART_AdvFeatureConfig+0x164>)
 8004858:	4013      	ands	r3, r2
 800485a:	0019      	movs	r1, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }
}
 8004868:	46c0      	nop			; (mov r8, r8)
 800486a:	46bd      	mov	sp, r7
 800486c:	b002      	add	sp, #8
 800486e:	bd80      	pop	{r7, pc}
 8004870:	fffdffff 	.word	0xfffdffff
 8004874:	fffeffff 	.word	0xfffeffff
 8004878:	fffbffff 	.word	0xfffbffff
 800487c:	ffff7fff 	.word	0xffff7fff
 8004880:	ffffefff 	.word	0xffffefff
 8004884:	ffffdfff 	.word	0xffffdfff
 8004888:	ffefffff 	.word	0xffefffff
 800488c:	ff9fffff 	.word	0xff9fffff
 8004890:	fff7ffff 	.word	0xfff7ffff

08004894 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af02      	add	r7, sp, #8
 800489a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2280      	movs	r2, #128	; 0x80
 80048a0:	2100      	movs	r1, #0
 80048a2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048a4:	f7fc fe0a 	bl	80014bc <HAL_GetTick>
 80048a8:	0003      	movs	r3, r0
 80048aa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2208      	movs	r2, #8
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b08      	cmp	r3, #8
 80048b8:	d10c      	bne.n	80048d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2280      	movs	r2, #128	; 0x80
 80048be:	0391      	lsls	r1, r2, #14
 80048c0:	6878      	ldr	r0, [r7, #4]
 80048c2:	4a17      	ldr	r2, [pc, #92]	; (8004920 <UART_CheckIdleState+0x8c>)
 80048c4:	9200      	str	r2, [sp, #0]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f000 f82c 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 80048cc:	1e03      	subs	r3, r0, #0
 80048ce:	d001      	beq.n	80048d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e021      	b.n	8004918 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2204      	movs	r2, #4
 80048dc:	4013      	ands	r3, r2
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d10c      	bne.n	80048fc <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2280      	movs	r2, #128	; 0x80
 80048e6:	03d1      	lsls	r1, r2, #15
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	4a0d      	ldr	r2, [pc, #52]	; (8004920 <UART_CheckIdleState+0x8c>)
 80048ec:	9200      	str	r2, [sp, #0]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f000 f818 	bl	8004924 <UART_WaitOnFlagUntilTimeout>
 80048f4:	1e03      	subs	r3, r0, #0
 80048f6:	d001      	beq.n	80048fc <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e00d      	b.n	8004918 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2220      	movs	r2, #32
 8004906:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2274      	movs	r2, #116	; 0x74
 8004912:	2100      	movs	r1, #0
 8004914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	0018      	movs	r0, r3
 800491a:	46bd      	mov	sp, r7
 800491c:	b004      	add	sp, #16
 800491e:	bd80      	pop	{r7, pc}
 8004920:	01ffffff 	.word	0x01ffffff

08004924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b094      	sub	sp, #80	; 0x50
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	603b      	str	r3, [r7, #0]
 8004930:	1dfb      	adds	r3, r7, #7
 8004932:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004934:	e0a3      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004936:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004938:	3301      	adds	r3, #1
 800493a:	d100      	bne.n	800493e <UART_WaitOnFlagUntilTimeout+0x1a>
 800493c:	e09f      	b.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fc fdbd 	bl	80014bc <HAL_GetTick>
 8004942:	0002      	movs	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <UART_WaitOnFlagUntilTimeout+0x30>
 800494e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004950:	2b00      	cmp	r3, #0
 8004952:	d13d      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004954:	f3ef 8310 	mrs	r3, PRIMASK
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800495c:	647b      	str	r3, [r7, #68]	; 0x44
 800495e:	2301      	movs	r3, #1
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004964:	f383 8810 	msr	PRIMASK, r3
}
 8004968:	46c0      	nop			; (mov r8, r8)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	494c      	ldr	r1, [pc, #304]	; (8004aa8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004976:	400a      	ands	r2, r1
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	f383 8810 	msr	PRIMASK, r3
}
 8004984:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004986:	f3ef 8310 	mrs	r3, PRIMASK
 800498a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800498c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498e:	643b      	str	r3, [r7, #64]	; 0x40
 8004990:	2301      	movs	r3, #1
 8004992:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004996:	f383 8810 	msr	PRIMASK, r3
}
 800499a:	46c0      	nop			; (mov r8, r8)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	689a      	ldr	r2, [r3, #8]
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2101      	movs	r1, #1
 80049a8:	438a      	bics	r2, r1
 80049aa:	609a      	str	r2, [r3, #8]
 80049ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049b2:	f383 8810 	msr	PRIMASK, r3
}
 80049b6:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2220      	movs	r2, #32
 80049bc:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2274      	movs	r2, #116	; 0x74
 80049c8:	2100      	movs	r1, #0
 80049ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e067      	b.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2204      	movs	r2, #4
 80049d8:	4013      	ands	r3, r2
 80049da:	d050      	beq.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	401a      	ands	r2, r3
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d146      	bne.n	8004a7e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fa:	f3ef 8310 	mrs	r3, PRIMASK
 80049fe:	613b      	str	r3, [r7, #16]
  return(result);
 8004a00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a04:	2301      	movs	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4923      	ldr	r1, [pc, #140]	; (8004aa8 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f383 8810 	msr	PRIMASK, r3
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a30:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a32:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a36:	2301      	movs	r3, #1
 8004a38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	438a      	bics	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2220      	movs	r2, #32
 8004a62:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2280      	movs	r2, #128	; 0x80
 8004a6e:	2120      	movs	r1, #32
 8004a70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2274      	movs	r2, #116	; 0x74
 8004a76:	2100      	movs	r1, #0
 8004a78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e010      	b.n	8004aa0 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	69db      	ldr	r3, [r3, #28]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	4013      	ands	r3, r2
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	1ad3      	subs	r3, r2, r3
 8004a8c:	425a      	negs	r2, r3
 8004a8e:	4153      	adcs	r3, r2
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	001a      	movs	r2, r3
 8004a94:	1dfb      	adds	r3, r7, #7
 8004a96:	781b      	ldrb	r3, [r3, #0]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d100      	bne.n	8004a9e <UART_WaitOnFlagUntilTimeout+0x17a>
 8004a9c:	e74b      	b.n	8004936 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	0018      	movs	r0, r3
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	b014      	add	sp, #80	; 0x50
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	fffffe5f 	.word	0xfffffe5f

08004aac <__errno>:
 8004aac:	4b01      	ldr	r3, [pc, #4]	; (8004ab4 <__errno+0x8>)
 8004aae:	6818      	ldr	r0, [r3, #0]
 8004ab0:	4770      	bx	lr
 8004ab2:	46c0      	nop			; (mov r8, r8)
 8004ab4:	20000010 	.word	0x20000010

08004ab8 <__libc_init_array>:
 8004ab8:	b570      	push	{r4, r5, r6, lr}
 8004aba:	2600      	movs	r6, #0
 8004abc:	4d0c      	ldr	r5, [pc, #48]	; (8004af0 <__libc_init_array+0x38>)
 8004abe:	4c0d      	ldr	r4, [pc, #52]	; (8004af4 <__libc_init_array+0x3c>)
 8004ac0:	1b64      	subs	r4, r4, r5
 8004ac2:	10a4      	asrs	r4, r4, #2
 8004ac4:	42a6      	cmp	r6, r4
 8004ac6:	d109      	bne.n	8004adc <__libc_init_array+0x24>
 8004ac8:	2600      	movs	r6, #0
 8004aca:	f000 fc8b 	bl	80053e4 <_init>
 8004ace:	4d0a      	ldr	r5, [pc, #40]	; (8004af8 <__libc_init_array+0x40>)
 8004ad0:	4c0a      	ldr	r4, [pc, #40]	; (8004afc <__libc_init_array+0x44>)
 8004ad2:	1b64      	subs	r4, r4, r5
 8004ad4:	10a4      	asrs	r4, r4, #2
 8004ad6:	42a6      	cmp	r6, r4
 8004ad8:	d105      	bne.n	8004ae6 <__libc_init_array+0x2e>
 8004ada:	bd70      	pop	{r4, r5, r6, pc}
 8004adc:	00b3      	lsls	r3, r6, #2
 8004ade:	58eb      	ldr	r3, [r5, r3]
 8004ae0:	4798      	blx	r3
 8004ae2:	3601      	adds	r6, #1
 8004ae4:	e7ee      	b.n	8004ac4 <__libc_init_array+0xc>
 8004ae6:	00b3      	lsls	r3, r6, #2
 8004ae8:	58eb      	ldr	r3, [r5, r3]
 8004aea:	4798      	blx	r3
 8004aec:	3601      	adds	r6, #1
 8004aee:	e7f2      	b.n	8004ad6 <__libc_init_array+0x1e>
 8004af0:	08005eac 	.word	0x08005eac
 8004af4:	08005eac 	.word	0x08005eac
 8004af8:	08005eac 	.word	0x08005eac
 8004afc:	08005eb0 	.word	0x08005eb0

08004b00 <memcpy>:
 8004b00:	2300      	movs	r3, #0
 8004b02:	b510      	push	{r4, lr}
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d100      	bne.n	8004b0a <memcpy+0xa>
 8004b08:	bd10      	pop	{r4, pc}
 8004b0a:	5ccc      	ldrb	r4, [r1, r3]
 8004b0c:	54c4      	strb	r4, [r0, r3]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	e7f8      	b.n	8004b04 <memcpy+0x4>

08004b12 <memset>:
 8004b12:	0003      	movs	r3, r0
 8004b14:	1882      	adds	r2, r0, r2
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d100      	bne.n	8004b1c <memset+0xa>
 8004b1a:	4770      	bx	lr
 8004b1c:	7019      	strb	r1, [r3, #0]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	e7f9      	b.n	8004b16 <memset+0x4>
	...

08004b24 <siprintf>:
 8004b24:	b40e      	push	{r1, r2, r3}
 8004b26:	b500      	push	{lr}
 8004b28:	490b      	ldr	r1, [pc, #44]	; (8004b58 <siprintf+0x34>)
 8004b2a:	b09c      	sub	sp, #112	; 0x70
 8004b2c:	ab1d      	add	r3, sp, #116	; 0x74
 8004b2e:	9002      	str	r0, [sp, #8]
 8004b30:	9006      	str	r0, [sp, #24]
 8004b32:	9107      	str	r1, [sp, #28]
 8004b34:	9104      	str	r1, [sp, #16]
 8004b36:	4809      	ldr	r0, [pc, #36]	; (8004b5c <siprintf+0x38>)
 8004b38:	4909      	ldr	r1, [pc, #36]	; (8004b60 <siprintf+0x3c>)
 8004b3a:	cb04      	ldmia	r3!, {r2}
 8004b3c:	9105      	str	r1, [sp, #20]
 8004b3e:	6800      	ldr	r0, [r0, #0]
 8004b40:	a902      	add	r1, sp, #8
 8004b42:	9301      	str	r3, [sp, #4]
 8004b44:	f000 f870 	bl	8004c28 <_svfiprintf_r>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9a02      	ldr	r2, [sp, #8]
 8004b4c:	7013      	strb	r3, [r2, #0]
 8004b4e:	b01c      	add	sp, #112	; 0x70
 8004b50:	bc08      	pop	{r3}
 8004b52:	b003      	add	sp, #12
 8004b54:	4718      	bx	r3
 8004b56:	46c0      	nop			; (mov r8, r8)
 8004b58:	7fffffff 	.word	0x7fffffff
 8004b5c:	20000010 	.word	0x20000010
 8004b60:	ffff0208 	.word	0xffff0208

08004b64 <__ssputs_r>:
 8004b64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b66:	688e      	ldr	r6, [r1, #8]
 8004b68:	b085      	sub	sp, #20
 8004b6a:	0007      	movs	r7, r0
 8004b6c:	000c      	movs	r4, r1
 8004b6e:	9203      	str	r2, [sp, #12]
 8004b70:	9301      	str	r3, [sp, #4]
 8004b72:	429e      	cmp	r6, r3
 8004b74:	d83c      	bhi.n	8004bf0 <__ssputs_r+0x8c>
 8004b76:	2390      	movs	r3, #144	; 0x90
 8004b78:	898a      	ldrh	r2, [r1, #12]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	421a      	tst	r2, r3
 8004b7e:	d034      	beq.n	8004bea <__ssputs_r+0x86>
 8004b80:	6909      	ldr	r1, [r1, #16]
 8004b82:	6823      	ldr	r3, [r4, #0]
 8004b84:	6960      	ldr	r0, [r4, #20]
 8004b86:	1a5b      	subs	r3, r3, r1
 8004b88:	9302      	str	r3, [sp, #8]
 8004b8a:	2303      	movs	r3, #3
 8004b8c:	4343      	muls	r3, r0
 8004b8e:	0fdd      	lsrs	r5, r3, #31
 8004b90:	18ed      	adds	r5, r5, r3
 8004b92:	9b01      	ldr	r3, [sp, #4]
 8004b94:	9802      	ldr	r0, [sp, #8]
 8004b96:	3301      	adds	r3, #1
 8004b98:	181b      	adds	r3, r3, r0
 8004b9a:	106d      	asrs	r5, r5, #1
 8004b9c:	42ab      	cmp	r3, r5
 8004b9e:	d900      	bls.n	8004ba2 <__ssputs_r+0x3e>
 8004ba0:	001d      	movs	r5, r3
 8004ba2:	0553      	lsls	r3, r2, #21
 8004ba4:	d532      	bpl.n	8004c0c <__ssputs_r+0xa8>
 8004ba6:	0029      	movs	r1, r5
 8004ba8:	0038      	movs	r0, r7
 8004baa:	f000 fb4b 	bl	8005244 <_malloc_r>
 8004bae:	1e06      	subs	r6, r0, #0
 8004bb0:	d109      	bne.n	8004bc6 <__ssputs_r+0x62>
 8004bb2:	230c      	movs	r3, #12
 8004bb4:	603b      	str	r3, [r7, #0]
 8004bb6:	2340      	movs	r3, #64	; 0x40
 8004bb8:	2001      	movs	r0, #1
 8004bba:	89a2      	ldrh	r2, [r4, #12]
 8004bbc:	4240      	negs	r0, r0
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	81a3      	strh	r3, [r4, #12]
 8004bc2:	b005      	add	sp, #20
 8004bc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004bc6:	9a02      	ldr	r2, [sp, #8]
 8004bc8:	6921      	ldr	r1, [r4, #16]
 8004bca:	f7ff ff99 	bl	8004b00 <memcpy>
 8004bce:	89a3      	ldrh	r3, [r4, #12]
 8004bd0:	4a14      	ldr	r2, [pc, #80]	; (8004c24 <__ssputs_r+0xc0>)
 8004bd2:	401a      	ands	r2, r3
 8004bd4:	2380      	movs	r3, #128	; 0x80
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	9b02      	ldr	r3, [sp, #8]
 8004bdc:	6126      	str	r6, [r4, #16]
 8004bde:	18f6      	adds	r6, r6, r3
 8004be0:	6026      	str	r6, [r4, #0]
 8004be2:	6165      	str	r5, [r4, #20]
 8004be4:	9e01      	ldr	r6, [sp, #4]
 8004be6:	1aed      	subs	r5, r5, r3
 8004be8:	60a5      	str	r5, [r4, #8]
 8004bea:	9b01      	ldr	r3, [sp, #4]
 8004bec:	429e      	cmp	r6, r3
 8004bee:	d900      	bls.n	8004bf2 <__ssputs_r+0x8e>
 8004bf0:	9e01      	ldr	r6, [sp, #4]
 8004bf2:	0032      	movs	r2, r6
 8004bf4:	9903      	ldr	r1, [sp, #12]
 8004bf6:	6820      	ldr	r0, [r4, #0]
 8004bf8:	f000 faa5 	bl	8005146 <memmove>
 8004bfc:	68a3      	ldr	r3, [r4, #8]
 8004bfe:	2000      	movs	r0, #0
 8004c00:	1b9b      	subs	r3, r3, r6
 8004c02:	60a3      	str	r3, [r4, #8]
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	199e      	adds	r6, r3, r6
 8004c08:	6026      	str	r6, [r4, #0]
 8004c0a:	e7da      	b.n	8004bc2 <__ssputs_r+0x5e>
 8004c0c:	002a      	movs	r2, r5
 8004c0e:	0038      	movs	r0, r7
 8004c10:	f000 fb8e 	bl	8005330 <_realloc_r>
 8004c14:	1e06      	subs	r6, r0, #0
 8004c16:	d1e0      	bne.n	8004bda <__ssputs_r+0x76>
 8004c18:	0038      	movs	r0, r7
 8004c1a:	6921      	ldr	r1, [r4, #16]
 8004c1c:	f000 faa6 	bl	800516c <_free_r>
 8004c20:	e7c7      	b.n	8004bb2 <__ssputs_r+0x4e>
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	fffffb7f 	.word	0xfffffb7f

08004c28 <_svfiprintf_r>:
 8004c28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c2a:	b0a1      	sub	sp, #132	; 0x84
 8004c2c:	9003      	str	r0, [sp, #12]
 8004c2e:	001d      	movs	r5, r3
 8004c30:	898b      	ldrh	r3, [r1, #12]
 8004c32:	000f      	movs	r7, r1
 8004c34:	0016      	movs	r6, r2
 8004c36:	061b      	lsls	r3, r3, #24
 8004c38:	d511      	bpl.n	8004c5e <_svfiprintf_r+0x36>
 8004c3a:	690b      	ldr	r3, [r1, #16]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10e      	bne.n	8004c5e <_svfiprintf_r+0x36>
 8004c40:	2140      	movs	r1, #64	; 0x40
 8004c42:	f000 faff 	bl	8005244 <_malloc_r>
 8004c46:	6038      	str	r0, [r7, #0]
 8004c48:	6138      	str	r0, [r7, #16]
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	d105      	bne.n	8004c5a <_svfiprintf_r+0x32>
 8004c4e:	230c      	movs	r3, #12
 8004c50:	9a03      	ldr	r2, [sp, #12]
 8004c52:	3801      	subs	r0, #1
 8004c54:	6013      	str	r3, [r2, #0]
 8004c56:	b021      	add	sp, #132	; 0x84
 8004c58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c5a:	2340      	movs	r3, #64	; 0x40
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	2300      	movs	r3, #0
 8004c60:	ac08      	add	r4, sp, #32
 8004c62:	6163      	str	r3, [r4, #20]
 8004c64:	3320      	adds	r3, #32
 8004c66:	7663      	strb	r3, [r4, #25]
 8004c68:	3310      	adds	r3, #16
 8004c6a:	76a3      	strb	r3, [r4, #26]
 8004c6c:	9507      	str	r5, [sp, #28]
 8004c6e:	0035      	movs	r5, r6
 8004c70:	782b      	ldrb	r3, [r5, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d001      	beq.n	8004c7a <_svfiprintf_r+0x52>
 8004c76:	2b25      	cmp	r3, #37	; 0x25
 8004c78:	d147      	bne.n	8004d0a <_svfiprintf_r+0xe2>
 8004c7a:	1bab      	subs	r3, r5, r6
 8004c7c:	9305      	str	r3, [sp, #20]
 8004c7e:	42b5      	cmp	r5, r6
 8004c80:	d00c      	beq.n	8004c9c <_svfiprintf_r+0x74>
 8004c82:	0032      	movs	r2, r6
 8004c84:	0039      	movs	r1, r7
 8004c86:	9803      	ldr	r0, [sp, #12]
 8004c88:	f7ff ff6c 	bl	8004b64 <__ssputs_r>
 8004c8c:	1c43      	adds	r3, r0, #1
 8004c8e:	d100      	bne.n	8004c92 <_svfiprintf_r+0x6a>
 8004c90:	e0ae      	b.n	8004df0 <_svfiprintf_r+0x1c8>
 8004c92:	6962      	ldr	r2, [r4, #20]
 8004c94:	9b05      	ldr	r3, [sp, #20]
 8004c96:	4694      	mov	ip, r2
 8004c98:	4463      	add	r3, ip
 8004c9a:	6163      	str	r3, [r4, #20]
 8004c9c:	782b      	ldrb	r3, [r5, #0]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d100      	bne.n	8004ca4 <_svfiprintf_r+0x7c>
 8004ca2:	e0a5      	b.n	8004df0 <_svfiprintf_r+0x1c8>
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	4252      	negs	r2, r2
 8004caa:	6062      	str	r2, [r4, #4]
 8004cac:	a904      	add	r1, sp, #16
 8004cae:	3254      	adds	r2, #84	; 0x54
 8004cb0:	1852      	adds	r2, r2, r1
 8004cb2:	1c6e      	adds	r6, r5, #1
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	60e3      	str	r3, [r4, #12]
 8004cb8:	60a3      	str	r3, [r4, #8]
 8004cba:	7013      	strb	r3, [r2, #0]
 8004cbc:	65a3      	str	r3, [r4, #88]	; 0x58
 8004cbe:	2205      	movs	r2, #5
 8004cc0:	7831      	ldrb	r1, [r6, #0]
 8004cc2:	4854      	ldr	r0, [pc, #336]	; (8004e14 <_svfiprintf_r+0x1ec>)
 8004cc4:	f000 fa34 	bl	8005130 <memchr>
 8004cc8:	1c75      	adds	r5, r6, #1
 8004cca:	2800      	cmp	r0, #0
 8004ccc:	d11f      	bne.n	8004d0e <_svfiprintf_r+0xe6>
 8004cce:	6822      	ldr	r2, [r4, #0]
 8004cd0:	06d3      	lsls	r3, r2, #27
 8004cd2:	d504      	bpl.n	8004cde <_svfiprintf_r+0xb6>
 8004cd4:	2353      	movs	r3, #83	; 0x53
 8004cd6:	a904      	add	r1, sp, #16
 8004cd8:	185b      	adds	r3, r3, r1
 8004cda:	2120      	movs	r1, #32
 8004cdc:	7019      	strb	r1, [r3, #0]
 8004cde:	0713      	lsls	r3, r2, #28
 8004ce0:	d504      	bpl.n	8004cec <_svfiprintf_r+0xc4>
 8004ce2:	2353      	movs	r3, #83	; 0x53
 8004ce4:	a904      	add	r1, sp, #16
 8004ce6:	185b      	adds	r3, r3, r1
 8004ce8:	212b      	movs	r1, #43	; 0x2b
 8004cea:	7019      	strb	r1, [r3, #0]
 8004cec:	7833      	ldrb	r3, [r6, #0]
 8004cee:	2b2a      	cmp	r3, #42	; 0x2a
 8004cf0:	d016      	beq.n	8004d20 <_svfiprintf_r+0xf8>
 8004cf2:	0035      	movs	r5, r6
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	200a      	movs	r0, #10
 8004cf8:	68e3      	ldr	r3, [r4, #12]
 8004cfa:	782a      	ldrb	r2, [r5, #0]
 8004cfc:	1c6e      	adds	r6, r5, #1
 8004cfe:	3a30      	subs	r2, #48	; 0x30
 8004d00:	2a09      	cmp	r2, #9
 8004d02:	d94e      	bls.n	8004da2 <_svfiprintf_r+0x17a>
 8004d04:	2900      	cmp	r1, #0
 8004d06:	d111      	bne.n	8004d2c <_svfiprintf_r+0x104>
 8004d08:	e017      	b.n	8004d3a <_svfiprintf_r+0x112>
 8004d0a:	3501      	adds	r5, #1
 8004d0c:	e7b0      	b.n	8004c70 <_svfiprintf_r+0x48>
 8004d0e:	4b41      	ldr	r3, [pc, #260]	; (8004e14 <_svfiprintf_r+0x1ec>)
 8004d10:	6822      	ldr	r2, [r4, #0]
 8004d12:	1ac0      	subs	r0, r0, r3
 8004d14:	2301      	movs	r3, #1
 8004d16:	4083      	lsls	r3, r0
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	002e      	movs	r6, r5
 8004d1c:	6023      	str	r3, [r4, #0]
 8004d1e:	e7ce      	b.n	8004cbe <_svfiprintf_r+0x96>
 8004d20:	9b07      	ldr	r3, [sp, #28]
 8004d22:	1d19      	adds	r1, r3, #4
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	9107      	str	r1, [sp, #28]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	db01      	blt.n	8004d30 <_svfiprintf_r+0x108>
 8004d2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d2e:	e004      	b.n	8004d3a <_svfiprintf_r+0x112>
 8004d30:	425b      	negs	r3, r3
 8004d32:	60e3      	str	r3, [r4, #12]
 8004d34:	2302      	movs	r3, #2
 8004d36:	4313      	orrs	r3, r2
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	782b      	ldrb	r3, [r5, #0]
 8004d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8004d3e:	d10a      	bne.n	8004d56 <_svfiprintf_r+0x12e>
 8004d40:	786b      	ldrb	r3, [r5, #1]
 8004d42:	2b2a      	cmp	r3, #42	; 0x2a
 8004d44:	d135      	bne.n	8004db2 <_svfiprintf_r+0x18a>
 8004d46:	9b07      	ldr	r3, [sp, #28]
 8004d48:	3502      	adds	r5, #2
 8004d4a:	1d1a      	adds	r2, r3, #4
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	9207      	str	r2, [sp, #28]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	db2b      	blt.n	8004dac <_svfiprintf_r+0x184>
 8004d54:	9309      	str	r3, [sp, #36]	; 0x24
 8004d56:	4e30      	ldr	r6, [pc, #192]	; (8004e18 <_svfiprintf_r+0x1f0>)
 8004d58:	2203      	movs	r2, #3
 8004d5a:	0030      	movs	r0, r6
 8004d5c:	7829      	ldrb	r1, [r5, #0]
 8004d5e:	f000 f9e7 	bl	8005130 <memchr>
 8004d62:	2800      	cmp	r0, #0
 8004d64:	d006      	beq.n	8004d74 <_svfiprintf_r+0x14c>
 8004d66:	2340      	movs	r3, #64	; 0x40
 8004d68:	1b80      	subs	r0, r0, r6
 8004d6a:	4083      	lsls	r3, r0
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	3501      	adds	r5, #1
 8004d70:	4313      	orrs	r3, r2
 8004d72:	6023      	str	r3, [r4, #0]
 8004d74:	7829      	ldrb	r1, [r5, #0]
 8004d76:	2206      	movs	r2, #6
 8004d78:	4828      	ldr	r0, [pc, #160]	; (8004e1c <_svfiprintf_r+0x1f4>)
 8004d7a:	1c6e      	adds	r6, r5, #1
 8004d7c:	7621      	strb	r1, [r4, #24]
 8004d7e:	f000 f9d7 	bl	8005130 <memchr>
 8004d82:	2800      	cmp	r0, #0
 8004d84:	d03c      	beq.n	8004e00 <_svfiprintf_r+0x1d8>
 8004d86:	4b26      	ldr	r3, [pc, #152]	; (8004e20 <_svfiprintf_r+0x1f8>)
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d125      	bne.n	8004dd8 <_svfiprintf_r+0x1b0>
 8004d8c:	2207      	movs	r2, #7
 8004d8e:	9b07      	ldr	r3, [sp, #28]
 8004d90:	3307      	adds	r3, #7
 8004d92:	4393      	bics	r3, r2
 8004d94:	3308      	adds	r3, #8
 8004d96:	9307      	str	r3, [sp, #28]
 8004d98:	6963      	ldr	r3, [r4, #20]
 8004d9a:	9a04      	ldr	r2, [sp, #16]
 8004d9c:	189b      	adds	r3, r3, r2
 8004d9e:	6163      	str	r3, [r4, #20]
 8004da0:	e765      	b.n	8004c6e <_svfiprintf_r+0x46>
 8004da2:	4343      	muls	r3, r0
 8004da4:	0035      	movs	r5, r6
 8004da6:	2101      	movs	r1, #1
 8004da8:	189b      	adds	r3, r3, r2
 8004daa:	e7a6      	b.n	8004cfa <_svfiprintf_r+0xd2>
 8004dac:	2301      	movs	r3, #1
 8004dae:	425b      	negs	r3, r3
 8004db0:	e7d0      	b.n	8004d54 <_svfiprintf_r+0x12c>
 8004db2:	2300      	movs	r3, #0
 8004db4:	200a      	movs	r0, #10
 8004db6:	001a      	movs	r2, r3
 8004db8:	3501      	adds	r5, #1
 8004dba:	6063      	str	r3, [r4, #4]
 8004dbc:	7829      	ldrb	r1, [r5, #0]
 8004dbe:	1c6e      	adds	r6, r5, #1
 8004dc0:	3930      	subs	r1, #48	; 0x30
 8004dc2:	2909      	cmp	r1, #9
 8004dc4:	d903      	bls.n	8004dce <_svfiprintf_r+0x1a6>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0c5      	beq.n	8004d56 <_svfiprintf_r+0x12e>
 8004dca:	9209      	str	r2, [sp, #36]	; 0x24
 8004dcc:	e7c3      	b.n	8004d56 <_svfiprintf_r+0x12e>
 8004dce:	4342      	muls	r2, r0
 8004dd0:	0035      	movs	r5, r6
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	1852      	adds	r2, r2, r1
 8004dd6:	e7f1      	b.n	8004dbc <_svfiprintf_r+0x194>
 8004dd8:	ab07      	add	r3, sp, #28
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	003a      	movs	r2, r7
 8004dde:	0021      	movs	r1, r4
 8004de0:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <_svfiprintf_r+0x1fc>)
 8004de2:	9803      	ldr	r0, [sp, #12]
 8004de4:	e000      	b.n	8004de8 <_svfiprintf_r+0x1c0>
 8004de6:	bf00      	nop
 8004de8:	9004      	str	r0, [sp, #16]
 8004dea:	9b04      	ldr	r3, [sp, #16]
 8004dec:	3301      	adds	r3, #1
 8004dee:	d1d3      	bne.n	8004d98 <_svfiprintf_r+0x170>
 8004df0:	89bb      	ldrh	r3, [r7, #12]
 8004df2:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004df4:	065b      	lsls	r3, r3, #25
 8004df6:	d400      	bmi.n	8004dfa <_svfiprintf_r+0x1d2>
 8004df8:	e72d      	b.n	8004c56 <_svfiprintf_r+0x2e>
 8004dfa:	2001      	movs	r0, #1
 8004dfc:	4240      	negs	r0, r0
 8004dfe:	e72a      	b.n	8004c56 <_svfiprintf_r+0x2e>
 8004e00:	ab07      	add	r3, sp, #28
 8004e02:	9300      	str	r3, [sp, #0]
 8004e04:	003a      	movs	r2, r7
 8004e06:	0021      	movs	r1, r4
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <_svfiprintf_r+0x1fc>)
 8004e0a:	9803      	ldr	r0, [sp, #12]
 8004e0c:	f000 f87c 	bl	8004f08 <_printf_i>
 8004e10:	e7ea      	b.n	8004de8 <_svfiprintf_r+0x1c0>
 8004e12:	46c0      	nop			; (mov r8, r8)
 8004e14:	08005e10 	.word	0x08005e10
 8004e18:	08005e16 	.word	0x08005e16
 8004e1c:	08005e1a 	.word	0x08005e1a
 8004e20:	00000000 	.word	0x00000000
 8004e24:	08004b65 	.word	0x08004b65

08004e28 <_printf_common>:
 8004e28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e2a:	0015      	movs	r5, r2
 8004e2c:	9301      	str	r3, [sp, #4]
 8004e2e:	688a      	ldr	r2, [r1, #8]
 8004e30:	690b      	ldr	r3, [r1, #16]
 8004e32:	000c      	movs	r4, r1
 8004e34:	9000      	str	r0, [sp, #0]
 8004e36:	4293      	cmp	r3, r2
 8004e38:	da00      	bge.n	8004e3c <_printf_common+0x14>
 8004e3a:	0013      	movs	r3, r2
 8004e3c:	0022      	movs	r2, r4
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	3243      	adds	r2, #67	; 0x43
 8004e42:	7812      	ldrb	r2, [r2, #0]
 8004e44:	2a00      	cmp	r2, #0
 8004e46:	d001      	beq.n	8004e4c <_printf_common+0x24>
 8004e48:	3301      	adds	r3, #1
 8004e4a:	602b      	str	r3, [r5, #0]
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	069b      	lsls	r3, r3, #26
 8004e50:	d502      	bpl.n	8004e58 <_printf_common+0x30>
 8004e52:	682b      	ldr	r3, [r5, #0]
 8004e54:	3302      	adds	r3, #2
 8004e56:	602b      	str	r3, [r5, #0]
 8004e58:	6822      	ldr	r2, [r4, #0]
 8004e5a:	2306      	movs	r3, #6
 8004e5c:	0017      	movs	r7, r2
 8004e5e:	401f      	ands	r7, r3
 8004e60:	421a      	tst	r2, r3
 8004e62:	d027      	beq.n	8004eb4 <_printf_common+0x8c>
 8004e64:	0023      	movs	r3, r4
 8004e66:	3343      	adds	r3, #67	; 0x43
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	1e5a      	subs	r2, r3, #1
 8004e6c:	4193      	sbcs	r3, r2
 8004e6e:	6822      	ldr	r2, [r4, #0]
 8004e70:	0692      	lsls	r2, r2, #26
 8004e72:	d430      	bmi.n	8004ed6 <_printf_common+0xae>
 8004e74:	0022      	movs	r2, r4
 8004e76:	9901      	ldr	r1, [sp, #4]
 8004e78:	9800      	ldr	r0, [sp, #0]
 8004e7a:	9e08      	ldr	r6, [sp, #32]
 8004e7c:	3243      	adds	r2, #67	; 0x43
 8004e7e:	47b0      	blx	r6
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d025      	beq.n	8004ed0 <_printf_common+0xa8>
 8004e84:	2306      	movs	r3, #6
 8004e86:	6820      	ldr	r0, [r4, #0]
 8004e88:	682a      	ldr	r2, [r5, #0]
 8004e8a:	68e1      	ldr	r1, [r4, #12]
 8004e8c:	2500      	movs	r5, #0
 8004e8e:	4003      	ands	r3, r0
 8004e90:	2b04      	cmp	r3, #4
 8004e92:	d103      	bne.n	8004e9c <_printf_common+0x74>
 8004e94:	1a8d      	subs	r5, r1, r2
 8004e96:	43eb      	mvns	r3, r5
 8004e98:	17db      	asrs	r3, r3, #31
 8004e9a:	401d      	ands	r5, r3
 8004e9c:	68a3      	ldr	r3, [r4, #8]
 8004e9e:	6922      	ldr	r2, [r4, #16]
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	dd01      	ble.n	8004ea8 <_printf_common+0x80>
 8004ea4:	1a9b      	subs	r3, r3, r2
 8004ea6:	18ed      	adds	r5, r5, r3
 8004ea8:	2700      	movs	r7, #0
 8004eaa:	42bd      	cmp	r5, r7
 8004eac:	d120      	bne.n	8004ef0 <_printf_common+0xc8>
 8004eae:	2000      	movs	r0, #0
 8004eb0:	e010      	b.n	8004ed4 <_printf_common+0xac>
 8004eb2:	3701      	adds	r7, #1
 8004eb4:	68e3      	ldr	r3, [r4, #12]
 8004eb6:	682a      	ldr	r2, [r5, #0]
 8004eb8:	1a9b      	subs	r3, r3, r2
 8004eba:	42bb      	cmp	r3, r7
 8004ebc:	ddd2      	ble.n	8004e64 <_printf_common+0x3c>
 8004ebe:	0022      	movs	r2, r4
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	9901      	ldr	r1, [sp, #4]
 8004ec4:	9800      	ldr	r0, [sp, #0]
 8004ec6:	9e08      	ldr	r6, [sp, #32]
 8004ec8:	3219      	adds	r2, #25
 8004eca:	47b0      	blx	r6
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d1f0      	bne.n	8004eb2 <_printf_common+0x8a>
 8004ed0:	2001      	movs	r0, #1
 8004ed2:	4240      	negs	r0, r0
 8004ed4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ed6:	2030      	movs	r0, #48	; 0x30
 8004ed8:	18e1      	adds	r1, r4, r3
 8004eda:	3143      	adds	r1, #67	; 0x43
 8004edc:	7008      	strb	r0, [r1, #0]
 8004ede:	0021      	movs	r1, r4
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	3145      	adds	r1, #69	; 0x45
 8004ee4:	7809      	ldrb	r1, [r1, #0]
 8004ee6:	18a2      	adds	r2, r4, r2
 8004ee8:	3243      	adds	r2, #67	; 0x43
 8004eea:	3302      	adds	r3, #2
 8004eec:	7011      	strb	r1, [r2, #0]
 8004eee:	e7c1      	b.n	8004e74 <_printf_common+0x4c>
 8004ef0:	0022      	movs	r2, r4
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	9901      	ldr	r1, [sp, #4]
 8004ef6:	9800      	ldr	r0, [sp, #0]
 8004ef8:	9e08      	ldr	r6, [sp, #32]
 8004efa:	321a      	adds	r2, #26
 8004efc:	47b0      	blx	r6
 8004efe:	1c43      	adds	r3, r0, #1
 8004f00:	d0e6      	beq.n	8004ed0 <_printf_common+0xa8>
 8004f02:	3701      	adds	r7, #1
 8004f04:	e7d1      	b.n	8004eaa <_printf_common+0x82>
	...

08004f08 <_printf_i>:
 8004f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004f0a:	b08b      	sub	sp, #44	; 0x2c
 8004f0c:	9206      	str	r2, [sp, #24]
 8004f0e:	000a      	movs	r2, r1
 8004f10:	3243      	adds	r2, #67	; 0x43
 8004f12:	9307      	str	r3, [sp, #28]
 8004f14:	9005      	str	r0, [sp, #20]
 8004f16:	9204      	str	r2, [sp, #16]
 8004f18:	7e0a      	ldrb	r2, [r1, #24]
 8004f1a:	000c      	movs	r4, r1
 8004f1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004f1e:	2a78      	cmp	r2, #120	; 0x78
 8004f20:	d807      	bhi.n	8004f32 <_printf_i+0x2a>
 8004f22:	2a62      	cmp	r2, #98	; 0x62
 8004f24:	d809      	bhi.n	8004f3a <_printf_i+0x32>
 8004f26:	2a00      	cmp	r2, #0
 8004f28:	d100      	bne.n	8004f2c <_printf_i+0x24>
 8004f2a:	e0c1      	b.n	80050b0 <_printf_i+0x1a8>
 8004f2c:	2a58      	cmp	r2, #88	; 0x58
 8004f2e:	d100      	bne.n	8004f32 <_printf_i+0x2a>
 8004f30:	e08c      	b.n	800504c <_printf_i+0x144>
 8004f32:	0026      	movs	r6, r4
 8004f34:	3642      	adds	r6, #66	; 0x42
 8004f36:	7032      	strb	r2, [r6, #0]
 8004f38:	e022      	b.n	8004f80 <_printf_i+0x78>
 8004f3a:	0010      	movs	r0, r2
 8004f3c:	3863      	subs	r0, #99	; 0x63
 8004f3e:	2815      	cmp	r0, #21
 8004f40:	d8f7      	bhi.n	8004f32 <_printf_i+0x2a>
 8004f42:	f7fb f8e9 	bl	8000118 <__gnu_thumb1_case_shi>
 8004f46:	0016      	.short	0x0016
 8004f48:	fff6001f 	.word	0xfff6001f
 8004f4c:	fff6fff6 	.word	0xfff6fff6
 8004f50:	001ffff6 	.word	0x001ffff6
 8004f54:	fff6fff6 	.word	0xfff6fff6
 8004f58:	fff6fff6 	.word	0xfff6fff6
 8004f5c:	003600a8 	.word	0x003600a8
 8004f60:	fff6009a 	.word	0xfff6009a
 8004f64:	00b9fff6 	.word	0x00b9fff6
 8004f68:	0036fff6 	.word	0x0036fff6
 8004f6c:	fff6fff6 	.word	0xfff6fff6
 8004f70:	009e      	.short	0x009e
 8004f72:	0026      	movs	r6, r4
 8004f74:	681a      	ldr	r2, [r3, #0]
 8004f76:	3642      	adds	r6, #66	; 0x42
 8004f78:	1d11      	adds	r1, r2, #4
 8004f7a:	6019      	str	r1, [r3, #0]
 8004f7c:	6813      	ldr	r3, [r2, #0]
 8004f7e:	7033      	strb	r3, [r6, #0]
 8004f80:	2301      	movs	r3, #1
 8004f82:	e0a7      	b.n	80050d4 <_printf_i+0x1cc>
 8004f84:	6808      	ldr	r0, [r1, #0]
 8004f86:	6819      	ldr	r1, [r3, #0]
 8004f88:	1d0a      	adds	r2, r1, #4
 8004f8a:	0605      	lsls	r5, r0, #24
 8004f8c:	d50b      	bpl.n	8004fa6 <_printf_i+0x9e>
 8004f8e:	680d      	ldr	r5, [r1, #0]
 8004f90:	601a      	str	r2, [r3, #0]
 8004f92:	2d00      	cmp	r5, #0
 8004f94:	da03      	bge.n	8004f9e <_printf_i+0x96>
 8004f96:	232d      	movs	r3, #45	; 0x2d
 8004f98:	9a04      	ldr	r2, [sp, #16]
 8004f9a:	426d      	negs	r5, r5
 8004f9c:	7013      	strb	r3, [r2, #0]
 8004f9e:	4b61      	ldr	r3, [pc, #388]	; (8005124 <_printf_i+0x21c>)
 8004fa0:	270a      	movs	r7, #10
 8004fa2:	9303      	str	r3, [sp, #12]
 8004fa4:	e01b      	b.n	8004fde <_printf_i+0xd6>
 8004fa6:	680d      	ldr	r5, [r1, #0]
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	0641      	lsls	r1, r0, #25
 8004fac:	d5f1      	bpl.n	8004f92 <_printf_i+0x8a>
 8004fae:	b22d      	sxth	r5, r5
 8004fb0:	e7ef      	b.n	8004f92 <_printf_i+0x8a>
 8004fb2:	680d      	ldr	r5, [r1, #0]
 8004fb4:	6819      	ldr	r1, [r3, #0]
 8004fb6:	1d08      	adds	r0, r1, #4
 8004fb8:	6018      	str	r0, [r3, #0]
 8004fba:	062e      	lsls	r6, r5, #24
 8004fbc:	d501      	bpl.n	8004fc2 <_printf_i+0xba>
 8004fbe:	680d      	ldr	r5, [r1, #0]
 8004fc0:	e003      	b.n	8004fca <_printf_i+0xc2>
 8004fc2:	066d      	lsls	r5, r5, #25
 8004fc4:	d5fb      	bpl.n	8004fbe <_printf_i+0xb6>
 8004fc6:	680d      	ldr	r5, [r1, #0]
 8004fc8:	b2ad      	uxth	r5, r5
 8004fca:	4b56      	ldr	r3, [pc, #344]	; (8005124 <_printf_i+0x21c>)
 8004fcc:	2708      	movs	r7, #8
 8004fce:	9303      	str	r3, [sp, #12]
 8004fd0:	2a6f      	cmp	r2, #111	; 0x6f
 8004fd2:	d000      	beq.n	8004fd6 <_printf_i+0xce>
 8004fd4:	3702      	adds	r7, #2
 8004fd6:	0023      	movs	r3, r4
 8004fd8:	2200      	movs	r2, #0
 8004fda:	3343      	adds	r3, #67	; 0x43
 8004fdc:	701a      	strb	r2, [r3, #0]
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	60a3      	str	r3, [r4, #8]
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	db03      	blt.n	8004fee <_printf_i+0xe6>
 8004fe6:	2204      	movs	r2, #4
 8004fe8:	6821      	ldr	r1, [r4, #0]
 8004fea:	4391      	bics	r1, r2
 8004fec:	6021      	str	r1, [r4, #0]
 8004fee:	2d00      	cmp	r5, #0
 8004ff0:	d102      	bne.n	8004ff8 <_printf_i+0xf0>
 8004ff2:	9e04      	ldr	r6, [sp, #16]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00c      	beq.n	8005012 <_printf_i+0x10a>
 8004ff8:	9e04      	ldr	r6, [sp, #16]
 8004ffa:	0028      	movs	r0, r5
 8004ffc:	0039      	movs	r1, r7
 8004ffe:	f7fb f91b 	bl	8000238 <__aeabi_uidivmod>
 8005002:	9b03      	ldr	r3, [sp, #12]
 8005004:	3e01      	subs	r6, #1
 8005006:	5c5b      	ldrb	r3, [r3, r1]
 8005008:	7033      	strb	r3, [r6, #0]
 800500a:	002b      	movs	r3, r5
 800500c:	0005      	movs	r5, r0
 800500e:	429f      	cmp	r7, r3
 8005010:	d9f3      	bls.n	8004ffa <_printf_i+0xf2>
 8005012:	2f08      	cmp	r7, #8
 8005014:	d109      	bne.n	800502a <_printf_i+0x122>
 8005016:	6823      	ldr	r3, [r4, #0]
 8005018:	07db      	lsls	r3, r3, #31
 800501a:	d506      	bpl.n	800502a <_printf_i+0x122>
 800501c:	6863      	ldr	r3, [r4, #4]
 800501e:	6922      	ldr	r2, [r4, #16]
 8005020:	4293      	cmp	r3, r2
 8005022:	dc02      	bgt.n	800502a <_printf_i+0x122>
 8005024:	2330      	movs	r3, #48	; 0x30
 8005026:	3e01      	subs	r6, #1
 8005028:	7033      	strb	r3, [r6, #0]
 800502a:	9b04      	ldr	r3, [sp, #16]
 800502c:	1b9b      	subs	r3, r3, r6
 800502e:	6123      	str	r3, [r4, #16]
 8005030:	9b07      	ldr	r3, [sp, #28]
 8005032:	0021      	movs	r1, r4
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	9805      	ldr	r0, [sp, #20]
 8005038:	9b06      	ldr	r3, [sp, #24]
 800503a:	aa09      	add	r2, sp, #36	; 0x24
 800503c:	f7ff fef4 	bl	8004e28 <_printf_common>
 8005040:	1c43      	adds	r3, r0, #1
 8005042:	d14c      	bne.n	80050de <_printf_i+0x1d6>
 8005044:	2001      	movs	r0, #1
 8005046:	4240      	negs	r0, r0
 8005048:	b00b      	add	sp, #44	; 0x2c
 800504a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800504c:	3145      	adds	r1, #69	; 0x45
 800504e:	700a      	strb	r2, [r1, #0]
 8005050:	4a34      	ldr	r2, [pc, #208]	; (8005124 <_printf_i+0x21c>)
 8005052:	9203      	str	r2, [sp, #12]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	6821      	ldr	r1, [r4, #0]
 8005058:	ca20      	ldmia	r2!, {r5}
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	0608      	lsls	r0, r1, #24
 800505e:	d516      	bpl.n	800508e <_printf_i+0x186>
 8005060:	07cb      	lsls	r3, r1, #31
 8005062:	d502      	bpl.n	800506a <_printf_i+0x162>
 8005064:	2320      	movs	r3, #32
 8005066:	4319      	orrs	r1, r3
 8005068:	6021      	str	r1, [r4, #0]
 800506a:	2710      	movs	r7, #16
 800506c:	2d00      	cmp	r5, #0
 800506e:	d1b2      	bne.n	8004fd6 <_printf_i+0xce>
 8005070:	2320      	movs	r3, #32
 8005072:	6822      	ldr	r2, [r4, #0]
 8005074:	439a      	bics	r2, r3
 8005076:	6022      	str	r2, [r4, #0]
 8005078:	e7ad      	b.n	8004fd6 <_printf_i+0xce>
 800507a:	2220      	movs	r2, #32
 800507c:	6809      	ldr	r1, [r1, #0]
 800507e:	430a      	orrs	r2, r1
 8005080:	6022      	str	r2, [r4, #0]
 8005082:	0022      	movs	r2, r4
 8005084:	2178      	movs	r1, #120	; 0x78
 8005086:	3245      	adds	r2, #69	; 0x45
 8005088:	7011      	strb	r1, [r2, #0]
 800508a:	4a27      	ldr	r2, [pc, #156]	; (8005128 <_printf_i+0x220>)
 800508c:	e7e1      	b.n	8005052 <_printf_i+0x14a>
 800508e:	0648      	lsls	r0, r1, #25
 8005090:	d5e6      	bpl.n	8005060 <_printf_i+0x158>
 8005092:	b2ad      	uxth	r5, r5
 8005094:	e7e4      	b.n	8005060 <_printf_i+0x158>
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	680d      	ldr	r5, [r1, #0]
 800509a:	1d10      	adds	r0, r2, #4
 800509c:	6949      	ldr	r1, [r1, #20]
 800509e:	6018      	str	r0, [r3, #0]
 80050a0:	6813      	ldr	r3, [r2, #0]
 80050a2:	062e      	lsls	r6, r5, #24
 80050a4:	d501      	bpl.n	80050aa <_printf_i+0x1a2>
 80050a6:	6019      	str	r1, [r3, #0]
 80050a8:	e002      	b.n	80050b0 <_printf_i+0x1a8>
 80050aa:	066d      	lsls	r5, r5, #25
 80050ac:	d5fb      	bpl.n	80050a6 <_printf_i+0x19e>
 80050ae:	8019      	strh	r1, [r3, #0]
 80050b0:	2300      	movs	r3, #0
 80050b2:	9e04      	ldr	r6, [sp, #16]
 80050b4:	6123      	str	r3, [r4, #16]
 80050b6:	e7bb      	b.n	8005030 <_printf_i+0x128>
 80050b8:	681a      	ldr	r2, [r3, #0]
 80050ba:	1d11      	adds	r1, r2, #4
 80050bc:	6019      	str	r1, [r3, #0]
 80050be:	6816      	ldr	r6, [r2, #0]
 80050c0:	2100      	movs	r1, #0
 80050c2:	0030      	movs	r0, r6
 80050c4:	6862      	ldr	r2, [r4, #4]
 80050c6:	f000 f833 	bl	8005130 <memchr>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	d001      	beq.n	80050d2 <_printf_i+0x1ca>
 80050ce:	1b80      	subs	r0, r0, r6
 80050d0:	6060      	str	r0, [r4, #4]
 80050d2:	6863      	ldr	r3, [r4, #4]
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	2300      	movs	r3, #0
 80050d8:	9a04      	ldr	r2, [sp, #16]
 80050da:	7013      	strb	r3, [r2, #0]
 80050dc:	e7a8      	b.n	8005030 <_printf_i+0x128>
 80050de:	6923      	ldr	r3, [r4, #16]
 80050e0:	0032      	movs	r2, r6
 80050e2:	9906      	ldr	r1, [sp, #24]
 80050e4:	9805      	ldr	r0, [sp, #20]
 80050e6:	9d07      	ldr	r5, [sp, #28]
 80050e8:	47a8      	blx	r5
 80050ea:	1c43      	adds	r3, r0, #1
 80050ec:	d0aa      	beq.n	8005044 <_printf_i+0x13c>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	079b      	lsls	r3, r3, #30
 80050f2:	d415      	bmi.n	8005120 <_printf_i+0x218>
 80050f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050f6:	68e0      	ldr	r0, [r4, #12]
 80050f8:	4298      	cmp	r0, r3
 80050fa:	daa5      	bge.n	8005048 <_printf_i+0x140>
 80050fc:	0018      	movs	r0, r3
 80050fe:	e7a3      	b.n	8005048 <_printf_i+0x140>
 8005100:	0022      	movs	r2, r4
 8005102:	2301      	movs	r3, #1
 8005104:	9906      	ldr	r1, [sp, #24]
 8005106:	9805      	ldr	r0, [sp, #20]
 8005108:	9e07      	ldr	r6, [sp, #28]
 800510a:	3219      	adds	r2, #25
 800510c:	47b0      	blx	r6
 800510e:	1c43      	adds	r3, r0, #1
 8005110:	d098      	beq.n	8005044 <_printf_i+0x13c>
 8005112:	3501      	adds	r5, #1
 8005114:	68e3      	ldr	r3, [r4, #12]
 8005116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	42ab      	cmp	r3, r5
 800511c:	dcf0      	bgt.n	8005100 <_printf_i+0x1f8>
 800511e:	e7e9      	b.n	80050f4 <_printf_i+0x1ec>
 8005120:	2500      	movs	r5, #0
 8005122:	e7f7      	b.n	8005114 <_printf_i+0x20c>
 8005124:	08005e21 	.word	0x08005e21
 8005128:	08005e32 	.word	0x08005e32

0800512c <__retarget_lock_acquire_recursive>:
 800512c:	4770      	bx	lr

0800512e <__retarget_lock_release_recursive>:
 800512e:	4770      	bx	lr

08005130 <memchr>:
 8005130:	b2c9      	uxtb	r1, r1
 8005132:	1882      	adds	r2, r0, r2
 8005134:	4290      	cmp	r0, r2
 8005136:	d101      	bne.n	800513c <memchr+0xc>
 8005138:	2000      	movs	r0, #0
 800513a:	4770      	bx	lr
 800513c:	7803      	ldrb	r3, [r0, #0]
 800513e:	428b      	cmp	r3, r1
 8005140:	d0fb      	beq.n	800513a <memchr+0xa>
 8005142:	3001      	adds	r0, #1
 8005144:	e7f6      	b.n	8005134 <memchr+0x4>

08005146 <memmove>:
 8005146:	b510      	push	{r4, lr}
 8005148:	4288      	cmp	r0, r1
 800514a:	d902      	bls.n	8005152 <memmove+0xc>
 800514c:	188b      	adds	r3, r1, r2
 800514e:	4298      	cmp	r0, r3
 8005150:	d303      	bcc.n	800515a <memmove+0x14>
 8005152:	2300      	movs	r3, #0
 8005154:	e007      	b.n	8005166 <memmove+0x20>
 8005156:	5c8b      	ldrb	r3, [r1, r2]
 8005158:	5483      	strb	r3, [r0, r2]
 800515a:	3a01      	subs	r2, #1
 800515c:	d2fb      	bcs.n	8005156 <memmove+0x10>
 800515e:	bd10      	pop	{r4, pc}
 8005160:	5ccc      	ldrb	r4, [r1, r3]
 8005162:	54c4      	strb	r4, [r0, r3]
 8005164:	3301      	adds	r3, #1
 8005166:	429a      	cmp	r2, r3
 8005168:	d1fa      	bne.n	8005160 <memmove+0x1a>
 800516a:	e7f8      	b.n	800515e <memmove+0x18>

0800516c <_free_r>:
 800516c:	b570      	push	{r4, r5, r6, lr}
 800516e:	0005      	movs	r5, r0
 8005170:	2900      	cmp	r1, #0
 8005172:	d010      	beq.n	8005196 <_free_r+0x2a>
 8005174:	1f0c      	subs	r4, r1, #4
 8005176:	6823      	ldr	r3, [r4, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	da00      	bge.n	800517e <_free_r+0x12>
 800517c:	18e4      	adds	r4, r4, r3
 800517e:	0028      	movs	r0, r5
 8005180:	f000 f918 	bl	80053b4 <__malloc_lock>
 8005184:	4a1d      	ldr	r2, [pc, #116]	; (80051fc <_free_r+0x90>)
 8005186:	6813      	ldr	r3, [r2, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d105      	bne.n	8005198 <_free_r+0x2c>
 800518c:	6063      	str	r3, [r4, #4]
 800518e:	6014      	str	r4, [r2, #0]
 8005190:	0028      	movs	r0, r5
 8005192:	f000 f917 	bl	80053c4 <__malloc_unlock>
 8005196:	bd70      	pop	{r4, r5, r6, pc}
 8005198:	42a3      	cmp	r3, r4
 800519a:	d908      	bls.n	80051ae <_free_r+0x42>
 800519c:	6821      	ldr	r1, [r4, #0]
 800519e:	1860      	adds	r0, r4, r1
 80051a0:	4283      	cmp	r3, r0
 80051a2:	d1f3      	bne.n	800518c <_free_r+0x20>
 80051a4:	6818      	ldr	r0, [r3, #0]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	1841      	adds	r1, r0, r1
 80051aa:	6021      	str	r1, [r4, #0]
 80051ac:	e7ee      	b.n	800518c <_free_r+0x20>
 80051ae:	001a      	movs	r2, r3
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d001      	beq.n	80051ba <_free_r+0x4e>
 80051b6:	42a3      	cmp	r3, r4
 80051b8:	d9f9      	bls.n	80051ae <_free_r+0x42>
 80051ba:	6811      	ldr	r1, [r2, #0]
 80051bc:	1850      	adds	r0, r2, r1
 80051be:	42a0      	cmp	r0, r4
 80051c0:	d10b      	bne.n	80051da <_free_r+0x6e>
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1809      	adds	r1, r1, r0
 80051c6:	1850      	adds	r0, r2, r1
 80051c8:	6011      	str	r1, [r2, #0]
 80051ca:	4283      	cmp	r3, r0
 80051cc:	d1e0      	bne.n	8005190 <_free_r+0x24>
 80051ce:	6818      	ldr	r0, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	1841      	adds	r1, r0, r1
 80051d4:	6011      	str	r1, [r2, #0]
 80051d6:	6053      	str	r3, [r2, #4]
 80051d8:	e7da      	b.n	8005190 <_free_r+0x24>
 80051da:	42a0      	cmp	r0, r4
 80051dc:	d902      	bls.n	80051e4 <_free_r+0x78>
 80051de:	230c      	movs	r3, #12
 80051e0:	602b      	str	r3, [r5, #0]
 80051e2:	e7d5      	b.n	8005190 <_free_r+0x24>
 80051e4:	6821      	ldr	r1, [r4, #0]
 80051e6:	1860      	adds	r0, r4, r1
 80051e8:	4283      	cmp	r3, r0
 80051ea:	d103      	bne.n	80051f4 <_free_r+0x88>
 80051ec:	6818      	ldr	r0, [r3, #0]
 80051ee:	685b      	ldr	r3, [r3, #4]
 80051f0:	1841      	adds	r1, r0, r1
 80051f2:	6021      	str	r1, [r4, #0]
 80051f4:	6063      	str	r3, [r4, #4]
 80051f6:	6054      	str	r4, [r2, #4]
 80051f8:	e7ca      	b.n	8005190 <_free_r+0x24>
 80051fa:	46c0      	nop			; (mov r8, r8)
 80051fc:	20000278 	.word	0x20000278

08005200 <sbrk_aligned>:
 8005200:	b570      	push	{r4, r5, r6, lr}
 8005202:	4e0f      	ldr	r6, [pc, #60]	; (8005240 <sbrk_aligned+0x40>)
 8005204:	000d      	movs	r5, r1
 8005206:	6831      	ldr	r1, [r6, #0]
 8005208:	0004      	movs	r4, r0
 800520a:	2900      	cmp	r1, #0
 800520c:	d102      	bne.n	8005214 <sbrk_aligned+0x14>
 800520e:	f000 f8bf 	bl	8005390 <_sbrk_r>
 8005212:	6030      	str	r0, [r6, #0]
 8005214:	0029      	movs	r1, r5
 8005216:	0020      	movs	r0, r4
 8005218:	f000 f8ba 	bl	8005390 <_sbrk_r>
 800521c:	1c43      	adds	r3, r0, #1
 800521e:	d00a      	beq.n	8005236 <sbrk_aligned+0x36>
 8005220:	2303      	movs	r3, #3
 8005222:	1cc5      	adds	r5, r0, #3
 8005224:	439d      	bics	r5, r3
 8005226:	42a8      	cmp	r0, r5
 8005228:	d007      	beq.n	800523a <sbrk_aligned+0x3a>
 800522a:	1a29      	subs	r1, r5, r0
 800522c:	0020      	movs	r0, r4
 800522e:	f000 f8af 	bl	8005390 <_sbrk_r>
 8005232:	1c43      	adds	r3, r0, #1
 8005234:	d101      	bne.n	800523a <sbrk_aligned+0x3a>
 8005236:	2501      	movs	r5, #1
 8005238:	426d      	negs	r5, r5
 800523a:	0028      	movs	r0, r5
 800523c:	bd70      	pop	{r4, r5, r6, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	2000027c 	.word	0x2000027c

08005244 <_malloc_r>:
 8005244:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005246:	2203      	movs	r2, #3
 8005248:	1ccb      	adds	r3, r1, #3
 800524a:	4393      	bics	r3, r2
 800524c:	3308      	adds	r3, #8
 800524e:	0006      	movs	r6, r0
 8005250:	001f      	movs	r7, r3
 8005252:	2b0c      	cmp	r3, #12
 8005254:	d232      	bcs.n	80052bc <_malloc_r+0x78>
 8005256:	270c      	movs	r7, #12
 8005258:	42b9      	cmp	r1, r7
 800525a:	d831      	bhi.n	80052c0 <_malloc_r+0x7c>
 800525c:	0030      	movs	r0, r6
 800525e:	f000 f8a9 	bl	80053b4 <__malloc_lock>
 8005262:	4d32      	ldr	r5, [pc, #200]	; (800532c <_malloc_r+0xe8>)
 8005264:	682b      	ldr	r3, [r5, #0]
 8005266:	001c      	movs	r4, r3
 8005268:	2c00      	cmp	r4, #0
 800526a:	d12e      	bne.n	80052ca <_malloc_r+0x86>
 800526c:	0039      	movs	r1, r7
 800526e:	0030      	movs	r0, r6
 8005270:	f7ff ffc6 	bl	8005200 <sbrk_aligned>
 8005274:	0004      	movs	r4, r0
 8005276:	1c43      	adds	r3, r0, #1
 8005278:	d11e      	bne.n	80052b8 <_malloc_r+0x74>
 800527a:	682c      	ldr	r4, [r5, #0]
 800527c:	0025      	movs	r5, r4
 800527e:	2d00      	cmp	r5, #0
 8005280:	d14a      	bne.n	8005318 <_malloc_r+0xd4>
 8005282:	6823      	ldr	r3, [r4, #0]
 8005284:	0029      	movs	r1, r5
 8005286:	18e3      	adds	r3, r4, r3
 8005288:	0030      	movs	r0, r6
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	f000 f880 	bl	8005390 <_sbrk_r>
 8005290:	9b01      	ldr	r3, [sp, #4]
 8005292:	4283      	cmp	r3, r0
 8005294:	d143      	bne.n	800531e <_malloc_r+0xda>
 8005296:	6823      	ldr	r3, [r4, #0]
 8005298:	3703      	adds	r7, #3
 800529a:	1aff      	subs	r7, r7, r3
 800529c:	2303      	movs	r3, #3
 800529e:	439f      	bics	r7, r3
 80052a0:	3708      	adds	r7, #8
 80052a2:	2f0c      	cmp	r7, #12
 80052a4:	d200      	bcs.n	80052a8 <_malloc_r+0x64>
 80052a6:	270c      	movs	r7, #12
 80052a8:	0039      	movs	r1, r7
 80052aa:	0030      	movs	r0, r6
 80052ac:	f7ff ffa8 	bl	8005200 <sbrk_aligned>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	d034      	beq.n	800531e <_malloc_r+0xda>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	19df      	adds	r7, r3, r7
 80052b8:	6027      	str	r7, [r4, #0]
 80052ba:	e013      	b.n	80052e4 <_malloc_r+0xa0>
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dacb      	bge.n	8005258 <_malloc_r+0x14>
 80052c0:	230c      	movs	r3, #12
 80052c2:	2500      	movs	r5, #0
 80052c4:	6033      	str	r3, [r6, #0]
 80052c6:	0028      	movs	r0, r5
 80052c8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80052ca:	6822      	ldr	r2, [r4, #0]
 80052cc:	1bd1      	subs	r1, r2, r7
 80052ce:	d420      	bmi.n	8005312 <_malloc_r+0xce>
 80052d0:	290b      	cmp	r1, #11
 80052d2:	d917      	bls.n	8005304 <_malloc_r+0xc0>
 80052d4:	19e2      	adds	r2, r4, r7
 80052d6:	6027      	str	r7, [r4, #0]
 80052d8:	42a3      	cmp	r3, r4
 80052da:	d111      	bne.n	8005300 <_malloc_r+0xbc>
 80052dc:	602a      	str	r2, [r5, #0]
 80052de:	6863      	ldr	r3, [r4, #4]
 80052e0:	6011      	str	r1, [r2, #0]
 80052e2:	6053      	str	r3, [r2, #4]
 80052e4:	0030      	movs	r0, r6
 80052e6:	0025      	movs	r5, r4
 80052e8:	f000 f86c 	bl	80053c4 <__malloc_unlock>
 80052ec:	2207      	movs	r2, #7
 80052ee:	350b      	adds	r5, #11
 80052f0:	1d23      	adds	r3, r4, #4
 80052f2:	4395      	bics	r5, r2
 80052f4:	1aea      	subs	r2, r5, r3
 80052f6:	429d      	cmp	r5, r3
 80052f8:	d0e5      	beq.n	80052c6 <_malloc_r+0x82>
 80052fa:	1b5b      	subs	r3, r3, r5
 80052fc:	50a3      	str	r3, [r4, r2]
 80052fe:	e7e2      	b.n	80052c6 <_malloc_r+0x82>
 8005300:	605a      	str	r2, [r3, #4]
 8005302:	e7ec      	b.n	80052de <_malloc_r+0x9a>
 8005304:	6862      	ldr	r2, [r4, #4]
 8005306:	42a3      	cmp	r3, r4
 8005308:	d101      	bne.n	800530e <_malloc_r+0xca>
 800530a:	602a      	str	r2, [r5, #0]
 800530c:	e7ea      	b.n	80052e4 <_malloc_r+0xa0>
 800530e:	605a      	str	r2, [r3, #4]
 8005310:	e7e8      	b.n	80052e4 <_malloc_r+0xa0>
 8005312:	0023      	movs	r3, r4
 8005314:	6864      	ldr	r4, [r4, #4]
 8005316:	e7a7      	b.n	8005268 <_malloc_r+0x24>
 8005318:	002c      	movs	r4, r5
 800531a:	686d      	ldr	r5, [r5, #4]
 800531c:	e7af      	b.n	800527e <_malloc_r+0x3a>
 800531e:	230c      	movs	r3, #12
 8005320:	0030      	movs	r0, r6
 8005322:	6033      	str	r3, [r6, #0]
 8005324:	f000 f84e 	bl	80053c4 <__malloc_unlock>
 8005328:	e7cd      	b.n	80052c6 <_malloc_r+0x82>
 800532a:	46c0      	nop			; (mov r8, r8)
 800532c:	20000278 	.word	0x20000278

08005330 <_realloc_r>:
 8005330:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005332:	0007      	movs	r7, r0
 8005334:	000e      	movs	r6, r1
 8005336:	0014      	movs	r4, r2
 8005338:	2900      	cmp	r1, #0
 800533a:	d105      	bne.n	8005348 <_realloc_r+0x18>
 800533c:	0011      	movs	r1, r2
 800533e:	f7ff ff81 	bl	8005244 <_malloc_r>
 8005342:	0005      	movs	r5, r0
 8005344:	0028      	movs	r0, r5
 8005346:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005348:	2a00      	cmp	r2, #0
 800534a:	d103      	bne.n	8005354 <_realloc_r+0x24>
 800534c:	f7ff ff0e 	bl	800516c <_free_r>
 8005350:	0025      	movs	r5, r4
 8005352:	e7f7      	b.n	8005344 <_realloc_r+0x14>
 8005354:	f000 f83e 	bl	80053d4 <_malloc_usable_size_r>
 8005358:	9001      	str	r0, [sp, #4]
 800535a:	4284      	cmp	r4, r0
 800535c:	d803      	bhi.n	8005366 <_realloc_r+0x36>
 800535e:	0035      	movs	r5, r6
 8005360:	0843      	lsrs	r3, r0, #1
 8005362:	42a3      	cmp	r3, r4
 8005364:	d3ee      	bcc.n	8005344 <_realloc_r+0x14>
 8005366:	0021      	movs	r1, r4
 8005368:	0038      	movs	r0, r7
 800536a:	f7ff ff6b 	bl	8005244 <_malloc_r>
 800536e:	1e05      	subs	r5, r0, #0
 8005370:	d0e8      	beq.n	8005344 <_realloc_r+0x14>
 8005372:	9b01      	ldr	r3, [sp, #4]
 8005374:	0022      	movs	r2, r4
 8005376:	429c      	cmp	r4, r3
 8005378:	d900      	bls.n	800537c <_realloc_r+0x4c>
 800537a:	001a      	movs	r2, r3
 800537c:	0031      	movs	r1, r6
 800537e:	0028      	movs	r0, r5
 8005380:	f7ff fbbe 	bl	8004b00 <memcpy>
 8005384:	0031      	movs	r1, r6
 8005386:	0038      	movs	r0, r7
 8005388:	f7ff fef0 	bl	800516c <_free_r>
 800538c:	e7da      	b.n	8005344 <_realloc_r+0x14>
	...

08005390 <_sbrk_r>:
 8005390:	2300      	movs	r3, #0
 8005392:	b570      	push	{r4, r5, r6, lr}
 8005394:	4d06      	ldr	r5, [pc, #24]	; (80053b0 <_sbrk_r+0x20>)
 8005396:	0004      	movs	r4, r0
 8005398:	0008      	movs	r0, r1
 800539a:	602b      	str	r3, [r5, #0]
 800539c:	f7fb ff82 	bl	80012a4 <_sbrk>
 80053a0:	1c43      	adds	r3, r0, #1
 80053a2:	d103      	bne.n	80053ac <_sbrk_r+0x1c>
 80053a4:	682b      	ldr	r3, [r5, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d000      	beq.n	80053ac <_sbrk_r+0x1c>
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	bd70      	pop	{r4, r5, r6, pc}
 80053ae:	46c0      	nop			; (mov r8, r8)
 80053b0:	20000270 	.word	0x20000270

080053b4 <__malloc_lock>:
 80053b4:	b510      	push	{r4, lr}
 80053b6:	4802      	ldr	r0, [pc, #8]	; (80053c0 <__malloc_lock+0xc>)
 80053b8:	f7ff feb8 	bl	800512c <__retarget_lock_acquire_recursive>
 80053bc:	bd10      	pop	{r4, pc}
 80053be:	46c0      	nop			; (mov r8, r8)
 80053c0:	20000274 	.word	0x20000274

080053c4 <__malloc_unlock>:
 80053c4:	b510      	push	{r4, lr}
 80053c6:	4802      	ldr	r0, [pc, #8]	; (80053d0 <__malloc_unlock+0xc>)
 80053c8:	f7ff feb1 	bl	800512e <__retarget_lock_release_recursive>
 80053cc:	bd10      	pop	{r4, pc}
 80053ce:	46c0      	nop			; (mov r8, r8)
 80053d0:	20000274 	.word	0x20000274

080053d4 <_malloc_usable_size_r>:
 80053d4:	1f0b      	subs	r3, r1, #4
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	1f18      	subs	r0, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	da01      	bge.n	80053e2 <_malloc_usable_size_r+0xe>
 80053de:	580b      	ldr	r3, [r1, r0]
 80053e0:	18c0      	adds	r0, r0, r3
 80053e2:	4770      	bx	lr

080053e4 <_init>:
 80053e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e6:	46c0      	nop			; (mov r8, r8)
 80053e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053ea:	bc08      	pop	{r3}
 80053ec:	469e      	mov	lr, r3
 80053ee:	4770      	bx	lr

080053f0 <_fini>:
 80053f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f6:	bc08      	pop	{r3}
 80053f8:	469e      	mov	lr, r3
 80053fa:	4770      	bx	lr
