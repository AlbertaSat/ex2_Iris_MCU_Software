
ex2_Iris_MCU_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08003298  08003298  00013298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033a0  080033a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080033a0  080033a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080033a8  080033a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033a8  080033a8  000133a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080033ac  080033ac  000133ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080033b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ec  2000000c  080033bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f8  080033bc  000201f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e81d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002036  00000000  00000000  0002e851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c20  00000000  00000000  00030888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  000314a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000020b6  00000000  00000000  00032000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f70f  00000000  00000000  000340b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00073cac  00000000  00000000  000437c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b7471  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002b7c  00000000  00000000  000b74c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003280 	.word	0x08003280

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003280 	.word	0x08003280

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <__aeabi_uldivmod>:
 8000230:	2b00      	cmp	r3, #0
 8000232:	d111      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000234:	2a00      	cmp	r2, #0
 8000236:	d10f      	bne.n	8000258 <__aeabi_uldivmod+0x28>
 8000238:	2900      	cmp	r1, #0
 800023a:	d100      	bne.n	800023e <__aeabi_uldivmod+0xe>
 800023c:	2800      	cmp	r0, #0
 800023e:	d002      	beq.n	8000246 <__aeabi_uldivmod+0x16>
 8000240:	2100      	movs	r1, #0
 8000242:	43c9      	mvns	r1, r1
 8000244:	0008      	movs	r0, r1
 8000246:	b407      	push	{r0, r1, r2}
 8000248:	4802      	ldr	r0, [pc, #8]	; (8000254 <__aeabi_uldivmod+0x24>)
 800024a:	a102      	add	r1, pc, #8	; (adr r1, 8000254 <__aeabi_uldivmod+0x24>)
 800024c:	1840      	adds	r0, r0, r1
 800024e:	9002      	str	r0, [sp, #8]
 8000250:	bd03      	pop	{r0, r1, pc}
 8000252:	46c0      	nop			; (mov r8, r8)
 8000254:	ffffffd9 	.word	0xffffffd9
 8000258:	b403      	push	{r0, r1}
 800025a:	4668      	mov	r0, sp
 800025c:	b501      	push	{r0, lr}
 800025e:	9802      	ldr	r0, [sp, #8]
 8000260:	f000 f834 	bl	80002cc <__udivmoddi4>
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	469e      	mov	lr, r3
 8000268:	b002      	add	sp, #8
 800026a:	bc0c      	pop	{r2, r3}
 800026c:	4770      	bx	lr
 800026e:	46c0      	nop			; (mov r8, r8)

08000270 <__aeabi_lmul>:
 8000270:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000272:	46ce      	mov	lr, r9
 8000274:	4647      	mov	r7, r8
 8000276:	b580      	push	{r7, lr}
 8000278:	0007      	movs	r7, r0
 800027a:	4699      	mov	r9, r3
 800027c:	0c3b      	lsrs	r3, r7, #16
 800027e:	469c      	mov	ip, r3
 8000280:	0413      	lsls	r3, r2, #16
 8000282:	0c1b      	lsrs	r3, r3, #16
 8000284:	001d      	movs	r5, r3
 8000286:	000e      	movs	r6, r1
 8000288:	4661      	mov	r1, ip
 800028a:	0400      	lsls	r0, r0, #16
 800028c:	0c14      	lsrs	r4, r2, #16
 800028e:	0c00      	lsrs	r0, r0, #16
 8000290:	4345      	muls	r5, r0
 8000292:	434b      	muls	r3, r1
 8000294:	4360      	muls	r0, r4
 8000296:	4361      	muls	r1, r4
 8000298:	18c0      	adds	r0, r0, r3
 800029a:	0c2c      	lsrs	r4, r5, #16
 800029c:	1820      	adds	r0, r4, r0
 800029e:	468c      	mov	ip, r1
 80002a0:	4283      	cmp	r3, r0
 80002a2:	d903      	bls.n	80002ac <__aeabi_lmul+0x3c>
 80002a4:	2380      	movs	r3, #128	; 0x80
 80002a6:	025b      	lsls	r3, r3, #9
 80002a8:	4698      	mov	r8, r3
 80002aa:	44c4      	add	ip, r8
 80002ac:	4649      	mov	r1, r9
 80002ae:	4379      	muls	r1, r7
 80002b0:	4372      	muls	r2, r6
 80002b2:	0c03      	lsrs	r3, r0, #16
 80002b4:	4463      	add	r3, ip
 80002b6:	042d      	lsls	r5, r5, #16
 80002b8:	0c2d      	lsrs	r5, r5, #16
 80002ba:	18c9      	adds	r1, r1, r3
 80002bc:	0400      	lsls	r0, r0, #16
 80002be:	1940      	adds	r0, r0, r5
 80002c0:	1889      	adds	r1, r1, r2
 80002c2:	bcc0      	pop	{r6, r7}
 80002c4:	46b9      	mov	r9, r7
 80002c6:	46b0      	mov	r8, r6
 80002c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ca:	46c0      	nop			; (mov r8, r8)

080002cc <__udivmoddi4>:
 80002cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002ce:	4657      	mov	r7, sl
 80002d0:	464e      	mov	r6, r9
 80002d2:	4645      	mov	r5, r8
 80002d4:	46de      	mov	lr, fp
 80002d6:	b5e0      	push	{r5, r6, r7, lr}
 80002d8:	0004      	movs	r4, r0
 80002da:	000d      	movs	r5, r1
 80002dc:	4692      	mov	sl, r2
 80002de:	4699      	mov	r9, r3
 80002e0:	b083      	sub	sp, #12
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d830      	bhi.n	8000348 <__udivmoddi4+0x7c>
 80002e6:	d02d      	beq.n	8000344 <__udivmoddi4+0x78>
 80002e8:	4649      	mov	r1, r9
 80002ea:	4650      	mov	r0, sl
 80002ec:	f000 f8d8 	bl	80004a0 <__clzdi2>
 80002f0:	0029      	movs	r1, r5
 80002f2:	0006      	movs	r6, r0
 80002f4:	0020      	movs	r0, r4
 80002f6:	f000 f8d3 	bl	80004a0 <__clzdi2>
 80002fa:	1a33      	subs	r3, r6, r0
 80002fc:	4698      	mov	r8, r3
 80002fe:	3b20      	subs	r3, #32
 8000300:	469b      	mov	fp, r3
 8000302:	d433      	bmi.n	800036c <__udivmoddi4+0xa0>
 8000304:	465a      	mov	r2, fp
 8000306:	4653      	mov	r3, sl
 8000308:	4093      	lsls	r3, r2
 800030a:	4642      	mov	r2, r8
 800030c:	001f      	movs	r7, r3
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	001e      	movs	r6, r3
 8000314:	42af      	cmp	r7, r5
 8000316:	d83a      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000318:	42af      	cmp	r7, r5
 800031a:	d100      	bne.n	800031e <__udivmoddi4+0x52>
 800031c:	e078      	b.n	8000410 <__udivmoddi4+0x144>
 800031e:	465b      	mov	r3, fp
 8000320:	1ba4      	subs	r4, r4, r6
 8000322:	41bd      	sbcs	r5, r7
 8000324:	2b00      	cmp	r3, #0
 8000326:	da00      	bge.n	800032a <__udivmoddi4+0x5e>
 8000328:	e075      	b.n	8000416 <__udivmoddi4+0x14a>
 800032a:	2200      	movs	r2, #0
 800032c:	2300      	movs	r3, #0
 800032e:	9200      	str	r2, [sp, #0]
 8000330:	9301      	str	r3, [sp, #4]
 8000332:	2301      	movs	r3, #1
 8000334:	465a      	mov	r2, fp
 8000336:	4093      	lsls	r3, r2
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	4642      	mov	r2, r8
 800033e:	4093      	lsls	r3, r2
 8000340:	9300      	str	r3, [sp, #0]
 8000342:	e028      	b.n	8000396 <__udivmoddi4+0xca>
 8000344:	4282      	cmp	r2, r0
 8000346:	d9cf      	bls.n	80002e8 <__udivmoddi4+0x1c>
 8000348:	2200      	movs	r2, #0
 800034a:	2300      	movs	r3, #0
 800034c:	9200      	str	r2, [sp, #0]
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000352:	2b00      	cmp	r3, #0
 8000354:	d001      	beq.n	800035a <__udivmoddi4+0x8e>
 8000356:	601c      	str	r4, [r3, #0]
 8000358:	605d      	str	r5, [r3, #4]
 800035a:	9800      	ldr	r0, [sp, #0]
 800035c:	9901      	ldr	r1, [sp, #4]
 800035e:	b003      	add	sp, #12
 8000360:	bcf0      	pop	{r4, r5, r6, r7}
 8000362:	46bb      	mov	fp, r7
 8000364:	46b2      	mov	sl, r6
 8000366:	46a9      	mov	r9, r5
 8000368:	46a0      	mov	r8, r4
 800036a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036c:	4642      	mov	r2, r8
 800036e:	2320      	movs	r3, #32
 8000370:	1a9b      	subs	r3, r3, r2
 8000372:	4652      	mov	r2, sl
 8000374:	40da      	lsrs	r2, r3
 8000376:	4641      	mov	r1, r8
 8000378:	0013      	movs	r3, r2
 800037a:	464a      	mov	r2, r9
 800037c:	408a      	lsls	r2, r1
 800037e:	0017      	movs	r7, r2
 8000380:	4642      	mov	r2, r8
 8000382:	431f      	orrs	r7, r3
 8000384:	4653      	mov	r3, sl
 8000386:	4093      	lsls	r3, r2
 8000388:	001e      	movs	r6, r3
 800038a:	42af      	cmp	r7, r5
 800038c:	d9c4      	bls.n	8000318 <__udivmoddi4+0x4c>
 800038e:	2200      	movs	r2, #0
 8000390:	2300      	movs	r3, #0
 8000392:	9200      	str	r2, [sp, #0]
 8000394:	9301      	str	r3, [sp, #4]
 8000396:	4643      	mov	r3, r8
 8000398:	2b00      	cmp	r3, #0
 800039a:	d0d9      	beq.n	8000350 <__udivmoddi4+0x84>
 800039c:	07fb      	lsls	r3, r7, #31
 800039e:	0872      	lsrs	r2, r6, #1
 80003a0:	431a      	orrs	r2, r3
 80003a2:	4646      	mov	r6, r8
 80003a4:	087b      	lsrs	r3, r7, #1
 80003a6:	e00e      	b.n	80003c6 <__udivmoddi4+0xfa>
 80003a8:	42ab      	cmp	r3, r5
 80003aa:	d101      	bne.n	80003b0 <__udivmoddi4+0xe4>
 80003ac:	42a2      	cmp	r2, r4
 80003ae:	d80c      	bhi.n	80003ca <__udivmoddi4+0xfe>
 80003b0:	1aa4      	subs	r4, r4, r2
 80003b2:	419d      	sbcs	r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	1924      	adds	r4, r4, r4
 80003b8:	416d      	adcs	r5, r5
 80003ba:	2100      	movs	r1, #0
 80003bc:	3e01      	subs	r6, #1
 80003be:	1824      	adds	r4, r4, r0
 80003c0:	414d      	adcs	r5, r1
 80003c2:	2e00      	cmp	r6, #0
 80003c4:	d006      	beq.n	80003d4 <__udivmoddi4+0x108>
 80003c6:	42ab      	cmp	r3, r5
 80003c8:	d9ee      	bls.n	80003a8 <__udivmoddi4+0xdc>
 80003ca:	3e01      	subs	r6, #1
 80003cc:	1924      	adds	r4, r4, r4
 80003ce:	416d      	adcs	r5, r5
 80003d0:	2e00      	cmp	r6, #0
 80003d2:	d1f8      	bne.n	80003c6 <__udivmoddi4+0xfa>
 80003d4:	9800      	ldr	r0, [sp, #0]
 80003d6:	9901      	ldr	r1, [sp, #4]
 80003d8:	465b      	mov	r3, fp
 80003da:	1900      	adds	r0, r0, r4
 80003dc:	4169      	adcs	r1, r5
 80003de:	2b00      	cmp	r3, #0
 80003e0:	db24      	blt.n	800042c <__udivmoddi4+0x160>
 80003e2:	002b      	movs	r3, r5
 80003e4:	465a      	mov	r2, fp
 80003e6:	4644      	mov	r4, r8
 80003e8:	40d3      	lsrs	r3, r2
 80003ea:	002a      	movs	r2, r5
 80003ec:	40e2      	lsrs	r2, r4
 80003ee:	001c      	movs	r4, r3
 80003f0:	465b      	mov	r3, fp
 80003f2:	0015      	movs	r5, r2
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	db2a      	blt.n	800044e <__udivmoddi4+0x182>
 80003f8:	0026      	movs	r6, r4
 80003fa:	409e      	lsls	r6, r3
 80003fc:	0033      	movs	r3, r6
 80003fe:	0026      	movs	r6, r4
 8000400:	4647      	mov	r7, r8
 8000402:	40be      	lsls	r6, r7
 8000404:	0032      	movs	r2, r6
 8000406:	1a80      	subs	r0, r0, r2
 8000408:	4199      	sbcs	r1, r3
 800040a:	9000      	str	r0, [sp, #0]
 800040c:	9101      	str	r1, [sp, #4]
 800040e:	e79f      	b.n	8000350 <__udivmoddi4+0x84>
 8000410:	42a3      	cmp	r3, r4
 8000412:	d8bc      	bhi.n	800038e <__udivmoddi4+0xc2>
 8000414:	e783      	b.n	800031e <__udivmoddi4+0x52>
 8000416:	4642      	mov	r2, r8
 8000418:	2320      	movs	r3, #32
 800041a:	2100      	movs	r1, #0
 800041c:	1a9b      	subs	r3, r3, r2
 800041e:	2200      	movs	r2, #0
 8000420:	9100      	str	r1, [sp, #0]
 8000422:	9201      	str	r2, [sp, #4]
 8000424:	2201      	movs	r2, #1
 8000426:	40da      	lsrs	r2, r3
 8000428:	9201      	str	r2, [sp, #4]
 800042a:	e786      	b.n	800033a <__udivmoddi4+0x6e>
 800042c:	4642      	mov	r2, r8
 800042e:	2320      	movs	r3, #32
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	002a      	movs	r2, r5
 8000434:	4646      	mov	r6, r8
 8000436:	409a      	lsls	r2, r3
 8000438:	0023      	movs	r3, r4
 800043a:	40f3      	lsrs	r3, r6
 800043c:	4644      	mov	r4, r8
 800043e:	4313      	orrs	r3, r2
 8000440:	002a      	movs	r2, r5
 8000442:	40e2      	lsrs	r2, r4
 8000444:	001c      	movs	r4, r3
 8000446:	465b      	mov	r3, fp
 8000448:	0015      	movs	r5, r2
 800044a:	2b00      	cmp	r3, #0
 800044c:	dad4      	bge.n	80003f8 <__udivmoddi4+0x12c>
 800044e:	4642      	mov	r2, r8
 8000450:	002f      	movs	r7, r5
 8000452:	2320      	movs	r3, #32
 8000454:	0026      	movs	r6, r4
 8000456:	4097      	lsls	r7, r2
 8000458:	1a9b      	subs	r3, r3, r2
 800045a:	40de      	lsrs	r6, r3
 800045c:	003b      	movs	r3, r7
 800045e:	4333      	orrs	r3, r6
 8000460:	e7cd      	b.n	80003fe <__udivmoddi4+0x132>
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__clzsi2>:
 8000464:	211c      	movs	r1, #28
 8000466:	2301      	movs	r3, #1
 8000468:	041b      	lsls	r3, r3, #16
 800046a:	4298      	cmp	r0, r3
 800046c:	d301      	bcc.n	8000472 <__clzsi2+0xe>
 800046e:	0c00      	lsrs	r0, r0, #16
 8000470:	3910      	subs	r1, #16
 8000472:	0a1b      	lsrs	r3, r3, #8
 8000474:	4298      	cmp	r0, r3
 8000476:	d301      	bcc.n	800047c <__clzsi2+0x18>
 8000478:	0a00      	lsrs	r0, r0, #8
 800047a:	3908      	subs	r1, #8
 800047c:	091b      	lsrs	r3, r3, #4
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0x22>
 8000482:	0900      	lsrs	r0, r0, #4
 8000484:	3904      	subs	r1, #4
 8000486:	a202      	add	r2, pc, #8	; (adr r2, 8000490 <__clzsi2+0x2c>)
 8000488:	5c10      	ldrb	r0, [r2, r0]
 800048a:	1840      	adds	r0, r0, r1
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			; (mov r8, r8)
 8000490:	02020304 	.word	0x02020304
 8000494:	01010101 	.word	0x01010101
	...

080004a0 <__clzdi2>:
 80004a0:	b510      	push	{r4, lr}
 80004a2:	2900      	cmp	r1, #0
 80004a4:	d103      	bne.n	80004ae <__clzdi2+0xe>
 80004a6:	f7ff ffdd 	bl	8000464 <__clzsi2>
 80004aa:	3020      	adds	r0, #32
 80004ac:	e002      	b.n	80004b4 <__clzdi2+0x14>
 80004ae:	0008      	movs	r0, r1
 80004b0:	f7ff ffd8 	bl	8000464 <__clzsi2>
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)

080004b8 <_toggleLED>:
	DBG_PUT("--------------------\r\n");

	HAL_Delay(1000);
}

void _toggleLED(void){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(TEST_OUT1_GPIO_Port, TEST_OUT1_Pin);
 80004bc:	4b03      	ldr	r3, [pc, #12]	; (80004cc <_toggleLED+0x14>)
 80004be:	2101      	movs	r1, #1
 80004c0:	0018      	movs	r0, r3
 80004c2:	f000 ff78 	bl	80013b6 <HAL_GPIO_TogglePin>
}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	46bd      	mov	sp, r7
 80004ca:	bd80      	pop	{r7, pc}
 80004cc:	50000400 	.word	0x50000400

080004d0 <DBG_PUT>:
#include <stdio.h>
#include <string.h>

extern UART_HandleTypeDef huart1;

static inline void DBG_PUT(char *str) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	0018      	movs	r0, r3
 80004dc:	f7ff fe14 	bl	8000108 <strlen>
 80004e0:	0003      	movs	r3, r0
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	6879      	ldr	r1, [r7, #4]
 80004e6:	4804      	ldr	r0, [pc, #16]	; (80004f8 <DBG_PUT+0x28>)
 80004e8:	2364      	movs	r3, #100	; 0x64
 80004ea:	f002 f995 	bl	8002818 <HAL_UART_Transmit>
}
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	b002      	add	sp, #8
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	46c0      	nop			; (mov r8, r8)
 80004f8:	20000170 	.word	0x20000170

080004fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 8000500:	f000 fc04 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000504:	f000 f822 	bl	800054c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000508:	f000 f9a8 	bl	800085c <MX_GPIO_Init>
  MX_I2C1_Init();
 800050c:	f000 f88c 	bl	8000628 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000510:	f000 f8ca 	bl	80006a8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000514:	f000 f908 	bl	8000728 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000518:	f000 f938 	bl	800078c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 800051c:	f000 f96e 	bl	80007fc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // init nand flash
//  NAND_SPI_Init(&hspi2);
  DBG_PUT("-----------------------------------\r\n");
 8000520:	4b08      	ldr	r3, [pc, #32]	; (8000544 <main+0x48>)
 8000522:	0018      	movs	r0, r3
 8000524:	f7ff ffd4 	bl	80004d0 <DBG_PUT>
  DBG_PUT("Iris Electronics Long Duration Test Software\r\nVersion 1.01.0; 2022-05-04\r\nSlave Side\r\n");
 8000528:	4b07      	ldr	r3, [pc, #28]	; (8000548 <main+0x4c>)
 800052a:	0018      	movs	r0, r3
 800052c:	f7ff ffd0 	bl	80004d0 <DBG_PUT>
  DBG_PUT("-----------------------------------\r\n");
 8000530:	4b04      	ldr	r3, [pc, #16]	; (8000544 <main+0x48>)
 8000532:	0018      	movs	r0, r3
 8000534:	f7ff ffcc 	bl	80004d0 <DBG_PUT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  _toggleLED();
 8000538:	f7ff ffbe 	bl	80004b8 <_toggleLED>
	  HAL_Delay(250);
 800053c:	20fa      	movs	r0, #250	; 0xfa
 800053e:	f000 fc55 	bl	8000dec <HAL_Delay>
	  _toggleLED();
 8000542:	e7f9      	b.n	8000538 <main+0x3c>
 8000544:	08003298 	.word	0x08003298
 8000548:	080032c0 	.word	0x080032c0

0800054c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b09b      	sub	sp, #108	; 0x6c
 8000550:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000552:	2434      	movs	r4, #52	; 0x34
 8000554:	193b      	adds	r3, r7, r4
 8000556:	0018      	movs	r0, r3
 8000558:	2334      	movs	r3, #52	; 0x34
 800055a:	001a      	movs	r2, r3
 800055c:	2100      	movs	r1, #0
 800055e:	f002 fe87 	bl	8003270 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000562:	2320      	movs	r3, #32
 8000564:	18fb      	adds	r3, r7, r3
 8000566:	0018      	movs	r0, r3
 8000568:	2314      	movs	r3, #20
 800056a:	001a      	movs	r2, r3
 800056c:	2100      	movs	r1, #0
 800056e:	f002 fe7f 	bl	8003270 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000572:	003b      	movs	r3, r7
 8000574:	0018      	movs	r0, r3
 8000576:	2320      	movs	r3, #32
 8000578:	001a      	movs	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	f002 fe78 	bl	8003270 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	4b27      	ldr	r3, [pc, #156]	; (8000620 <SystemClock_Config+0xd4>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a27      	ldr	r2, [pc, #156]	; (8000624 <SystemClock_Config+0xd8>)
 8000586:	401a      	ands	r2, r3
 8000588:	4b25      	ldr	r3, [pc, #148]	; (8000620 <SystemClock_Config+0xd4>)
 800058a:	2180      	movs	r1, #128	; 0x80
 800058c:	0109      	lsls	r1, r1, #4
 800058e:	430a      	orrs	r2, r1
 8000590:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000592:	0021      	movs	r1, r4
 8000594:	187b      	adds	r3, r7, r1
 8000596:	2210      	movs	r2, #16
 8000598:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800059a:	187b      	adds	r3, r7, r1
 800059c:	2201      	movs	r2, #1
 800059e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005a0:	187b      	adds	r3, r7, r1
 80005a2:	2200      	movs	r2, #0
 80005a4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80005a6:	187b      	adds	r3, r7, r1
 80005a8:	22a0      	movs	r2, #160	; 0xa0
 80005aa:	0212      	lsls	r2, r2, #8
 80005ac:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005ae:	187b      	adds	r3, r7, r1
 80005b0:	2200      	movs	r2, #0
 80005b2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	187b      	adds	r3, r7, r1
 80005b6:	0018      	movs	r0, r3
 80005b8:	f001 f846 	bl	8001648 <HAL_RCC_OscConfig>
 80005bc:	1e03      	subs	r3, r0, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80005c0:	f000 f9ca 	bl	8000958 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	2120      	movs	r1, #32
 80005c6:	187b      	adds	r3, r7, r1
 80005c8:	220f      	movs	r2, #15
 80005ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005cc:	187b      	adds	r3, r7, r1
 80005ce:	2200      	movs	r2, #0
 80005d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	187b      	adds	r3, r7, r1
 80005d4:	2200      	movs	r2, #0
 80005d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2200      	movs	r2, #0
 80005dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2200      	movs	r2, #0
 80005e2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2100      	movs	r1, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f001 fba9 	bl	8001d40 <HAL_RCC_ClockConfig>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80005f2:	f000 f9b1 	bl	8000958 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80005f6:	003b      	movs	r3, r7
 80005f8:	2209      	movs	r2, #9
 80005fa:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80005fc:	003b      	movs	r3, r7
 80005fe:	2200      	movs	r2, #0
 8000600:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000602:	003b      	movs	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000608:	003b      	movs	r3, r7
 800060a:	0018      	movs	r0, r3
 800060c:	f001 fdba 	bl	8002184 <HAL_RCCEx_PeriphCLKConfig>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000614:	f000 f9a0 	bl	8000958 <Error_Handler>
  }
}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	b01b      	add	sp, #108	; 0x6c
 800061e:	bd90      	pop	{r4, r7, pc}
 8000620:	40007000 	.word	0x40007000
 8000624:	ffffe7ff 	.word	0xffffe7ff

08000628 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800062c:	4b1c      	ldr	r3, [pc, #112]	; (80006a0 <MX_I2C1_Init+0x78>)
 800062e:	4a1d      	ldr	r2, [pc, #116]	; (80006a4 <MX_I2C1_Init+0x7c>)
 8000630:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000632:	4b1b      	ldr	r3, [pc, #108]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000634:	22e1      	movs	r2, #225	; 0xe1
 8000636:	00d2      	lsls	r2, r2, #3
 8000638:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800063a:	4b19      	ldr	r3, [pc, #100]	; (80006a0 <MX_I2C1_Init+0x78>)
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000640:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000642:	2201      	movs	r2, #1
 8000644:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000646:	4b16      	ldr	r3, [pc, #88]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000648:	2200      	movs	r2, #0
 800064a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800064c:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <MX_I2C1_Init+0x78>)
 800064e:	2200      	movs	r2, #0
 8000650:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000652:	4b13      	ldr	r3, [pc, #76]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C1_Init+0x78>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800065e:	4b10      	ldr	r3, [pc, #64]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000666:	0018      	movs	r0, r3
 8000668:	f000 fec0 	bl	80013ec <HAL_I2C_Init>
 800066c:	1e03      	subs	r3, r0, #0
 800066e:	d001      	beq.n	8000674 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000670:	f000 f972 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000676:	2100      	movs	r1, #0
 8000678:	0018      	movs	r0, r3
 800067a:	f000 ff4d 	bl	8001518 <HAL_I2CEx_ConfigAnalogFilter>
 800067e:	1e03      	subs	r3, r0, #0
 8000680:	d001      	beq.n	8000686 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000682:	f000 f969 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2C1_Init+0x78>)
 8000688:	2100      	movs	r1, #0
 800068a:	0018      	movs	r0, r3
 800068c:	f000 ff90 	bl	80015b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000690:	1e03      	subs	r3, r0, #0
 8000692:	d001      	beq.n	8000698 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000694:	f000 f960 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000698:	46c0      	nop			; (mov r8, r8)
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	20000028 	.word	0x20000028
 80006a4:	40005400 	.word	0x40005400

080006a8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006ac:	4b1c      	ldr	r3, [pc, #112]	; (8000720 <MX_I2C2_Init+0x78>)
 80006ae:	4a1d      	ldr	r2, [pc, #116]	; (8000724 <MX_I2C2_Init+0x7c>)
 80006b0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 80006b2:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C2_Init+0x78>)
 80006b4:	22e1      	movs	r2, #225	; 0xe1
 80006b6:	00d2      	lsls	r2, r2, #3
 80006b8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80006ba:	4b19      	ldr	r3, [pc, #100]	; (8000720 <MX_I2C2_Init+0x78>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006c0:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C2_Init+0x78>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c6:	4b16      	ldr	r3, [pc, #88]	; (8000720 <MX_I2C2_Init+0x78>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006cc:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_I2C2_Init+0x78>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006d2:	4b13      	ldr	r3, [pc, #76]	; (8000720 <MX_I2C2_Init+0x78>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006d8:	4b11      	ldr	r3, [pc, #68]	; (8000720 <MX_I2C2_Init+0x78>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_I2C2_Init+0x78>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006e4:	4b0e      	ldr	r3, [pc, #56]	; (8000720 <MX_I2C2_Init+0x78>)
 80006e6:	0018      	movs	r0, r3
 80006e8:	f000 fe80 	bl	80013ec <HAL_I2C_Init>
 80006ec:	1e03      	subs	r3, r0, #0
 80006ee:	d001      	beq.n	80006f4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006f0:	f000 f932 	bl	8000958 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006f4:	4b0a      	ldr	r3, [pc, #40]	; (8000720 <MX_I2C2_Init+0x78>)
 80006f6:	2100      	movs	r1, #0
 80006f8:	0018      	movs	r0, r3
 80006fa:	f000 ff0d 	bl	8001518 <HAL_I2CEx_ConfigAnalogFilter>
 80006fe:	1e03      	subs	r3, r0, #0
 8000700:	d001      	beq.n	8000706 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000702:	f000 f929 	bl	8000958 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <MX_I2C2_Init+0x78>)
 8000708:	2100      	movs	r1, #0
 800070a:	0018      	movs	r0, r3
 800070c:	f000 ff50 	bl	80015b0 <HAL_I2CEx_ConfigDigitalFilter>
 8000710:	1e03      	subs	r3, r0, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000714:	f000 f920 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	46c0      	nop			; (mov r8, r8)
 8000720:	20000074 	.word	0x20000074
 8000724:	40005800 	.word	0x40005800

08000728 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800072c:	4b15      	ldr	r3, [pc, #84]	; (8000784 <MX_SPI1_Init+0x5c>)
 800072e:	4a16      	ldr	r2, [pc, #88]	; (8000788 <MX_SPI1_Init+0x60>)
 8000730:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_SPI1_Init+0x5c>)
 8000734:	2200      	movs	r2, #0
 8000736:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000738:	4b12      	ldr	r3, [pc, #72]	; (8000784 <MX_SPI1_Init+0x5c>)
 800073a:	2200      	movs	r2, #0
 800073c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_SPI1_Init+0x5c>)
 8000740:	2200      	movs	r2, #0
 8000742:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_SPI1_Init+0x5c>)
 8000746:	2200      	movs	r2, #0
 8000748:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_SPI1_Init+0x5c>)
 800074c:	2200      	movs	r2, #0
 800074e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_SPI1_Init+0x5c>)
 8000752:	2200      	movs	r2, #0
 8000754:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_SPI1_Init+0x5c>)
 8000758:	2200      	movs	r2, #0
 800075a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_SPI1_Init+0x5c>)
 800075e:	2200      	movs	r2, #0
 8000760:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_SPI1_Init+0x5c>)
 8000764:	2200      	movs	r2, #0
 8000766:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_SPI1_Init+0x5c>)
 800076a:	2207      	movs	r2, #7
 800076c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <MX_SPI1_Init+0x5c>)
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fe4d 	bl	8002410 <HAL_SPI_Init>
 8000776:	1e03      	subs	r3, r0, #0
 8000778:	d001      	beq.n	800077e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 800077a:	f000 f8ed 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	200000c0 	.word	0x200000c0
 8000788:	40013000 	.word	0x40013000

0800078c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000790:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_SPI2_Init+0x68>)
 8000792:	4a19      	ldr	r2, [pc, #100]	; (80007f8 <MX_SPI2_Init+0x6c>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b17      	ldr	r3, [pc, #92]	; (80007f4 <MX_SPI2_Init+0x68>)
 8000798:	2282      	movs	r2, #130	; 0x82
 800079a:	0052      	lsls	r2, r2, #1
 800079c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a4:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007aa:	4b12      	ldr	r3, [pc, #72]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007b8:	2280      	movs	r2, #128	; 0x80
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007be:	4b0d      	ldr	r3, [pc, #52]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c4:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b0a      	ldr	r3, [pc, #40]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b08      	ldr	r3, [pc, #32]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007d8:	2207      	movs	r2, #7
 80007da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <MX_SPI2_Init+0x68>)
 80007de:	0018      	movs	r0, r3
 80007e0:	f001 fe16 	bl	8002410 <HAL_SPI_Init>
 80007e4:	1e03      	subs	r3, r0, #0
 80007e6:	d001      	beq.n	80007ec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 f8b6 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	20000118 	.word	0x20000118
 80007f8:	40003800 	.word	0x40003800

080007fc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000802:	4a15      	ldr	r2, [pc, #84]	; (8000858 <MX_USART1_UART_Init+0x5c>)
 8000804:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000808:	22e1      	movs	r2, #225	; 0xe1
 800080a:	0252      	lsls	r2, r2, #9
 800080c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800080e:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000822:	220c      	movs	r2, #12
 8000824:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800082e:	2200      	movs	r2, #0
 8000830:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000834:	2200      	movs	r2, #0
 8000836:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART1_UART_Init+0x58>)
 800083a:	2200      	movs	r2, #0
 800083c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4b05      	ldr	r3, [pc, #20]	; (8000854 <MX_USART1_UART_Init+0x58>)
 8000840:	0018      	movs	r0, r3
 8000842:	f001 ff95 	bl	8002770 <HAL_UART_Init>
 8000846:	1e03      	subs	r3, r0, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800084a:	f000 f885 	bl	8000958 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	46c0      	nop			; (mov r8, r8)
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	20000170 	.word	0x20000170
 8000858:	40013800 	.word	0x40013800

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b590      	push	{r4, r7, lr}
 800085e:	b089      	sub	sp, #36	; 0x24
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	240c      	movs	r4, #12
 8000864:	193b      	adds	r3, r7, r4
 8000866:	0018      	movs	r0, r3
 8000868:	2314      	movs	r3, #20
 800086a:	001a      	movs	r2, r3
 800086c:	2100      	movs	r1, #0
 800086e:	f002 fcff 	bl	8003270 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000872:	4b35      	ldr	r3, [pc, #212]	; (8000948 <MX_GPIO_Init+0xec>)
 8000874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000876:	4b34      	ldr	r3, [pc, #208]	; (8000948 <MX_GPIO_Init+0xec>)
 8000878:	2180      	movs	r1, #128	; 0x80
 800087a:	430a      	orrs	r2, r1
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
 800087e:	4b32      	ldr	r3, [pc, #200]	; (8000948 <MX_GPIO_Init+0xec>)
 8000880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	4013      	ands	r3, r2
 8000886:	60bb      	str	r3, [r7, #8]
 8000888:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088a:	4b2f      	ldr	r3, [pc, #188]	; (8000948 <MX_GPIO_Init+0xec>)
 800088c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800088e:	4b2e      	ldr	r3, [pc, #184]	; (8000948 <MX_GPIO_Init+0xec>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	62da      	str	r2, [r3, #44]	; 0x2c
 8000896:	4b2c      	ldr	r3, [pc, #176]	; (8000948 <MX_GPIO_Init+0xec>)
 8000898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a2:	4b29      	ldr	r3, [pc, #164]	; (8000948 <MX_GPIO_Init+0xec>)
 80008a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a6:	4b28      	ldr	r3, [pc, #160]	; (8000948 <MX_GPIO_Init+0xec>)
 80008a8:	2102      	movs	r1, #2
 80008aa:	430a      	orrs	r2, r1
 80008ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ae:	4b26      	ldr	r3, [pc, #152]	; (8000948 <MX_GPIO_Init+0xec>)
 80008b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b2:	2202      	movs	r2, #2
 80008b4:	4013      	ands	r3, r2
 80008b6:	603b      	str	r3, [r7, #0]
 80008b8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 80008ba:	4924      	ldr	r1, [pc, #144]	; (800094c <MX_GPIO_Init+0xf0>)
 80008bc:	23a0      	movs	r3, #160	; 0xa0
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	2200      	movs	r2, #0
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 fd5a 	bl	800137c <HAL_GPIO_WritePin>
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_OUT1_Pin|NAND_CS1_Pin, GPIO_PIN_RESET);
 80008c8:	4921      	ldr	r1, [pc, #132]	; (8000950 <MX_GPIO_Init+0xf4>)
 80008ca:	4b22      	ldr	r3, [pc, #136]	; (8000954 <MX_GPIO_Init+0xf8>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	0018      	movs	r0, r3
 80008d0:	f000 fd54 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_CS1_Pin USART2_CS2_Pin USART2_MOSI_Pin USART2_CLK_Pin
                           WP__Pin CAM_EN_Pin NAND_CS2_Pin */
  GPIO_InitStruct.Pin = USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 80008d4:	193b      	adds	r3, r7, r4
 80008d6:	4a1d      	ldr	r2, [pc, #116]	; (800094c <MX_GPIO_Init+0xf0>)
 80008d8:	601a      	str	r2, [r3, #0]
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	2201      	movs	r2, #1
 80008de:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2200      	movs	r2, #0
 80008ea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	193a      	adds	r2, r7, r4
 80008ee:	23a0      	movs	r3, #160	; 0xa0
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	0011      	movs	r1, r2
 80008f4:	0018      	movs	r0, r3
 80008f6:	f000 fbc3 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_MISO_Pin */
  GPIO_InitStruct.Pin = USART2_MISO_Pin;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2208      	movs	r2, #8
 80008fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	193b      	adds	r3, r7, r4
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000906:	193b      	adds	r3, r7, r4
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USART2_MISO_GPIO_Port, &GPIO_InitStruct);
 800090c:	193a      	adds	r2, r7, r4
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	0011      	movs	r1, r2
 8000914:	0018      	movs	r0, r3
 8000916:	f000 fbb3 	bl	8001080 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_OUT1_Pin NAND_CS1_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin|NAND_CS1_Pin;
 800091a:	0021      	movs	r1, r4
 800091c:	187b      	adds	r3, r7, r1
 800091e:	4a0c      	ldr	r2, [pc, #48]	; (8000950 <MX_GPIO_Init+0xf4>)
 8000920:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2201      	movs	r2, #1
 8000926:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	187b      	adds	r3, r7, r1
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	187b      	adds	r3, r7, r1
 8000930:	2200      	movs	r2, #0
 8000932:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000934:	187b      	adds	r3, r7, r1
 8000936:	4a07      	ldr	r2, [pc, #28]	; (8000954 <MX_GPIO_Init+0xf8>)
 8000938:	0019      	movs	r1, r3
 800093a:	0010      	movs	r0, r2
 800093c:	f000 fba0 	bl	8001080 <HAL_GPIO_Init>

}
 8000940:	46c0      	nop			; (mov r8, r8)
 8000942:	46bd      	mov	sp, r7
 8000944:	b009      	add	sp, #36	; 0x24
 8000946:	bd90      	pop	{r4, r7, pc}
 8000948:	40021000 	.word	0x40021000
 800094c:	00001917 	.word	0x00001917
 8000950:	00001001 	.word	0x00001001
 8000954:	50000400 	.word	0x50000400

08000958 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800095c:	b672      	cpsid	i
}
 800095e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000960:	e7fe      	b.n	8000960 <Error_Handler+0x8>
	...

08000964 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000968:	4b07      	ldr	r3, [pc, #28]	; (8000988 <HAL_MspInit+0x24>)
 800096a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <HAL_MspInit+0x24>)
 800096e:	2101      	movs	r1, #1
 8000970:	430a      	orrs	r2, r1
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000974:	4b04      	ldr	r3, [pc, #16]	; (8000988 <HAL_MspInit+0x24>)
 8000976:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000978:	4b03      	ldr	r3, [pc, #12]	; (8000988 <HAL_MspInit+0x24>)
 800097a:	2180      	movs	r1, #128	; 0x80
 800097c:	0549      	lsls	r1, r1, #21
 800097e:	430a      	orrs	r2, r1
 8000980:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000982:	46c0      	nop			; (mov r8, r8)
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800098c:	b590      	push	{r4, r7, lr}
 800098e:	b08b      	sub	sp, #44	; 0x2c
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	2414      	movs	r4, #20
 8000996:	193b      	adds	r3, r7, r4
 8000998:	0018      	movs	r0, r3
 800099a:	2314      	movs	r3, #20
 800099c:	001a      	movs	r2, r3
 800099e:	2100      	movs	r1, #0
 80009a0:	f002 fc66 	bl	8003270 <memset>
  if(hi2c->Instance==I2C1)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a3b      	ldr	r2, [pc, #236]	; (8000a98 <HAL_I2C_MspInit+0x10c>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d129      	bne.n	8000a02 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ae:	4b3b      	ldr	r3, [pc, #236]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 80009b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80009b2:	4b3a      	ldr	r3, [pc, #232]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 80009b4:	2102      	movs	r1, #2
 80009b6:	430a      	orrs	r2, r1
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c
 80009ba:	4b38      	ldr	r3, [pc, #224]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 80009bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009be:	2202      	movs	r2, #2
 80009c0:	4013      	ands	r3, r2
 80009c2:	613b      	str	r3, [r7, #16]
 80009c4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80009c6:	0021      	movs	r1, r4
 80009c8:	187b      	adds	r3, r7, r1
 80009ca:	22c0      	movs	r2, #192	; 0xc0
 80009cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	2212      	movs	r2, #18
 80009d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2203      	movs	r2, #3
 80009de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2201      	movs	r2, #1
 80009e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	4a2d      	ldr	r2, [pc, #180]	; (8000aa0 <HAL_I2C_MspInit+0x114>)
 80009ea:	0019      	movs	r1, r3
 80009ec:	0010      	movs	r0, r2
 80009ee:	f000 fb47 	bl	8001080 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 80009f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f6:	4b29      	ldr	r3, [pc, #164]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0389      	lsls	r1, r1, #14
 80009fc:	430a      	orrs	r2, r1
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000a00:	e046      	b.n	8000a90 <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a27      	ldr	r2, [pc, #156]	; (8000aa4 <HAL_I2C_MspInit+0x118>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d141      	bne.n	8000a90 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 8000a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 8000a12:	2102      	movs	r1, #2
 8000a14:	430a      	orrs	r2, r1
 8000a16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a18:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 8000a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a1c:	2202      	movs	r2, #2
 8000a1e:	4013      	ands	r3, r2
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a24:	2114      	movs	r1, #20
 8000a26:	187b      	adds	r3, r7, r1
 8000a28:	2280      	movs	r2, #128	; 0x80
 8000a2a:	0112      	lsls	r2, r2, #4
 8000a2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a2e:	000c      	movs	r4, r1
 8000a30:	193b      	adds	r3, r7, r4
 8000a32:	2212      	movs	r2, #18
 8000a34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	2203      	movs	r2, #3
 8000a40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	2206      	movs	r2, #6
 8000a46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	4a15      	ldr	r2, [pc, #84]	; (8000aa0 <HAL_I2C_MspInit+0x114>)
 8000a4c:	0019      	movs	r1, r3
 8000a4e:	0010      	movs	r0, r2
 8000a50:	f000 fb16 	bl	8001080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a54:	0021      	movs	r1, r4
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2280      	movs	r2, #128	; 0x80
 8000a5a:	0192      	lsls	r2, r2, #6
 8000a5c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2212      	movs	r2, #18
 8000a62:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2203      	movs	r2, #3
 8000a6e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2205      	movs	r2, #5
 8000a74:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	187b      	adds	r3, r7, r1
 8000a78:	4a09      	ldr	r2, [pc, #36]	; (8000aa0 <HAL_I2C_MspInit+0x114>)
 8000a7a:	0019      	movs	r1, r3
 8000a7c:	0010      	movs	r0, r2
 8000a7e:	f000 faff 	bl	8001080 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 8000a84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a86:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_I2C_MspInit+0x110>)
 8000a88:	2180      	movs	r1, #128	; 0x80
 8000a8a:	03c9      	lsls	r1, r1, #15
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	b00b      	add	sp, #44	; 0x2c
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	50000400 	.word	0x50000400
 8000aa4:	40005800 	.word	0x40005800

08000aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b08b      	sub	sp, #44	; 0x2c
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	2414      	movs	r4, #20
 8000ab2:	193b      	adds	r3, r7, r4
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	2314      	movs	r3, #20
 8000ab8:	001a      	movs	r2, r3
 8000aba:	2100      	movs	r1, #0
 8000abc:	f002 fbd8 	bl	8003270 <memset>
  if(hspi->Instance==SPI1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a40      	ldr	r2, [pc, #256]	; (8000bc8 <HAL_SPI_MspInit+0x120>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d132      	bne.n	8000b30 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000aca:	4b40      	ldr	r3, [pc, #256]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ace:	4b3f      	ldr	r3, [pc, #252]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000ad0:	2180      	movs	r1, #128	; 0x80
 8000ad2:	0149      	lsls	r1, r1, #5
 8000ad4:	430a      	orrs	r2, r1
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad8:	4b3c      	ldr	r3, [pc, #240]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000adc:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	430a      	orrs	r2, r1
 8000ae2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae4:	4b39      	ldr	r3, [pc, #228]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4013      	ands	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
 8000aee:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8000af0:	0021      	movs	r1, r4
 8000af2:	187b      	adds	r3, r7, r1
 8000af4:	4a36      	ldr	r2, [pc, #216]	; (8000bd0 <HAL_SPI_MspInit+0x128>)
 8000af6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af8:	187b      	adds	r3, r7, r1
 8000afa:	2202      	movs	r2, #2
 8000afc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	187b      	adds	r3, r7, r1
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	187b      	adds	r3, r7, r1
 8000b06:	2203      	movs	r2, #3
 8000b08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b0a:	187b      	adds	r3, r7, r1
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b10:	187a      	adds	r2, r7, r1
 8000b12:	23a0      	movs	r3, #160	; 0xa0
 8000b14:	05db      	lsls	r3, r3, #23
 8000b16:	0011      	movs	r1, r2
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f000 fab1 	bl	8001080 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2019      	movs	r0, #25
 8000b24:	f000 fa32 	bl	8000f8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b28:	2019      	movs	r0, #25
 8000b2a:	f000 fa44 	bl	8000fb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000b2e:	e046      	b.n	8000bbe <HAL_SPI_MspInit+0x116>
  else if(hspi->Instance==SPI2)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	4a27      	ldr	r2, [pc, #156]	; (8000bd4 <HAL_SPI_MspInit+0x12c>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d141      	bne.n	8000bbe <HAL_SPI_MspInit+0x116>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b3a:	4b24      	ldr	r3, [pc, #144]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000b3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b3e:	4b23      	ldr	r3, [pc, #140]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000b40:	2180      	movs	r1, #128	; 0x80
 8000b42:	01c9      	lsls	r1, r1, #7
 8000b44:	430a      	orrs	r2, r1
 8000b46:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b48:	4b20      	ldr	r3, [pc, #128]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000b4e:	2102      	movs	r1, #2
 8000b50:	430a      	orrs	r2, r1
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b54:	4b1d      	ldr	r3, [pc, #116]	; (8000bcc <HAL_SPI_MspInit+0x124>)
 8000b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b58:	2202      	movs	r2, #2
 8000b5a:	4013      	ands	r3, r2
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000b60:	2114      	movs	r1, #20
 8000b62:	187b      	adds	r3, r7, r1
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	00d2      	lsls	r2, r2, #3
 8000b68:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b6a:	000c      	movs	r4, r1
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	2202      	movs	r2, #2
 8000b70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	193b      	adds	r3, r7, r4
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2205      	movs	r2, #5
 8000b82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	4a14      	ldr	r2, [pc, #80]	; (8000bd8 <HAL_SPI_MspInit+0x130>)
 8000b88:	0019      	movs	r1, r3
 8000b8a:	0010      	movs	r0, r2
 8000b8c:	f000 fa78 	bl	8001080 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000b90:	0021      	movs	r1, r4
 8000b92:	187b      	adds	r3, r7, r1
 8000b94:	22c0      	movs	r2, #192	; 0xc0
 8000b96:	0212      	lsls	r2, r2, #8
 8000b98:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2203      	movs	r2, #3
 8000baa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000bac:	187b      	adds	r3, r7, r1
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bb2:	187b      	adds	r3, r7, r1
 8000bb4:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_SPI_MspInit+0x130>)
 8000bb6:	0019      	movs	r1, r3
 8000bb8:	0010      	movs	r0, r2
 8000bba:	f000 fa61 	bl	8001080 <HAL_GPIO_Init>
}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	b00b      	add	sp, #44	; 0x2c
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	46c0      	nop			; (mov r8, r8)
 8000bc8:	40013000 	.word	0x40013000
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	000080e0 	.word	0x000080e0
 8000bd4:	40003800 	.word	0x40003800
 8000bd8:	50000400 	.word	0x50000400

08000bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bdc:	b590      	push	{r4, r7, lr}
 8000bde:	b089      	sub	sp, #36	; 0x24
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	240c      	movs	r4, #12
 8000be6:	193b      	adds	r3, r7, r4
 8000be8:	0018      	movs	r0, r3
 8000bea:	2314      	movs	r3, #20
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f002 fb3e 	bl	8003270 <memset>
  if(huart->Instance==USART1)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a18      	ldr	r2, [pc, #96]	; (8000c5c <HAL_UART_MspInit+0x80>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d12a      	bne.n	8000c54 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bfe:	4b18      	ldr	r3, [pc, #96]	; (8000c60 <HAL_UART_MspInit+0x84>)
 8000c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c02:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <HAL_UART_MspInit+0x84>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	01c9      	lsls	r1, r1, #7
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0c:	4b14      	ldr	r3, [pc, #80]	; (8000c60 <HAL_UART_MspInit+0x84>)
 8000c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_UART_MspInit+0x84>)
 8000c12:	2101      	movs	r1, #1
 8000c14:	430a      	orrs	r2, r1
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <HAL_UART_MspInit+0x84>)
 8000c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	4013      	ands	r3, r2
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000c24:	193b      	adds	r3, r7, r4
 8000c26:	22c0      	movs	r2, #192	; 0xc0
 8000c28:	00d2      	lsls	r2, r2, #3
 8000c2a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2c:	0021      	movs	r1, r4
 8000c2e:	187b      	adds	r3, r7, r1
 8000c30:	2202      	movs	r2, #2
 8000c32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c34:	187b      	adds	r3, r7, r1
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3a:	187b      	adds	r3, r7, r1
 8000c3c:	2203      	movs	r2, #3
 8000c3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000c40:	187b      	adds	r3, r7, r1
 8000c42:	2204      	movs	r2, #4
 8000c44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	187a      	adds	r2, r7, r1
 8000c48:	23a0      	movs	r3, #160	; 0xa0
 8000c4a:	05db      	lsls	r3, r3, #23
 8000c4c:	0011      	movs	r1, r2
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 fa16 	bl	8001080 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	b009      	add	sp, #36	; 0x24
 8000c5a:	bd90      	pop	{r4, r7, pc}
 8000c5c:	40013800 	.word	0x40013800
 8000c60:	40021000 	.word	0x40021000

08000c64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c68:	e7fe      	b.n	8000c68 <NMI_Handler+0x4>

08000c6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c6a:	b580      	push	{r7, lr}
 8000c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c6e:	e7fe      	b.n	8000c6e <HardFault_Handler+0x4>

08000c70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7e:	46c0      	nop			; (mov r8, r8)
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c88:	f000 f894 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c98:	4b03      	ldr	r3, [pc, #12]	; (8000ca8 <SPI1_IRQHandler+0x14>)
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f001 fc4c 	bl	8002538 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	200000c0 	.word	0x200000c0

08000cac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb0:	46c0      	nop			; (mov r8, r8)
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
	...

08000cb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cb8:	480d      	ldr	r0, [pc, #52]	; (8000cf0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cba:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cbc:	480d      	ldr	r0, [pc, #52]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cbe:	490e      	ldr	r1, [pc, #56]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc0:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc4:	e002      	b.n	8000ccc <LoopCopyDataInit>

08000cc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cca:	3304      	adds	r3, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ccc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd0:	d3f9      	bcc.n	8000cc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd2:	4a0b      	ldr	r2, [pc, #44]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd4:	4c0b      	ldr	r4, [pc, #44]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd8:	e001      	b.n	8000cde <LoopFillZerobss>

08000cda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cdc:	3204      	adds	r2, #4

08000cde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce0:	d3fb      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ce2:	f7ff ffe3 	bl	8000cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f002 fa9f 	bl	8003228 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cea:	f7ff fc07 	bl	80004fc <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
   ldr   r0, =_estack
 8000cf0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000cfc:	080033b0 	.word	0x080033b0
  ldr r2, =_sbss
 8000d00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d04:	200001f8 	.word	0x200001f8

08000d08 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_COMP_IRQHandler>
	...

08000d0c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	2200      	movs	r2, #0
 8000d16:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <HAL_Init+0x3c>)
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	4b0a      	ldr	r3, [pc, #40]	; (8000d48 <HAL_Init+0x3c>)
 8000d1e:	2140      	movs	r1, #64	; 0x40
 8000d20:	430a      	orrs	r2, r1
 8000d22:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f811 	bl	8000d4c <HAL_InitTick>
 8000d2a:	1e03      	subs	r3, r0, #0
 8000d2c:	d003      	beq.n	8000d36 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d2e:	1dfb      	adds	r3, r7, #7
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
 8000d34:	e001      	b.n	8000d3a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d36:	f7ff fe15 	bl	8000964 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
}
 8000d3e:	0018      	movs	r0, r3
 8000d40:	46bd      	mov	sp, r7
 8000d42:	b002      	add	sp, #8
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b590      	push	{r4, r7, lr}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d54:	4b14      	ldr	r3, [pc, #80]	; (8000da8 <HAL_InitTick+0x5c>)
 8000d56:	681c      	ldr	r4, [r3, #0]
 8000d58:	4b14      	ldr	r3, [pc, #80]	; (8000dac <HAL_InitTick+0x60>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	23fa      	movs	r3, #250	; 0xfa
 8000d60:	0098      	lsls	r0, r3, #2
 8000d62:	f7ff f9d9 	bl	8000118 <__udivsi3>
 8000d66:	0003      	movs	r3, r0
 8000d68:	0019      	movs	r1, r3
 8000d6a:	0020      	movs	r0, r4
 8000d6c:	f7ff f9d4 	bl	8000118 <__udivsi3>
 8000d70:	0003      	movs	r3, r0
 8000d72:	0018      	movs	r0, r3
 8000d74:	f000 f92f 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000d78:	1e03      	subs	r3, r0, #0
 8000d7a:	d001      	beq.n	8000d80 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e00f      	b.n	8000da0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b03      	cmp	r3, #3
 8000d84:	d80b      	bhi.n	8000d9e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d86:	6879      	ldr	r1, [r7, #4]
 8000d88:	2301      	movs	r3, #1
 8000d8a:	425b      	negs	r3, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f000 f8fc 	bl	8000f8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d94:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_InitTick+0x64>)
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	e000      	b.n	8000da0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
}
 8000da0:	0018      	movs	r0, r3
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b003      	add	sp, #12
 8000da6:	bd90      	pop	{r4, r7, pc}
 8000da8:	20000000 	.word	0x20000000
 8000dac:	20000008 	.word	0x20000008
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	001a      	movs	r2, r3
 8000dbe:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	18d2      	adds	r2, r2, r3
 8000dc4:	4b03      	ldr	r3, [pc, #12]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	20000008 	.word	0x20000008
 8000dd4:	200001f4 	.word	0x200001f4

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b02      	ldr	r3, [pc, #8]	; (8000de8 <HAL_GetTick+0x10>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	0018      	movs	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	200001f4 	.word	0x200001f4

08000dec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b084      	sub	sp, #16
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000df4:	f7ff fff0 	bl	8000dd8 <HAL_GetTick>
 8000df8:	0003      	movs	r3, r0
 8000dfa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	3301      	adds	r3, #1
 8000e04:	d005      	beq.n	8000e12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e06:	4b0a      	ldr	r3, [pc, #40]	; (8000e30 <HAL_Delay+0x44>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	001a      	movs	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	189b      	adds	r3, r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e12:	46c0      	nop			; (mov r8, r8)
 8000e14:	f7ff ffe0 	bl	8000dd8 <HAL_GetTick>
 8000e18:	0002      	movs	r2, r0
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	1ad3      	subs	r3, r2, r3
 8000e1e:	68fa      	ldr	r2, [r7, #12]
 8000e20:	429a      	cmp	r2, r3
 8000e22:	d8f7      	bhi.n	8000e14 <HAL_Delay+0x28>
  {
  }
}
 8000e24:	46c0      	nop			; (mov r8, r8)
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b004      	add	sp, #16
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000008 	.word	0x20000008

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	0002      	movs	r2, r0
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	1dfb      	adds	r3, r7, #7
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b7f      	cmp	r3, #127	; 0x7f
 8000e46:	d809      	bhi.n	8000e5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e48:	1dfb      	adds	r3, r7, #7
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	231f      	movs	r3, #31
 8000e50:	401a      	ands	r2, r3
 8000e52:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_EnableIRQ+0x30>)
 8000e54:	2101      	movs	r1, #1
 8000e56:	4091      	lsls	r1, r2
 8000e58:	000a      	movs	r2, r1
 8000e5a:	601a      	str	r2, [r3, #0]
  }
}
 8000e5c:	46c0      	nop			; (mov r8, r8)
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	b002      	add	sp, #8
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	e000e100 	.word	0xe000e100

08000e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e68:	b590      	push	{r4, r7, lr}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	0002      	movs	r2, r0
 8000e70:	6039      	str	r1, [r7, #0]
 8000e72:	1dfb      	adds	r3, r7, #7
 8000e74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000e7c:	d828      	bhi.n	8000ed0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e7e:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <__NVIC_SetPriority+0xd4>)
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	b25b      	sxtb	r3, r3
 8000e86:	089b      	lsrs	r3, r3, #2
 8000e88:	33c0      	adds	r3, #192	; 0xc0
 8000e8a:	009b      	lsls	r3, r3, #2
 8000e8c:	589b      	ldr	r3, [r3, r2]
 8000e8e:	1dfa      	adds	r2, r7, #7
 8000e90:	7812      	ldrb	r2, [r2, #0]
 8000e92:	0011      	movs	r1, r2
 8000e94:	2203      	movs	r2, #3
 8000e96:	400a      	ands	r2, r1
 8000e98:	00d2      	lsls	r2, r2, #3
 8000e9a:	21ff      	movs	r1, #255	; 0xff
 8000e9c:	4091      	lsls	r1, r2
 8000e9e:	000a      	movs	r2, r1
 8000ea0:	43d2      	mvns	r2, r2
 8000ea2:	401a      	ands	r2, r3
 8000ea4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	019b      	lsls	r3, r3, #6
 8000eaa:	22ff      	movs	r2, #255	; 0xff
 8000eac:	401a      	ands	r2, r3
 8000eae:	1dfb      	adds	r3, r7, #7
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	4003      	ands	r3, r0
 8000eb8:	00db      	lsls	r3, r3, #3
 8000eba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ebc:	481f      	ldr	r0, [pc, #124]	; (8000f3c <__NVIC_SetPriority+0xd4>)
 8000ebe:	1dfb      	adds	r3, r7, #7
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	b25b      	sxtb	r3, r3
 8000ec4:	089b      	lsrs	r3, r3, #2
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	33c0      	adds	r3, #192	; 0xc0
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000ece:	e031      	b.n	8000f34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ed0:	4a1b      	ldr	r2, [pc, #108]	; (8000f40 <__NVIC_SetPriority+0xd8>)
 8000ed2:	1dfb      	adds	r3, r7, #7
 8000ed4:	781b      	ldrb	r3, [r3, #0]
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	230f      	movs	r3, #15
 8000eda:	400b      	ands	r3, r1
 8000edc:	3b08      	subs	r3, #8
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3306      	adds	r3, #6
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	18d3      	adds	r3, r2, r3
 8000ee6:	3304      	adds	r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	1dfa      	adds	r2, r7, #7
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	0011      	movs	r1, r2
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	400a      	ands	r2, r1
 8000ef4:	00d2      	lsls	r2, r2, #3
 8000ef6:	21ff      	movs	r1, #255	; 0xff
 8000ef8:	4091      	lsls	r1, r2
 8000efa:	000a      	movs	r2, r1
 8000efc:	43d2      	mvns	r2, r2
 8000efe:	401a      	ands	r2, r3
 8000f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	019b      	lsls	r3, r3, #6
 8000f06:	22ff      	movs	r2, #255	; 0xff
 8000f08:	401a      	ands	r2, r3
 8000f0a:	1dfb      	adds	r3, r7, #7
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	0018      	movs	r0, r3
 8000f10:	2303      	movs	r3, #3
 8000f12:	4003      	ands	r3, r0
 8000f14:	00db      	lsls	r3, r3, #3
 8000f16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <__NVIC_SetPriority+0xd8>)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	001c      	movs	r4, r3
 8000f20:	230f      	movs	r3, #15
 8000f22:	4023      	ands	r3, r4
 8000f24:	3b08      	subs	r3, #8
 8000f26:	089b      	lsrs	r3, r3, #2
 8000f28:	430a      	orrs	r2, r1
 8000f2a:	3306      	adds	r3, #6
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	18c3      	adds	r3, r0, r3
 8000f30:	3304      	adds	r3, #4
 8000f32:	601a      	str	r2, [r3, #0]
}
 8000f34:	46c0      	nop			; (mov r8, r8)
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b003      	add	sp, #12
 8000f3a:	bd90      	pop	{r4, r7, pc}
 8000f3c:	e000e100 	.word	0xe000e100
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	1e5a      	subs	r2, r3, #1
 8000f50:	2380      	movs	r3, #128	; 0x80
 8000f52:	045b      	lsls	r3, r3, #17
 8000f54:	429a      	cmp	r2, r3
 8000f56:	d301      	bcc.n	8000f5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e010      	b.n	8000f7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <SysTick_Config+0x44>)
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	3a01      	subs	r2, #1
 8000f62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f64:	2301      	movs	r3, #1
 8000f66:	425b      	negs	r3, r3
 8000f68:	2103      	movs	r1, #3
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f7ff ff7c 	bl	8000e68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f70:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <SysTick_Config+0x44>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f76:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <SysTick_Config+0x44>)
 8000f78:	2207      	movs	r2, #7
 8000f7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	0018      	movs	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	b002      	add	sp, #8
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	46c0      	nop			; (mov r8, r8)
 8000f88:	e000e010 	.word	0xe000e010

08000f8c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	210f      	movs	r1, #15
 8000f98:	187b      	adds	r3, r7, r1
 8000f9a:	1c02      	adds	r2, r0, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	187b      	adds	r3, r7, r1
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	b25b      	sxtb	r3, r3
 8000fa6:	0011      	movs	r1, r2
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff ff5d 	bl	8000e68 <__NVIC_SetPriority>
}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b004      	add	sp, #16
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	b082      	sub	sp, #8
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	0002      	movs	r2, r0
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc2:	1dfb      	adds	r3, r7, #7
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	b25b      	sxtb	r3, r3
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff ff33 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	b002      	add	sp, #8
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f7ff ffaf 	bl	8000f44 <SysTick_Config>
 8000fe6:	0003      	movs	r3, r0
}
 8000fe8:	0018      	movs	r0, r3
 8000fea:	46bd      	mov	sp, r7
 8000fec:	b002      	add	sp, #8
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ff8:	210f      	movs	r1, #15
 8000ffa:	187b      	adds	r3, r7, r1
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2225      	movs	r2, #37	; 0x25
 8001004:	5c9b      	ldrb	r3, [r3, r2]
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d006      	beq.n	800101a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2204      	movs	r2, #4
 8001010:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001012:	187b      	adds	r3, r7, r1
 8001014:	2201      	movs	r2, #1
 8001016:	701a      	strb	r2, [r3, #0]
 8001018:	e02a      	b.n	8001070 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	210e      	movs	r1, #14
 8001026:	438a      	bics	r2, r1
 8001028:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2101      	movs	r1, #1
 8001036:	438a      	bics	r2, r1
 8001038:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103e:	221c      	movs	r2, #28
 8001040:	401a      	ands	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2101      	movs	r1, #1
 8001048:	4091      	lsls	r1, r2
 800104a:	000a      	movs	r2, r1
 800104c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2225      	movs	r2, #37	; 0x25
 8001052:	2101      	movs	r1, #1
 8001054:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2224      	movs	r2, #36	; 0x24
 800105a:	2100      	movs	r1, #0
 800105c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001062:	2b00      	cmp	r3, #0
 8001064:	d004      	beq.n	8001070 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	0010      	movs	r0, r2
 800106e:	4798      	blx	r3
    }
  }
  return status;
 8001070:	230f      	movs	r3, #15
 8001072:	18fb      	adds	r3, r7, r3
 8001074:	781b      	ldrb	r3, [r3, #0]
}
 8001076:	0018      	movs	r0, r3
 8001078:	46bd      	mov	sp, r7
 800107a:	b004      	add	sp, #16
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800108a:	2300      	movs	r3, #0
 800108c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800108e:	2300      	movs	r3, #0
 8001090:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001096:	e155      	b.n	8001344 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2101      	movs	r1, #1
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4091      	lsls	r1, r2
 80010a2:	000a      	movs	r2, r1
 80010a4:	4013      	ands	r3, r2
 80010a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d100      	bne.n	80010b0 <HAL_GPIO_Init+0x30>
 80010ae:	e146      	b.n	800133e <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2203      	movs	r2, #3
 80010b6:	4013      	ands	r3, r2
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d005      	beq.n	80010c8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2203      	movs	r2, #3
 80010c2:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80010c4:	2b02      	cmp	r3, #2
 80010c6:	d130      	bne.n	800112a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	2203      	movs	r2, #3
 80010d4:	409a      	lsls	r2, r3
 80010d6:	0013      	movs	r3, r2
 80010d8:	43da      	mvns	r2, r3
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	68da      	ldr	r2, [r3, #12]
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	005b      	lsls	r3, r3, #1
 80010e8:	409a      	lsls	r2, r3
 80010ea:	0013      	movs	r3, r2
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010fe:	2201      	movs	r2, #1
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	409a      	lsls	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	43da      	mvns	r2, r3
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	4013      	ands	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	091b      	lsrs	r3, r3, #4
 8001114:	2201      	movs	r2, #1
 8001116:	401a      	ands	r2, r3
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	409a      	lsls	r2, r3
 800111c:	0013      	movs	r3, r2
 800111e:	693a      	ldr	r2, [r7, #16]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2203      	movs	r2, #3
 8001130:	4013      	ands	r3, r2
 8001132:	2b03      	cmp	r3, #3
 8001134:	d017      	beq.n	8001166 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
 800113a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	005b      	lsls	r3, r3, #1
 8001140:	2203      	movs	r2, #3
 8001142:	409a      	lsls	r2, r3
 8001144:	0013      	movs	r3, r2
 8001146:	43da      	mvns	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4013      	ands	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	689a      	ldr	r2, [r3, #8]
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2203      	movs	r2, #3
 800116c:	4013      	ands	r3, r2
 800116e:	2b02      	cmp	r3, #2
 8001170:	d123      	bne.n	80011ba <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001172:	697b      	ldr	r3, [r7, #20]
 8001174:	08da      	lsrs	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	3208      	adds	r2, #8
 800117a:	0092      	lsls	r2, r2, #2
 800117c:	58d3      	ldr	r3, [r2, r3]
 800117e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	2207      	movs	r2, #7
 8001184:	4013      	ands	r3, r2
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	220f      	movs	r2, #15
 800118a:	409a      	lsls	r2, r3
 800118c:	0013      	movs	r3, r2
 800118e:	43da      	mvns	r2, r3
 8001190:	693b      	ldr	r3, [r7, #16]
 8001192:	4013      	ands	r3, r2
 8001194:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	691a      	ldr	r2, [r3, #16]
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2107      	movs	r1, #7
 800119e:	400b      	ands	r3, r1
 80011a0:	009b      	lsls	r3, r3, #2
 80011a2:	409a      	lsls	r2, r3
 80011a4:	0013      	movs	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	08da      	lsrs	r2, r3, #3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3208      	adds	r2, #8
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	6939      	ldr	r1, [r7, #16]
 80011b8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	409a      	lsls	r2, r3
 80011c8:	0013      	movs	r3, r2
 80011ca:	43da      	mvns	r2, r3
 80011cc:	693b      	ldr	r3, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	2203      	movs	r2, #3
 80011d8:	401a      	ands	r2, r3
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	005b      	lsls	r3, r3, #1
 80011de:	409a      	lsls	r2, r3
 80011e0:	0013      	movs	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	685a      	ldr	r2, [r3, #4]
 80011f2:	23c0      	movs	r3, #192	; 0xc0
 80011f4:	029b      	lsls	r3, r3, #10
 80011f6:	4013      	ands	r3, r2
 80011f8:	d100      	bne.n	80011fc <HAL_GPIO_Init+0x17c>
 80011fa:	e0a0      	b.n	800133e <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fc:	4b57      	ldr	r3, [pc, #348]	; (800135c <HAL_GPIO_Init+0x2dc>)
 80011fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001200:	4b56      	ldr	r3, [pc, #344]	; (800135c <HAL_GPIO_Init+0x2dc>)
 8001202:	2101      	movs	r1, #1
 8001204:	430a      	orrs	r2, r1
 8001206:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001208:	4a55      	ldr	r2, [pc, #340]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	089b      	lsrs	r3, r3, #2
 800120e:	3302      	adds	r3, #2
 8001210:	009b      	lsls	r3, r3, #2
 8001212:	589b      	ldr	r3, [r3, r2]
 8001214:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2203      	movs	r2, #3
 800121a:	4013      	ands	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	409a      	lsls	r2, r3
 8001222:	0013      	movs	r3, r2
 8001224:	43da      	mvns	r2, r3
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	4013      	ands	r3, r2
 800122a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800122c:	687a      	ldr	r2, [r7, #4]
 800122e:	23a0      	movs	r3, #160	; 0xa0
 8001230:	05db      	lsls	r3, r3, #23
 8001232:	429a      	cmp	r2, r3
 8001234:	d01f      	beq.n	8001276 <HAL_GPIO_Init+0x1f6>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a4a      	ldr	r2, [pc, #296]	; (8001364 <HAL_GPIO_Init+0x2e4>)
 800123a:	4293      	cmp	r3, r2
 800123c:	d019      	beq.n	8001272 <HAL_GPIO_Init+0x1f2>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a49      	ldr	r2, [pc, #292]	; (8001368 <HAL_GPIO_Init+0x2e8>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d013      	beq.n	800126e <HAL_GPIO_Init+0x1ee>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4a48      	ldr	r2, [pc, #288]	; (800136c <HAL_GPIO_Init+0x2ec>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d00d      	beq.n	800126a <HAL_GPIO_Init+0x1ea>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a47      	ldr	r2, [pc, #284]	; (8001370 <HAL_GPIO_Init+0x2f0>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d007      	beq.n	8001266 <HAL_GPIO_Init+0x1e6>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a46      	ldr	r2, [pc, #280]	; (8001374 <HAL_GPIO_Init+0x2f4>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d101      	bne.n	8001262 <HAL_GPIO_Init+0x1e2>
 800125e:	2305      	movs	r3, #5
 8001260:	e00a      	b.n	8001278 <HAL_GPIO_Init+0x1f8>
 8001262:	2306      	movs	r3, #6
 8001264:	e008      	b.n	8001278 <HAL_GPIO_Init+0x1f8>
 8001266:	2304      	movs	r3, #4
 8001268:	e006      	b.n	8001278 <HAL_GPIO_Init+0x1f8>
 800126a:	2303      	movs	r3, #3
 800126c:	e004      	b.n	8001278 <HAL_GPIO_Init+0x1f8>
 800126e:	2302      	movs	r3, #2
 8001270:	e002      	b.n	8001278 <HAL_GPIO_Init+0x1f8>
 8001272:	2301      	movs	r3, #1
 8001274:	e000      	b.n	8001278 <HAL_GPIO_Init+0x1f8>
 8001276:	2300      	movs	r3, #0
 8001278:	697a      	ldr	r2, [r7, #20]
 800127a:	2103      	movs	r1, #3
 800127c:	400a      	ands	r2, r1
 800127e:	0092      	lsls	r2, r2, #2
 8001280:	4093      	lsls	r3, r2
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001288:	4935      	ldr	r1, [pc, #212]	; (8001360 <HAL_GPIO_Init+0x2e0>)
 800128a:	697b      	ldr	r3, [r7, #20]
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	3302      	adds	r3, #2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001296:	4b38      	ldr	r3, [pc, #224]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	43da      	mvns	r2, r3
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	4013      	ands	r3, r2
 80012a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	685a      	ldr	r2, [r3, #4]
 80012aa:	2380      	movs	r3, #128	; 0x80
 80012ac:	025b      	lsls	r3, r3, #9
 80012ae:	4013      	ands	r3, r2
 80012b0:	d003      	beq.n	80012ba <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80012ba:	4b2f      	ldr	r3, [pc, #188]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80012c0:	4b2d      	ldr	r3, [pc, #180]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	43da      	mvns	r2, r3
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	4013      	ands	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	2380      	movs	r3, #128	; 0x80
 80012d6:	029b      	lsls	r3, r3, #10
 80012d8:	4013      	ands	r3, r2
 80012da:	d003      	beq.n	80012e4 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ea:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	43da      	mvns	r2, r3
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	035b      	lsls	r3, r3, #13
 8001302:	4013      	ands	r3, r2
 8001304:	d003      	beq.n	800130e <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	4313      	orrs	r3, r2
 800130c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800130e:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001314:	4b18      	ldr	r3, [pc, #96]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	43da      	mvns	r2, r3
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	4013      	ands	r3, r2
 8001322:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685a      	ldr	r2, [r3, #4]
 8001328:	2380      	movs	r3, #128	; 0x80
 800132a:	039b      	lsls	r3, r3, #14
 800132c:	4013      	ands	r3, r2
 800132e:	d003      	beq.n	8001338 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	4313      	orrs	r3, r2
 8001336:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_GPIO_Init+0x2f8>)
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	3301      	adds	r3, #1
 8001342:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	40da      	lsrs	r2, r3
 800134c:	1e13      	subs	r3, r2, #0
 800134e:	d000      	beq.n	8001352 <HAL_GPIO_Init+0x2d2>
 8001350:	e6a2      	b.n	8001098 <HAL_GPIO_Init+0x18>
  }
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46c0      	nop			; (mov r8, r8)
 8001356:	46bd      	mov	sp, r7
 8001358:	b006      	add	sp, #24
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40021000 	.word	0x40021000
 8001360:	40010000 	.word	0x40010000
 8001364:	50000400 	.word	0x50000400
 8001368:	50000800 	.word	0x50000800
 800136c:	50000c00 	.word	0x50000c00
 8001370:	50001000 	.word	0x50001000
 8001374:	50001c00 	.word	0x50001c00
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	0008      	movs	r0, r1
 8001386:	0011      	movs	r1, r2
 8001388:	1cbb      	adds	r3, r7, #2
 800138a:	1c02      	adds	r2, r0, #0
 800138c:	801a      	strh	r2, [r3, #0]
 800138e:	1c7b      	adds	r3, r7, #1
 8001390:	1c0a      	adds	r2, r1, #0
 8001392:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001394:	1c7b      	adds	r3, r7, #1
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d004      	beq.n	80013a6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800139c:	1cbb      	adds	r3, r7, #2
 800139e:	881a      	ldrh	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80013a4:	e003      	b.n	80013ae <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80013a6:	1cbb      	adds	r3, r7, #2
 80013a8:	881a      	ldrh	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	46bd      	mov	sp, r7
 80013b2:	b002      	add	sp, #8
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b084      	sub	sp, #16
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
 80013be:	000a      	movs	r2, r1
 80013c0:	1cbb      	adds	r3, r7, #2
 80013c2:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013ca:	1cbb      	adds	r3, r7, #2
 80013cc:	881b      	ldrh	r3, [r3, #0]
 80013ce:	68fa      	ldr	r2, [r7, #12]
 80013d0:	4013      	ands	r3, r2
 80013d2:	041a      	lsls	r2, r3, #16
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	1cb9      	adds	r1, r7, #2
 80013da:	8809      	ldrh	r1, [r1, #0]
 80013dc:	400b      	ands	r3, r1
 80013de:	431a      	orrs	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	619a      	str	r2, [r3, #24]
}
 80013e4:	46c0      	nop			; (mov r8, r8)
 80013e6:	46bd      	mov	sp, r7
 80013e8:	b004      	add	sp, #16
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d101      	bne.n	80013fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e082      	b.n	8001504 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2241      	movs	r2, #65	; 0x41
 8001402:	5c9b      	ldrb	r3, [r3, r2]
 8001404:	b2db      	uxtb	r3, r3
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2240      	movs	r2, #64	; 0x40
 800140e:	2100      	movs	r1, #0
 8001410:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	0018      	movs	r0, r3
 8001416:	f7ff fab9 	bl	800098c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2241      	movs	r2, #65	; 0x41
 800141e:	2124      	movs	r1, #36	; 0x24
 8001420:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2101      	movs	r1, #1
 800142e:	438a      	bics	r2, r1
 8001430:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685a      	ldr	r2, [r3, #4]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4934      	ldr	r1, [pc, #208]	; (800150c <HAL_I2C_Init+0x120>)
 800143c:	400a      	ands	r2, r1
 800143e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	689a      	ldr	r2, [r3, #8]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4931      	ldr	r1, [pc, #196]	; (8001510 <HAL_I2C_Init+0x124>)
 800144c:	400a      	ands	r2, r1
 800144e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b01      	cmp	r3, #1
 8001456:	d108      	bne.n	800146a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689a      	ldr	r2, [r3, #8]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2180      	movs	r1, #128	; 0x80
 8001462:	0209      	lsls	r1, r1, #8
 8001464:	430a      	orrs	r2, r1
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	e007      	b.n	800147a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	689a      	ldr	r2, [r3, #8]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2184      	movs	r1, #132	; 0x84
 8001474:	0209      	lsls	r1, r1, #8
 8001476:	430a      	orrs	r2, r1
 8001478:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d104      	bne.n	800148c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	2280      	movs	r2, #128	; 0x80
 8001488:	0112      	lsls	r2, r2, #4
 800148a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	491f      	ldr	r1, [pc, #124]	; (8001514 <HAL_I2C_Init+0x128>)
 8001498:	430a      	orrs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68da      	ldr	r2, [r3, #12]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	491a      	ldr	r1, [pc, #104]	; (8001510 <HAL_I2C_Init+0x124>)
 80014a8:	400a      	ands	r2, r1
 80014aa:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691a      	ldr	r2, [r3, #16]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	431a      	orrs	r2, r3
 80014b6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	699b      	ldr	r3, [r3, #24]
 80014bc:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	69d9      	ldr	r1, [r3, #28]
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a1a      	ldr	r2, [r3, #32]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2241      	movs	r2, #65	; 0x41
 80014f0:	2120      	movs	r1, #32
 80014f2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2242      	movs	r2, #66	; 0x42
 80014fe:	2100      	movs	r1, #0
 8001500:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	0018      	movs	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	b002      	add	sp, #8
 800150a:	bd80      	pop	{r7, pc}
 800150c:	f0ffffff 	.word	0xf0ffffff
 8001510:	ffff7fff 	.word	0xffff7fff
 8001514:	02008000 	.word	0x02008000

08001518 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2241      	movs	r2, #65	; 0x41
 8001526:	5c9b      	ldrb	r3, [r3, r2]
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b20      	cmp	r3, #32
 800152c:	d138      	bne.n	80015a0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2240      	movs	r2, #64	; 0x40
 8001532:	5c9b      	ldrb	r3, [r3, r2]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001538:	2302      	movs	r3, #2
 800153a:	e032      	b.n	80015a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2240      	movs	r2, #64	; 0x40
 8001540:	2101      	movs	r1, #1
 8001542:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2241      	movs	r2, #65	; 0x41
 8001548:	2124      	movs	r1, #36	; 0x24
 800154a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	2101      	movs	r1, #1
 8001558:	438a      	bics	r2, r1
 800155a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4911      	ldr	r1, [pc, #68]	; (80015ac <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001568:	400a      	ands	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6819      	ldr	r1, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	683a      	ldr	r2, [r7, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2101      	movs	r1, #1
 8001588:	430a      	orrs	r2, r1
 800158a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2241      	movs	r2, #65	; 0x41
 8001590:	2120      	movs	r1, #32
 8001592:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2240      	movs	r2, #64	; 0x40
 8001598:	2100      	movs	r1, #0
 800159a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	e000      	b.n	80015a2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015a0:	2302      	movs	r3, #2
  }
}
 80015a2:	0018      	movs	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	ffffefff 	.word	0xffffefff

080015b0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2241      	movs	r2, #65	; 0x41
 80015be:	5c9b      	ldrb	r3, [r3, r2]
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d139      	bne.n	800163a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2240      	movs	r2, #64	; 0x40
 80015ca:	5c9b      	ldrb	r3, [r3, r2]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d101      	bne.n	80015d4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e033      	b.n	800163c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2240      	movs	r2, #64	; 0x40
 80015d8:	2101      	movs	r1, #1
 80015da:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2241      	movs	r2, #65	; 0x41
 80015e0:	2124      	movs	r1, #36	; 0x24
 80015e2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2101      	movs	r1, #1
 80015f0:	438a      	bics	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	4a11      	ldr	r2, [pc, #68]	; (8001644 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001600:	4013      	ands	r3, r2
 8001602:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	021b      	lsls	r3, r3, #8
 8001608:	68fa      	ldr	r2, [r7, #12]
 800160a:	4313      	orrs	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2101      	movs	r1, #1
 8001622:	430a      	orrs	r2, r1
 8001624:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2241      	movs	r2, #65	; 0x41
 800162a:	2120      	movs	r1, #32
 800162c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2240      	movs	r2, #64	; 0x40
 8001632:	2100      	movs	r1, #0
 8001634:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001636:	2300      	movs	r3, #0
 8001638:	e000      	b.n	800163c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800163a:	2302      	movs	r3, #2
  }
}
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}
 8001644:	fffff0ff 	.word	0xfffff0ff

08001648 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001648:	b5b0      	push	{r4, r5, r7, lr}
 800164a:	b08a      	sub	sp, #40	; 0x28
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
 8001658:	f000 fb6c 	bl	8001d34 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800165c:	4bc8      	ldr	r3, [pc, #800]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	220c      	movs	r2, #12
 8001662:	4013      	ands	r3, r2
 8001664:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001666:	4bc6      	ldr	r3, [pc, #792]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001668:	68da      	ldr	r2, [r3, #12]
 800166a:	2380      	movs	r3, #128	; 0x80
 800166c:	025b      	lsls	r3, r3, #9
 800166e:	4013      	ands	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2201      	movs	r2, #1
 8001678:	4013      	ands	r3, r2
 800167a:	d100      	bne.n	800167e <HAL_RCC_OscConfig+0x36>
 800167c:	e07d      	b.n	800177a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	2b08      	cmp	r3, #8
 8001682:	d007      	beq.n	8001694 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	2b0c      	cmp	r3, #12
 8001688:	d112      	bne.n	80016b0 <HAL_RCC_OscConfig+0x68>
 800168a:	69ba      	ldr	r2, [r7, #24]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	025b      	lsls	r3, r3, #9
 8001690:	429a      	cmp	r2, r3
 8001692:	d10d      	bne.n	80016b0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	4bba      	ldr	r3, [pc, #744]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	029b      	lsls	r3, r3, #10
 800169c:	4013      	ands	r3, r2
 800169e:	d100      	bne.n	80016a2 <HAL_RCC_OscConfig+0x5a>
 80016a0:	e06a      	b.n	8001778 <HAL_RCC_OscConfig+0x130>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d166      	bne.n	8001778 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	f000 fb42 	bl	8001d34 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	025b      	lsls	r3, r3, #9
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d107      	bne.n	80016cc <HAL_RCC_OscConfig+0x84>
 80016bc:	4bb0      	ldr	r3, [pc, #704]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	4baf      	ldr	r3, [pc, #700]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80016c2:	2180      	movs	r1, #128	; 0x80
 80016c4:	0249      	lsls	r1, r1, #9
 80016c6:	430a      	orrs	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	e027      	b.n	800171c <HAL_RCC_OscConfig+0xd4>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	23a0      	movs	r3, #160	; 0xa0
 80016d2:	02db      	lsls	r3, r3, #11
 80016d4:	429a      	cmp	r2, r3
 80016d6:	d10e      	bne.n	80016f6 <HAL_RCC_OscConfig+0xae>
 80016d8:	4ba9      	ldr	r3, [pc, #676]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	4ba8      	ldr	r3, [pc, #672]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80016de:	2180      	movs	r1, #128	; 0x80
 80016e0:	02c9      	lsls	r1, r1, #11
 80016e2:	430a      	orrs	r2, r1
 80016e4:	601a      	str	r2, [r3, #0]
 80016e6:	4ba6      	ldr	r3, [pc, #664]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	4ba5      	ldr	r3, [pc, #660]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80016ec:	2180      	movs	r1, #128	; 0x80
 80016ee:	0249      	lsls	r1, r1, #9
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	e012      	b.n	800171c <HAL_RCC_OscConfig+0xd4>
 80016f6:	4ba2      	ldr	r3, [pc, #648]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	4ba1      	ldr	r3, [pc, #644]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80016fc:	49a1      	ldr	r1, [pc, #644]	; (8001984 <HAL_RCC_OscConfig+0x33c>)
 80016fe:	400a      	ands	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	4b9f      	ldr	r3, [pc, #636]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	4013      	ands	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	4b9b      	ldr	r3, [pc, #620]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	4b9a      	ldr	r3, [pc, #616]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001716:	499c      	ldr	r1, [pc, #624]	; (8001988 <HAL_RCC_OscConfig+0x340>)
 8001718:	400a      	ands	r2, r1
 800171a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d014      	beq.n	800174e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb58 	bl	8000dd8 <HAL_GetTick>
 8001728:	0003      	movs	r3, r0
 800172a:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800172e:	f7ff fb53 	bl	8000dd8 <HAL_GetTick>
 8001732:	0002      	movs	r2, r0
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b64      	cmp	r3, #100	; 0x64
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e2f9      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001740:	4b8f      	ldr	r3, [pc, #572]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	2380      	movs	r3, #128	; 0x80
 8001746:	029b      	lsls	r3, r3, #10
 8001748:	4013      	ands	r3, r2
 800174a:	d0f0      	beq.n	800172e <HAL_RCC_OscConfig+0xe6>
 800174c:	e015      	b.n	800177a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174e:	f7ff fb43 	bl	8000dd8 <HAL_GetTick>
 8001752:	0003      	movs	r3, r0
 8001754:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001758:	f7ff fb3e 	bl	8000dd8 <HAL_GetTick>
 800175c:	0002      	movs	r2, r0
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b64      	cmp	r3, #100	; 0x64
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e2e4      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800176a:	4b85      	ldr	r3, [pc, #532]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	2380      	movs	r3, #128	; 0x80
 8001770:	029b      	lsls	r3, r3, #10
 8001772:	4013      	ands	r3, r2
 8001774:	d1f0      	bne.n	8001758 <HAL_RCC_OscConfig+0x110>
 8001776:	e000      	b.n	800177a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2202      	movs	r2, #2
 8001780:	4013      	ands	r3, r2
 8001782:	d100      	bne.n	8001786 <HAL_RCC_OscConfig+0x13e>
 8001784:	e099      	b.n	80018ba <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800178c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800178e:	2220      	movs	r2, #32
 8001790:	4013      	ands	r3, r2
 8001792:	d009      	beq.n	80017a8 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8001794:	4b7a      	ldr	r3, [pc, #488]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	4b79      	ldr	r3, [pc, #484]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 800179a:	2120      	movs	r1, #32
 800179c:	430a      	orrs	r2, r1
 800179e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80017a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a2:	2220      	movs	r2, #32
 80017a4:	4393      	bics	r3, r2
 80017a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b0c      	cmp	r3, #12
 80017b2:	d13e      	bne.n	8001832 <HAL_RCC_OscConfig+0x1ea>
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d13b      	bne.n	8001832 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80017ba:	4b71      	ldr	r3, [pc, #452]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2204      	movs	r2, #4
 80017c0:	4013      	ands	r3, r2
 80017c2:	d004      	beq.n	80017ce <HAL_RCC_OscConfig+0x186>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d101      	bne.n	80017ce <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e2b2      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ce:	4b6c      	ldr	r3, [pc, #432]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	4a6e      	ldr	r2, [pc, #440]	; (800198c <HAL_RCC_OscConfig+0x344>)
 80017d4:	4013      	ands	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	691b      	ldr	r3, [r3, #16]
 80017dc:	021a      	lsls	r2, r3, #8
 80017de:	4b68      	ldr	r3, [pc, #416]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80017e0:	430a      	orrs	r2, r1
 80017e2:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80017e4:	4b66      	ldr	r3, [pc, #408]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2209      	movs	r2, #9
 80017ea:	4393      	bics	r3, r2
 80017ec:	0019      	movs	r1, r3
 80017ee:	4b64      	ldr	r3, [pc, #400]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80017f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f2:	430a      	orrs	r2, r1
 80017f4:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017f6:	f000 fbeb 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 80017fa:	0001      	movs	r1, r0
 80017fc:	4b60      	ldr	r3, [pc, #384]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	220f      	movs	r2, #15
 8001804:	4013      	ands	r3, r2
 8001806:	4a62      	ldr	r2, [pc, #392]	; (8001990 <HAL_RCC_OscConfig+0x348>)
 8001808:	5cd3      	ldrb	r3, [r2, r3]
 800180a:	000a      	movs	r2, r1
 800180c:	40da      	lsrs	r2, r3
 800180e:	4b61      	ldr	r3, [pc, #388]	; (8001994 <HAL_RCC_OscConfig+0x34c>)
 8001810:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001812:	4b61      	ldr	r3, [pc, #388]	; (8001998 <HAL_RCC_OscConfig+0x350>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2513      	movs	r5, #19
 8001818:	197c      	adds	r4, r7, r5
 800181a:	0018      	movs	r0, r3
 800181c:	f7ff fa96 	bl	8000d4c <HAL_InitTick>
 8001820:	0003      	movs	r3, r0
 8001822:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001824:	197b      	adds	r3, r7, r5
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d046      	beq.n	80018ba <HAL_RCC_OscConfig+0x272>
      {
        return status;
 800182c:	197b      	adds	r3, r7, r5
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	e280      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001834:	2b00      	cmp	r3, #0
 8001836:	d027      	beq.n	8001888 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001838:	4b51      	ldr	r3, [pc, #324]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2209      	movs	r2, #9
 800183e:	4393      	bics	r3, r2
 8001840:	0019      	movs	r1, r3
 8001842:	4b4f      	ldr	r3, [pc, #316]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001844:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001846:	430a      	orrs	r2, r1
 8001848:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800184a:	f7ff fac5 	bl	8000dd8 <HAL_GetTick>
 800184e:	0003      	movs	r3, r0
 8001850:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001852:	e008      	b.n	8001866 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001854:	f7ff fac0 	bl	8000dd8 <HAL_GetTick>
 8001858:	0002      	movs	r2, r0
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	2b02      	cmp	r3, #2
 8001860:	d901      	bls.n	8001866 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8001862:	2303      	movs	r3, #3
 8001864:	e266      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001866:	4b46      	ldr	r3, [pc, #280]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	2204      	movs	r2, #4
 800186c:	4013      	ands	r3, r2
 800186e:	d0f1      	beq.n	8001854 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4a45      	ldr	r2, [pc, #276]	; (800198c <HAL_RCC_OscConfig+0x344>)
 8001876:	4013      	ands	r3, r2
 8001878:	0019      	movs	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	021a      	lsls	r2, r3, #8
 8001880:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001882:	430a      	orrs	r2, r1
 8001884:	605a      	str	r2, [r3, #4]
 8001886:	e018      	b.n	80018ba <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001888:	4b3d      	ldr	r3, [pc, #244]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	4b3c      	ldr	r3, [pc, #240]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 800188e:	2101      	movs	r1, #1
 8001890:	438a      	bics	r2, r1
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff faa0 	bl	8000dd8 <HAL_GetTick>
 8001898:	0003      	movs	r3, r0
 800189a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800189c:	e008      	b.n	80018b0 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800189e:	f7ff fa9b 	bl	8000dd8 <HAL_GetTick>
 80018a2:	0002      	movs	r2, r0
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	2b02      	cmp	r3, #2
 80018aa:	d901      	bls.n	80018b0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80018ac:	2303      	movs	r3, #3
 80018ae:	e241      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018b0:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2204      	movs	r2, #4
 80018b6:	4013      	ands	r3, r2
 80018b8:	d1f1      	bne.n	800189e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2210      	movs	r2, #16
 80018c0:	4013      	ands	r3, r2
 80018c2:	d100      	bne.n	80018c6 <HAL_RCC_OscConfig+0x27e>
 80018c4:	e0a1      	b.n	8001a0a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d140      	bne.n	800194e <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018cc:	4b2c      	ldr	r3, [pc, #176]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d005      	beq.n	80018e4 <HAL_RCC_OscConfig+0x29c>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	699b      	ldr	r3, [r3, #24]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d101      	bne.n	80018e4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	e227      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e4:	4b26      	ldr	r3, [pc, #152]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	4a2c      	ldr	r2, [pc, #176]	; (800199c <HAL_RCC_OscConfig+0x354>)
 80018ea:	4013      	ands	r3, r2
 80018ec:	0019      	movs	r1, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1a      	ldr	r2, [r3, #32]
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80018f4:	430a      	orrs	r2, r1
 80018f6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f8:	4b21      	ldr	r3, [pc, #132]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	0a19      	lsrs	r1, r3, #8
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	061a      	lsls	r2, r3, #24
 8001906:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001908:	430a      	orrs	r2, r1
 800190a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6a1b      	ldr	r3, [r3, #32]
 8001910:	0b5b      	lsrs	r3, r3, #13
 8001912:	3301      	adds	r3, #1
 8001914:	2280      	movs	r2, #128	; 0x80
 8001916:	0212      	lsls	r2, r2, #8
 8001918:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	091b      	lsrs	r3, r3, #4
 8001920:	210f      	movs	r1, #15
 8001922:	400b      	ands	r3, r1
 8001924:	491a      	ldr	r1, [pc, #104]	; (8001990 <HAL_RCC_OscConfig+0x348>)
 8001926:	5ccb      	ldrb	r3, [r1, r3]
 8001928:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <HAL_RCC_OscConfig+0x34c>)
 800192c:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800192e:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <HAL_RCC_OscConfig+0x350>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2513      	movs	r5, #19
 8001934:	197c      	adds	r4, r7, r5
 8001936:	0018      	movs	r0, r3
 8001938:	f7ff fa08 	bl	8000d4c <HAL_InitTick>
 800193c:	0003      	movs	r3, r0
 800193e:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001940:	197b      	adds	r3, r7, r5
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d060      	beq.n	8001a0a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001948:	197b      	adds	r3, r7, r5
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	e1f2      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	699b      	ldr	r3, [r3, #24]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d03f      	beq.n	80019d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001956:	4b0a      	ldr	r3, [pc, #40]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	4b09      	ldr	r3, [pc, #36]	; (8001980 <HAL_RCC_OscConfig+0x338>)
 800195c:	2180      	movs	r1, #128	; 0x80
 800195e:	0049      	lsls	r1, r1, #1
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001964:	f7ff fa38 	bl	8000dd8 <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800196c:	e018      	b.n	80019a0 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800196e:	f7ff fa33 	bl	8000dd8 <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d911      	bls.n	80019a0 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e1d9      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
 8001980:	40021000 	.word	0x40021000
 8001984:	fffeffff 	.word	0xfffeffff
 8001988:	fffbffff 	.word	0xfffbffff
 800198c:	ffffe0ff 	.word	0xffffe0ff
 8001990:	08003334 	.word	0x08003334
 8001994:	20000000 	.word	0x20000000
 8001998:	20000004 	.word	0x20000004
 800199c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80019a0:	4bc9      	ldr	r3, [pc, #804]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d0e0      	beq.n	800196e <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019ac:	4bc6      	ldr	r3, [pc, #792]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	4ac6      	ldr	r2, [pc, #792]	; (8001ccc <HAL_RCC_OscConfig+0x684>)
 80019b2:	4013      	ands	r3, r2
 80019b4:	0019      	movs	r1, r3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a1a      	ldr	r2, [r3, #32]
 80019ba:	4bc3      	ldr	r3, [pc, #780]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 80019bc:	430a      	orrs	r2, r1
 80019be:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019c0:	4bc1      	ldr	r3, [pc, #772]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	021b      	lsls	r3, r3, #8
 80019c6:	0a19      	lsrs	r1, r3, #8
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	061a      	lsls	r2, r3, #24
 80019ce:	4bbe      	ldr	r3, [pc, #760]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 80019d0:	430a      	orrs	r2, r1
 80019d2:	605a      	str	r2, [r3, #4]
 80019d4:	e019      	b.n	8001a0a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80019d6:	4bbc      	ldr	r3, [pc, #752]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	4bbb      	ldr	r3, [pc, #748]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 80019dc:	49bc      	ldr	r1, [pc, #752]	; (8001cd0 <HAL_RCC_OscConfig+0x688>)
 80019de:	400a      	ands	r2, r1
 80019e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e2:	f7ff f9f9 	bl	8000dd8 <HAL_GetTick>
 80019e6:	0003      	movs	r3, r0
 80019e8:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ec:	f7ff f9f4 	bl	8000dd8 <HAL_GetTick>
 80019f0:	0002      	movs	r2, r0
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e19a      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80019fe:	4bb2      	ldr	r3, [pc, #712]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	2380      	movs	r3, #128	; 0x80
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4013      	ands	r3, r2
 8001a08:	d1f0      	bne.n	80019ec <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2208      	movs	r2, #8
 8001a10:	4013      	ands	r3, r2
 8001a12:	d036      	beq.n	8001a82 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d019      	beq.n	8001a50 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a1c:	4baa      	ldr	r3, [pc, #680]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a20:	4ba9      	ldr	r3, [pc, #676]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	430a      	orrs	r2, r1
 8001a26:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a28:	f7ff f9d6 	bl	8000dd8 <HAL_GetTick>
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a32:	f7ff f9d1 	bl	8000dd8 <HAL_GetTick>
 8001a36:	0002      	movs	r2, r0
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e177      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a44:	4ba0      	ldr	r3, [pc, #640]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a48:	2202      	movs	r2, #2
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	d0f1      	beq.n	8001a32 <HAL_RCC_OscConfig+0x3ea>
 8001a4e:	e018      	b.n	8001a82 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a50:	4b9d      	ldr	r3, [pc, #628]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001a52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001a54:	4b9c      	ldr	r3, [pc, #624]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001a56:	2101      	movs	r1, #1
 8001a58:	438a      	bics	r2, r1
 8001a5a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5c:	f7ff f9bc 	bl	8000dd8 <HAL_GetTick>
 8001a60:	0003      	movs	r3, r0
 8001a62:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff f9b7 	bl	8000dd8 <HAL_GetTick>
 8001a6a:	0002      	movs	r2, r0
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e15d      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a78:	4b93      	ldr	r3, [pc, #588]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001a7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	4013      	ands	r3, r2
 8001a80:	d1f1      	bne.n	8001a66 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2204      	movs	r2, #4
 8001a88:	4013      	ands	r3, r2
 8001a8a:	d100      	bne.n	8001a8e <HAL_RCC_OscConfig+0x446>
 8001a8c:	e0ae      	b.n	8001bec <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a8e:	2023      	movs	r0, #35	; 0x23
 8001a90:	183b      	adds	r3, r7, r0
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a96:	4b8c      	ldr	r3, [pc, #560]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9a:	2380      	movs	r3, #128	; 0x80
 8001a9c:	055b      	lsls	r3, r3, #21
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d109      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b89      	ldr	r3, [pc, #548]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001aa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001aa6:	4b88      	ldr	r3, [pc, #544]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001aa8:	2180      	movs	r1, #128	; 0x80
 8001aaa:	0549      	lsls	r1, r1, #21
 8001aac:	430a      	orrs	r2, r1
 8001aae:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001ab0:	183b      	adds	r3, r7, r0
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab6:	4b87      	ldr	r3, [pc, #540]	; (8001cd4 <HAL_RCC_OscConfig+0x68c>)
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	2380      	movs	r3, #128	; 0x80
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d11a      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ac2:	4b84      	ldr	r3, [pc, #528]	; (8001cd4 <HAL_RCC_OscConfig+0x68c>)
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	4b83      	ldr	r3, [pc, #524]	; (8001cd4 <HAL_RCC_OscConfig+0x68c>)
 8001ac8:	2180      	movs	r1, #128	; 0x80
 8001aca:	0049      	lsls	r1, r1, #1
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f982 	bl	8000dd8 <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	e008      	b.n	8001aec <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ada:	f7ff f97d 	bl	8000dd8 <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	2b64      	cmp	r3, #100	; 0x64
 8001ae6:	d901      	bls.n	8001aec <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e123      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aec:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <HAL_RCC_OscConfig+0x68c>)
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d107      	bne.n	8001b14 <HAL_RCC_OscConfig+0x4cc>
 8001b04:	4b70      	ldr	r3, [pc, #448]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b08:	4b6f      	ldr	r3, [pc, #444]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b0a:	2180      	movs	r1, #128	; 0x80
 8001b0c:	0049      	lsls	r1, r1, #1
 8001b0e:	430a      	orrs	r2, r1
 8001b10:	651a      	str	r2, [r3, #80]	; 0x50
 8001b12:	e031      	b.n	8001b78 <HAL_RCC_OscConfig+0x530>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d10c      	bne.n	8001b36 <HAL_RCC_OscConfig+0x4ee>
 8001b1c:	4b6a      	ldr	r3, [pc, #424]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b20:	4b69      	ldr	r3, [pc, #420]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b22:	496b      	ldr	r1, [pc, #428]	; (8001cd0 <HAL_RCC_OscConfig+0x688>)
 8001b24:	400a      	ands	r2, r1
 8001b26:	651a      	str	r2, [r3, #80]	; 0x50
 8001b28:	4b67      	ldr	r3, [pc, #412]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b2a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b2c:	4b66      	ldr	r3, [pc, #408]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b2e:	496a      	ldr	r1, [pc, #424]	; (8001cd8 <HAL_RCC_OscConfig+0x690>)
 8001b30:	400a      	ands	r2, r1
 8001b32:	651a      	str	r2, [r3, #80]	; 0x50
 8001b34:	e020      	b.n	8001b78 <HAL_RCC_OscConfig+0x530>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689a      	ldr	r2, [r3, #8]
 8001b3a:	23a0      	movs	r3, #160	; 0xa0
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d10e      	bne.n	8001b60 <HAL_RCC_OscConfig+0x518>
 8001b42:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b46:	4b60      	ldr	r3, [pc, #384]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b48:	2180      	movs	r1, #128	; 0x80
 8001b4a:	00c9      	lsls	r1, r1, #3
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	651a      	str	r2, [r3, #80]	; 0x50
 8001b50:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b52:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b54:	4b5c      	ldr	r3, [pc, #368]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b56:	2180      	movs	r1, #128	; 0x80
 8001b58:	0049      	lsls	r1, r1, #1
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	651a      	str	r2, [r3, #80]	; 0x50
 8001b5e:	e00b      	b.n	8001b78 <HAL_RCC_OscConfig+0x530>
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b64:	4b58      	ldr	r3, [pc, #352]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b66:	495a      	ldr	r1, [pc, #360]	; (8001cd0 <HAL_RCC_OscConfig+0x688>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	651a      	str	r2, [r3, #80]	; 0x50
 8001b6c:	4b56      	ldr	r3, [pc, #344]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001b70:	4b55      	ldr	r3, [pc, #340]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001b72:	4959      	ldr	r1, [pc, #356]	; (8001cd8 <HAL_RCC_OscConfig+0x690>)
 8001b74:	400a      	ands	r2, r1
 8001b76:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d015      	beq.n	8001bac <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b80:	f7ff f92a 	bl	8000dd8 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b88:	e009      	b.n	8001b9e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8a:	f7ff f925 	bl	8000dd8 <HAL_GetTick>
 8001b8e:	0002      	movs	r2, r0
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	1ad3      	subs	r3, r2, r3
 8001b94:	4a51      	ldr	r2, [pc, #324]	; (8001cdc <HAL_RCC_OscConfig+0x694>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e0ca      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b9e:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001ba0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d0ef      	beq.n	8001b8a <HAL_RCC_OscConfig+0x542>
 8001baa:	e014      	b.n	8001bd6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bac:	f7ff f914 	bl	8000dd8 <HAL_GetTick>
 8001bb0:	0003      	movs	r3, r0
 8001bb2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bb4:	e009      	b.n	8001bca <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb6:	f7ff f90f 	bl	8000dd8 <HAL_GetTick>
 8001bba:	0002      	movs	r2, r0
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	4a46      	ldr	r2, [pc, #280]	; (8001cdc <HAL_RCC_OscConfig+0x694>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e0b4      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001bca:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001bcc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d1ef      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001bd6:	2323      	movs	r3, #35	; 0x23
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001be4:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001be6:	493e      	ldr	r1, [pc, #248]	; (8001ce0 <HAL_RCC_OscConfig+0x698>)
 8001be8:	400a      	ands	r2, r1
 8001bea:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d100      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x5ae>
 8001bf4:	e09d      	b.n	8001d32 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	2b0c      	cmp	r3, #12
 8001bfa:	d100      	bne.n	8001bfe <HAL_RCC_OscConfig+0x5b6>
 8001bfc:	e076      	b.n	8001cec <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d145      	bne.n	8001c92 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	4b2f      	ldr	r3, [pc, #188]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c0c:	4935      	ldr	r1, [pc, #212]	; (8001ce4 <HAL_RCC_OscConfig+0x69c>)
 8001c0e:	400a      	ands	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c12:	f7ff f8e1 	bl	8000dd8 <HAL_GetTick>
 8001c16:	0003      	movs	r3, r0
 8001c18:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff f8dc 	bl	8000dd8 <HAL_GetTick>
 8001c20:	0002      	movs	r2, r0
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e082      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001c2e:	4b26      	ldr	r3, [pc, #152]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	049b      	lsls	r3, r3, #18
 8001c36:	4013      	ands	r3, r2
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	4a2a      	ldr	r2, [pc, #168]	; (8001ce8 <HAL_RCC_OscConfig+0x6a0>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	0019      	movs	r1, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	431a      	orrs	r2, r3
 8001c54:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c60:	2180      	movs	r1, #128	; 0x80
 8001c62:	0449      	lsls	r1, r1, #17
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c68:	f7ff f8b6 	bl	8000dd8 <HAL_GetTick>
 8001c6c:	0003      	movs	r3, r0
 8001c6e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c70:	e008      	b.n	8001c84 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c72:	f7ff f8b1 	bl	8000dd8 <HAL_GetTick>
 8001c76:	0002      	movs	r2, r0
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d901      	bls.n	8001c84 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001c80:	2303      	movs	r3, #3
 8001c82:	e057      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	049b      	lsls	r3, r3, #18
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d0f0      	beq.n	8001c72 <HAL_RCC_OscConfig+0x62a>
 8001c90:	e04f      	b.n	8001d32 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001c98:	4912      	ldr	r1, [pc, #72]	; (8001ce4 <HAL_RCC_OscConfig+0x69c>)
 8001c9a:	400a      	ands	r2, r1
 8001c9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9e:	f7ff f89b 	bl	8000dd8 <HAL_GetTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff f896 	bl	8000dd8 <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e03c      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001cba:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_OscConfig+0x680>)
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	2380      	movs	r3, #128	; 0x80
 8001cc0:	049b      	lsls	r3, r3, #18
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x660>
 8001cc6:	e034      	b.n	8001d32 <HAL_RCC_OscConfig+0x6ea>
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	ffff1fff 	.word	0xffff1fff
 8001cd0:	fffffeff 	.word	0xfffffeff
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	fffffbff 	.word	0xfffffbff
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	efffffff 	.word	0xefffffff
 8001ce4:	feffffff 	.word	0xfeffffff
 8001ce8:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e01d      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001cf8:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <HAL_RCC_OscConfig+0x6f4>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	2380      	movs	r3, #128	; 0x80
 8001d02:	025b      	lsls	r3, r3, #9
 8001d04:	401a      	ands	r2, r3
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d10f      	bne.n	8001d2e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	23f0      	movs	r3, #240	; 0xf0
 8001d12:	039b      	lsls	r3, r3, #14
 8001d14:	401a      	ands	r2, r3
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d107      	bne.n	8001d2e <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	23c0      	movs	r3, #192	; 0xc0
 8001d22:	041b      	lsls	r3, r3, #16
 8001d24:	401a      	ands	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	0018      	movs	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	b00a      	add	sp, #40	; 0x28
 8001d3a:	bdb0      	pop	{r4, r5, r7, pc}
 8001d3c:	40021000 	.word	0x40021000

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b5b0      	push	{r4, r5, r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e128      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b96      	ldr	r3, [pc, #600]	; (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2201      	movs	r2, #1
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d91e      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b93      	ldr	r3, [pc, #588]	; (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2201      	movs	r2, #1
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b90      	ldr	r3, [pc, #576]	; (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d74:	f7ff f830 	bl	8000dd8 <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7c:	e009      	b.n	8001d92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7e:	f7ff f82b 	bl	8000dd8 <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	4a8a      	ldr	r2, [pc, #552]	; (8001fb4 <HAL_RCC_ClockConfig+0x274>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e109      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	4b87      	ldr	r3, [pc, #540]	; (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d009      	beq.n	8001dbe <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001daa:	4b83      	ldr	r3, [pc, #524]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	22f0      	movs	r2, #240	; 0xf0
 8001db0:	4393      	bics	r3, r2
 8001db2:	0019      	movs	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b7f      	ldr	r3, [pc, #508]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d100      	bne.n	8001dca <HAL_RCC_ClockConfig+0x8a>
 8001dc8:	e089      	b.n	8001ede <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d107      	bne.n	8001de2 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dd2:	4b79      	ldr	r3, [pc, #484]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	2380      	movs	r3, #128	; 0x80
 8001dd8:	029b      	lsls	r3, r3, #10
 8001dda:	4013      	ands	r3, r2
 8001ddc:	d120      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
 8001de0:	e0e1      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d107      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dea:	4b73      	ldr	r3, [pc, #460]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	049b      	lsls	r3, r3, #18
 8001df2:	4013      	ands	r3, r2
 8001df4:	d114      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e0d5      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d106      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e02:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2204      	movs	r2, #4
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d109      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0ca      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001e10:	4b69      	ldr	r3, [pc, #420]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2380      	movs	r3, #128	; 0x80
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d101      	bne.n	8001e20 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e0c2      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e20:	4b65      	ldr	r3, [pc, #404]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	2203      	movs	r2, #3
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	4b62      	ldr	r3, [pc, #392]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e34:	f7fe ffd0 	bl	8000dd8 <HAL_GetTick>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d111      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe ffc7 	bl	8000dd8 <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_RCC_ClockConfig+0x274>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e0a5      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e5a:	4b57      	ldr	r3, [pc, #348]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	220c      	movs	r2, #12
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b08      	cmp	r3, #8
 8001e64:	d1ef      	bne.n	8001e46 <HAL_RCC_ClockConfig+0x106>
 8001e66:	e03a      	b.n	8001ede <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d111      	bne.n	8001e94 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e70:	e009      	b.n	8001e86 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e72:	f7fe ffb1 	bl	8000dd8 <HAL_GetTick>
 8001e76:	0002      	movs	r2, r0
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	4a4d      	ldr	r2, [pc, #308]	; (8001fb4 <HAL_RCC_ClockConfig+0x274>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e08f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e86:	4b4c      	ldr	r3, [pc, #304]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	220c      	movs	r2, #12
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	2b0c      	cmp	r3, #12
 8001e90:	d1ef      	bne.n	8001e72 <HAL_RCC_ClockConfig+0x132>
 8001e92:	e024      	b.n	8001ede <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d11b      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e9c:	e009      	b.n	8001eb2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e9e:	f7fe ff9b 	bl	8000dd8 <HAL_GetTick>
 8001ea2:	0002      	movs	r2, r0
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1ad3      	subs	r3, r2, r3
 8001ea8:	4a42      	ldr	r2, [pc, #264]	; (8001fb4 <HAL_RCC_ClockConfig+0x274>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e079      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eb2:	4b41      	ldr	r3, [pc, #260]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001eb4:	68db      	ldr	r3, [r3, #12]
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	4013      	ands	r3, r2
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	d1ef      	bne.n	8001e9e <HAL_RCC_ClockConfig+0x15e>
 8001ebe:	e00e      	b.n	8001ede <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec0:	f7fe ff8a 	bl	8000dd8 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	4a3a      	ldr	r2, [pc, #232]	; (8001fb4 <HAL_RCC_ClockConfig+0x274>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e068      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ed4:	4b38      	ldr	r3, [pc, #224]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	220c      	movs	r2, #12
 8001eda:	4013      	ands	r3, r2
 8001edc:	d1f0      	bne.n	8001ec0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ede:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	683a      	ldr	r2, [r7, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d21e      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eec:	4b30      	ldr	r3, [pc, #192]	; (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	4393      	bics	r3, r2
 8001ef4:	0019      	movs	r1, r3
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	430a      	orrs	r2, r1
 8001efc:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001efe:	f7fe ff6b 	bl	8000dd8 <HAL_GetTick>
 8001f02:	0003      	movs	r3, r0
 8001f04:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f06:	e009      	b.n	8001f1c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7fe ff66 	bl	8000dd8 <HAL_GetTick>
 8001f0c:	0002      	movs	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	4a28      	ldr	r2, [pc, #160]	; (8001fb4 <HAL_RCC_ClockConfig+0x274>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e044      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_ClockConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	2201      	movs	r2, #1
 8001f22:	4013      	ands	r3, r2
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d1ee      	bne.n	8001f08 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2204      	movs	r2, #4
 8001f30:	4013      	ands	r3, r2
 8001f32:	d009      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4a20      	ldr	r2, [pc, #128]	; (8001fbc <HAL_RCC_ClockConfig+0x27c>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	4b1d      	ldr	r3, [pc, #116]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001f44:	430a      	orrs	r2, r1
 8001f46:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2208      	movs	r2, #8
 8001f4e:	4013      	ands	r3, r2
 8001f50:	d00a      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f52:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001f54:	68db      	ldr	r3, [r3, #12]
 8001f56:	4a1a      	ldr	r2, [pc, #104]	; (8001fc0 <HAL_RCC_ClockConfig+0x280>)
 8001f58:	4013      	ands	r3, r2
 8001f5a:	0019      	movs	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	00da      	lsls	r2, r3, #3
 8001f62:	4b15      	ldr	r3, [pc, #84]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001f64:	430a      	orrs	r2, r1
 8001f66:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001f68:	f000 f832 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8001f6c:	0001      	movs	r1, r0
 8001f6e:	4b12      	ldr	r3, [pc, #72]	; (8001fb8 <HAL_RCC_ClockConfig+0x278>)
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	091b      	lsrs	r3, r3, #4
 8001f74:	220f      	movs	r2, #15
 8001f76:	4013      	ands	r3, r2
 8001f78:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <HAL_RCC_ClockConfig+0x284>)
 8001f7a:	5cd3      	ldrb	r3, [r2, r3]
 8001f7c:	000a      	movs	r2, r1
 8001f7e:	40da      	lsrs	r2, r3
 8001f80:	4b11      	ldr	r3, [pc, #68]	; (8001fc8 <HAL_RCC_ClockConfig+0x288>)
 8001f82:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_RCC_ClockConfig+0x28c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	250b      	movs	r5, #11
 8001f8a:	197c      	adds	r4, r7, r5
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f7fe fedd 	bl	8000d4c <HAL_InitTick>
 8001f92:	0003      	movs	r3, r0
 8001f94:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001f96:	197b      	adds	r3, r7, r5
 8001f98:	781b      	ldrb	r3, [r3, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001f9e:	197b      	adds	r3, r7, r5
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b004      	add	sp, #16
 8001fac:	bdb0      	pop	{r4, r5, r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	40022000 	.word	0x40022000
 8001fb4:	00001388 	.word	0x00001388
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	fffff8ff 	.word	0xfffff8ff
 8001fc0:	ffffc7ff 	.word	0xffffc7ff
 8001fc4:	08003334 	.word	0x08003334
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	20000004 	.word	0x20000004

08001fd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b08e      	sub	sp, #56	; 0x38
 8001fd4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001fd6:	4b4c      	ldr	r3, [pc, #304]	; (8002108 <HAL_RCC_GetSysClockFreq+0x138>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fde:	230c      	movs	r3, #12
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b0c      	cmp	r3, #12
 8001fe4:	d014      	beq.n	8002010 <HAL_RCC_GetSysClockFreq+0x40>
 8001fe6:	d900      	bls.n	8001fea <HAL_RCC_GetSysClockFreq+0x1a>
 8001fe8:	e07b      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x112>
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d002      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x24>
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d00b      	beq.n	800200a <HAL_RCC_GetSysClockFreq+0x3a>
 8001ff2:	e076      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ff4:	4b44      	ldr	r3, [pc, #272]	; (8002108 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2210      	movs	r2, #16
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d002      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001ffe:	4b43      	ldr	r3, [pc, #268]	; (800210c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002000:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002002:	e07c      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002004:	4b42      	ldr	r3, [pc, #264]	; (8002110 <HAL_RCC_GetSysClockFreq+0x140>)
 8002006:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002008:	e079      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <HAL_RCC_GetSysClockFreq+0x140>)
 800200c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800200e:	e076      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002012:	0c9a      	lsrs	r2, r3, #18
 8002014:	230f      	movs	r3, #15
 8002016:	401a      	ands	r2, r3
 8002018:	4b3e      	ldr	r3, [pc, #248]	; (8002114 <HAL_RCC_GetSysClockFreq+0x144>)
 800201a:	5c9b      	ldrb	r3, [r3, r2]
 800201c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800201e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002020:	0d9a      	lsrs	r2, r3, #22
 8002022:	2303      	movs	r3, #3
 8002024:	4013      	ands	r3, r2
 8002026:	3301      	adds	r3, #1
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800202a:	4b37      	ldr	r3, [pc, #220]	; (8002108 <HAL_RCC_GetSysClockFreq+0x138>)
 800202c:	68da      	ldr	r2, [r3, #12]
 800202e:	2380      	movs	r3, #128	; 0x80
 8002030:	025b      	lsls	r3, r3, #9
 8002032:	4013      	ands	r3, r2
 8002034:	d01a      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002038:	61bb      	str	r3, [r7, #24]
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]
 800203e:	4a34      	ldr	r2, [pc, #208]	; (8002110 <HAL_RCC_GetSysClockFreq+0x140>)
 8002040:	2300      	movs	r3, #0
 8002042:	69b8      	ldr	r0, [r7, #24]
 8002044:	69f9      	ldr	r1, [r7, #28]
 8002046:	f7fe f913 	bl	8000270 <__aeabi_lmul>
 800204a:	0002      	movs	r2, r0
 800204c:	000b      	movs	r3, r1
 800204e:	0010      	movs	r0, r2
 8002050:	0019      	movs	r1, r3
 8002052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	2300      	movs	r3, #0
 8002058:	617b      	str	r3, [r7, #20]
 800205a:	693a      	ldr	r2, [r7, #16]
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	f7fe f8e7 	bl	8000230 <__aeabi_uldivmod>
 8002062:	0002      	movs	r2, r0
 8002064:	000b      	movs	r3, r1
 8002066:	0013      	movs	r3, r2
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
 800206a:	e037      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800206c:	4b26      	ldr	r3, [pc, #152]	; (8002108 <HAL_RCC_GetSysClockFreq+0x138>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2210      	movs	r2, #16
 8002072:	4013      	ands	r3, r2
 8002074:	d01a      	beq.n	80020ac <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002078:	60bb      	str	r3, [r7, #8]
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
 800207e:	4a23      	ldr	r2, [pc, #140]	; (800210c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002080:	2300      	movs	r3, #0
 8002082:	68b8      	ldr	r0, [r7, #8]
 8002084:	68f9      	ldr	r1, [r7, #12]
 8002086:	f7fe f8f3 	bl	8000270 <__aeabi_lmul>
 800208a:	0002      	movs	r2, r0
 800208c:	000b      	movs	r3, r1
 800208e:	0010      	movs	r0, r2
 8002090:	0019      	movs	r1, r3
 8002092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002094:	603b      	str	r3, [r7, #0]
 8002096:	2300      	movs	r3, #0
 8002098:	607b      	str	r3, [r7, #4]
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	f7fe f8c7 	bl	8000230 <__aeabi_uldivmod>
 80020a2:	0002      	movs	r2, r0
 80020a4:	000b      	movs	r3, r1
 80020a6:	0013      	movs	r3, r2
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
 80020aa:	e017      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80020ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ae:	0018      	movs	r0, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	0019      	movs	r1, r3
 80020b4:	4a16      	ldr	r2, [pc, #88]	; (8002110 <HAL_RCC_GetSysClockFreq+0x140>)
 80020b6:	2300      	movs	r3, #0
 80020b8:	f7fe f8da 	bl	8000270 <__aeabi_lmul>
 80020bc:	0002      	movs	r2, r0
 80020be:	000b      	movs	r3, r1
 80020c0:	0010      	movs	r0, r2
 80020c2:	0019      	movs	r1, r3
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	001c      	movs	r4, r3
 80020c8:	2300      	movs	r3, #0
 80020ca:	001d      	movs	r5, r3
 80020cc:	0022      	movs	r2, r4
 80020ce:	002b      	movs	r3, r5
 80020d0:	f7fe f8ae 	bl	8000230 <__aeabi_uldivmod>
 80020d4:	0002      	movs	r2, r0
 80020d6:	000b      	movs	r3, r1
 80020d8:	0013      	movs	r3, r2
 80020da:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80020dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020e0:	e00d      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80020e2:	4b09      	ldr	r3, [pc, #36]	; (8002108 <HAL_RCC_GetSysClockFreq+0x138>)
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	0b5b      	lsrs	r3, r3, #13
 80020e8:	2207      	movs	r2, #7
 80020ea:	4013      	ands	r3, r2
 80020ec:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80020ee:	6a3b      	ldr	r3, [r7, #32]
 80020f0:	3301      	adds	r3, #1
 80020f2:	2280      	movs	r2, #128	; 0x80
 80020f4:	0212      	lsls	r2, r2, #8
 80020f6:	409a      	lsls	r2, r3
 80020f8:	0013      	movs	r3, r2
 80020fa:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80020fc:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80020fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002100:	0018      	movs	r0, r3
 8002102:	46bd      	mov	sp, r7
 8002104:	b00e      	add	sp, #56	; 0x38
 8002106:	bdb0      	pop	{r4, r5, r7, pc}
 8002108:	40021000 	.word	0x40021000
 800210c:	003d0900 	.word	0x003d0900
 8002110:	00f42400 	.word	0x00f42400
 8002114:	0800334c 	.word	0x0800334c

08002118 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800211c:	4b02      	ldr	r3, [pc, #8]	; (8002128 <HAL_RCC_GetHCLKFreq+0x10>)
 800211e:	681b      	ldr	r3, [r3, #0]
}
 8002120:	0018      	movs	r0, r3
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	46c0      	nop			; (mov r8, r8)
 8002128:	20000000 	.word	0x20000000

0800212c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002130:	f7ff fff2 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002134:	0001      	movs	r1, r0
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002138:	68db      	ldr	r3, [r3, #12]
 800213a:	0a1b      	lsrs	r3, r3, #8
 800213c:	2207      	movs	r2, #7
 800213e:	4013      	ands	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002142:	5cd3      	ldrb	r3, [r2, r3]
 8002144:	40d9      	lsrs	r1, r3
 8002146:	000b      	movs	r3, r1
}
 8002148:	0018      	movs	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}
 800214e:	46c0      	nop			; (mov r8, r8)
 8002150:	40021000 	.word	0x40021000
 8002154:	08003344 	.word	0x08003344

08002158 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800215c:	f7ff ffdc 	bl	8002118 <HAL_RCC_GetHCLKFreq>
 8002160:	0001      	movs	r1, r0
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	0adb      	lsrs	r3, r3, #11
 8002168:	2207      	movs	r2, #7
 800216a:	4013      	ands	r3, r2
 800216c:	4a04      	ldr	r2, [pc, #16]	; (8002180 <HAL_RCC_GetPCLK2Freq+0x28>)
 800216e:	5cd3      	ldrb	r3, [r2, r3]
 8002170:	40d9      	lsrs	r1, r3
 8002172:	000b      	movs	r3, r1
}
 8002174:	0018      	movs	r0, r3
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	46c0      	nop			; (mov r8, r8)
 800217c:	40021000 	.word	0x40021000
 8002180:	08003344 	.word	0x08003344

08002184 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800218c:	2017      	movs	r0, #23
 800218e:	183b      	adds	r3, r7, r0
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2220      	movs	r2, #32
 800219a:	4013      	ands	r3, r2
 800219c:	d100      	bne.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800219e:	e0c2      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a0:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	055b      	lsls	r3, r3, #21
 80021a8:	4013      	ands	r3, r2
 80021aa:	d109      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ac:	4b8e      	ldr	r3, [pc, #568]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b0:	4b8d      	ldr	r3, [pc, #564]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021b2:	2180      	movs	r1, #128	; 0x80
 80021b4:	0549      	lsls	r1, r1, #21
 80021b6:	430a      	orrs	r2, r1
 80021b8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80021ba:	183b      	adds	r3, r7, r0
 80021bc:	2201      	movs	r2, #1
 80021be:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c0:	4b8a      	ldr	r3, [pc, #552]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	005b      	lsls	r3, r3, #1
 80021c8:	4013      	ands	r3, r2
 80021ca:	d11a      	bne.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021cc:	4b87      	ldr	r3, [pc, #540]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	4b86      	ldr	r3, [pc, #536]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	0049      	lsls	r1, r1, #1
 80021d6:	430a      	orrs	r2, r1
 80021d8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021da:	f7fe fdfd 	bl	8000dd8 <HAL_GetTick>
 80021de:	0003      	movs	r3, r0
 80021e0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021e2:	e008      	b.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021e4:	f7fe fdf8 	bl	8000dd8 <HAL_GetTick>
 80021e8:	0002      	movs	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b64      	cmp	r3, #100	; 0x64
 80021f0:	d901      	bls.n	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e0f3      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f6:	4b7d      	ldr	r3, [pc, #500]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80021f8:	681a      	ldr	r2, [r3, #0]
 80021fa:	2380      	movs	r3, #128	; 0x80
 80021fc:	005b      	lsls	r3, r3, #1
 80021fe:	4013      	ands	r3, r2
 8002200:	d0f0      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002202:	4b79      	ldr	r3, [pc, #484]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	23c0      	movs	r3, #192	; 0xc0
 8002208:	039b      	lsls	r3, r3, #14
 800220a:	4013      	ands	r3, r2
 800220c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	23c0      	movs	r3, #192	; 0xc0
 8002214:	039b      	lsls	r3, r3, #14
 8002216:	4013      	ands	r3, r2
 8002218:	68fa      	ldr	r2, [r7, #12]
 800221a:	429a      	cmp	r2, r3
 800221c:	d013      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685a      	ldr	r2, [r3, #4]
 8002222:	23c0      	movs	r3, #192	; 0xc0
 8002224:	029b      	lsls	r3, r3, #10
 8002226:	401a      	ands	r2, r3
 8002228:	23c0      	movs	r3, #192	; 0xc0
 800222a:	029b      	lsls	r3, r3, #10
 800222c:	429a      	cmp	r2, r3
 800222e:	d10a      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002230:	4b6d      	ldr	r3, [pc, #436]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	2380      	movs	r3, #128	; 0x80
 8002236:	029b      	lsls	r3, r3, #10
 8002238:	401a      	ands	r2, r3
 800223a:	2380      	movs	r3, #128	; 0x80
 800223c:	029b      	lsls	r3, r3, #10
 800223e:	429a      	cmp	r2, r3
 8002240:	d101      	bne.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e0cb      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002246:	4b68      	ldr	r3, [pc, #416]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002248:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800224a:	23c0      	movs	r3, #192	; 0xc0
 800224c:	029b      	lsls	r3, r3, #10
 800224e:	4013      	ands	r3, r2
 8002250:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d03b      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685a      	ldr	r2, [r3, #4]
 800225c:	23c0      	movs	r3, #192	; 0xc0
 800225e:	029b      	lsls	r3, r3, #10
 8002260:	4013      	ands	r3, r2
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	429a      	cmp	r2, r3
 8002266:	d033      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2220      	movs	r2, #32
 800226e:	4013      	ands	r3, r2
 8002270:	d02e      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002272:	4b5d      	ldr	r3, [pc, #372]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002274:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002276:	4a5e      	ldr	r2, [pc, #376]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002278:	4013      	ands	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800227c:	4b5a      	ldr	r3, [pc, #360]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800227e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002280:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002282:	2180      	movs	r1, #128	; 0x80
 8002284:	0309      	lsls	r1, r1, #12
 8002286:	430a      	orrs	r2, r1
 8002288:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800228a:	4b57      	ldr	r3, [pc, #348]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800228c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800228e:	4b56      	ldr	r3, [pc, #344]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002290:	4958      	ldr	r1, [pc, #352]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002292:	400a      	ands	r2, r1
 8002294:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002296:	4b54      	ldr	r3, [pc, #336]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002298:	68fa      	ldr	r2, [r7, #12]
 800229a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	2380      	movs	r3, #128	; 0x80
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	d014      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a6:	f7fe fd97 	bl	8000dd8 <HAL_GetTick>
 80022aa:	0003      	movs	r3, r0
 80022ac:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ae:	e009      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80022b0:	f7fe fd92 	bl	8000dd8 <HAL_GetTick>
 80022b4:	0002      	movs	r2, r0
 80022b6:	693b      	ldr	r3, [r7, #16]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	4a4f      	ldr	r2, [pc, #316]	; (80023f8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d901      	bls.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e08c      	b.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022c4:	4b48      	ldr	r3, [pc, #288]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4013      	ands	r3, r2
 80022ce:	d0ef      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	23c0      	movs	r3, #192	; 0xc0
 80022d6:	029b      	lsls	r3, r3, #10
 80022d8:	401a      	ands	r2, r3
 80022da:	23c0      	movs	r3, #192	; 0xc0
 80022dc:	029b      	lsls	r3, r3, #10
 80022de:	429a      	cmp	r2, r3
 80022e0:	d10c      	bne.n	80022fc <HAL_RCCEx_PeriphCLKConfig+0x178>
 80022e2:	4b41      	ldr	r3, [pc, #260]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a45      	ldr	r2, [pc, #276]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80022e8:	4013      	ands	r3, r2
 80022ea:	0019      	movs	r1, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	23c0      	movs	r3, #192	; 0xc0
 80022f2:	039b      	lsls	r3, r3, #14
 80022f4:	401a      	ands	r2, r3
 80022f6:	4b3c      	ldr	r3, [pc, #240]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022f8:	430a      	orrs	r2, r1
 80022fa:	601a      	str	r2, [r3, #0]
 80022fc:	4b3a      	ldr	r3, [pc, #232]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022fe:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685a      	ldr	r2, [r3, #4]
 8002304:	23c0      	movs	r3, #192	; 0xc0
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	401a      	ands	r2, r3
 800230a:	4b37      	ldr	r3, [pc, #220]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230c:	430a      	orrs	r2, r1
 800230e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002310:	2317      	movs	r3, #23
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d105      	bne.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800231a:	4b33      	ldr	r3, [pc, #204]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800231c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800231e:	4b32      	ldr	r3, [pc, #200]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002320:	4937      	ldr	r1, [pc, #220]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002322:	400a      	ands	r2, r1
 8002324:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	2201      	movs	r2, #1
 800232c:	4013      	ands	r3, r2
 800232e:	d009      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002330:	4b2d      	ldr	r3, [pc, #180]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002334:	2203      	movs	r2, #3
 8002336:	4393      	bics	r3, r2
 8002338:	0019      	movs	r1, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689a      	ldr	r2, [r3, #8]
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002340:	430a      	orrs	r2, r1
 8002342:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800234e:	4b26      	ldr	r3, [pc, #152]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	220c      	movs	r2, #12
 8002354:	4393      	bics	r3, r2
 8002356:	0019      	movs	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	68da      	ldr	r2, [r3, #12]
 800235c:	4b22      	ldr	r3, [pc, #136]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800235e:	430a      	orrs	r2, r1
 8002360:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	2204      	movs	r2, #4
 8002368:	4013      	ands	r3, r2
 800236a:	d009      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800236c:	4b1e      	ldr	r3, [pc, #120]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800236e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002370:	4a24      	ldr	r2, [pc, #144]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002372:	4013      	ands	r3, r2
 8002374:	0019      	movs	r1, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691a      	ldr	r2, [r3, #16]
 800237a:	4b1b      	ldr	r3, [pc, #108]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800237c:	430a      	orrs	r2, r1
 800237e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2208      	movs	r2, #8
 8002386:	4013      	ands	r3, r2
 8002388:	d009      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800238a:	4b17      	ldr	r3, [pc, #92]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238e:	4a1e      	ldr	r2, [pc, #120]	; (8002408 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002390:	4013      	ands	r3, r2
 8002392:	0019      	movs	r1, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	695a      	ldr	r2, [r3, #20]
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800239a:	430a      	orrs	r2, r1
 800239c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	2380      	movs	r3, #128	; 0x80
 80023a4:	005b      	lsls	r3, r3, #1
 80023a6:	4013      	ands	r3, r2
 80023a8:	d009      	beq.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023aa:	4b0f      	ldr	r3, [pc, #60]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	4a10      	ldr	r2, [pc, #64]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	0019      	movs	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	4b0b      	ldr	r3, [pc, #44]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ba:	430a      	orrs	r2, r1
 80023bc:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2280      	movs	r2, #128	; 0x80
 80023c4:	4013      	ands	r3, r2
 80023c6:	d009      	beq.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80023c8:	4b07      	ldr	r3, [pc, #28]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023cc:	4a0f      	ldr	r2, [pc, #60]	; (800240c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	0019      	movs	r1, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	69da      	ldr	r2, [r3, #28]
 80023d6:	4b04      	ldr	r3, [pc, #16]	; (80023e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023d8:	430a      	orrs	r2, r1
 80023da:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	0018      	movs	r0, r3
 80023e0:	46bd      	mov	sp, r7
 80023e2:	b006      	add	sp, #24
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	46c0      	nop			; (mov r8, r8)
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40007000 	.word	0x40007000
 80023f0:	fffcffff 	.word	0xfffcffff
 80023f4:	fff7ffff 	.word	0xfff7ffff
 80023f8:	00001388 	.word	0x00001388
 80023fc:	ffcfffff 	.word	0xffcfffff
 8002400:	efffffff 	.word	0xefffffff
 8002404:	fffff3ff 	.word	0xfffff3ff
 8002408:	ffffcfff 	.word	0xffffcfff
 800240c:	fff3ffff 	.word	0xfff3ffff

08002410 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e083      	b.n	800252a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	2b00      	cmp	r3, #0
 8002428:	d109      	bne.n	800243e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	2382      	movs	r3, #130	; 0x82
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	429a      	cmp	r2, r3
 8002434:	d009      	beq.n	800244a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	61da      	str	r2, [r3, #28]
 800243c:	e005      	b.n	800244a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2200      	movs	r2, #0
 8002448:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2251      	movs	r2, #81	; 0x51
 8002454:	5c9b      	ldrb	r3, [r3, r2]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d107      	bne.n	800246c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2250      	movs	r2, #80	; 0x50
 8002460:	2100      	movs	r1, #0
 8002462:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	0018      	movs	r0, r3
 8002468:	f7fe fb1e 	bl	8000aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2251      	movs	r2, #81	; 0x51
 8002470:	2102      	movs	r1, #2
 8002472:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2140      	movs	r1, #64	; 0x40
 8002480:	438a      	bics	r2, r1
 8002482:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685a      	ldr	r2, [r3, #4]
 8002488:	2382      	movs	r3, #130	; 0x82
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	401a      	ands	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6899      	ldr	r1, [r3, #8]
 8002492:	2384      	movs	r3, #132	; 0x84
 8002494:	021b      	lsls	r3, r3, #8
 8002496:	400b      	ands	r3, r1
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68d9      	ldr	r1, [r3, #12]
 800249e:	2380      	movs	r3, #128	; 0x80
 80024a0:	011b      	lsls	r3, r3, #4
 80024a2:	400b      	ands	r3, r1
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2102      	movs	r1, #2
 80024ac:	400b      	ands	r3, r1
 80024ae:	431a      	orrs	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	2101      	movs	r1, #1
 80024b6:	400b      	ands	r3, r1
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6999      	ldr	r1, [r3, #24]
 80024be:	2380      	movs	r3, #128	; 0x80
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	400b      	ands	r3, r1
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69db      	ldr	r3, [r3, #28]
 80024ca:	2138      	movs	r1, #56	; 0x38
 80024cc:	400b      	ands	r3, r1
 80024ce:	431a      	orrs	r2, r3
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	2180      	movs	r1, #128	; 0x80
 80024d6:	400b      	ands	r3, r1
 80024d8:	431a      	orrs	r2, r3
 80024da:	0011      	movs	r1, r2
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	019b      	lsls	r3, r3, #6
 80024e4:	401a      	ands	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	699b      	ldr	r3, [r3, #24]
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	2204      	movs	r2, #4
 80024f6:	4013      	ands	r3, r2
 80024f8:	0019      	movs	r1, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fe:	2210      	movs	r2, #16
 8002500:	401a      	ands	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	430a      	orrs	r2, r1
 8002508:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	69da      	ldr	r2, [r3, #28]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4907      	ldr	r1, [pc, #28]	; (8002534 <HAL_SPI_Init+0x124>)
 8002516:	400a      	ands	r2, r1
 8002518:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2251      	movs	r2, #81	; 0x51
 8002524:	2101      	movs	r1, #1
 8002526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	0018      	movs	r0, r3
 800252c:	46bd      	mov	sp, r7
 800252e:	b002      	add	sp, #8
 8002530:	bd80      	pop	{r7, pc}
 8002532:	46c0      	nop			; (mov r8, r8)
 8002534:	fffff7ff 	.word	0xfffff7ff

08002538 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	099b      	lsrs	r3, r3, #6
 8002554:	001a      	movs	r2, r3
 8002556:	2301      	movs	r3, #1
 8002558:	4013      	ands	r3, r2
 800255a:	d10f      	bne.n	800257c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	2201      	movs	r2, #1
 8002560:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002562:	d00b      	beq.n	800257c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	099b      	lsrs	r3, r3, #6
 8002568:	001a      	movs	r2, r3
 800256a:	2301      	movs	r3, #1
 800256c:	4013      	ands	r3, r2
 800256e:	d005      	beq.n	800257c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	0010      	movs	r0, r2
 8002578:	4798      	blx	r3
    return;
 800257a:	e0d5      	b.n	8002728 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	085b      	lsrs	r3, r3, #1
 8002580:	001a      	movs	r2, r3
 8002582:	2301      	movs	r3, #1
 8002584:	4013      	ands	r3, r2
 8002586:	d00b      	beq.n	80025a0 <HAL_SPI_IRQHandler+0x68>
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	09db      	lsrs	r3, r3, #7
 800258c:	001a      	movs	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d005      	beq.n	80025a0 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	0010      	movs	r0, r2
 800259c:	4798      	blx	r3
    return;
 800259e:	e0c3      	b.n	8002728 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	001a      	movs	r2, r3
 80025a6:	2301      	movs	r3, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	d10c      	bne.n	80025c6 <HAL_SPI_IRQHandler+0x8e>
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	099b      	lsrs	r3, r3, #6
 80025b0:	001a      	movs	r2, r3
 80025b2:	2301      	movs	r3, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	d106      	bne.n	80025c6 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	001a      	movs	r2, r3
 80025be:	2301      	movs	r3, #1
 80025c0:	4013      	ands	r3, r2
 80025c2:	d100      	bne.n	80025c6 <HAL_SPI_IRQHandler+0x8e>
 80025c4:	e0b0      	b.n	8002728 <HAL_SPI_IRQHandler+0x1f0>
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	095b      	lsrs	r3, r3, #5
 80025ca:	001a      	movs	r2, r3
 80025cc:	2301      	movs	r3, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	d100      	bne.n	80025d4 <HAL_SPI_IRQHandler+0x9c>
 80025d2:	e0a9      	b.n	8002728 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	099b      	lsrs	r3, r3, #6
 80025d8:	001a      	movs	r2, r3
 80025da:	2301      	movs	r3, #1
 80025dc:	4013      	ands	r3, r2
 80025de:	d023      	beq.n	8002628 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2251      	movs	r2, #81	; 0x51
 80025e4:	5c9b      	ldrb	r3, [r3, r2]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	2b03      	cmp	r3, #3
 80025ea:	d011      	beq.n	8002610 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f0:	2204      	movs	r2, #4
 80025f2:	431a      	orrs	r2, r3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025f8:	2300      	movs	r3, #0
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	617b      	str	r3, [r7, #20]
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	e00b      	b.n	8002628 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002610:	2300      	movs	r3, #0
 8002612:	613b      	str	r3, [r7, #16]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	613b      	str	r3, [r7, #16]
 8002624:	693b      	ldr	r3, [r7, #16]
        return;
 8002626:	e07f      	b.n	8002728 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	095b      	lsrs	r3, r3, #5
 800262c:	001a      	movs	r2, r3
 800262e:	2301      	movs	r3, #1
 8002630:	4013      	ands	r3, r2
 8002632:	d014      	beq.n	800265e <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002638:	2201      	movs	r2, #1
 800263a:	431a      	orrs	r2, r3
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	60fb      	str	r3, [r7, #12]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2140      	movs	r1, #64	; 0x40
 8002658:	438a      	bics	r2, r1
 800265a:	601a      	str	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800265e:	69bb      	ldr	r3, [r7, #24]
 8002660:	0a1b      	lsrs	r3, r3, #8
 8002662:	001a      	movs	r2, r3
 8002664:	2301      	movs	r3, #1
 8002666:	4013      	ands	r3, r2
 8002668:	d00c      	beq.n	8002684 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	2208      	movs	r2, #8
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	60bb      	str	r3, [r7, #8]
 8002682:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002688:	2b00      	cmp	r3, #0
 800268a:	d04c      	beq.n	8002726 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	685a      	ldr	r2, [r3, #4]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	21e0      	movs	r1, #224	; 0xe0
 8002698:	438a      	bics	r2, r1
 800269a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2251      	movs	r2, #81	; 0x51
 80026a0:	2101      	movs	r1, #1
 80026a2:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2202      	movs	r2, #2
 80026a8:	4013      	ands	r3, r2
 80026aa:	d103      	bne.n	80026b4 <HAL_SPI_IRQHandler+0x17c>
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2201      	movs	r2, #1
 80026b0:	4013      	ands	r3, r2
 80026b2:	d032      	beq.n	800271a <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	685a      	ldr	r2, [r3, #4]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2103      	movs	r1, #3
 80026c0:	438a      	bics	r2, r1
 80026c2:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d010      	beq.n	80026ee <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_SPI_IRQHandler+0x1f8>)
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d8:	0018      	movs	r0, r3
 80026da:	f7fe fc89 	bl	8000ff0 <HAL_DMA_Abort_IT>
 80026de:	1e03      	subs	r3, r0, #0
 80026e0:	d005      	beq.n	80026ee <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e6:	2240      	movs	r2, #64	; 0x40
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fa:	4a0d      	ldr	r2, [pc, #52]	; (8002730 <HAL_SPI_IRQHandler+0x1f8>)
 80026fc:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002702:	0018      	movs	r0, r3
 8002704:	f7fe fc74 	bl	8000ff0 <HAL_DMA_Abort_IT>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d00b      	beq.n	8002724 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002710:	2240      	movs	r2, #64	; 0x40
 8002712:	431a      	orrs	r2, r3
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002718:	e004      	b.n	8002724 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	0018      	movs	r0, r3
 800271e:	f000 f809 	bl	8002734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002722:	e000      	b.n	8002726 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002724:	46c0      	nop			; (mov r8, r8)
    return;
 8002726:	46c0      	nop			; (mov r8, r8)
  }
}
 8002728:	46bd      	mov	sp, r7
 800272a:	b008      	add	sp, #32
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	08002745 	.word	0x08002745

08002734 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002750:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	2200      	movs	r2, #0
 800275c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	0018      	movs	r0, r3
 8002762:	f7ff ffe7 	bl	8002734 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002766:	46c0      	nop			; (mov r8, r8)
 8002768:	46bd      	mov	sp, r7
 800276a:	b004      	add	sp, #16
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e044      	b.n	800280c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002786:	2b00      	cmp	r3, #0
 8002788:	d107      	bne.n	800279a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2274      	movs	r2, #116	; 0x74
 800278e:	2100      	movs	r1, #0
 8002790:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	0018      	movs	r0, r3
 8002796:	f7fe fa21 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2224      	movs	r2, #36	; 0x24
 800279e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2101      	movs	r1, #1
 80027ac:	438a      	bics	r2, r1
 80027ae:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 f8d8 	bl	8002968 <UART_SetConfig>
 80027b8:	0003      	movs	r3, r0
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80027be:	2301      	movs	r3, #1
 80027c0:	e024      	b.n	800280c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	0018      	movs	r0, r3
 80027ce:	f000 fb6b 	bl	8002ea8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	490d      	ldr	r1, [pc, #52]	; (8002814 <HAL_UART_Init+0xa4>)
 80027de:	400a      	ands	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	212a      	movs	r1, #42	; 0x2a
 80027ee:	438a      	bics	r2, r1
 80027f0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2101      	movs	r1, #1
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	0018      	movs	r0, r3
 8002806:	f000 fc03 	bl	8003010 <UART_CheckIdleState>
 800280a:	0003      	movs	r3, r0
}
 800280c:	0018      	movs	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	b002      	add	sp, #8
 8002812:	bd80      	pop	{r7, pc}
 8002814:	ffffb7ff 	.word	0xffffb7ff

08002818 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	; 0x28
 800281c:	af02      	add	r7, sp, #8
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	1dbb      	adds	r3, r7, #6
 8002826:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800282c:	2b20      	cmp	r3, #32
 800282e:	d000      	beq.n	8002832 <HAL_UART_Transmit+0x1a>
 8002830:	e095      	b.n	800295e <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_UART_Transmit+0x28>
 8002838:	1dbb      	adds	r3, r7, #6
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e08d      	b.n	8002960 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	689a      	ldr	r2, [r3, #8]
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	015b      	lsls	r3, r3, #5
 800284c:	429a      	cmp	r2, r3
 800284e:	d109      	bne.n	8002864 <HAL_UART_Transmit+0x4c>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d105      	bne.n	8002864 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	2201      	movs	r2, #1
 800285c:	4013      	ands	r3, r2
 800285e:	d001      	beq.n	8002864 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e07d      	b.n	8002960 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2274      	movs	r2, #116	; 0x74
 8002868:	5c9b      	ldrb	r3, [r3, r2]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d101      	bne.n	8002872 <HAL_UART_Transmit+0x5a>
 800286e:	2302      	movs	r3, #2
 8002870:	e076      	b.n	8002960 <HAL_UART_Transmit+0x148>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2274      	movs	r2, #116	; 0x74
 8002876:	2101      	movs	r1, #1
 8002878:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2280      	movs	r2, #128	; 0x80
 800287e:	2100      	movs	r1, #0
 8002880:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2221      	movs	r2, #33	; 0x21
 8002886:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002888:	f7fe faa6 	bl	8000dd8 <HAL_GetTick>
 800288c:	0003      	movs	r3, r0
 800288e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	1dba      	adds	r2, r7, #6
 8002894:	2150      	movs	r1, #80	; 0x50
 8002896:	8812      	ldrh	r2, [r2, #0]
 8002898:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1dba      	adds	r2, r7, #6
 800289e:	2152      	movs	r1, #82	; 0x52
 80028a0:	8812      	ldrh	r2, [r2, #0]
 80028a2:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	689a      	ldr	r2, [r3, #8]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	015b      	lsls	r3, r3, #5
 80028ac:	429a      	cmp	r2, r3
 80028ae:	d108      	bne.n	80028c2 <HAL_UART_Transmit+0xaa>
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d104      	bne.n	80028c2 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80028b8:	2300      	movs	r3, #0
 80028ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	61bb      	str	r3, [r7, #24]
 80028c0:	e003      	b.n	80028ca <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	2274      	movs	r2, #116	; 0x74
 80028ce:	2100      	movs	r1, #0
 80028d0:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80028d2:	e02c      	b.n	800292e <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	9300      	str	r3, [sp, #0]
 80028dc:	0013      	movs	r3, r2
 80028de:	2200      	movs	r2, #0
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	f000 fbdd 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 80028e6:	1e03      	subs	r3, r0, #0
 80028e8:	d001      	beq.n	80028ee <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80028ea:	2303      	movs	r3, #3
 80028ec:	e038      	b.n	8002960 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10b      	bne.n	800290c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	001a      	movs	r2, r3
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	05d2      	lsls	r2, r2, #23
 8002900:	0dd2      	lsrs	r2, r2, #23
 8002902:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	3302      	adds	r3, #2
 8002908:	61bb      	str	r3, [r7, #24]
 800290a:	e007      	b.n	800291c <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	781a      	ldrb	r2, [r3, #0]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2252      	movs	r2, #82	; 0x52
 8002920:	5a9b      	ldrh	r3, [r3, r2]
 8002922:	b29b      	uxth	r3, r3
 8002924:	3b01      	subs	r3, #1
 8002926:	b299      	uxth	r1, r3
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2252      	movs	r2, #82	; 0x52
 800292c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2252      	movs	r2, #82	; 0x52
 8002932:	5a9b      	ldrh	r3, [r3, r2]
 8002934:	b29b      	uxth	r3, r3
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1cc      	bne.n	80028d4 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	9300      	str	r3, [sp, #0]
 8002942:	0013      	movs	r3, r2
 8002944:	2200      	movs	r2, #0
 8002946:	2140      	movs	r1, #64	; 0x40
 8002948:	f000 fbaa 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 800294c:	1e03      	subs	r3, r0, #0
 800294e:	d001      	beq.n	8002954 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e005      	b.n	8002960 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2220      	movs	r2, #32
 8002958:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800295a:	2300      	movs	r3, #0
 800295c:	e000      	b.n	8002960 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 800295e:	2302      	movs	r3, #2
  }
}
 8002960:	0018      	movs	r0, r3
 8002962:	46bd      	mov	sp, r7
 8002964:	b008      	add	sp, #32
 8002966:	bd80      	pop	{r7, pc}

08002968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002968:	b5b0      	push	{r4, r5, r7, lr}
 800296a:	b08e      	sub	sp, #56	; 0x38
 800296c:	af00      	add	r7, sp, #0
 800296e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002970:	231a      	movs	r3, #26
 8002972:	2218      	movs	r2, #24
 8002974:	189b      	adds	r3, r3, r2
 8002976:	19db      	adds	r3, r3, r7
 8002978:	2200      	movs	r2, #0
 800297a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	431a      	orrs	r2, r3
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4313      	orrs	r3, r2
 8002992:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4ac3      	ldr	r2, [pc, #780]	; (8002ca8 <UART_SetConfig+0x340>)
 800299c:	4013      	ands	r3, r2
 800299e:	0019      	movs	r1, r3
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029a6:	430a      	orrs	r2, r1
 80029a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	4abe      	ldr	r2, [pc, #760]	; (8002cac <UART_SetConfig+0x344>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	69fb      	ldr	r3, [r7, #28]
 80029b8:	68da      	ldr	r2, [r3, #12]
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	699b      	ldr	r3, [r3, #24]
 80029c6:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4ab8      	ldr	r2, [pc, #736]	; (8002cb0 <UART_SetConfig+0x348>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029d8:	4313      	orrs	r3, r2
 80029da:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	4ab4      	ldr	r2, [pc, #720]	; (8002cb4 <UART_SetConfig+0x34c>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029ee:	430a      	orrs	r2, r1
 80029f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4ab0      	ldr	r2, [pc, #704]	; (8002cb8 <UART_SetConfig+0x350>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d131      	bne.n	8002a60 <UART_SetConfig+0xf8>
 80029fc:	4baf      	ldr	r3, [pc, #700]	; (8002cbc <UART_SetConfig+0x354>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a00:	2203      	movs	r2, #3
 8002a02:	4013      	ands	r3, r2
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d01d      	beq.n	8002a44 <UART_SetConfig+0xdc>
 8002a08:	d823      	bhi.n	8002a52 <UART_SetConfig+0xea>
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d00c      	beq.n	8002a28 <UART_SetConfig+0xc0>
 8002a0e:	d820      	bhi.n	8002a52 <UART_SetConfig+0xea>
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d002      	beq.n	8002a1a <UART_SetConfig+0xb2>
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d00e      	beq.n	8002a36 <UART_SetConfig+0xce>
 8002a18:	e01b      	b.n	8002a52 <UART_SetConfig+0xea>
 8002a1a:	231b      	movs	r3, #27
 8002a1c:	2218      	movs	r2, #24
 8002a1e:	189b      	adds	r3, r3, r2
 8002a20:	19db      	adds	r3, r3, r7
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
 8002a26:	e0b4      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002a28:	231b      	movs	r3, #27
 8002a2a:	2218      	movs	r2, #24
 8002a2c:	189b      	adds	r3, r3, r2
 8002a2e:	19db      	adds	r3, r3, r7
 8002a30:	2202      	movs	r2, #2
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e0ad      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002a36:	231b      	movs	r3, #27
 8002a38:	2218      	movs	r2, #24
 8002a3a:	189b      	adds	r3, r3, r2
 8002a3c:	19db      	adds	r3, r3, r7
 8002a3e:	2204      	movs	r2, #4
 8002a40:	701a      	strb	r2, [r3, #0]
 8002a42:	e0a6      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002a44:	231b      	movs	r3, #27
 8002a46:	2218      	movs	r2, #24
 8002a48:	189b      	adds	r3, r3, r2
 8002a4a:	19db      	adds	r3, r3, r7
 8002a4c:	2208      	movs	r2, #8
 8002a4e:	701a      	strb	r2, [r3, #0]
 8002a50:	e09f      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002a52:	231b      	movs	r3, #27
 8002a54:	2218      	movs	r2, #24
 8002a56:	189b      	adds	r3, r3, r2
 8002a58:	19db      	adds	r3, r3, r7
 8002a5a:	2210      	movs	r2, #16
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e098      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a96      	ldr	r2, [pc, #600]	; (8002cc0 <UART_SetConfig+0x358>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d131      	bne.n	8002ace <UART_SetConfig+0x166>
 8002a6a:	4b94      	ldr	r3, [pc, #592]	; (8002cbc <UART_SetConfig+0x354>)
 8002a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a6e:	220c      	movs	r2, #12
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d01d      	beq.n	8002ab2 <UART_SetConfig+0x14a>
 8002a76:	d823      	bhi.n	8002ac0 <UART_SetConfig+0x158>
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d00c      	beq.n	8002a96 <UART_SetConfig+0x12e>
 8002a7c:	d820      	bhi.n	8002ac0 <UART_SetConfig+0x158>
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <UART_SetConfig+0x120>
 8002a82:	2b04      	cmp	r3, #4
 8002a84:	d00e      	beq.n	8002aa4 <UART_SetConfig+0x13c>
 8002a86:	e01b      	b.n	8002ac0 <UART_SetConfig+0x158>
 8002a88:	231b      	movs	r3, #27
 8002a8a:	2218      	movs	r2, #24
 8002a8c:	189b      	adds	r3, r3, r2
 8002a8e:	19db      	adds	r3, r3, r7
 8002a90:	2200      	movs	r2, #0
 8002a92:	701a      	strb	r2, [r3, #0]
 8002a94:	e07d      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002a96:	231b      	movs	r3, #27
 8002a98:	2218      	movs	r2, #24
 8002a9a:	189b      	adds	r3, r3, r2
 8002a9c:	19db      	adds	r3, r3, r7
 8002a9e:	2202      	movs	r2, #2
 8002aa0:	701a      	strb	r2, [r3, #0]
 8002aa2:	e076      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002aa4:	231b      	movs	r3, #27
 8002aa6:	2218      	movs	r2, #24
 8002aa8:	189b      	adds	r3, r3, r2
 8002aaa:	19db      	adds	r3, r3, r7
 8002aac:	2204      	movs	r2, #4
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	e06f      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002ab2:	231b      	movs	r3, #27
 8002ab4:	2218      	movs	r2, #24
 8002ab6:	189b      	adds	r3, r3, r2
 8002ab8:	19db      	adds	r3, r3, r7
 8002aba:	2208      	movs	r2, #8
 8002abc:	701a      	strb	r2, [r3, #0]
 8002abe:	e068      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002ac0:	231b      	movs	r3, #27
 8002ac2:	2218      	movs	r2, #24
 8002ac4:	189b      	adds	r3, r3, r2
 8002ac6:	19db      	adds	r3, r3, r7
 8002ac8:	2210      	movs	r2, #16
 8002aca:	701a      	strb	r2, [r3, #0]
 8002acc:	e061      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a7c      	ldr	r2, [pc, #496]	; (8002cc4 <UART_SetConfig+0x35c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d106      	bne.n	8002ae6 <UART_SetConfig+0x17e>
 8002ad8:	231b      	movs	r3, #27
 8002ada:	2218      	movs	r2, #24
 8002adc:	189b      	adds	r3, r3, r2
 8002ade:	19db      	adds	r3, r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	701a      	strb	r2, [r3, #0]
 8002ae4:	e055      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a77      	ldr	r2, [pc, #476]	; (8002cc8 <UART_SetConfig+0x360>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d106      	bne.n	8002afe <UART_SetConfig+0x196>
 8002af0:	231b      	movs	r3, #27
 8002af2:	2218      	movs	r2, #24
 8002af4:	189b      	adds	r3, r3, r2
 8002af6:	19db      	adds	r3, r3, r7
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
 8002afc:	e049      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a6b      	ldr	r2, [pc, #428]	; (8002cb0 <UART_SetConfig+0x348>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d13e      	bne.n	8002b86 <UART_SetConfig+0x21e>
 8002b08:	4b6c      	ldr	r3, [pc, #432]	; (8002cbc <UART_SetConfig+0x354>)
 8002b0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b0c:	23c0      	movs	r3, #192	; 0xc0
 8002b0e:	011b      	lsls	r3, r3, #4
 8002b10:	4013      	ands	r3, r2
 8002b12:	22c0      	movs	r2, #192	; 0xc0
 8002b14:	0112      	lsls	r2, r2, #4
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d027      	beq.n	8002b6a <UART_SetConfig+0x202>
 8002b1a:	22c0      	movs	r2, #192	; 0xc0
 8002b1c:	0112      	lsls	r2, r2, #4
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d82a      	bhi.n	8002b78 <UART_SetConfig+0x210>
 8002b22:	2280      	movs	r2, #128	; 0x80
 8002b24:	0112      	lsls	r2, r2, #4
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d011      	beq.n	8002b4e <UART_SetConfig+0x1e6>
 8002b2a:	2280      	movs	r2, #128	; 0x80
 8002b2c:	0112      	lsls	r2, r2, #4
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d822      	bhi.n	8002b78 <UART_SetConfig+0x210>
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d004      	beq.n	8002b40 <UART_SetConfig+0x1d8>
 8002b36:	2280      	movs	r2, #128	; 0x80
 8002b38:	00d2      	lsls	r2, r2, #3
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00e      	beq.n	8002b5c <UART_SetConfig+0x1f4>
 8002b3e:	e01b      	b.n	8002b78 <UART_SetConfig+0x210>
 8002b40:	231b      	movs	r3, #27
 8002b42:	2218      	movs	r2, #24
 8002b44:	189b      	adds	r3, r3, r2
 8002b46:	19db      	adds	r3, r3, r7
 8002b48:	2200      	movs	r2, #0
 8002b4a:	701a      	strb	r2, [r3, #0]
 8002b4c:	e021      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002b4e:	231b      	movs	r3, #27
 8002b50:	2218      	movs	r2, #24
 8002b52:	189b      	adds	r3, r3, r2
 8002b54:	19db      	adds	r3, r3, r7
 8002b56:	2202      	movs	r2, #2
 8002b58:	701a      	strb	r2, [r3, #0]
 8002b5a:	e01a      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002b5c:	231b      	movs	r3, #27
 8002b5e:	2218      	movs	r2, #24
 8002b60:	189b      	adds	r3, r3, r2
 8002b62:	19db      	adds	r3, r3, r7
 8002b64:	2204      	movs	r2, #4
 8002b66:	701a      	strb	r2, [r3, #0]
 8002b68:	e013      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002b6a:	231b      	movs	r3, #27
 8002b6c:	2218      	movs	r2, #24
 8002b6e:	189b      	adds	r3, r3, r2
 8002b70:	19db      	adds	r3, r3, r7
 8002b72:	2208      	movs	r2, #8
 8002b74:	701a      	strb	r2, [r3, #0]
 8002b76:	e00c      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002b78:	231b      	movs	r3, #27
 8002b7a:	2218      	movs	r2, #24
 8002b7c:	189b      	adds	r3, r3, r2
 8002b7e:	19db      	adds	r3, r3, r7
 8002b80:	2210      	movs	r2, #16
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e005      	b.n	8002b92 <UART_SetConfig+0x22a>
 8002b86:	231b      	movs	r3, #27
 8002b88:	2218      	movs	r2, #24
 8002b8a:	189b      	adds	r3, r3, r2
 8002b8c:	19db      	adds	r3, r3, r7
 8002b8e:	2210      	movs	r2, #16
 8002b90:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002b92:	69fb      	ldr	r3, [r7, #28]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a46      	ldr	r2, [pc, #280]	; (8002cb0 <UART_SetConfig+0x348>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d000      	beq.n	8002b9e <UART_SetConfig+0x236>
 8002b9c:	e09a      	b.n	8002cd4 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002b9e:	231b      	movs	r3, #27
 8002ba0:	2218      	movs	r2, #24
 8002ba2:	189b      	adds	r3, r3, r2
 8002ba4:	19db      	adds	r3, r3, r7
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	2b08      	cmp	r3, #8
 8002baa:	d01d      	beq.n	8002be8 <UART_SetConfig+0x280>
 8002bac:	dc20      	bgt.n	8002bf0 <UART_SetConfig+0x288>
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d015      	beq.n	8002bde <UART_SetConfig+0x276>
 8002bb2:	dc1d      	bgt.n	8002bf0 <UART_SetConfig+0x288>
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d002      	beq.n	8002bbe <UART_SetConfig+0x256>
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d005      	beq.n	8002bc8 <UART_SetConfig+0x260>
 8002bbc:	e018      	b.n	8002bf0 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bbe:	f7ff fab5 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002bc2:	0003      	movs	r3, r0
 8002bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bc6:	e01c      	b.n	8002c02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bc8:	4b3c      	ldr	r3, [pc, #240]	; (8002cbc <UART_SetConfig+0x354>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2210      	movs	r2, #16
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d002      	beq.n	8002bd8 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bd2:	4b3e      	ldr	r3, [pc, #248]	; (8002ccc <UART_SetConfig+0x364>)
 8002bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bd6:	e014      	b.n	8002c02 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8002bd8:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <UART_SetConfig+0x368>)
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bdc:	e011      	b.n	8002c02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bde:	f7ff f9f7 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8002be2:	0003      	movs	r3, r0
 8002be4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002be6:	e00c      	b.n	8002c02 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be8:	2380      	movs	r3, #128	; 0x80
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bee:	e008      	b.n	8002c02 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002bf4:	231a      	movs	r3, #26
 8002bf6:	2218      	movs	r2, #24
 8002bf8:	189b      	adds	r3, r3, r2
 8002bfa:	19db      	adds	r3, r3, r7
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	701a      	strb	r2, [r3, #0]
        break;
 8002c00:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d100      	bne.n	8002c0a <UART_SetConfig+0x2a2>
 8002c08:	e134      	b.n	8002e74 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	0013      	movs	r3, r2
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	189b      	adds	r3, r3, r2
 8002c14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d305      	bcc.n	8002c26 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d906      	bls.n	8002c34 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8002c26:	231a      	movs	r3, #26
 8002c28:	2218      	movs	r2, #24
 8002c2a:	189b      	adds	r3, r3, r2
 8002c2c:	19db      	adds	r3, r3, r7
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
 8002c32:	e11f      	b.n	8002e74 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	6939      	ldr	r1, [r7, #16]
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	000b      	movs	r3, r1
 8002c42:	0e1b      	lsrs	r3, r3, #24
 8002c44:	0010      	movs	r0, r2
 8002c46:	0205      	lsls	r5, r0, #8
 8002c48:	431d      	orrs	r5, r3
 8002c4a:	000b      	movs	r3, r1
 8002c4c:	021c      	lsls	r4, r3, #8
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	085b      	lsrs	r3, r3, #1
 8002c54:	60bb      	str	r3, [r7, #8]
 8002c56:	2300      	movs	r3, #0
 8002c58:	60fb      	str	r3, [r7, #12]
 8002c5a:	68b8      	ldr	r0, [r7, #8]
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	1900      	adds	r0, r0, r4
 8002c60:	4169      	adcs	r1, r5
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	603b      	str	r3, [r7, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	607b      	str	r3, [r7, #4]
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f7fd fade 	bl	8000230 <__aeabi_uldivmod>
 8002c74:	0002      	movs	r2, r0
 8002c76:	000b      	movs	r3, r1
 8002c78:	0013      	movs	r3, r2
 8002c7a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c7e:	23c0      	movs	r3, #192	; 0xc0
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	429a      	cmp	r2, r3
 8002c84:	d309      	bcc.n	8002c9a <UART_SetConfig+0x332>
 8002c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	035b      	lsls	r3, r3, #13
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d204      	bcs.n	8002c9a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c96:	60da      	str	r2, [r3, #12]
 8002c98:	e0ec      	b.n	8002e74 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8002c9a:	231a      	movs	r3, #26
 8002c9c:	2218      	movs	r2, #24
 8002c9e:	189b      	adds	r3, r3, r2
 8002ca0:	19db      	adds	r3, r3, r7
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
 8002ca6:	e0e5      	b.n	8002e74 <UART_SetConfig+0x50c>
 8002ca8:	efff69f3 	.word	0xefff69f3
 8002cac:	ffffcfff 	.word	0xffffcfff
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	fffff4ff 	.word	0xfffff4ff
 8002cb8:	40013800 	.word	0x40013800
 8002cbc:	40021000 	.word	0x40021000
 8002cc0:	40004400 	.word	0x40004400
 8002cc4:	40004c00 	.word	0x40004c00
 8002cc8:	40005000 	.word	0x40005000
 8002ccc:	003d0900 	.word	0x003d0900
 8002cd0:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	69da      	ldr	r2, [r3, #28]
 8002cd8:	2380      	movs	r3, #128	; 0x80
 8002cda:	021b      	lsls	r3, r3, #8
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d000      	beq.n	8002ce2 <UART_SetConfig+0x37a>
 8002ce0:	e071      	b.n	8002dc6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8002ce2:	231b      	movs	r3, #27
 8002ce4:	2218      	movs	r2, #24
 8002ce6:	189b      	adds	r3, r3, r2
 8002ce8:	19db      	adds	r3, r3, r7
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b08      	cmp	r3, #8
 8002cee:	d822      	bhi.n	8002d36 <UART_SetConfig+0x3ce>
 8002cf0:	009a      	lsls	r2, r3, #2
 8002cf2:	4b68      	ldr	r3, [pc, #416]	; (8002e94 <UART_SetConfig+0x52c>)
 8002cf4:	18d3      	adds	r3, r2, r3
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cfa:	f7ff fa17 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002cfe:	0003      	movs	r3, r0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d02:	e021      	b.n	8002d48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d04:	f7ff fa28 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002d08:	0003      	movs	r3, r0
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d0c:	e01c      	b.n	8002d48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d0e:	4b62      	ldr	r3, [pc, #392]	; (8002e98 <UART_SetConfig+0x530>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2210      	movs	r2, #16
 8002d14:	4013      	ands	r3, r2
 8002d16:	d002      	beq.n	8002d1e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002d18:	4b60      	ldr	r3, [pc, #384]	; (8002e9c <UART_SetConfig+0x534>)
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002d1c:	e014      	b.n	8002d48 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8002d1e:	4b60      	ldr	r3, [pc, #384]	; (8002ea0 <UART_SetConfig+0x538>)
 8002d20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d22:	e011      	b.n	8002d48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d24:	f7ff f954 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d2c:	e00c      	b.n	8002d48 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d2e:	2380      	movs	r3, #128	; 0x80
 8002d30:	021b      	lsls	r3, r3, #8
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002d34:	e008      	b.n	8002d48 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8002d36:	2300      	movs	r3, #0
 8002d38:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002d3a:	231a      	movs	r3, #26
 8002d3c:	2218      	movs	r2, #24
 8002d3e:	189b      	adds	r3, r3, r2
 8002d40:	19db      	adds	r3, r3, r7
 8002d42:	2201      	movs	r2, #1
 8002d44:	701a      	strb	r2, [r3, #0]
        break;
 8002d46:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d100      	bne.n	8002d50 <UART_SetConfig+0x3e8>
 8002d4e:	e091      	b.n	8002e74 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	005a      	lsls	r2, r3, #1
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	085b      	lsrs	r3, r3, #1
 8002d5a:	18d2      	adds	r2, r2, r3
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	0019      	movs	r1, r3
 8002d62:	0010      	movs	r0, r2
 8002d64:	f7fd f9d8 	bl	8000118 <__udivsi3>
 8002d68:	0003      	movs	r3, r0
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	2b0f      	cmp	r3, #15
 8002d72:	d921      	bls.n	8002db8 <UART_SetConfig+0x450>
 8002d74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d76:	2380      	movs	r3, #128	; 0x80
 8002d78:	025b      	lsls	r3, r3, #9
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d21c      	bcs.n	8002db8 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	200e      	movs	r0, #14
 8002d84:	2418      	movs	r4, #24
 8002d86:	1903      	adds	r3, r0, r4
 8002d88:	19db      	adds	r3, r3, r7
 8002d8a:	210f      	movs	r1, #15
 8002d8c:	438a      	bics	r2, r1
 8002d8e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	2207      	movs	r2, #7
 8002d98:	4013      	ands	r3, r2
 8002d9a:	b299      	uxth	r1, r3
 8002d9c:	1903      	adds	r3, r0, r4
 8002d9e:	19db      	adds	r3, r3, r7
 8002da0:	1902      	adds	r2, r0, r4
 8002da2:	19d2      	adds	r2, r2, r7
 8002da4:	8812      	ldrh	r2, [r2, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1902      	adds	r2, r0, r4
 8002db0:	19d2      	adds	r2, r2, r7
 8002db2:	8812      	ldrh	r2, [r2, #0]
 8002db4:	60da      	str	r2, [r3, #12]
 8002db6:	e05d      	b.n	8002e74 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002db8:	231a      	movs	r3, #26
 8002dba:	2218      	movs	r2, #24
 8002dbc:	189b      	adds	r3, r3, r2
 8002dbe:	19db      	adds	r3, r3, r7
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	701a      	strb	r2, [r3, #0]
 8002dc4:	e056      	b.n	8002e74 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002dc6:	231b      	movs	r3, #27
 8002dc8:	2218      	movs	r2, #24
 8002dca:	189b      	adds	r3, r3, r2
 8002dcc:	19db      	adds	r3, r3, r7
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b08      	cmp	r3, #8
 8002dd2:	d822      	bhi.n	8002e1a <UART_SetConfig+0x4b2>
 8002dd4:	009a      	lsls	r2, r3, #2
 8002dd6:	4b33      	ldr	r3, [pc, #204]	; (8002ea4 <UART_SetConfig+0x53c>)
 8002dd8:	18d3      	adds	r3, r2, r3
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dde:	f7ff f9a5 	bl	800212c <HAL_RCC_GetPCLK1Freq>
 8002de2:	0003      	movs	r3, r0
 8002de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002de6:	e021      	b.n	8002e2c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002de8:	f7ff f9b6 	bl	8002158 <HAL_RCC_GetPCLK2Freq>
 8002dec:	0003      	movs	r3, r0
 8002dee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002df0:	e01c      	b.n	8002e2c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002df2:	4b29      	ldr	r3, [pc, #164]	; (8002e98 <UART_SetConfig+0x530>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2210      	movs	r2, #16
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d002      	beq.n	8002e02 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002dfc:	4b27      	ldr	r3, [pc, #156]	; (8002e9c <UART_SetConfig+0x534>)
 8002dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002e00:	e014      	b.n	8002e2c <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8002e02:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <UART_SetConfig+0x538>)
 8002e04:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e06:	e011      	b.n	8002e2c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e08:	f7ff f8e2 	bl	8001fd0 <HAL_RCC_GetSysClockFreq>
 8002e0c:	0003      	movs	r3, r0
 8002e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e10:	e00c      	b.n	8002e2c <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e12:	2380      	movs	r3, #128	; 0x80
 8002e14:	021b      	lsls	r3, r3, #8
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002e18:	e008      	b.n	8002e2c <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002e1e:	231a      	movs	r3, #26
 8002e20:	2218      	movs	r2, #24
 8002e22:	189b      	adds	r3, r3, r2
 8002e24:	19db      	adds	r3, r3, r7
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
        break;
 8002e2a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d020      	beq.n	8002e74 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	085a      	lsrs	r2, r3, #1
 8002e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3a:	18d2      	adds	r2, r2, r3
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	0019      	movs	r1, r3
 8002e42:	0010      	movs	r0, r2
 8002e44:	f7fd f968 	bl	8000118 <__udivsi3>
 8002e48:	0003      	movs	r3, r0
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e50:	2b0f      	cmp	r3, #15
 8002e52:	d909      	bls.n	8002e68 <UART_SetConfig+0x500>
 8002e54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	025b      	lsls	r3, r3, #9
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d204      	bcs.n	8002e68 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002e64:	60da      	str	r2, [r3, #12]
 8002e66:	e005      	b.n	8002e74 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e68:	231a      	movs	r3, #26
 8002e6a:	2218      	movs	r2, #24
 8002e6c:	189b      	adds	r3, r3, r2
 8002e6e:	19db      	adds	r3, r3, r7
 8002e70:	2201      	movs	r2, #1
 8002e72:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002e74:	69fb      	ldr	r3, [r7, #28]
 8002e76:	2200      	movs	r2, #0
 8002e78:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002e80:	231a      	movs	r3, #26
 8002e82:	2218      	movs	r2, #24
 8002e84:	189b      	adds	r3, r3, r2
 8002e86:	19db      	adds	r3, r3, r7
 8002e88:	781b      	ldrb	r3, [r3, #0]
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b00e      	add	sp, #56	; 0x38
 8002e90:	bdb0      	pop	{r4, r5, r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	08003358 	.word	0x08003358
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	003d0900 	.word	0x003d0900
 8002ea0:	00f42400 	.word	0x00f42400
 8002ea4:	0800337c 	.word	0x0800337c

08002ea8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	d00b      	beq.n	8002ed2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4a4a      	ldr	r2, [pc, #296]	; (8002fec <UART_AdvFeatureConfig+0x144>)
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	0019      	movs	r1, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	430a      	orrs	r2, r1
 8002ed0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed6:	2202      	movs	r2, #2
 8002ed8:	4013      	ands	r3, r2
 8002eda:	d00b      	beq.n	8002ef4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	4a43      	ldr	r2, [pc, #268]	; (8002ff0 <UART_AdvFeatureConfig+0x148>)
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	0019      	movs	r1, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2204      	movs	r2, #4
 8002efa:	4013      	ands	r3, r2
 8002efc:	d00b      	beq.n	8002f16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4a3b      	ldr	r2, [pc, #236]	; (8002ff4 <UART_AdvFeatureConfig+0x14c>)
 8002f06:	4013      	ands	r3, r2
 8002f08:	0019      	movs	r1, r3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1a:	2208      	movs	r2, #8
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	d00b      	beq.n	8002f38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	4a34      	ldr	r2, [pc, #208]	; (8002ff8 <UART_AdvFeatureConfig+0x150>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	0019      	movs	r1, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	430a      	orrs	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2210      	movs	r2, #16
 8002f3e:	4013      	ands	r3, r2
 8002f40:	d00b      	beq.n	8002f5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	4a2c      	ldr	r2, [pc, #176]	; (8002ffc <UART_AdvFeatureConfig+0x154>)
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	0019      	movs	r1, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5e:	2220      	movs	r2, #32
 8002f60:	4013      	ands	r3, r2
 8002f62:	d00b      	beq.n	8002f7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	4a25      	ldr	r2, [pc, #148]	; (8003000 <UART_AdvFeatureConfig+0x158>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	0019      	movs	r1, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	430a      	orrs	r2, r1
 8002f7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2240      	movs	r2, #64	; 0x40
 8002f82:	4013      	ands	r3, r2
 8002f84:	d01d      	beq.n	8002fc2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	4a1d      	ldr	r2, [pc, #116]	; (8003004 <UART_AdvFeatureConfig+0x15c>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	0019      	movs	r1, r3
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fa2:	2380      	movs	r3, #128	; 0x80
 8002fa4:	035b      	lsls	r3, r3, #13
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d10b      	bne.n	8002fc2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4a15      	ldr	r2, [pc, #84]	; (8003008 <UART_AdvFeatureConfig+0x160>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	4013      	ands	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	4a0e      	ldr	r2, [pc, #56]	; (800300c <UART_AdvFeatureConfig+0x164>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	605a      	str	r2, [r3, #4]
  }
}
 8002fe4:	46c0      	nop			; (mov r8, r8)
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	b002      	add	sp, #8
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	fffdffff 	.word	0xfffdffff
 8002ff0:	fffeffff 	.word	0xfffeffff
 8002ff4:	fffbffff 	.word	0xfffbffff
 8002ff8:	ffff7fff 	.word	0xffff7fff
 8002ffc:	ffffefff 	.word	0xffffefff
 8003000:	ffffdfff 	.word	0xffffdfff
 8003004:	ffefffff 	.word	0xffefffff
 8003008:	ff9fffff 	.word	0xff9fffff
 800300c:	fff7ffff 	.word	0xfff7ffff

08003010 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b086      	sub	sp, #24
 8003014:	af02      	add	r7, sp, #8
 8003016:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2280      	movs	r2, #128	; 0x80
 800301c:	2100      	movs	r1, #0
 800301e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003020:	f7fd feda 	bl	8000dd8 <HAL_GetTick>
 8003024:	0003      	movs	r3, r0
 8003026:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2208      	movs	r2, #8
 8003030:	4013      	ands	r3, r2
 8003032:	2b08      	cmp	r3, #8
 8003034:	d10c      	bne.n	8003050 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2280      	movs	r2, #128	; 0x80
 800303a:	0391      	lsls	r1, r2, #14
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4a17      	ldr	r2, [pc, #92]	; (800309c <UART_CheckIdleState+0x8c>)
 8003040:	9200      	str	r2, [sp, #0]
 8003042:	2200      	movs	r2, #0
 8003044:	f000 f82c 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d001      	beq.n	8003050 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e021      	b.n	8003094 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2204      	movs	r2, #4
 8003058:	4013      	ands	r3, r2
 800305a:	2b04      	cmp	r3, #4
 800305c:	d10c      	bne.n	8003078 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2280      	movs	r2, #128	; 0x80
 8003062:	03d1      	lsls	r1, r2, #15
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4a0d      	ldr	r2, [pc, #52]	; (800309c <UART_CheckIdleState+0x8c>)
 8003068:	9200      	str	r2, [sp, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	f000 f818 	bl	80030a0 <UART_WaitOnFlagUntilTimeout>
 8003070:	1e03      	subs	r3, r0, #0
 8003072:	d001      	beq.n	8003078 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e00d      	b.n	8003094 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2220      	movs	r2, #32
 8003082:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2274      	movs	r2, #116	; 0x74
 800308e:	2100      	movs	r1, #0
 8003090:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	0018      	movs	r0, r3
 8003096:	46bd      	mov	sp, r7
 8003098:	b004      	add	sp, #16
 800309a:	bd80      	pop	{r7, pc}
 800309c:	01ffffff 	.word	0x01ffffff

080030a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b094      	sub	sp, #80	; 0x50
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	603b      	str	r3, [r7, #0]
 80030ac:	1dfb      	adds	r3, r7, #7
 80030ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030b0:	e0a3      	b.n	80031fa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030b4:	3301      	adds	r3, #1
 80030b6:	d100      	bne.n	80030ba <UART_WaitOnFlagUntilTimeout+0x1a>
 80030b8:	e09f      	b.n	80031fa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fd fe8d 	bl	8000dd8 <HAL_GetTick>
 80030be:	0002      	movs	r2, r0
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80030ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d13d      	bne.n	800314c <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d0:	f3ef 8310 	mrs	r3, PRIMASK
 80030d4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80030d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030d8:	647b      	str	r3, [r7, #68]	; 0x44
 80030da:	2301      	movs	r3, #1
 80030dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e0:	f383 8810 	msr	PRIMASK, r3
}
 80030e4:	46c0      	nop			; (mov r8, r8)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	494c      	ldr	r1, [pc, #304]	; (8003224 <UART_WaitOnFlagUntilTimeout+0x184>)
 80030f2:	400a      	ands	r2, r1
 80030f4:	601a      	str	r2, [r3, #0]
 80030f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030f8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	f383 8810 	msr	PRIMASK, r3
}
 8003100:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003102:	f3ef 8310 	mrs	r3, PRIMASK
 8003106:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800310a:	643b      	str	r3, [r7, #64]	; 0x40
 800310c:	2301      	movs	r3, #1
 800310e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003112:	f383 8810 	msr	PRIMASK, r3
}
 8003116:	46c0      	nop			; (mov r8, r8)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689a      	ldr	r2, [r3, #8]
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	2101      	movs	r1, #1
 8003124:	438a      	bics	r2, r1
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800312a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800312c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312e:	f383 8810 	msr	PRIMASK, r3
}
 8003132:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2220      	movs	r2, #32
 8003138:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2220      	movs	r2, #32
 800313e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2274      	movs	r2, #116	; 0x74
 8003144:	2100      	movs	r1, #0
 8003146:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e067      	b.n	800321c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2204      	movs	r2, #4
 8003154:	4013      	ands	r3, r2
 8003156:	d050      	beq.n	80031fa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	69da      	ldr	r2, [r3, #28]
 800315e:	2380      	movs	r3, #128	; 0x80
 8003160:	011b      	lsls	r3, r3, #4
 8003162:	401a      	ands	r2, r3
 8003164:	2380      	movs	r3, #128	; 0x80
 8003166:	011b      	lsls	r3, r3, #4
 8003168:	429a      	cmp	r2, r3
 800316a:	d146      	bne.n	80031fa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2280      	movs	r2, #128	; 0x80
 8003172:	0112      	lsls	r2, r2, #4
 8003174:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003176:	f3ef 8310 	mrs	r3, PRIMASK
 800317a:	613b      	str	r3, [r7, #16]
  return(result);
 800317c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003180:	2301      	movs	r3, #1
 8003182:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	f383 8810 	msr	PRIMASK, r3
}
 800318a:	46c0      	nop			; (mov r8, r8)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	681a      	ldr	r2, [r3, #0]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4923      	ldr	r1, [pc, #140]	; (8003224 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003198:	400a      	ands	r2, r1
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800319e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	f383 8810 	msr	PRIMASK, r3
}
 80031a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031a8:	f3ef 8310 	mrs	r3, PRIMASK
 80031ac:	61fb      	str	r3, [r7, #28]
  return(result);
 80031ae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80031b2:	2301      	movs	r3, #1
 80031b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031b6:	6a3b      	ldr	r3, [r7, #32]
 80031b8:	f383 8810 	msr	PRIMASK, r3
}
 80031bc:	46c0      	nop			; (mov r8, r8)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2101      	movs	r1, #1
 80031ca:	438a      	bics	r2, r1
 80031cc:	609a      	str	r2, [r3, #8]
 80031ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d4:	f383 8810 	msr	PRIMASK, r3
}
 80031d8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2220      	movs	r2, #32
 80031de:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	2220      	movs	r2, #32
 80031e4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2280      	movs	r2, #128	; 0x80
 80031ea:	2120      	movs	r1, #32
 80031ec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2274      	movs	r2, #116	; 0x74
 80031f2:	2100      	movs	r1, #0
 80031f4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e010      	b.n	800321c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	69db      	ldr	r3, [r3, #28]
 8003200:	68ba      	ldr	r2, [r7, #8]
 8003202:	4013      	ands	r3, r2
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	425a      	negs	r2, r3
 800320a:	4153      	adcs	r3, r2
 800320c:	b2db      	uxtb	r3, r3
 800320e:	001a      	movs	r2, r3
 8003210:	1dfb      	adds	r3, r7, #7
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d100      	bne.n	800321a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003218:	e74b      	b.n	80030b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	0018      	movs	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	b014      	add	sp, #80	; 0x50
 8003222:	bd80      	pop	{r7, pc}
 8003224:	fffffe5f 	.word	0xfffffe5f

08003228 <__libc_init_array>:
 8003228:	b570      	push	{r4, r5, r6, lr}
 800322a:	2600      	movs	r6, #0
 800322c:	4d0c      	ldr	r5, [pc, #48]	; (8003260 <__libc_init_array+0x38>)
 800322e:	4c0d      	ldr	r4, [pc, #52]	; (8003264 <__libc_init_array+0x3c>)
 8003230:	1b64      	subs	r4, r4, r5
 8003232:	10a4      	asrs	r4, r4, #2
 8003234:	42a6      	cmp	r6, r4
 8003236:	d109      	bne.n	800324c <__libc_init_array+0x24>
 8003238:	2600      	movs	r6, #0
 800323a:	f000 f821 	bl	8003280 <_init>
 800323e:	4d0a      	ldr	r5, [pc, #40]	; (8003268 <__libc_init_array+0x40>)
 8003240:	4c0a      	ldr	r4, [pc, #40]	; (800326c <__libc_init_array+0x44>)
 8003242:	1b64      	subs	r4, r4, r5
 8003244:	10a4      	asrs	r4, r4, #2
 8003246:	42a6      	cmp	r6, r4
 8003248:	d105      	bne.n	8003256 <__libc_init_array+0x2e>
 800324a:	bd70      	pop	{r4, r5, r6, pc}
 800324c:	00b3      	lsls	r3, r6, #2
 800324e:	58eb      	ldr	r3, [r5, r3]
 8003250:	4798      	blx	r3
 8003252:	3601      	adds	r6, #1
 8003254:	e7ee      	b.n	8003234 <__libc_init_array+0xc>
 8003256:	00b3      	lsls	r3, r6, #2
 8003258:	58eb      	ldr	r3, [r5, r3]
 800325a:	4798      	blx	r3
 800325c:	3601      	adds	r6, #1
 800325e:	e7f2      	b.n	8003246 <__libc_init_array+0x1e>
 8003260:	080033a8 	.word	0x080033a8
 8003264:	080033a8 	.word	0x080033a8
 8003268:	080033a8 	.word	0x080033a8
 800326c:	080033ac 	.word	0x080033ac

08003270 <memset>:
 8003270:	0003      	movs	r3, r0
 8003272:	1882      	adds	r2, r0, r2
 8003274:	4293      	cmp	r3, r2
 8003276:	d100      	bne.n	800327a <memset+0xa>
 8003278:	4770      	bx	lr
 800327a:	7019      	strb	r1, [r3, #0]
 800327c:	3301      	adds	r3, #1
 800327e:	e7f9      	b.n	8003274 <memset+0x4>

08003280 <_init>:
 8003280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003282:	46c0      	nop			; (mov r8, r8)
 8003284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003286:	bc08      	pop	{r3}
 8003288:	469e      	mov	lr, r3
 800328a:	4770      	bx	lr

0800328c <_fini>:
 800328c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003292:	bc08      	pop	{r3}
 8003294:	469e      	mov	lr, r3
 8003296:	4770      	bx	lr
