
ex2_Iris_MCU_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046dc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  0800479c  0800479c  0001479c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ba0  08004ba0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004ba0  08004ba0  00014ba0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ba8  08004ba8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ba8  08004ba8  00014ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  08004c20  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08004c20  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9b4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002414  00000000  00000000  0002fa4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00031e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000be8  00000000  00000000  00032b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c0f  00000000  00000000  00033728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f3b  00000000  00000000  00047337  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000742fc  00000000  00000000  00058272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc56e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f4  00000000  00000000  000cc5c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004784 	.word	0x08004784

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004784 	.word	0x08004784

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8d8 	bl	80004b4 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8d3 	bl	80004b4 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzsi2>:
 8000478:	211c      	movs	r1, #28
 800047a:	2301      	movs	r3, #1
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0xe>
 8000482:	0c00      	lsrs	r0, r0, #16
 8000484:	3910      	subs	r1, #16
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	4298      	cmp	r0, r3
 800048a:	d301      	bcc.n	8000490 <__clzsi2+0x18>
 800048c:	0a00      	lsrs	r0, r0, #8
 800048e:	3908      	subs	r1, #8
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0x22>
 8000496:	0900      	lsrs	r0, r0, #4
 8000498:	3904      	subs	r1, #4
 800049a:	a202      	add	r2, pc, #8	; (adr r2, 80004a4 <__clzsi2+0x2c>)
 800049c:	5c10      	ldrb	r0, [r2, r0]
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	02020304 	.word	0x02020304
 80004a8:	01010101 	.word	0x01010101
	...

080004b4 <__clzdi2>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d103      	bne.n	80004c2 <__clzdi2+0xe>
 80004ba:	f7ff ffdd 	bl	8000478 <__clzsi2>
 80004be:	3020      	adds	r0, #32
 80004c0:	e002      	b.n	80004c8 <__clzdi2+0x14>
 80004c2:	0008      	movs	r0, r1
 80004c4:	f7ff ffd8 	bl	8000478 <__clzsi2>
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <DBG_PUT>:
#include <stdio.h>
#include <string.h>

extern UART_HandleTypeDef huart1;

static inline void DBG_PUT(char *str) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	0018      	movs	r0, r3
 80004d8:	f7ff fe16 	bl	8000108 <strlen>
 80004dc:	0003      	movs	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <DBG_PUT+0x28>)
 80004e4:	2364      	movs	r3, #100	; 0x64
 80004e6:	f002 ffa9 	bl	800343c <HAL_UART_Transmit>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200001d4 	.word	0x200001d4

080004f8 <i2c2_read8_8>:
void i2c2_write16_8(uint8_t addr, uint16_t register_pointer, uint16_t register_value){
	hi2c_write16_8(hi2c2, addr, register_pointer, register_value);
	return;
}

uint8_t i2c2_read8_8(uint8_t addr, uint8_t register_pointer){
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b097      	sub	sp, #92	; 0x5c
 80004fc:	af12      	add	r7, sp, #72	; 0x48
 80004fe:	0002      	movs	r2, r0
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	1c0a      	adds	r2, r1, #0
 8000508:	701a      	strb	r2, [r3, #0]
	uint8_t val = hi2c_read8_8(hi2c2, addr, register_pointer);
 800050a:	260f      	movs	r6, #15
 800050c:	19bd      	adds	r5, r7, r6
 800050e:	4c0e      	ldr	r4, [pc, #56]	; (8000548 <i2c2_read8_8+0x50>)
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	9310      	str	r3, [sp, #64]	; 0x40
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	930f      	str	r3, [sp, #60]	; 0x3c
 800051c:	466b      	mov	r3, sp
 800051e:	0018      	movs	r0, r3
 8000520:	0023      	movs	r3, r4
 8000522:	3310      	adds	r3, #16
 8000524:	223c      	movs	r2, #60	; 0x3c
 8000526:	0019      	movs	r1, r3
 8000528:	f003 fcba 	bl	8003ea0 <memcpy>
 800052c:	6820      	ldr	r0, [r4, #0]
 800052e:	6861      	ldr	r1, [r4, #4]
 8000530:	68a2      	ldr	r2, [r4, #8]
 8000532:	68e3      	ldr	r3, [r4, #12]
 8000534:	f000 f80a 	bl	800054c <hi2c_read8_8>
 8000538:	0003      	movs	r3, r0
 800053a:	702b      	strb	r3, [r5, #0]
	return val;
 800053c:	19bb      	adds	r3, r7, r6
 800053e:	781b      	ldrb	r3, [r3, #0]
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b005      	add	sp, #20
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	200000d8 	.word	0x200000d8

0800054c <hi2c_read8_8>:
        }
}

// UNTESTED BELOW
uint8_t hi2c_read8_8(I2C_HandleTypeDef hi2c, uint8_t addr, uint8_t register_pointer)
{
 800054c:	b084      	sub	sp, #16
 800054e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000550:	b097      	sub	sp, #92	; 0x5c
 8000552:	af04      	add	r7, sp, #16
 8000554:	2558      	movs	r5, #88	; 0x58
 8000556:	2608      	movs	r6, #8
 8000558:	19ac      	adds	r4, r5, r6
 800055a:	19e4      	adds	r4, r4, r7
 800055c:	6020      	str	r0, [r4, #0]
 800055e:	6061      	str	r1, [r4, #4]
 8000560:	60a2      	str	r2, [r4, #8]
 8000562:	60e3      	str	r3, [r4, #12]
    uint16_t return_value = 0;
 8000564:	2344      	movs	r3, #68	; 0x44
 8000566:	18fb      	adds	r3, r7, r3
 8000568:	2200      	movs	r2, #0
 800056a:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 800056c:	2047      	movs	r0, #71	; 0x47
 800056e:	183b      	adds	r3, r7, r0
 8000570:	2200      	movs	r2, #0
 8000572:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Read(&hi2c, addr << 1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 8000574:	234c      	movs	r3, #76	; 0x4c
 8000576:	195a      	adds	r2, r3, r5
 8000578:	19bb      	adds	r3, r7, r6
 800057a:	18d3      	adds	r3, r2, r3
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b29b      	uxth	r3, r3
 8000580:	18db      	adds	r3, r3, r3
 8000582:	b299      	uxth	r1, r3
 8000584:	2350      	movs	r3, #80	; 0x50
 8000586:	195a      	adds	r2, r3, r5
 8000588:	19bc      	adds	r4, r7, r6
 800058a:	1913      	adds	r3, r2, r4
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	b29a      	uxth	r2, r3
 8000590:	0006      	movs	r6, r0
 8000592:	183c      	adds	r4, r7, r0
 8000594:	2308      	movs	r3, #8
 8000596:	18eb      	adds	r3, r5, r3
 8000598:	19d8      	adds	r0, r3, r7
 800059a:	2364      	movs	r3, #100	; 0x64
 800059c:	9302      	str	r3, [sp, #8]
 800059e:	2301      	movs	r3, #1
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2344      	movs	r3, #68	; 0x44
 80005a4:	18fb      	adds	r3, r7, r3
 80005a6:	9300      	str	r3, [sp, #0]
 80005a8:	2301      	movs	r3, #1
 80005aa:	f001 f98b 	bl	80018c4 <HAL_I2C_Mem_Read>
 80005ae:	0003      	movs	r3, r0
 80005b0:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80005b2:	19bb      	adds	r3, r7, r6
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d015      	beq.n	80005e6 <hi2c_read8_8+0x9a>
            char buf[64];
            sprintf(buf, "I2C8_8 read from 0x%x register 0x%x failed\r\n", addr, register_pointer);
 80005ba:	234c      	movs	r3, #76	; 0x4c
 80005bc:	195b      	adds	r3, r3, r5
 80005be:	2208      	movs	r2, #8
 80005c0:	4694      	mov	ip, r2
 80005c2:	44bc      	add	ip, r7
 80005c4:	4463      	add	r3, ip
 80005c6:	781a      	ldrb	r2, [r3, #0]
 80005c8:	2350      	movs	r3, #80	; 0x50
 80005ca:	195b      	adds	r3, r3, r5
 80005cc:	2108      	movs	r1, #8
 80005ce:	468c      	mov	ip, r1
 80005d0:	44bc      	add	ip, r7
 80005d2:	4463      	add	r3, ip
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	4909      	ldr	r1, [pc, #36]	; (80005fc <hi2c_read8_8+0xb0>)
 80005d8:	1d38      	adds	r0, r7, #4
 80005da:	f003 fc73 	bl	8003ec4 <siprintf>
            DBG_PUT(buf);
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	0018      	movs	r0, r3
 80005e2:	f7ff ff73 	bl	80004cc <DBG_PUT>
        }
    return return_value;
 80005e6:	2344      	movs	r3, #68	; 0x44
 80005e8:	18fb      	adds	r3, r7, r3
 80005ea:	881b      	ldrh	r3, [r3, #0]
 80005ec:	b2db      	uxtb	r3, r3
}
 80005ee:	0018      	movs	r0, r3
 80005f0:	46bd      	mov	sp, r7
 80005f2:	b013      	add	sp, #76	; 0x4c
 80005f4:	bcf0      	pop	{r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	b004      	add	sp, #16
 80005fa:	4718      	bx	r3
 80005fc:	080047f4 	.word	0x080047f4

08000600 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	0018      	movs	r0, r3
 800060c:	f7ff fd7c 	bl	8000108 <strlen>
 8000610:	0003      	movs	r3, r0
 8000612:	b29a      	uxth	r2, r3
 8000614:	6879      	ldr	r1, [r7, #4]
 8000616:	4804      	ldr	r0, [pc, #16]	; (8000628 <DBG_PUT+0x28>)
 8000618:	2364      	movs	r3, #100	; 0x64
 800061a:	f002 ff0f 	bl	800343c <HAL_UART_Transmit>
}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	b002      	add	sp, #8
 8000624:	bd80      	pop	{r7, pc}
 8000626:	46c0      	nop			; (mov r8, r8)
 8000628:	200001d4 	.word	0x200001d4

0800062c <_toggleLED>:
	DBG_PUT("--------------------\r\n");

	HAL_Delay(1000);
}

void _toggleLED(void){
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(TEST_OUT1_GPIO_Port, TEST_OUT1_Pin);
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <_toggleLED+0x14>)
 8000632:	2101      	movs	r1, #1
 8000634:	0018      	movs	r0, r3
 8000636:	f001 f894 	bl	8001762 <HAL_GPIO_TogglePin>
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	50000400 	.word	0x50000400

08000644 <_testScanI2C>:
	}
}



void _testScanI2C(){
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b094      	sub	sp, #80	; 0x50
 8000648:	af00      	add	r7, sp, #0
	 HAL_StatusTypeDef result;
	 uint8_t i;
	 char buf[64];
	 int deviceFound = 0;
 800064a:	2300      	movs	r3, #0
 800064c:	64bb      	str	r3, [r7, #72]	; 0x48
	 for (i=1; i<128; i++){
 800064e:	234f      	movs	r3, #79	; 0x4f
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	2201      	movs	r2, #1
 8000654:	701a      	strb	r2, [r3, #0]
 8000656:	e029      	b.n	80006ac <_testScanI2C+0x68>
		 result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 2, 2);
 8000658:	234f      	movs	r3, #79	; 0x4f
 800065a:	18fb      	adds	r3, r7, r3
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	b29b      	uxth	r3, r3
 8000660:	18db      	adds	r3, r3, r3
 8000662:	b299      	uxth	r1, r3
 8000664:	2547      	movs	r5, #71	; 0x47
 8000666:	197c      	adds	r4, r7, r5
 8000668:	481d      	ldr	r0, [pc, #116]	; (80006e0 <_testScanI2C+0x9c>)
 800066a:	2302      	movs	r3, #2
 800066c:	2202      	movs	r2, #2
 800066e:	f001 fa5d 	bl	8001b2c <HAL_I2C_IsDeviceReady>
 8000672:	0003      	movs	r3, r0
 8000674:	7023      	strb	r3, [r4, #0]
		 if (result == HAL_OK){
 8000676:	197b      	adds	r3, r7, r5
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d110      	bne.n	80006a0 <_testScanI2C+0x5c>
			 if (deviceFound == 0){
 800067e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000680:	2b00      	cmp	r3, #0
 8000682:	d101      	bne.n	8000688 <_testScanI2C+0x44>
				 deviceFound = 1; 	// Janky but works for asserting that I2C bus is operational
 8000684:	2301      	movs	r3, #1
 8000686:	64bb      	str	r3, [r7, #72]	; 0x48
			 }
			 sprintf(buf,"I2C address found: 0x%X\r\n", (uint16_t)(i));
 8000688:	234f      	movs	r3, #79	; 0x4f
 800068a:	18fb      	adds	r3, r7, r3
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	4915      	ldr	r1, [pc, #84]	; (80006e4 <_testScanI2C+0xa0>)
 8000690:	1d3b      	adds	r3, r7, #4
 8000692:	0018      	movs	r0, r3
 8000694:	f003 fc16 	bl	8003ec4 <siprintf>
			 DBG_PUT(buf);
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	0018      	movs	r0, r3
 800069c:	f7ff ffb0 	bl	8000600 <DBG_PUT>
	 for (i=1; i<128; i++){
 80006a0:	214f      	movs	r1, #79	; 0x4f
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	781a      	ldrb	r2, [r3, #0]
 80006a6:	187b      	adds	r3, r7, r1
 80006a8:	3201      	adds	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
 80006ac:	234f      	movs	r3, #79	; 0x4f
 80006ae:	18fb      	adds	r3, r7, r3
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	dacf      	bge.n	8000658 <_testScanI2C+0x14>
		 	 }
	  	}
	 DBG_PUT("Scan Complete.\r\n");
 80006b8:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <_testScanI2C+0xa4>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f7ff ffa0 	bl	8000600 <DBG_PUT>
	 if (deviceFound == 1){
 80006c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d104      	bne.n	80006d0 <_testScanI2C+0x8c>
		 DBG_PUT("I2C TEST PASSED\r\n");
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <_testScanI2C+0xa8>)
 80006c8:	0018      	movs	r0, r3
 80006ca:	f7ff ff99 	bl	8000600 <DBG_PUT>
	 }
	 else{
		 DBG_PUT("I2C TEST FAILED\r\n");
	 }
}
 80006ce:	e003      	b.n	80006d8 <_testScanI2C+0x94>
		 DBG_PUT("I2C TEST FAILED\r\n");
 80006d0:	4b07      	ldr	r3, [pc, #28]	; (80006f0 <_testScanI2C+0xac>)
 80006d2:	0018      	movs	r0, r3
 80006d4:	f7ff ff94 	bl	8000600 <DBG_PUT>
}
 80006d8:	46c0      	nop			; (mov r8, r8)
 80006da:	46bd      	mov	sp, r7
 80006dc:	b014      	add	sp, #80	; 0x50
 80006de:	bdb0      	pop	{r4, r5, r7, pc}
 80006e0:	200000d8 	.word	0x200000d8
 80006e4:	08004988 	.word	0x08004988
 80006e8:	080049a4 	.word	0x080049a4
 80006ec:	080049b8 	.word	0x080049b8
 80006f0:	080049cc 	.word	0x080049cc

080006f4 <testTempSensor>:


void testTempSensor(void){
 80006f4:	b590      	push	{r4, r7, lr}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
	DBG_PUT("\n");
 80006fa:	4b1e      	ldr	r3, [pc, #120]	; (8000774 <testTempSensor+0x80>)
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ff7f 	bl	8000600 <DBG_PUT>
	uint16_t vis_temp = get_temp(0x4C);
 8000702:	1dbc      	adds	r4, r7, #6
 8000704:	204c      	movs	r0, #76	; 0x4c
 8000706:	f000 fc84 	bl	8001012 <get_temp>
 800070a:	0003      	movs	r3, r0
 800070c:	8023      	strh	r3, [r4, #0]
	uint16_t nir_temp = get_temp(0x4D);
 800070e:	1d3c      	adds	r4, r7, #4
 8000710:	204d      	movs	r0, #77	; 0x4d
 8000712:	f000 fc7e 	bl	8001012 <get_temp>
 8000716:	0003      	movs	r3, r0
 8000718:	8023      	strh	r3, [r4, #0]
	uint16_t nand_temp = get_temp(0x4E);
 800071a:	1cbc      	adds	r4, r7, #2
 800071c:	204e      	movs	r0, #78	; 0x4e
 800071e:	f000 fc78 	bl	8001012 <get_temp>
 8000722:	0003      	movs	r3, r0
 8000724:	8023      	strh	r3, [r4, #0]
	uint16_t gate_temp = get_temp(0x4F);
 8000726:	003c      	movs	r4, r7
 8000728:	204f      	movs	r0, #79	; 0x4f
 800072a:	f000 fc72 	bl	8001012 <get_temp>
 800072e:	0003      	movs	r3, r0
 8000730:	8023      	strh	r3, [r4, #0]
	printTemp(vis_temp, 0x4C);
 8000732:	1dbb      	adds	r3, r7, #6
 8000734:	881b      	ldrh	r3, [r3, #0]
 8000736:	214c      	movs	r1, #76	; 0x4c
 8000738:	0018      	movs	r0, r3
 800073a:	f000 f81d 	bl	8000778 <printTemp>
	printTemp(nir_temp, 0x4D);
 800073e:	1d3b      	adds	r3, r7, #4
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	214d      	movs	r1, #77	; 0x4d
 8000744:	0018      	movs	r0, r3
 8000746:	f000 f817 	bl	8000778 <printTemp>
	printTemp(nand_temp, 0x4E);
 800074a:	1cbb      	adds	r3, r7, #2
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	214e      	movs	r1, #78	; 0x4e
 8000750:	0018      	movs	r0, r3
 8000752:	f000 f811 	bl	8000778 <printTemp>
	printTemp(gate_temp, 0x4F);
 8000756:	003b      	movs	r3, r7
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	214f      	movs	r1, #79	; 0x4f
 800075c:	0018      	movs	r0, r3
 800075e:	f000 f80b 	bl	8000778 <printTemp>
	DBG_PUT("\n");
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <testTempSensor+0x80>)
 8000764:	0018      	movs	r0, r3
 8000766:	f7ff ff4b 	bl	8000600 <DBG_PUT>
	return;
 800076a:	46c0      	nop			; (mov r8, r8)

}
 800076c:	46bd      	mov	sp, r7
 800076e:	b003      	add	sp, #12
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	080049e0 	.word	0x080049e0

08000778 <printTemp>:

void printTemp(uint16_t temp, uint8_t sensor){
 8000778:	b590      	push	{r4, r7, lr}
 800077a:	b093      	sub	sp, #76	; 0x4c
 800077c:	af00      	add	r7, sp, #0
 800077e:	0002      	movs	r2, r0
 8000780:	1dbb      	adds	r3, r7, #6
 8000782:	801a      	strh	r2, [r3, #0]
 8000784:	1d7b      	adds	r3, r7, #5
 8000786:	1c0a      	adds	r2, r1, #0
 8000788:	701a      	strb	r2, [r3, #0]
	char buf[64];
	sprintf(buf,"Sensor 0x%x Temperature: 0x%x \n", sensor, temp );
 800078a:	1d7b      	adds	r3, r7, #5
 800078c:	781a      	ldrb	r2, [r3, #0]
 800078e:	1dbb      	adds	r3, r7, #6
 8000790:	881b      	ldrh	r3, [r3, #0]
 8000792:	4906      	ldr	r1, [pc, #24]	; (80007ac <printTemp+0x34>)
 8000794:	2408      	movs	r4, #8
 8000796:	1938      	adds	r0, r7, r4
 8000798:	f003 fb94 	bl	8003ec4 <siprintf>
	DBG_PUT(buf);
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff ff2e 	bl	8000600 <DBG_PUT>

}
 80007a4:	46c0      	nop			; (mov r8, r8)
 80007a6:	46bd      	mov	sp, r7
 80007a8:	b013      	add	sp, #76	; 0x4c
 80007aa:	bd90      	pop	{r4, r7, pc}
 80007ac:	080049e4 	.word	0x080049e4

080007b0 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	0018      	movs	r0, r3
 80007bc:	f7ff fca4 	bl	8000108 <strlen>
 80007c0:	0003      	movs	r3, r0
 80007c2:	b29a      	uxth	r2, r3
 80007c4:	6879      	ldr	r1, [r7, #4]
 80007c6:	4804      	ldr	r0, [pc, #16]	; (80007d8 <DBG_PUT+0x28>)
 80007c8:	2364      	movs	r3, #100	; 0x64
 80007ca:	f002 fe37 	bl	800343c <HAL_UART_Transmit>
}
 80007ce:	46c0      	nop			; (mov r8, r8)
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b002      	add	sp, #8
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	200001d4 	.word	0x200001d4

080007dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 80007e0:	f000 fc6a 	bl	80010b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007e4:	f000 f82a 	bl	800083c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007e8:	f000 f9b0 	bl	8000b4c <MX_GPIO_Init>
  MX_I2C1_Init();
 80007ec:	f000 f894 	bl	8000918 <MX_I2C1_Init>
  MX_I2C2_Init();
 80007f0:	f000 f8d2 	bl	8000998 <MX_I2C2_Init>
  MX_SPI1_Init();
 80007f4:	f000 f910 	bl	8000a18 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007f8:	f000 f940 	bl	8000a7c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80007fc:	f000 f976 	bl	8000aec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // init nand flash
//  NAND_SPI_Init(&hspi2);
  DBG_PUT("-----------------------------------\r\n");
 8000800:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <main+0x54>)
 8000802:	0018      	movs	r0, r3
 8000804:	f7ff ffd4 	bl	80007b0 <DBG_PUT>
  DBG_PUT("Iris Electronics Long Duration Test Software\r\nVersion 1.01.0; 2022-05-04\r\nSlave Side\r\n");
 8000808:	4b0a      	ldr	r3, [pc, #40]	; (8000834 <main+0x58>)
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff ffd0 	bl	80007b0 <DBG_PUT>
  DBG_PUT("-----------------------------------\r\n");
 8000810:	4b07      	ldr	r3, [pc, #28]	; (8000830 <main+0x54>)
 8000812:	0018      	movs	r0, r3
 8000814:	f7ff ffcc 	bl	80007b0 <DBG_PUT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  _toggleLED();
 8000818:	f7ff ff08 	bl	800062c <_toggleLED>
	  _testScanI2C();
 800081c:	f7ff ff12 	bl	8000644 <_testScanI2C>
	  testTempSensor();
 8000820:	f7ff ff68 	bl	80006f4 <testTempSensor>
	  HAL_Delay(2500);
 8000824:	4b04      	ldr	r3, [pc, #16]	; (8000838 <main+0x5c>)
 8000826:	0018      	movs	r0, r3
 8000828:	f000 fcb6 	bl	8001198 <HAL_Delay>
  {
 800082c:	e7f4      	b.n	8000818 <main+0x3c>
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	08004a04 	.word	0x08004a04
 8000834:	08004a2c 	.word	0x08004a2c
 8000838:	000009c4 	.word	0x000009c4

0800083c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b09b      	sub	sp, #108	; 0x6c
 8000840:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	2434      	movs	r4, #52	; 0x34
 8000844:	193b      	adds	r3, r7, r4
 8000846:	0018      	movs	r0, r3
 8000848:	2334      	movs	r3, #52	; 0x34
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f003 fb30 	bl	8003eb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000852:	2320      	movs	r3, #32
 8000854:	18fb      	adds	r3, r7, r3
 8000856:	0018      	movs	r0, r3
 8000858:	2314      	movs	r3, #20
 800085a:	001a      	movs	r2, r3
 800085c:	2100      	movs	r1, #0
 800085e:	f003 fb28 	bl	8003eb2 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000862:	003b      	movs	r3, r7
 8000864:	0018      	movs	r0, r3
 8000866:	2320      	movs	r3, #32
 8000868:	001a      	movs	r2, r3
 800086a:	2100      	movs	r1, #0
 800086c:	f003 fb21 	bl	8003eb2 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000870:	4b27      	ldr	r3, [pc, #156]	; (8000910 <SystemClock_Config+0xd4>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a27      	ldr	r2, [pc, #156]	; (8000914 <SystemClock_Config+0xd8>)
 8000876:	401a      	ands	r2, r3
 8000878:	4b25      	ldr	r3, [pc, #148]	; (8000910 <SystemClock_Config+0xd4>)
 800087a:	2180      	movs	r1, #128	; 0x80
 800087c:	0109      	lsls	r1, r1, #4
 800087e:	430a      	orrs	r2, r1
 8000880:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2210      	movs	r2, #16
 8000888:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2201      	movs	r2, #1
 800088e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	22a0      	movs	r2, #160	; 0xa0
 800089a:	0212      	lsls	r2, r2, #8
 800089c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800089e:	187b      	adds	r3, r7, r1
 80008a0:	2200      	movs	r2, #0
 80008a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008a4:	187b      	adds	r3, r7, r1
 80008a6:	0018      	movs	r0, r3
 80008a8:	f001 fce0 	bl	800226c <HAL_RCC_OscConfig>
 80008ac:	1e03      	subs	r3, r0, #0
 80008ae:	d001      	beq.n	80008b4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80008b0:	f000 f9ca 	bl	8000c48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b4:	2120      	movs	r1, #32
 80008b6:	187b      	adds	r3, r7, r1
 80008b8:	220f      	movs	r2, #15
 80008ba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80008bc:	187b      	adds	r3, r7, r1
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2200      	movs	r2, #0
 80008d2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2100      	movs	r1, #0
 80008d8:	0018      	movs	r0, r3
 80008da:	f002 f843 	bl	8002964 <HAL_RCC_ClockConfig>
 80008de:	1e03      	subs	r3, r0, #0
 80008e0:	d001      	beq.n	80008e6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80008e2:	f000 f9b1 	bl	8000c48 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80008e6:	003b      	movs	r3, r7
 80008e8:	2209      	movs	r2, #9
 80008ea:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80008ec:	003b      	movs	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008f2:	003b      	movs	r3, r7
 80008f4:	2200      	movs	r2, #0
 80008f6:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f8:	003b      	movs	r3, r7
 80008fa:	0018      	movs	r0, r3
 80008fc:	f002 fa54 	bl	8002da8 <HAL_RCCEx_PeriphCLKConfig>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000904:	f000 f9a0 	bl	8000c48 <Error_Handler>
  }
}
 8000908:	46c0      	nop			; (mov r8, r8)
 800090a:	46bd      	mov	sp, r7
 800090c:	b01b      	add	sp, #108	; 0x6c
 800090e:	bd90      	pop	{r4, r7, pc}
 8000910:	40007000 	.word	0x40007000
 8000914:	ffffe7ff 	.word	0xffffe7ff

08000918 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800091c:	4b1c      	ldr	r3, [pc, #112]	; (8000990 <MX_I2C1_Init+0x78>)
 800091e:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <MX_I2C1_Init+0x7c>)
 8000920:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <MX_I2C1_Init+0x78>)
 8000924:	22e1      	movs	r2, #225	; 0xe1
 8000926:	00d2      	lsls	r2, r2, #3
 8000928:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800092a:	4b19      	ldr	r3, [pc, #100]	; (8000990 <MX_I2C1_Init+0x78>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <MX_I2C1_Init+0x78>)
 8000932:	2201      	movs	r2, #1
 8000934:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <MX_I2C1_Init+0x78>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <MX_I2C1_Init+0x78>)
 800093e:	2200      	movs	r2, #0
 8000940:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <MX_I2C1_Init+0x78>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000948:	4b11      	ldr	r3, [pc, #68]	; (8000990 <MX_I2C1_Init+0x78>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800094e:	4b10      	ldr	r3, [pc, #64]	; (8000990 <MX_I2C1_Init+0x78>)
 8000950:	2200      	movs	r2, #0
 8000952:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000954:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <MX_I2C1_Init+0x78>)
 8000956:	0018      	movs	r0, r3
 8000958:	f000 ff1e 	bl	8001798 <HAL_I2C_Init>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000960:	f000 f972 	bl	8000c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000964:	4b0a      	ldr	r3, [pc, #40]	; (8000990 <MX_I2C1_Init+0x78>)
 8000966:	2100      	movs	r1, #0
 8000968:	0018      	movs	r0, r3
 800096a:	f001 fbe7 	bl	800213c <HAL_I2CEx_ConfigAnalogFilter>
 800096e:	1e03      	subs	r3, r0, #0
 8000970:	d001      	beq.n	8000976 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000972:	f000 f969 	bl	8000c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000976:	4b06      	ldr	r3, [pc, #24]	; (8000990 <MX_I2C1_Init+0x78>)
 8000978:	2100      	movs	r1, #0
 800097a:	0018      	movs	r0, r3
 800097c:	f001 fc2a 	bl	80021d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000980:	1e03      	subs	r3, r0, #0
 8000982:	d001      	beq.n	8000988 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000984:	f000 f960 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	2000008c 	.word	0x2000008c
 8000994:	40005400 	.word	0x40005400

08000998 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800099c:	4b1c      	ldr	r3, [pc, #112]	; (8000a10 <MX_I2C2_Init+0x78>)
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <MX_I2C2_Init+0x7c>)
 80009a0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 80009a2:	4b1b      	ldr	r3, [pc, #108]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009a4:	22e1      	movs	r2, #225	; 0xe1
 80009a6:	00d2      	lsls	r2, r2, #3
 80009a8:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 80009aa:	4b19      	ldr	r3, [pc, #100]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b6:	4b16      	ldr	r3, [pc, #88]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80009bc:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009be:	2200      	movs	r2, #0
 80009c0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009c2:	4b13      	ldr	r3, [pc, #76]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c8:	4b11      	ldr	r3, [pc, #68]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ce:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80009d4:	4b0e      	ldr	r3, [pc, #56]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009d6:	0018      	movs	r0, r3
 80009d8:	f000 fede 	bl	8001798 <HAL_I2C_Init>
 80009dc:	1e03      	subs	r3, r0, #0
 80009de:	d001      	beq.n	80009e4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80009e0:	f000 f932 	bl	8000c48 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e4:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009e6:	2100      	movs	r1, #0
 80009e8:	0018      	movs	r0, r3
 80009ea:	f001 fba7 	bl	800213c <HAL_I2CEx_ConfigAnalogFilter>
 80009ee:	1e03      	subs	r3, r0, #0
 80009f0:	d001      	beq.n	80009f6 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80009f2:	f000 f929 	bl	8000c48 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80009f6:	4b06      	ldr	r3, [pc, #24]	; (8000a10 <MX_I2C2_Init+0x78>)
 80009f8:	2100      	movs	r1, #0
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 fbea 	bl	80021d4 <HAL_I2CEx_ConfigDigitalFilter>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000a04:	f000 f920 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	200000d8 	.word	0x200000d8
 8000a14:	40005800 	.word	0x40005800

08000a18 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a1c:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a1e:	4a16      	ldr	r2, [pc, #88]	; (8000a78 <MX_SPI1_Init+0x60>)
 8000a20:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000a22:	4b14      	ldr	r3, [pc, #80]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a28:	4b12      	ldr	r3, [pc, #72]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a2e:	4b11      	ldr	r3, [pc, #68]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a34:	4b0f      	ldr	r3, [pc, #60]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a3a:	4b0e      	ldr	r3, [pc, #56]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a46:	4b0b      	ldr	r3, [pc, #44]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4c:	4b09      	ldr	r3, [pc, #36]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a52:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a5a:	2207      	movs	r2, #7
 8000a5c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a5e:	4b05      	ldr	r3, [pc, #20]	; (8000a74 <MX_SPI1_Init+0x5c>)
 8000a60:	0018      	movs	r0, r3
 8000a62:	f002 fae7 	bl	8003034 <HAL_SPI_Init>
 8000a66:	1e03      	subs	r3, r0, #0
 8000a68:	d001      	beq.n	8000a6e <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000a6a:	f000 f8ed 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a6e:	46c0      	nop			; (mov r8, r8)
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	20000124 	.word	0x20000124
 8000a78:	40013000 	.word	0x40013000

08000a7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a80:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000a82:	4a19      	ldr	r2, [pc, #100]	; (8000ae8 <MX_SPI2_Init+0x6c>)
 8000a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a86:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000a88:	2282      	movs	r2, #130	; 0x82
 8000a8a:	0052      	lsls	r2, r2, #1
 8000a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a94:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a9a:	4b12      	ldr	r3, [pc, #72]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aa0:	4b10      	ldr	r3, [pc, #64]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	0092      	lsls	r2, r2, #2
 8000aac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000aae:	4b0d      	ldr	r3, [pc, #52]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ab4:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000ac8:	2207      	movs	r2, #7
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000acc:	4b05      	ldr	r3, [pc, #20]	; (8000ae4 <MX_SPI2_Init+0x68>)
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f002 fab0 	bl	8003034 <HAL_SPI_Init>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ad8:	f000 f8b6 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	2000017c 	.word	0x2000017c
 8000ae8:	40003800 	.word	0x40003800

08000aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_USART1_UART_Init+0x5c>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af8:	22e1      	movs	r2, #225	; 0xe1
 8000afa:	0252      	lsls	r2, r2, #9
 8000afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2e:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b30:	0018      	movs	r0, r3
 8000b32:	f002 fc2f 	bl	8003394 <HAL_UART_Init>
 8000b36:	1e03      	subs	r3, r0, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 f885 	bl	8000c48 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	200001d4 	.word	0x200001d4
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b4c:	b590      	push	{r4, r7, lr}
 8000b4e:	b089      	sub	sp, #36	; 0x24
 8000b50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b52:	240c      	movs	r4, #12
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	0018      	movs	r0, r3
 8000b58:	2314      	movs	r3, #20
 8000b5a:	001a      	movs	r2, r3
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	f003 f9a8 	bl	8003eb2 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b62:	4b35      	ldr	r3, [pc, #212]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b66:	4b34      	ldr	r3, [pc, #208]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000b68:	2180      	movs	r1, #128	; 0x80
 8000b6a:	430a      	orrs	r2, r1
 8000b6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b6e:	4b32      	ldr	r3, [pc, #200]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b72:	2280      	movs	r2, #128	; 0x80
 8000b74:	4013      	ands	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
 8000b78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b7a:	4b2f      	ldr	r3, [pc, #188]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000b7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	430a      	orrs	r2, r1
 8000b84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b86:	4b2c      	ldr	r3, [pc, #176]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	607b      	str	r3, [r7, #4]
 8000b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	4b29      	ldr	r3, [pc, #164]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b96:	4b28      	ldr	r3, [pc, #160]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000b98:	2102      	movs	r1, #2
 8000b9a:	430a      	orrs	r2, r1
 8000b9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9e:	4b26      	ldr	r3, [pc, #152]	; (8000c38 <MX_GPIO_Init+0xec>)
 8000ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba2:	2202      	movs	r2, #2
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	603b      	str	r3, [r7, #0]
 8000ba8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8000baa:	4924      	ldr	r1, [pc, #144]	; (8000c3c <MX_GPIO_Init+0xf0>)
 8000bac:	23a0      	movs	r3, #160	; 0xa0
 8000bae:	05db      	lsls	r3, r3, #23
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	f000 fdb8 	bl	8001728 <HAL_GPIO_WritePin>
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_OUT1_Pin|NAND_CS1_Pin, GPIO_PIN_RESET);
 8000bb8:	4921      	ldr	r1, [pc, #132]	; (8000c40 <MX_GPIO_Init+0xf4>)
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_GPIO_Init+0xf8>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	0018      	movs	r0, r3
 8000bc0:	f000 fdb2 	bl	8001728 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_CS1_Pin USART2_CS2_Pin USART2_MOSI_Pin USART2_CLK_Pin
                           WP__Pin CAM_EN_Pin NAND_CS2_Pin */
  GPIO_InitStruct.Pin = USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8000bc4:	193b      	adds	r3, r7, r4
 8000bc6:	4a1d      	ldr	r2, [pc, #116]	; (8000c3c <MX_GPIO_Init+0xf0>)
 8000bc8:	601a      	str	r2, [r3, #0]
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	193b      	adds	r3, r7, r4
 8000bcc:	2201      	movs	r2, #1
 8000bce:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	193b      	adds	r3, r7, r4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	193b      	adds	r3, r7, r4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bdc:	193a      	adds	r2, r7, r4
 8000bde:	23a0      	movs	r3, #160	; 0xa0
 8000be0:	05db      	lsls	r3, r3, #23
 8000be2:	0011      	movs	r1, r2
 8000be4:	0018      	movs	r0, r3
 8000be6:	f000 fc21 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_MISO_Pin */
  GPIO_InitStruct.Pin = USART2_MISO_Pin;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2208      	movs	r2, #8
 8000bee:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USART2_MISO_GPIO_Port, &GPIO_InitStruct);
 8000bfc:	193a      	adds	r2, r7, r4
 8000bfe:	23a0      	movs	r3, #160	; 0xa0
 8000c00:	05db      	lsls	r3, r3, #23
 8000c02:	0011      	movs	r1, r2
 8000c04:	0018      	movs	r0, r3
 8000c06:	f000 fc11 	bl	800142c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_OUT1_Pin NAND_CS1_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin|NAND_CS1_Pin;
 8000c0a:	0021      	movs	r1, r4
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	4a0c      	ldr	r2, [pc, #48]	; (8000c40 <MX_GPIO_Init+0xf4>)
 8000c10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2201      	movs	r2, #1
 8000c16:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	187b      	adds	r3, r7, r1
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c24:	187b      	adds	r3, r7, r1
 8000c26:	4a07      	ldr	r2, [pc, #28]	; (8000c44 <MX_GPIO_Init+0xf8>)
 8000c28:	0019      	movs	r1, r3
 8000c2a:	0010      	movs	r0, r2
 8000c2c:	f000 fbfe 	bl	800142c <HAL_GPIO_Init>

}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	b009      	add	sp, #36	; 0x24
 8000c36:	bd90      	pop	{r4, r7, pc}
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	00001917 	.word	0x00001917
 8000c40:	00001001 	.word	0x00001001
 8000c44:	50000400 	.word	0x50000400

08000c48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c4c:	b672      	cpsid	i
}
 8000c4e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <Error_Handler+0x8>
	...

08000c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <HAL_MspInit+0x24>)
 8000c5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_MspInit+0x24>)
 8000c5e:	2101      	movs	r1, #1
 8000c60:	430a      	orrs	r2, r1
 8000c62:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c64:	4b04      	ldr	r3, [pc, #16]	; (8000c78 <HAL_MspInit+0x24>)
 8000c66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c68:	4b03      	ldr	r3, [pc, #12]	; (8000c78 <HAL_MspInit+0x24>)
 8000c6a:	2180      	movs	r1, #128	; 0x80
 8000c6c:	0549      	lsls	r1, r1, #21
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40021000 	.word	0x40021000

08000c7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c7c:	b590      	push	{r4, r7, lr}
 8000c7e:	b08b      	sub	sp, #44	; 0x2c
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c84:	2414      	movs	r4, #20
 8000c86:	193b      	adds	r3, r7, r4
 8000c88:	0018      	movs	r0, r3
 8000c8a:	2314      	movs	r3, #20
 8000c8c:	001a      	movs	r2, r3
 8000c8e:	2100      	movs	r1, #0
 8000c90:	f003 f90f 	bl	8003eb2 <memset>
  if(hi2c->Instance==I2C1)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a3b      	ldr	r2, [pc, #236]	; (8000d88 <HAL_I2C_MspInit+0x10c>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d129      	bne.n	8000cf2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9e:	4b3b      	ldr	r3, [pc, #236]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000ca0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ca2:	4b3a      	ldr	r3, [pc, #232]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000ca4:	2102      	movs	r1, #2
 8000ca6:	430a      	orrs	r2, r1
 8000ca8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000caa:	4b38      	ldr	r3, [pc, #224]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cae:	2202      	movs	r2, #2
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
 8000cb4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cb6:	0021      	movs	r1, r4
 8000cb8:	187b      	adds	r3, r7, r1
 8000cba:	22c0      	movs	r2, #192	; 0xc0
 8000cbc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cbe:	187b      	adds	r3, r7, r1
 8000cc0:	2212      	movs	r2, #18
 8000cc2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	187b      	adds	r3, r7, r1
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2203      	movs	r2, #3
 8000cce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000cd0:	187b      	adds	r3, r7, r1
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cd6:	187b      	adds	r3, r7, r1
 8000cd8:	4a2d      	ldr	r2, [pc, #180]	; (8000d90 <HAL_I2C_MspInit+0x114>)
 8000cda:	0019      	movs	r1, r3
 8000cdc:	0010      	movs	r0, r2
 8000cde:	f000 fba5 	bl	800142c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ce2:	4b2a      	ldr	r3, [pc, #168]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000ce4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000ce6:	4b29      	ldr	r3, [pc, #164]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000ce8:	2180      	movs	r1, #128	; 0x80
 8000cea:	0389      	lsls	r1, r1, #14
 8000cec:	430a      	orrs	r2, r1
 8000cee:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000cf0:	e046      	b.n	8000d80 <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <HAL_I2C_MspInit+0x118>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d141      	bne.n	8000d80 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfc:	4b23      	ldr	r3, [pc, #140]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d00:	4b22      	ldr	r3, [pc, #136]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000d02:	2102      	movs	r1, #2
 8000d04:	430a      	orrs	r2, r1
 8000d06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d08:	4b20      	ldr	r3, [pc, #128]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0c:	2202      	movs	r2, #2
 8000d0e:	4013      	ands	r3, r2
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d14:	2114      	movs	r1, #20
 8000d16:	187b      	adds	r3, r7, r1
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	0112      	lsls	r2, r2, #4
 8000d1c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	000c      	movs	r4, r1
 8000d20:	193b      	adds	r3, r7, r4
 8000d22:	2212      	movs	r2, #18
 8000d24:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d26:	193b      	adds	r3, r7, r4
 8000d28:	2200      	movs	r2, #0
 8000d2a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	193b      	adds	r3, r7, r4
 8000d2e:	2203      	movs	r2, #3
 8000d30:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000d32:	193b      	adds	r3, r7, r4
 8000d34:	2206      	movs	r2, #6
 8000d36:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d38:	193b      	adds	r3, r7, r4
 8000d3a:	4a15      	ldr	r2, [pc, #84]	; (8000d90 <HAL_I2C_MspInit+0x114>)
 8000d3c:	0019      	movs	r1, r3
 8000d3e:	0010      	movs	r0, r2
 8000d40:	f000 fb74 	bl	800142c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d44:	0021      	movs	r1, r4
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	0192      	lsls	r2, r2, #6
 8000d4c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	2212      	movs	r2, #18
 8000d52:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8000d60:	187b      	adds	r3, r7, r1
 8000d62:	2205      	movs	r2, #5
 8000d64:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	4a09      	ldr	r2, [pc, #36]	; (8000d90 <HAL_I2C_MspInit+0x114>)
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	0010      	movs	r0, r2
 8000d6e:	f000 fb5d 	bl	800142c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d72:	4b06      	ldr	r3, [pc, #24]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000d74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_I2C_MspInit+0x110>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	03c9      	lsls	r1, r1, #15
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d80:	46c0      	nop			; (mov r8, r8)
 8000d82:	46bd      	mov	sp, r7
 8000d84:	b00b      	add	sp, #44	; 0x2c
 8000d86:	bd90      	pop	{r4, r7, pc}
 8000d88:	40005400 	.word	0x40005400
 8000d8c:	40021000 	.word	0x40021000
 8000d90:	50000400 	.word	0x50000400
 8000d94:	40005800 	.word	0x40005800

08000d98 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d98:	b590      	push	{r4, r7, lr}
 8000d9a:	b08b      	sub	sp, #44	; 0x2c
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da0:	2414      	movs	r4, #20
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	0018      	movs	r0, r3
 8000da6:	2314      	movs	r3, #20
 8000da8:	001a      	movs	r2, r3
 8000daa:	2100      	movs	r1, #0
 8000dac:	f003 f881 	bl	8003eb2 <memset>
  if(hspi->Instance==SPI1)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4a40      	ldr	r2, [pc, #256]	; (8000eb8 <HAL_SPI_MspInit+0x120>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d132      	bne.n	8000e20 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dba:	4b40      	ldr	r3, [pc, #256]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dbe:	4b3f      	ldr	r3, [pc, #252]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000dc0:	2180      	movs	r1, #128	; 0x80
 8000dc2:	0149      	lsls	r1, r1, #5
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b3c      	ldr	r3, [pc, #240]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dcc:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000dce:	2101      	movs	r1, #1
 8000dd0:	430a      	orrs	r2, r1
 8000dd2:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dd4:	4b39      	ldr	r3, [pc, #228]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	2201      	movs	r2, #1
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8000de0:	0021      	movs	r1, r4
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	4a36      	ldr	r2, [pc, #216]	; (8000ec0 <HAL_SPI_MspInit+0x128>)
 8000de6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2202      	movs	r2, #2
 8000dec:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df4:	187b      	adds	r3, r7, r1
 8000df6:	2203      	movs	r2, #3
 8000df8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	187a      	adds	r2, r7, r1
 8000e02:	23a0      	movs	r3, #160	; 0xa0
 8000e04:	05db      	lsls	r3, r3, #23
 8000e06:	0011      	movs	r1, r2
 8000e08:	0018      	movs	r0, r3
 8000e0a:	f000 fb0f 	bl	800142c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000e0e:	2200      	movs	r2, #0
 8000e10:	2100      	movs	r1, #0
 8000e12:	2019      	movs	r0, #25
 8000e14:	f000 fa90 	bl	8001338 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000e18:	2019      	movs	r0, #25
 8000e1a:	f000 faa2 	bl	8001362 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e1e:	e046      	b.n	8000eae <HAL_SPI_MspInit+0x116>
  else if(hspi->Instance==SPI2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <HAL_SPI_MspInit+0x12c>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d141      	bne.n	8000eae <HAL_SPI_MspInit+0x116>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e2a:	4b24      	ldr	r3, [pc, #144]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000e30:	2180      	movs	r1, #128	; 0x80
 8000e32:	01c9      	lsls	r1, r1, #7
 8000e34:	430a      	orrs	r2, r1
 8000e36:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e38:	4b20      	ldr	r3, [pc, #128]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e3c:	4b1f      	ldr	r3, [pc, #124]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000e3e:	2102      	movs	r1, #2
 8000e40:	430a      	orrs	r2, r1
 8000e42:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e44:	4b1d      	ldr	r3, [pc, #116]	; (8000ebc <HAL_SPI_MspInit+0x124>)
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	2202      	movs	r2, #2
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	60fb      	str	r3, [r7, #12]
 8000e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e50:	2114      	movs	r1, #20
 8000e52:	187b      	adds	r3, r7, r1
 8000e54:	2280      	movs	r2, #128	; 0x80
 8000e56:	00d2      	lsls	r2, r2, #3
 8000e58:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	000c      	movs	r4, r1
 8000e5c:	193b      	adds	r3, r7, r4
 8000e5e:	2202      	movs	r2, #2
 8000e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	193b      	adds	r3, r7, r4
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e68:	193b      	adds	r3, r7, r4
 8000e6a:	2203      	movs	r2, #3
 8000e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2205      	movs	r2, #5
 8000e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	4a14      	ldr	r2, [pc, #80]	; (8000ec8 <HAL_SPI_MspInit+0x130>)
 8000e78:	0019      	movs	r1, r3
 8000e7a:	0010      	movs	r0, r2
 8000e7c:	f000 fad6 	bl	800142c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000e80:	0021      	movs	r1, r4
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	22c0      	movs	r2, #192	; 0xc0
 8000e86:	0212      	lsls	r2, r2, #8
 8000e88:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	187b      	adds	r3, r7, r1
 8000e8c:	2202      	movs	r2, #2
 8000e8e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e90:	187b      	adds	r3, r7, r1
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e96:	187b      	adds	r3, r7, r1
 8000e98:	2203      	movs	r2, #3
 8000e9a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000e9c:	187b      	adds	r3, r7, r1
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea2:	187b      	adds	r3, r7, r1
 8000ea4:	4a08      	ldr	r2, [pc, #32]	; (8000ec8 <HAL_SPI_MspInit+0x130>)
 8000ea6:	0019      	movs	r1, r3
 8000ea8:	0010      	movs	r0, r2
 8000eaa:	f000 fabf 	bl	800142c <HAL_GPIO_Init>
}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b00b      	add	sp, #44	; 0x2c
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40013000 	.word	0x40013000
 8000ebc:	40021000 	.word	0x40021000
 8000ec0:	000080e0 	.word	0x000080e0
 8000ec4:	40003800 	.word	0x40003800
 8000ec8:	50000400 	.word	0x50000400

08000ecc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b089      	sub	sp, #36	; 0x24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed4:	240c      	movs	r4, #12
 8000ed6:	193b      	adds	r3, r7, r4
 8000ed8:	0018      	movs	r0, r3
 8000eda:	2314      	movs	r3, #20
 8000edc:	001a      	movs	r2, r3
 8000ede:	2100      	movs	r1, #0
 8000ee0:	f002 ffe7 	bl	8003eb2 <memset>
  if(huart->Instance==USART1)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a18      	ldr	r2, [pc, #96]	; (8000f4c <HAL_UART_MspInit+0x80>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d12a      	bne.n	8000f44 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eee:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <HAL_UART_MspInit+0x84>)
 8000ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <HAL_UART_MspInit+0x84>)
 8000ef4:	2180      	movs	r1, #128	; 0x80
 8000ef6:	01c9      	lsls	r1, r1, #7
 8000ef8:	430a      	orrs	r2, r1
 8000efa:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efc:	4b14      	ldr	r3, [pc, #80]	; (8000f50 <HAL_UART_MspInit+0x84>)
 8000efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <HAL_UART_MspInit+0x84>)
 8000f02:	2101      	movs	r1, #1
 8000f04:	430a      	orrs	r2, r1
 8000f06:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f08:	4b11      	ldr	r3, [pc, #68]	; (8000f50 <HAL_UART_MspInit+0x84>)
 8000f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4013      	ands	r3, r2
 8000f10:	60bb      	str	r3, [r7, #8]
 8000f12:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f14:	193b      	adds	r3, r7, r4
 8000f16:	22c0      	movs	r2, #192	; 0xc0
 8000f18:	00d2      	lsls	r2, r2, #3
 8000f1a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	0021      	movs	r1, r4
 8000f1e:	187b      	adds	r3, r7, r1
 8000f20:	2202      	movs	r2, #2
 8000f22:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	2200      	movs	r2, #0
 8000f28:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2203      	movs	r2, #3
 8000f2e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2204      	movs	r2, #4
 8000f34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	187a      	adds	r2, r7, r1
 8000f38:	23a0      	movs	r3, #160	; 0xa0
 8000f3a:	05db      	lsls	r3, r3, #23
 8000f3c:	0011      	movs	r1, r2
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f000 fa74 	bl	800142c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f44:	46c0      	nop			; (mov r8, r8)
 8000f46:	46bd      	mov	sp, r7
 8000f48:	b009      	add	sp, #36	; 0x24
 8000f4a:	bd90      	pop	{r4, r7, pc}
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40021000 	.word	0x40021000

08000f54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f58:	e7fe      	b.n	8000f58 <NMI_Handler+0x4>

08000f5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f5e:	e7fe      	b.n	8000f5e <HardFault_Handler+0x4>

08000f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f64:	46c0      	nop			; (mov r8, r8)
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f6a:	b580      	push	{r7, lr}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f6e:	46c0      	nop			; (mov r8, r8)
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f78:	f000 f8f2 	bl	8001160 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7c:	46c0      	nop			; (mov r8, r8)
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
	...

08000f84 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <SPI1_IRQHandler+0x14>)
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f002 f8e6 	bl	800315c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			; (mov r8, r8)
 8000f98:	20000124 	.word	0x20000124

08000f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b086      	sub	sp, #24
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fa4:	4a14      	ldr	r2, [pc, #80]	; (8000ff8 <_sbrk+0x5c>)
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <_sbrk+0x60>)
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fb0:	4b13      	ldr	r3, [pc, #76]	; (8001000 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d102      	bne.n	8000fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fb8:	4b11      	ldr	r3, [pc, #68]	; (8001000 <_sbrk+0x64>)
 8000fba:	4a12      	ldr	r2, [pc, #72]	; (8001004 <_sbrk+0x68>)
 8000fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fbe:	4b10      	ldr	r3, [pc, #64]	; (8001000 <_sbrk+0x64>)
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	18d3      	adds	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d207      	bcs.n	8000fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fcc:	f002 ff3e 	bl	8003e4c <__errno>
 8000fd0:	0003      	movs	r3, r0
 8000fd2:	220c      	movs	r2, #12
 8000fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	425b      	negs	r3, r3
 8000fda:	e009      	b.n	8000ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <_sbrk+0x64>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <_sbrk+0x64>)
 8000fe4:	681a      	ldr	r2, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	18d2      	adds	r2, r2, r3
 8000fea:	4b05      	ldr	r3, [pc, #20]	; (8001000 <_sbrk+0x64>)
 8000fec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000fee:	68fb      	ldr	r3, [r7, #12]
}
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	b006      	add	sp, #24
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20005000 	.word	0x20005000
 8000ffc:	00000400 	.word	0x00000400
 8001000:	20000258 	.word	0x20000258
 8001004:	20000270 	.word	0x20000270

08001008 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <get_temp>:
 */
#include "tmp421.h"
#include "debug.h"

// add reset function to the stuff n things
uint16_t get_temp(uint8_t sensor_addr){
 8001012:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001014:	b085      	sub	sp, #20
 8001016:	af00      	add	r7, sp, #0
 8001018:	0002      	movs	r2, r0
 800101a:	1dfb      	adds	r3, r7, #7
 800101c:	701a      	strb	r2, [r3, #0]
	// returns a 16 bit unsigned integer with bits [15:8] as the 'high' byte,
	// and the bits [7:4] bits as the 'low' byte. High byte is the integer value with a -64 celsius offset
	// Low byte is [7:4] with 0.0625 celsius per count. Temp is the sum of the high and low byte.
	uint8_t highbyte = i2c2_read8_8(sensor_addr, 0x00);
 800101e:	250f      	movs	r5, #15
 8001020:	197c      	adds	r4, r7, r5
 8001022:	1dfb      	adds	r3, r7, #7
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2100      	movs	r1, #0
 8001028:	0018      	movs	r0, r3
 800102a:	f7ff fa65 	bl	80004f8 <i2c2_read8_8>
 800102e:	0003      	movs	r3, r0
 8001030:	7023      	strb	r3, [r4, #0]
	uint8_t lowbyte = i2c2_read8_8(sensor_addr, 0x10);
 8001032:	260e      	movs	r6, #14
 8001034:	19bc      	adds	r4, r7, r6
 8001036:	1dfb      	adds	r3, r7, #7
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	2110      	movs	r1, #16
 800103c:	0018      	movs	r0, r3
 800103e:	f7ff fa5b 	bl	80004f8 <i2c2_read8_8>
 8001042:	0003      	movs	r3, r0
 8001044:	7023      	strb	r3, [r4, #0]
	return ((uint16_t)highbyte << 8) | lowbyte;
 8001046:	197b      	adds	r3, r7, r5
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	021b      	lsls	r3, r3, #8
 800104c:	b21a      	sxth	r2, r3
 800104e:	19bb      	adds	r3, r7, r6
 8001050:	781b      	ldrb	r3, [r3, #0]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4313      	orrs	r3, r2
 8001056:	b21b      	sxth	r3, r3
 8001058:	b29b      	uxth	r3, r3
}
 800105a:	0018      	movs	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	b005      	add	sp, #20
 8001060:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001064:	480d      	ldr	r0, [pc, #52]	; (800109c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001066:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001068:	480d      	ldr	r0, [pc, #52]	; (80010a0 <LoopForever+0x6>)
  ldr r1, =_edata
 800106a:	490e      	ldr	r1, [pc, #56]	; (80010a4 <LoopForever+0xa>)
  ldr r2, =_sidata
 800106c:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <LoopForever+0xe>)
  movs r3, #0
 800106e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001070:	e002      	b.n	8001078 <LoopCopyDataInit>

08001072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001076:	3304      	adds	r3, #4

08001078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800107a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800107c:	d3f9      	bcc.n	8001072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800107e:	4a0b      	ldr	r2, [pc, #44]	; (80010ac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001080:	4c0b      	ldr	r4, [pc, #44]	; (80010b0 <LoopForever+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001084:	e001      	b.n	800108a <LoopFillZerobss>

08001086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001088:	3204      	adds	r2, #4

0800108a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800108a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800108c:	d3fb      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800108e:	f7ff ffbb 	bl	8001008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001092:	f002 fee1 	bl	8003e58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001096:	f7ff fba1 	bl	80007dc <main>

0800109a <LoopForever>:

LoopForever:
    b LoopForever
 800109a:	e7fe      	b.n	800109a <LoopForever>
   ldr   r0, =_estack
 800109c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80010a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80010a8:	08004bb0 	.word	0x08004bb0
  ldr r2, =_sbss
 80010ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80010b0:	20000270 	.word	0x20000270

080010b4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b4:	e7fe      	b.n	80010b4 <ADC1_COMP_IRQHandler>
	...

080010b8 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010be:	1dfb      	adds	r3, r7, #7
 80010c0:	2200      	movs	r2, #0
 80010c2:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 80010c4:	4b0b      	ldr	r3, [pc, #44]	; (80010f4 <HAL_Init+0x3c>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b0a      	ldr	r3, [pc, #40]	; (80010f4 <HAL_Init+0x3c>)
 80010ca:	2140      	movs	r1, #64	; 0x40
 80010cc:	430a      	orrs	r2, r1
 80010ce:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010d0:	2003      	movs	r0, #3
 80010d2:	f000 f811 	bl	80010f8 <HAL_InitTick>
 80010d6:	1e03      	subs	r3, r0, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80010da:	1dfb      	adds	r3, r7, #7
 80010dc:	2201      	movs	r2, #1
 80010de:	701a      	strb	r2, [r3, #0]
 80010e0:	e001      	b.n	80010e6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010e2:	f7ff fdb7 	bl	8000c54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
}
 80010ea:	0018      	movs	r0, r3
 80010ec:	46bd      	mov	sp, r7
 80010ee:	b002      	add	sp, #8
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	46c0      	nop			; (mov r8, r8)
 80010f4:	40022000 	.word	0x40022000

080010f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f8:	b590      	push	{r4, r7, lr}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001100:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_InitTick+0x5c>)
 8001102:	681c      	ldr	r4, [r3, #0]
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_InitTick+0x60>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	0019      	movs	r1, r3
 800110a:	23fa      	movs	r3, #250	; 0xfa
 800110c:	0098      	lsls	r0, r3, #2
 800110e:	f7ff f80d 	bl	800012c <__udivsi3>
 8001112:	0003      	movs	r3, r0
 8001114:	0019      	movs	r1, r3
 8001116:	0020      	movs	r0, r4
 8001118:	f7ff f808 	bl	800012c <__udivsi3>
 800111c:	0003      	movs	r3, r0
 800111e:	0018      	movs	r0, r3
 8001120:	f000 f92f 	bl	8001382 <HAL_SYSTICK_Config>
 8001124:	1e03      	subs	r3, r0, #0
 8001126:	d001      	beq.n	800112c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e00f      	b.n	800114c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2b03      	cmp	r3, #3
 8001130:	d80b      	bhi.n	800114a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	2301      	movs	r3, #1
 8001136:	425b      	negs	r3, r3
 8001138:	2200      	movs	r2, #0
 800113a:	0018      	movs	r0, r3
 800113c:	f000 f8fc 	bl	8001338 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_InitTick+0x64>)
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001146:	2300      	movs	r3, #0
 8001148:	e000      	b.n	800114c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800114a:	2301      	movs	r3, #1
}
 800114c:	0018      	movs	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	b003      	add	sp, #12
 8001152:	bd90      	pop	{r4, r7, pc}
 8001154:	20000000 	.word	0x20000000
 8001158:	20000008 	.word	0x20000008
 800115c:	20000004 	.word	0x20000004

08001160 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <HAL_IncTick+0x1c>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	001a      	movs	r2, r3
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x20>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	18d2      	adds	r2, r2, r3
 8001170:	4b03      	ldr	r3, [pc, #12]	; (8001180 <HAL_IncTick+0x20>)
 8001172:	601a      	str	r2, [r3, #0]
}
 8001174:	46c0      	nop			; (mov r8, r8)
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	46c0      	nop			; (mov r8, r8)
 800117c:	20000008 	.word	0x20000008
 8001180:	2000025c 	.word	0x2000025c

08001184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  return uwTick;
 8001188:	4b02      	ldr	r3, [pc, #8]	; (8001194 <HAL_GetTick+0x10>)
 800118a:	681b      	ldr	r3, [r3, #0]
}
 800118c:	0018      	movs	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	46c0      	nop			; (mov r8, r8)
 8001194:	2000025c 	.word	0x2000025c

08001198 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b084      	sub	sp, #16
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011a0:	f7ff fff0 	bl	8001184 <HAL_GetTick>
 80011a4:	0003      	movs	r3, r0
 80011a6:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3301      	adds	r3, #1
 80011b0:	d005      	beq.n	80011be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011b2:	4b0a      	ldr	r3, [pc, #40]	; (80011dc <HAL_Delay+0x44>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	001a      	movs	r2, r3
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	189b      	adds	r3, r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011be:	46c0      	nop			; (mov r8, r8)
 80011c0:	f7ff ffe0 	bl	8001184 <HAL_GetTick>
 80011c4:	0002      	movs	r2, r0
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	68fa      	ldr	r2, [r7, #12]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d8f7      	bhi.n	80011c0 <HAL_Delay+0x28>
  {
  }
}
 80011d0:	46c0      	nop			; (mov r8, r8)
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b004      	add	sp, #16
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	20000008 	.word	0x20000008

080011e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	0002      	movs	r2, r0
 80011e8:	1dfb      	adds	r3, r7, #7
 80011ea:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011ec:	1dfb      	adds	r3, r7, #7
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	2b7f      	cmp	r3, #127	; 0x7f
 80011f2:	d809      	bhi.n	8001208 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011f4:	1dfb      	adds	r3, r7, #7
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	001a      	movs	r2, r3
 80011fa:	231f      	movs	r3, #31
 80011fc:	401a      	ands	r2, r3
 80011fe:	4b04      	ldr	r3, [pc, #16]	; (8001210 <__NVIC_EnableIRQ+0x30>)
 8001200:	2101      	movs	r1, #1
 8001202:	4091      	lsls	r1, r2
 8001204:	000a      	movs	r2, r1
 8001206:	601a      	str	r2, [r3, #0]
  }
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}
 8001210:	e000e100 	.word	0xe000e100

08001214 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001214:	b590      	push	{r4, r7, lr}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	0002      	movs	r2, r0
 800121c:	6039      	str	r1, [r7, #0]
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	2b7f      	cmp	r3, #127	; 0x7f
 8001228:	d828      	bhi.n	800127c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800122a:	4a2f      	ldr	r2, [pc, #188]	; (80012e8 <__NVIC_SetPriority+0xd4>)
 800122c:	1dfb      	adds	r3, r7, #7
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	b25b      	sxtb	r3, r3
 8001232:	089b      	lsrs	r3, r3, #2
 8001234:	33c0      	adds	r3, #192	; 0xc0
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	589b      	ldr	r3, [r3, r2]
 800123a:	1dfa      	adds	r2, r7, #7
 800123c:	7812      	ldrb	r2, [r2, #0]
 800123e:	0011      	movs	r1, r2
 8001240:	2203      	movs	r2, #3
 8001242:	400a      	ands	r2, r1
 8001244:	00d2      	lsls	r2, r2, #3
 8001246:	21ff      	movs	r1, #255	; 0xff
 8001248:	4091      	lsls	r1, r2
 800124a:	000a      	movs	r2, r1
 800124c:	43d2      	mvns	r2, r2
 800124e:	401a      	ands	r2, r3
 8001250:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	019b      	lsls	r3, r3, #6
 8001256:	22ff      	movs	r2, #255	; 0xff
 8001258:	401a      	ands	r2, r3
 800125a:	1dfb      	adds	r3, r7, #7
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	0018      	movs	r0, r3
 8001260:	2303      	movs	r3, #3
 8001262:	4003      	ands	r3, r0
 8001264:	00db      	lsls	r3, r3, #3
 8001266:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001268:	481f      	ldr	r0, [pc, #124]	; (80012e8 <__NVIC_SetPriority+0xd4>)
 800126a:	1dfb      	adds	r3, r7, #7
 800126c:	781b      	ldrb	r3, [r3, #0]
 800126e:	b25b      	sxtb	r3, r3
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	430a      	orrs	r2, r1
 8001274:	33c0      	adds	r3, #192	; 0xc0
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800127a:	e031      	b.n	80012e0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <__NVIC_SetPriority+0xd8>)
 800127e:	1dfb      	adds	r3, r7, #7
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	0019      	movs	r1, r3
 8001284:	230f      	movs	r3, #15
 8001286:	400b      	ands	r3, r1
 8001288:	3b08      	subs	r3, #8
 800128a:	089b      	lsrs	r3, r3, #2
 800128c:	3306      	adds	r3, #6
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	3304      	adds	r3, #4
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	1dfa      	adds	r2, r7, #7
 8001298:	7812      	ldrb	r2, [r2, #0]
 800129a:	0011      	movs	r1, r2
 800129c:	2203      	movs	r2, #3
 800129e:	400a      	ands	r2, r1
 80012a0:	00d2      	lsls	r2, r2, #3
 80012a2:	21ff      	movs	r1, #255	; 0xff
 80012a4:	4091      	lsls	r1, r2
 80012a6:	000a      	movs	r2, r1
 80012a8:	43d2      	mvns	r2, r2
 80012aa:	401a      	ands	r2, r3
 80012ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	019b      	lsls	r3, r3, #6
 80012b2:	22ff      	movs	r2, #255	; 0xff
 80012b4:	401a      	ands	r2, r3
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	0018      	movs	r0, r3
 80012bc:	2303      	movs	r3, #3
 80012be:	4003      	ands	r3, r0
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c4:	4809      	ldr	r0, [pc, #36]	; (80012ec <__NVIC_SetPriority+0xd8>)
 80012c6:	1dfb      	adds	r3, r7, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	001c      	movs	r4, r3
 80012cc:	230f      	movs	r3, #15
 80012ce:	4023      	ands	r3, r4
 80012d0:	3b08      	subs	r3, #8
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	430a      	orrs	r2, r1
 80012d6:	3306      	adds	r3, #6
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	18c3      	adds	r3, r0, r3
 80012dc:	3304      	adds	r3, #4
 80012de:	601a      	str	r2, [r3, #0]
}
 80012e0:	46c0      	nop			; (mov r8, r8)
 80012e2:	46bd      	mov	sp, r7
 80012e4:	b003      	add	sp, #12
 80012e6:	bd90      	pop	{r4, r7, pc}
 80012e8:	e000e100 	.word	0xe000e100
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	1e5a      	subs	r2, r3, #1
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	045b      	lsls	r3, r3, #17
 8001300:	429a      	cmp	r2, r3
 8001302:	d301      	bcc.n	8001308 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001304:	2301      	movs	r3, #1
 8001306:	e010      	b.n	800132a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001308:	4b0a      	ldr	r3, [pc, #40]	; (8001334 <SysTick_Config+0x44>)
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	3a01      	subs	r2, #1
 800130e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001310:	2301      	movs	r3, #1
 8001312:	425b      	negs	r3, r3
 8001314:	2103      	movs	r1, #3
 8001316:	0018      	movs	r0, r3
 8001318:	f7ff ff7c 	bl	8001214 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800131c:	4b05      	ldr	r3, [pc, #20]	; (8001334 <SysTick_Config+0x44>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001322:	4b04      	ldr	r3, [pc, #16]	; (8001334 <SysTick_Config+0x44>)
 8001324:	2207      	movs	r2, #7
 8001326:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001328:	2300      	movs	r3, #0
}
 800132a:	0018      	movs	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	e000e010 	.word	0xe000e010

08001338 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	60b9      	str	r1, [r7, #8]
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	210f      	movs	r1, #15
 8001344:	187b      	adds	r3, r7, r1
 8001346:	1c02      	adds	r2, r0, #0
 8001348:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	187b      	adds	r3, r7, r1
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	b25b      	sxtb	r3, r3
 8001352:	0011      	movs	r1, r2
 8001354:	0018      	movs	r0, r3
 8001356:	f7ff ff5d 	bl	8001214 <__NVIC_SetPriority>
}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	46bd      	mov	sp, r7
 800135e:	b004      	add	sp, #16
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b082      	sub	sp, #8
 8001366:	af00      	add	r7, sp, #0
 8001368:	0002      	movs	r2, r0
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800136e:	1dfb      	adds	r3, r7, #7
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	b25b      	sxtb	r3, r3
 8001374:	0018      	movs	r0, r3
 8001376:	f7ff ff33 	bl	80011e0 <__NVIC_EnableIRQ>
}
 800137a:	46c0      	nop			; (mov r8, r8)
 800137c:	46bd      	mov	sp, r7
 800137e:	b002      	add	sp, #8
 8001380:	bd80      	pop	{r7, pc}

08001382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b082      	sub	sp, #8
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff ffaf 	bl	80012f0 <SysTick_Config>
 8001392:	0003      	movs	r3, r0
}
 8001394:	0018      	movs	r0, r3
 8001396:	46bd      	mov	sp, r7
 8001398:	b002      	add	sp, #8
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013a4:	210f      	movs	r1, #15
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2225      	movs	r2, #37	; 0x25
 80013b0:	5c9b      	ldrb	r3, [r3, r2]
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d006      	beq.n	80013c6 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2204      	movs	r2, #4
 80013bc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013be:	187b      	adds	r3, r7, r1
 80013c0:	2201      	movs	r2, #1
 80013c2:	701a      	strb	r2, [r3, #0]
 80013c4:	e02a      	b.n	800141c <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	210e      	movs	r1, #14
 80013d2:	438a      	bics	r2, r1
 80013d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	438a      	bics	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	221c      	movs	r2, #28
 80013ec:	401a      	ands	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	2101      	movs	r1, #1
 80013f4:	4091      	lsls	r1, r2
 80013f6:	000a      	movs	r2, r1
 80013f8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2225      	movs	r2, #37	; 0x25
 80013fe:	2101      	movs	r1, #1
 8001400:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2224      	movs	r2, #36	; 0x24
 8001406:	2100      	movs	r1, #0
 8001408:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140e:	2b00      	cmp	r3, #0
 8001410:	d004      	beq.n	800141c <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001416:	687a      	ldr	r2, [r7, #4]
 8001418:	0010      	movs	r0, r2
 800141a:	4798      	blx	r3
    }
  }
  return status;
 800141c:	230f      	movs	r3, #15
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	781b      	ldrb	r3, [r3, #0]
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
 8001434:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001442:	e155      	b.n	80016f0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	4091      	lsls	r1, r2
 800144e:	000a      	movs	r2, r1
 8001450:	4013      	ands	r3, r2
 8001452:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d100      	bne.n	800145c <HAL_GPIO_Init+0x30>
 800145a:	e146      	b.n	80016ea <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2203      	movs	r2, #3
 8001462:	4013      	ands	r3, r2
 8001464:	2b01      	cmp	r3, #1
 8001466:	d005      	beq.n	8001474 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	2203      	movs	r2, #3
 800146e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001470:	2b02      	cmp	r3, #2
 8001472:	d130      	bne.n	80014d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	2203      	movs	r2, #3
 8001480:	409a      	lsls	r2, r3
 8001482:	0013      	movs	r3, r2
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	68da      	ldr	r2, [r3, #12]
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	409a      	lsls	r2, r3
 8001496:	0013      	movs	r3, r2
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	4313      	orrs	r3, r2
 800149c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
 80014b0:	0013      	movs	r3, r2
 80014b2:	43da      	mvns	r2, r3
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	091b      	lsrs	r3, r3, #4
 80014c0:	2201      	movs	r2, #1
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
 80014c8:	0013      	movs	r3, r2
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	2203      	movs	r2, #3
 80014dc:	4013      	ands	r3, r2
 80014de:	2b03      	cmp	r3, #3
 80014e0:	d017      	beq.n	8001512 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	68db      	ldr	r3, [r3, #12]
 80014e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	2203      	movs	r2, #3
 80014ee:	409a      	lsls	r2, r3
 80014f0:	0013      	movs	r3, r2
 80014f2:	43da      	mvns	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	689a      	ldr	r2, [r3, #8]
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	409a      	lsls	r2, r3
 8001504:	0013      	movs	r3, r2
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2203      	movs	r2, #3
 8001518:	4013      	ands	r3, r2
 800151a:	2b02      	cmp	r3, #2
 800151c:	d123      	bne.n	8001566 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	08da      	lsrs	r2, r3, #3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3208      	adds	r2, #8
 8001526:	0092      	lsls	r2, r2, #2
 8001528:	58d3      	ldr	r3, [r2, r3]
 800152a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	2207      	movs	r2, #7
 8001530:	4013      	ands	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	220f      	movs	r2, #15
 8001536:	409a      	lsls	r2, r3
 8001538:	0013      	movs	r3, r2
 800153a:	43da      	mvns	r2, r3
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	4013      	ands	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	691a      	ldr	r2, [r3, #16]
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	2107      	movs	r1, #7
 800154a:	400b      	ands	r3, r1
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	409a      	lsls	r2, r3
 8001550:	0013      	movs	r3, r2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	3208      	adds	r2, #8
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	6939      	ldr	r1, [r7, #16]
 8001564:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	2203      	movs	r2, #3
 8001572:	409a      	lsls	r2, r3
 8001574:	0013      	movs	r3, r2
 8001576:	43da      	mvns	r2, r3
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	2203      	movs	r2, #3
 8001584:	401a      	ands	r2, r3
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	409a      	lsls	r2, r3
 800158c:	0013      	movs	r3, r2
 800158e:	693a      	ldr	r2, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	693a      	ldr	r2, [r7, #16]
 8001598:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	23c0      	movs	r3, #192	; 0xc0
 80015a0:	029b      	lsls	r3, r3, #10
 80015a2:	4013      	ands	r3, r2
 80015a4:	d100      	bne.n	80015a8 <HAL_GPIO_Init+0x17c>
 80015a6:	e0a0      	b.n	80016ea <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015a8:	4b57      	ldr	r3, [pc, #348]	; (8001708 <HAL_GPIO_Init+0x2dc>)
 80015aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ac:	4b56      	ldr	r3, [pc, #344]	; (8001708 <HAL_GPIO_Init+0x2dc>)
 80015ae:	2101      	movs	r1, #1
 80015b0:	430a      	orrs	r2, r1
 80015b2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80015b4:	4a55      	ldr	r2, [pc, #340]	; (800170c <HAL_GPIO_Init+0x2e0>)
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	089b      	lsrs	r3, r3, #2
 80015ba:	3302      	adds	r3, #2
 80015bc:	009b      	lsls	r3, r3, #2
 80015be:	589b      	ldr	r3, [r3, r2]
 80015c0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	220f      	movs	r2, #15
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	43da      	mvns	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	23a0      	movs	r3, #160	; 0xa0
 80015dc:	05db      	lsls	r3, r3, #23
 80015de:	429a      	cmp	r2, r3
 80015e0:	d01f      	beq.n	8001622 <HAL_GPIO_Init+0x1f6>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a4a      	ldr	r2, [pc, #296]	; (8001710 <HAL_GPIO_Init+0x2e4>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d019      	beq.n	800161e <HAL_GPIO_Init+0x1f2>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a49      	ldr	r2, [pc, #292]	; (8001714 <HAL_GPIO_Init+0x2e8>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d013      	beq.n	800161a <HAL_GPIO_Init+0x1ee>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a48      	ldr	r2, [pc, #288]	; (8001718 <HAL_GPIO_Init+0x2ec>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d00d      	beq.n	8001616 <HAL_GPIO_Init+0x1ea>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a47      	ldr	r2, [pc, #284]	; (800171c <HAL_GPIO_Init+0x2f0>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d007      	beq.n	8001612 <HAL_GPIO_Init+0x1e6>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a46      	ldr	r2, [pc, #280]	; (8001720 <HAL_GPIO_Init+0x2f4>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d101      	bne.n	800160e <HAL_GPIO_Init+0x1e2>
 800160a:	2305      	movs	r3, #5
 800160c:	e00a      	b.n	8001624 <HAL_GPIO_Init+0x1f8>
 800160e:	2306      	movs	r3, #6
 8001610:	e008      	b.n	8001624 <HAL_GPIO_Init+0x1f8>
 8001612:	2304      	movs	r3, #4
 8001614:	e006      	b.n	8001624 <HAL_GPIO_Init+0x1f8>
 8001616:	2303      	movs	r3, #3
 8001618:	e004      	b.n	8001624 <HAL_GPIO_Init+0x1f8>
 800161a:	2302      	movs	r3, #2
 800161c:	e002      	b.n	8001624 <HAL_GPIO_Init+0x1f8>
 800161e:	2301      	movs	r3, #1
 8001620:	e000      	b.n	8001624 <HAL_GPIO_Init+0x1f8>
 8001622:	2300      	movs	r3, #0
 8001624:	697a      	ldr	r2, [r7, #20]
 8001626:	2103      	movs	r1, #3
 8001628:	400a      	ands	r2, r1
 800162a:	0092      	lsls	r2, r2, #2
 800162c:	4093      	lsls	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001634:	4935      	ldr	r1, [pc, #212]	; (800170c <HAL_GPIO_Init+0x2e0>)
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	089b      	lsrs	r3, r3, #2
 800163a:	3302      	adds	r3, #2
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001642:	4b38      	ldr	r3, [pc, #224]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	43da      	mvns	r2, r3
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	4013      	ands	r3, r2
 8001650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	2380      	movs	r3, #128	; 0x80
 8001658:	025b      	lsls	r3, r3, #9
 800165a:	4013      	ands	r3, r2
 800165c:	d003      	beq.n	8001666 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800165e:	693a      	ldr	r2, [r7, #16]
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001666:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800166c:	4b2d      	ldr	r3, [pc, #180]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	43da      	mvns	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	685a      	ldr	r2, [r3, #4]
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d003      	beq.n	8001690 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	4313      	orrs	r3, r2
 800168e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	685a      	ldr	r2, [r3, #4]
 80016aa:	2380      	movs	r3, #128	; 0x80
 80016ac:	035b      	lsls	r3, r3, #13
 80016ae:	4013      	ands	r3, r2
 80016b0:	d003      	beq.n	80016ba <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	4313      	orrs	r3, r2
 80016b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 80016bc:	693a      	ldr	r2, [r7, #16]
 80016be:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	43da      	mvns	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685a      	ldr	r2, [r3, #4]
 80016d4:	2380      	movs	r3, #128	; 0x80
 80016d6:	039b      	lsls	r3, r3, #14
 80016d8:	4013      	ands	r3, r2
 80016da:	d003      	beq.n	80016e4 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	4313      	orrs	r3, r2
 80016e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <HAL_GPIO_Init+0x2f8>)
 80016e6:	693a      	ldr	r2, [r7, #16]
 80016e8:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3301      	adds	r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	40da      	lsrs	r2, r3
 80016f8:	1e13      	subs	r3, r2, #0
 80016fa:	d000      	beq.n	80016fe <HAL_GPIO_Init+0x2d2>
 80016fc:	e6a2      	b.n	8001444 <HAL_GPIO_Init+0x18>
  }
}
 80016fe:	46c0      	nop			; (mov r8, r8)
 8001700:	46c0      	nop			; (mov r8, r8)
 8001702:	46bd      	mov	sp, r7
 8001704:	b006      	add	sp, #24
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	40010000 	.word	0x40010000
 8001710:	50000400 	.word	0x50000400
 8001714:	50000800 	.word	0x50000800
 8001718:	50000c00 	.word	0x50000c00
 800171c:	50001000 	.word	0x50001000
 8001720:	50001c00 	.word	0x50001c00
 8001724:	40010400 	.word	0x40010400

08001728 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	0008      	movs	r0, r1
 8001732:	0011      	movs	r1, r2
 8001734:	1cbb      	adds	r3, r7, #2
 8001736:	1c02      	adds	r2, r0, #0
 8001738:	801a      	strh	r2, [r3, #0]
 800173a:	1c7b      	adds	r3, r7, #1
 800173c:	1c0a      	adds	r2, r1, #0
 800173e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001740:	1c7b      	adds	r3, r7, #1
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d004      	beq.n	8001752 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001748:	1cbb      	adds	r3, r7, #2
 800174a:	881a      	ldrh	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001750:	e003      	b.n	800175a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001752:	1cbb      	adds	r3, r7, #2
 8001754:	881a      	ldrh	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
}
 800175a:	46c0      	nop			; (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b002      	add	sp, #8
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
 800176a:	000a      	movs	r2, r1
 800176c:	1cbb      	adds	r3, r7, #2
 800176e:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	695b      	ldr	r3, [r3, #20]
 8001774:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001776:	1cbb      	adds	r3, r7, #2
 8001778:	881b      	ldrh	r3, [r3, #0]
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	4013      	ands	r3, r2
 800177e:	041a      	lsls	r2, r3, #16
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	43db      	mvns	r3, r3
 8001784:	1cb9      	adds	r1, r7, #2
 8001786:	8809      	ldrh	r1, [r1, #0]
 8001788:	400b      	ands	r3, r1
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	619a      	str	r2, [r3, #24]
}
 8001790:	46c0      	nop			; (mov r8, r8)
 8001792:	46bd      	mov	sp, r7
 8001794:	b004      	add	sp, #16
 8001796:	bd80      	pop	{r7, pc}

08001798 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e082      	b.n	80018b0 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2241      	movs	r2, #65	; 0x41
 80017ae:	5c9b      	ldrb	r3, [r3, r2]
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d107      	bne.n	80017c6 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	2100      	movs	r1, #0
 80017bc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff fa5b 	bl	8000c7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2241      	movs	r2, #65	; 0x41
 80017ca:	2124      	movs	r1, #36	; 0x24
 80017cc:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2101      	movs	r1, #1
 80017da:	438a      	bics	r2, r1
 80017dc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4934      	ldr	r1, [pc, #208]	; (80018b8 <HAL_I2C_Init+0x120>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	689a      	ldr	r2, [r3, #8]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4931      	ldr	r1, [pc, #196]	; (80018bc <HAL_I2C_Init+0x124>)
 80017f8:	400a      	ands	r2, r1
 80017fa:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d108      	bne.n	8001816 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2180      	movs	r1, #128	; 0x80
 800180e:	0209      	lsls	r1, r1, #8
 8001810:	430a      	orrs	r2, r1
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	e007      	b.n	8001826 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	689a      	ldr	r2, [r3, #8]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	2184      	movs	r1, #132	; 0x84
 8001820:	0209      	lsls	r1, r1, #8
 8001822:	430a      	orrs	r2, r1
 8001824:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	2b02      	cmp	r3, #2
 800182c:	d104      	bne.n	8001838 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	685a      	ldr	r2, [r3, #4]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	491f      	ldr	r1, [pc, #124]	; (80018c0 <HAL_I2C_Init+0x128>)
 8001844:	430a      	orrs	r2, r1
 8001846:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	491a      	ldr	r1, [pc, #104]	; (80018bc <HAL_I2C_Init+0x124>)
 8001854:	400a      	ands	r2, r1
 8001856:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	431a      	orrs	r2, r3
 8001862:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	699b      	ldr	r3, [r3, #24]
 8001868:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	430a      	orrs	r2, r1
 8001870:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69d9      	ldr	r1, [r3, #28]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1a      	ldr	r2, [r3, #32]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2101      	movs	r1, #1
 800188e:	430a      	orrs	r2, r1
 8001890:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	2200      	movs	r2, #0
 8001896:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2241      	movs	r2, #65	; 0x41
 800189c:	2120      	movs	r1, #32
 800189e:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2242      	movs	r2, #66	; 0x42
 80018aa:	2100      	movs	r1, #0
 80018ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80018ae:	2300      	movs	r3, #0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	f0ffffff 	.word	0xf0ffffff
 80018bc:	ffff7fff 	.word	0xffff7fff
 80018c0:	02008000 	.word	0x02008000

080018c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018c4:	b590      	push	{r4, r7, lr}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af02      	add	r7, sp, #8
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	000c      	movs	r4, r1
 80018ce:	0010      	movs	r0, r2
 80018d0:	0019      	movs	r1, r3
 80018d2:	230a      	movs	r3, #10
 80018d4:	18fb      	adds	r3, r7, r3
 80018d6:	1c22      	adds	r2, r4, #0
 80018d8:	801a      	strh	r2, [r3, #0]
 80018da:	2308      	movs	r3, #8
 80018dc:	18fb      	adds	r3, r7, r3
 80018de:	1c02      	adds	r2, r0, #0
 80018e0:	801a      	strh	r2, [r3, #0]
 80018e2:	1dbb      	adds	r3, r7, #6
 80018e4:	1c0a      	adds	r2, r1, #0
 80018e6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2241      	movs	r2, #65	; 0x41
 80018ec:	5c9b      	ldrb	r3, [r3, r2]
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	2b20      	cmp	r3, #32
 80018f2:	d000      	beq.n	80018f6 <HAL_I2C_Mem_Read+0x32>
 80018f4:	e110      	b.n	8001b18 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 80018f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d004      	beq.n	8001906 <HAL_I2C_Mem_Read+0x42>
 80018fc:	232c      	movs	r3, #44	; 0x2c
 80018fe:	18fb      	adds	r3, r7, r3
 8001900:	881b      	ldrh	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d105      	bne.n	8001912 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2280      	movs	r2, #128	; 0x80
 800190a:	0092      	lsls	r2, r2, #2
 800190c:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e103      	b.n	8001b1a <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2240      	movs	r2, #64	; 0x40
 8001916:	5c9b      	ldrb	r3, [r3, r2]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d101      	bne.n	8001920 <HAL_I2C_Mem_Read+0x5c>
 800191c:	2302      	movs	r3, #2
 800191e:	e0fc      	b.n	8001b1a <HAL_I2C_Mem_Read+0x256>
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	2240      	movs	r2, #64	; 0x40
 8001924:	2101      	movs	r1, #1
 8001926:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001928:	f7ff fc2c 	bl	8001184 <HAL_GetTick>
 800192c:	0003      	movs	r3, r0
 800192e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001930:	2380      	movs	r3, #128	; 0x80
 8001932:	0219      	lsls	r1, r3, #8
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	9300      	str	r3, [sp, #0]
 800193a:	2319      	movs	r3, #25
 800193c:	2201      	movs	r2, #1
 800193e:	f000 fa93 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001942:	1e03      	subs	r3, r0, #0
 8001944:	d001      	beq.n	800194a <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
 8001948:	e0e7      	b.n	8001b1a <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	2241      	movs	r2, #65	; 0x41
 800194e:	2122      	movs	r1, #34	; 0x22
 8001950:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2242      	movs	r2, #66	; 0x42
 8001956:	2140      	movs	r1, #64	; 0x40
 8001958:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	2200      	movs	r2, #0
 800195e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	222c      	movs	r2, #44	; 0x2c
 800196a:	18ba      	adds	r2, r7, r2
 800196c:	8812      	ldrh	r2, [r2, #0]
 800196e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001976:	1dbb      	adds	r3, r7, #6
 8001978:	881c      	ldrh	r4, [r3, #0]
 800197a:	2308      	movs	r3, #8
 800197c:	18fb      	adds	r3, r7, r3
 800197e:	881a      	ldrh	r2, [r3, #0]
 8001980:	230a      	movs	r3, #10
 8001982:	18fb      	adds	r3, r7, r3
 8001984:	8819      	ldrh	r1, [r3, #0]
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	0023      	movs	r3, r4
 8001992:	f000 f9e5 	bl	8001d60 <I2C_RequestMemoryRead>
 8001996:	1e03      	subs	r3, r0, #0
 8001998:	d005      	beq.n	80019a6 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	2240      	movs	r2, #64	; 0x40
 800199e:	2100      	movs	r1, #0
 80019a0:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e0b9      	b.n	8001b1a <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	2bff      	cmp	r3, #255	; 0xff
 80019ae:	d911      	bls.n	80019d4 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	22ff      	movs	r2, #255	; 0xff
 80019b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019ba:	b2da      	uxtb	r2, r3
 80019bc:	2380      	movs	r3, #128	; 0x80
 80019be:	045c      	lsls	r4, r3, #17
 80019c0:	230a      	movs	r3, #10
 80019c2:	18fb      	adds	r3, r7, r3
 80019c4:	8819      	ldrh	r1, [r3, #0]
 80019c6:	68f8      	ldr	r0, [r7, #12]
 80019c8:	4b56      	ldr	r3, [pc, #344]	; (8001b24 <HAL_I2C_Mem_Read+0x260>)
 80019ca:	9300      	str	r3, [sp, #0]
 80019cc:	0023      	movs	r3, r4
 80019ce:	f000 fb7f 	bl	80020d0 <I2C_TransferConfig>
 80019d2:	e012      	b.n	80019fa <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019d8:	b29a      	uxth	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e2:	b2da      	uxtb	r2, r3
 80019e4:	2380      	movs	r3, #128	; 0x80
 80019e6:	049c      	lsls	r4, r3, #18
 80019e8:	230a      	movs	r3, #10
 80019ea:	18fb      	adds	r3, r7, r3
 80019ec:	8819      	ldrh	r1, [r3, #0]
 80019ee:	68f8      	ldr	r0, [r7, #12]
 80019f0:	4b4c      	ldr	r3, [pc, #304]	; (8001b24 <HAL_I2C_Mem_Read+0x260>)
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	0023      	movs	r3, r4
 80019f6:	f000 fb6b 	bl	80020d0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80019fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	9300      	str	r3, [sp, #0]
 8001a02:	0013      	movs	r3, r2
 8001a04:	2200      	movs	r2, #0
 8001a06:	2104      	movs	r1, #4
 8001a08:	f000 fa2e 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001a0c:	1e03      	subs	r3, r0, #0
 8001a0e:	d001      	beq.n	8001a14 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e082      	b.n	8001b1a <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a1e:	b2d2      	uxtb	r2, r2
 8001a20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a3c:	b29b      	uxth	r3, r3
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	b29a      	uxth	r2, r3
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a4a:	b29b      	uxth	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d03a      	beq.n	8001ac6 <HAL_I2C_Mem_Read+0x202>
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d136      	bne.n	8001ac6 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	0013      	movs	r3, r2
 8001a62:	2200      	movs	r2, #0
 8001a64:	2180      	movs	r1, #128	; 0x80
 8001a66:	f000 f9ff 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001a6a:	1e03      	subs	r3, r0, #0
 8001a6c:	d001      	beq.n	8001a72 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e053      	b.n	8001b1a <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a76:	b29b      	uxth	r3, r3
 8001a78:	2bff      	cmp	r3, #255	; 0xff
 8001a7a:	d911      	bls.n	8001aa0 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	22ff      	movs	r2, #255	; 0xff
 8001a80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a86:	b2da      	uxtb	r2, r3
 8001a88:	2380      	movs	r3, #128	; 0x80
 8001a8a:	045c      	lsls	r4, r3, #17
 8001a8c:	230a      	movs	r3, #10
 8001a8e:	18fb      	adds	r3, r7, r3
 8001a90:	8819      	ldrh	r1, [r3, #0]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	2300      	movs	r3, #0
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	0023      	movs	r3, r4
 8001a9a:	f000 fb19 	bl	80020d0 <I2C_TransferConfig>
 8001a9e:	e012      	b.n	8001ac6 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aae:	b2da      	uxtb	r2, r3
 8001ab0:	2380      	movs	r3, #128	; 0x80
 8001ab2:	049c      	lsls	r4, r3, #18
 8001ab4:	230a      	movs	r3, #10
 8001ab6:	18fb      	adds	r3, r7, r3
 8001ab8:	8819      	ldrh	r1, [r3, #0]
 8001aba:	68f8      	ldr	r0, [r7, #12]
 8001abc:	2300      	movs	r3, #0
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	0023      	movs	r3, r4
 8001ac2:	f000 fb05 	bl	80020d0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d194      	bne.n	80019fa <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f000 fa44 	bl	8001f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001adc:	1e03      	subs	r3, r0, #0
 8001ade:	d001      	beq.n	8001ae4 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e01a      	b.n	8001b1a <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2220      	movs	r2, #32
 8001aea:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	685a      	ldr	r2, [r3, #4]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	490c      	ldr	r1, [pc, #48]	; (8001b28 <HAL_I2C_Mem_Read+0x264>)
 8001af8:	400a      	ands	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2241      	movs	r2, #65	; 0x41
 8001b00:	2120      	movs	r1, #32
 8001b02:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2242      	movs	r2, #66	; 0x42
 8001b08:	2100      	movs	r1, #0
 8001b0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	2240      	movs	r2, #64	; 0x40
 8001b10:	2100      	movs	r1, #0
 8001b12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b14:	2300      	movs	r3, #0
 8001b16:	e000      	b.n	8001b1a <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001b18:	2302      	movs	r3, #2
  }
}
 8001b1a:	0018      	movs	r0, r3
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	b007      	add	sp, #28
 8001b20:	bd90      	pop	{r4, r7, pc}
 8001b22:	46c0      	nop			; (mov r8, r8)
 8001b24:	80002400 	.word	0x80002400
 8001b28:	fe00e800 	.word	0xfe00e800

08001b2c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b08a      	sub	sp, #40	; 0x28
 8001b30:	af02      	add	r7, sp, #8
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	230a      	movs	r3, #10
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	1c0a      	adds	r2, r1, #0
 8001b3e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001b40:	2300      	movs	r3, #0
 8001b42:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2241      	movs	r2, #65	; 0x41
 8001b48:	5c9b      	ldrb	r3, [r3, r2]
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d000      	beq.n	8001b52 <HAL_I2C_IsDeviceReady+0x26>
 8001b50:	e0fe      	b.n	8001d50 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	699a      	ldr	r2, [r3, #24]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	401a      	ands	r2, r3
 8001b5e:	2380      	movs	r3, #128	; 0x80
 8001b60:	021b      	lsls	r3, r3, #8
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d101      	bne.n	8001b6a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001b66:	2302      	movs	r3, #2
 8001b68:	e0f3      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2240      	movs	r2, #64	; 0x40
 8001b6e:	5c9b      	ldrb	r3, [r3, r2]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_I2C_IsDeviceReady+0x4c>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e0ec      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x226>
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2240      	movs	r2, #64	; 0x40
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2241      	movs	r2, #65	; 0x41
 8001b84:	2124      	movs	r1, #36	; 0x24
 8001b86:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	68db      	ldr	r3, [r3, #12]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d107      	bne.n	8001ba6 <HAL_I2C_IsDeviceReady+0x7a>
 8001b96:	230a      	movs	r3, #10
 8001b98:	18fb      	adds	r3, r7, r3
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	059b      	lsls	r3, r3, #22
 8001b9e:	0d9b      	lsrs	r3, r3, #22
 8001ba0:	4a6e      	ldr	r2, [pc, #440]	; (8001d5c <HAL_I2C_IsDeviceReady+0x230>)
 8001ba2:	431a      	orrs	r2, r3
 8001ba4:	e007      	b.n	8001bb6 <HAL_I2C_IsDeviceReady+0x8a>
 8001ba6:	230a      	movs	r3, #10
 8001ba8:	18fb      	adds	r3, r7, r3
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	059b      	lsls	r3, r3, #22
 8001bae:	0d9b      	lsrs	r3, r3, #22
 8001bb0:	22a0      	movs	r2, #160	; 0xa0
 8001bb2:	0192      	lsls	r2, r2, #6
 8001bb4:	431a      	orrs	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001bbc:	f7ff fae2 	bl	8001184 <HAL_GetTick>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	699b      	ldr	r3, [r3, #24]
 8001bca:	2220      	movs	r2, #32
 8001bcc:	4013      	ands	r3, r2
 8001bce:	3b20      	subs	r3, #32
 8001bd0:	425a      	negs	r2, r3
 8001bd2:	4153      	adcs	r3, r2
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	231f      	movs	r3, #31
 8001bd8:	18fb      	adds	r3, r7, r3
 8001bda:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	2210      	movs	r2, #16
 8001be4:	4013      	ands	r3, r2
 8001be6:	3b10      	subs	r3, #16
 8001be8:	425a      	negs	r2, r3
 8001bea:	4153      	adcs	r3, r2
 8001bec:	b2da      	uxtb	r2, r3
 8001bee:	231e      	movs	r3, #30
 8001bf0:	18fb      	adds	r3, r7, r3
 8001bf2:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001bf4:	e035      	b.n	8001c62 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	d01a      	beq.n	8001c32 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001bfc:	f7ff fac2 	bl	8001184 <HAL_GetTick>
 8001c00:	0002      	movs	r2, r0
 8001c02:	69bb      	ldr	r3, [r7, #24]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d302      	bcc.n	8001c12 <HAL_I2C_IsDeviceReady+0xe6>
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10f      	bne.n	8001c32 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2241      	movs	r2, #65	; 0x41
 8001c16:	2120      	movs	r1, #32
 8001c18:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c1e:	2220      	movs	r2, #32
 8001c20:	431a      	orrs	r2, r3
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	2240      	movs	r2, #64	; 0x40
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e08f      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	3b20      	subs	r3, #32
 8001c3e:	425a      	negs	r2, r3
 8001c40:	4153      	adcs	r3, r2
 8001c42:	b2da      	uxtb	r2, r3
 8001c44:	231f      	movs	r3, #31
 8001c46:	18fb      	adds	r3, r7, r3
 8001c48:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2210      	movs	r2, #16
 8001c52:	4013      	ands	r3, r2
 8001c54:	3b10      	subs	r3, #16
 8001c56:	425a      	negs	r2, r3
 8001c58:	4153      	adcs	r3, r2
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	231e      	movs	r3, #30
 8001c5e:	18fb      	adds	r3, r7, r3
 8001c60:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001c62:	231f      	movs	r3, #31
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d104      	bne.n	8001c76 <HAL_I2C_IsDeviceReady+0x14a>
 8001c6c:	231e      	movs	r3, #30
 8001c6e:	18fb      	adds	r3, r7, r3
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0bf      	beq.n	8001bf6 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2210      	movs	r2, #16
 8001c7e:	4013      	ands	r3, r2
 8001c80:	2b10      	cmp	r3, #16
 8001c82:	d01a      	beq.n	8001cba <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	2200      	movs	r2, #0
 8001c90:	2120      	movs	r1, #32
 8001c92:	f000 f8e9 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001c96:	1e03      	subs	r3, r0, #0
 8001c98:	d001      	beq.n	8001c9e <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e059      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2241      	movs	r2, #65	; 0x41
 8001caa:	2120      	movs	r1, #32
 8001cac:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	2240      	movs	r2, #64	; 0x40
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e04b      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	68f8      	ldr	r0, [r7, #12]
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	0013      	movs	r3, r2
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	2120      	movs	r1, #32
 8001cc8:	f000 f8ce 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001ccc:	1e03      	subs	r3, r0, #0
 8001cce:	d001      	beq.n	8001cd4 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e03e      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2210      	movs	r2, #16
 8001cda:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	2220      	movs	r2, #32
 8001ce2:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d119      	bne.n	8001d20 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	685a      	ldr	r2, [r3, #4]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	2180      	movs	r1, #128	; 0x80
 8001cf8:	01c9      	lsls	r1, r1, #7
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	68f8      	ldr	r0, [r7, #12]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	0013      	movs	r3, r2
 8001d08:	2200      	movs	r2, #0
 8001d0a:	2120      	movs	r1, #32
 8001d0c:	f000 f8ac 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001d10:	1e03      	subs	r3, r0, #0
 8001d12:	d001      	beq.n	8001d18 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e01c      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2220      	movs	r2, #32
 8001d1e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	3301      	adds	r3, #1
 8001d24:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d900      	bls.n	8001d30 <HAL_I2C_IsDeviceReady+0x204>
 8001d2e:	e72e      	b.n	8001b8e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2241      	movs	r2, #65	; 0x41
 8001d34:	2120      	movs	r1, #32
 8001d36:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d3c:	2220      	movs	r2, #32
 8001d3e:	431a      	orrs	r2, r3
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	2240      	movs	r2, #64	; 0x40
 8001d48:	2100      	movs	r1, #0
 8001d4a:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
  }
}
 8001d52:	0018      	movs	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	b008      	add	sp, #32
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	02002000 	.word	0x02002000

08001d60 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	b086      	sub	sp, #24
 8001d64:	af02      	add	r7, sp, #8
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	000c      	movs	r4, r1
 8001d6a:	0010      	movs	r0, r2
 8001d6c:	0019      	movs	r1, r3
 8001d6e:	250a      	movs	r5, #10
 8001d70:	197b      	adds	r3, r7, r5
 8001d72:	1c22      	adds	r2, r4, #0
 8001d74:	801a      	strh	r2, [r3, #0]
 8001d76:	2308      	movs	r3, #8
 8001d78:	18fb      	adds	r3, r7, r3
 8001d7a:	1c02      	adds	r2, r0, #0
 8001d7c:	801a      	strh	r2, [r3, #0]
 8001d7e:	1dbb      	adds	r3, r7, #6
 8001d80:	1c0a      	adds	r2, r1, #0
 8001d82:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001d84:	1dbb      	adds	r3, r7, #6
 8001d86:	881b      	ldrh	r3, [r3, #0]
 8001d88:	b2da      	uxtb	r2, r3
 8001d8a:	197b      	adds	r3, r7, r5
 8001d8c:	8819      	ldrh	r1, [r3, #0]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	4b23      	ldr	r3, [pc, #140]	; (8001e20 <I2C_RequestMemoryRead+0xc0>)
 8001d92:	9300      	str	r3, [sp, #0]
 8001d94:	2300      	movs	r3, #0
 8001d96:	f000 f99b 	bl	80020d0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9c:	6a39      	ldr	r1, [r7, #32]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f000 f8a0 	bl	8001ee6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001da6:	1e03      	subs	r3, r0, #0
 8001da8:	d001      	beq.n	8001dae <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e033      	b.n	8001e16 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001dae:	1dbb      	adds	r3, r7, #6
 8001db0:	881b      	ldrh	r3, [r3, #0]
 8001db2:	2b01      	cmp	r3, #1
 8001db4:	d107      	bne.n	8001dc6 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001db6:	2308      	movs	r3, #8
 8001db8:	18fb      	adds	r3, r7, r3
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28
 8001dc4:	e019      	b.n	8001dfa <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001dc6:	2308      	movs	r3, #8
 8001dc8:	18fb      	adds	r3, r7, r3
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	0a1b      	lsrs	r3, r3, #8
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b2da      	uxtb	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dda:	6a39      	ldr	r1, [r7, #32]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	0018      	movs	r0, r3
 8001de0:	f000 f881 	bl	8001ee6 <I2C_WaitOnTXISFlagUntilTimeout>
 8001de4:	1e03      	subs	r3, r0, #0
 8001de6:	d001      	beq.n	8001dec <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e014      	b.n	8001e16 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001dec:	2308      	movs	r3, #8
 8001dee:	18fb      	adds	r3, r7, r3
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b2da      	uxtb	r2, r3
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8001dfa:	6a3a      	ldr	r2, [r7, #32]
 8001dfc:	68f8      	ldr	r0, [r7, #12]
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e00:	9300      	str	r3, [sp, #0]
 8001e02:	0013      	movs	r3, r2
 8001e04:	2200      	movs	r2, #0
 8001e06:	2140      	movs	r1, #64	; 0x40
 8001e08:	f000 f82e 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001e0c:	1e03      	subs	r3, r0, #0
 8001e0e:	d001      	beq.n	8001e14 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e000      	b.n	8001e16 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8001e14:	2300      	movs	r3, #0
}
 8001e16:	0018      	movs	r0, r3
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	b004      	add	sp, #16
 8001e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	80002000 	.word	0x80002000

08001e24 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699b      	ldr	r3, [r3, #24]
 8001e32:	2202      	movs	r2, #2
 8001e34:	4013      	ands	r3, r2
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d103      	bne.n	8001e42 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	2201      	movs	r2, #1
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d007      	beq.n	8001e60 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	699a      	ldr	r2, [r3, #24]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2101      	movs	r1, #1
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	619a      	str	r2, [r3, #24]
  }
}
 8001e60:	46c0      	nop			; (mov r8, r8)
 8001e62:	46bd      	mov	sp, r7
 8001e64:	b002      	add	sp, #8
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b084      	sub	sp, #16
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	603b      	str	r3, [r7, #0]
 8001e74:	1dfb      	adds	r3, r7, #7
 8001e76:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e78:	e021      	b.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	d01e      	beq.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e80:	f7ff f980 	bl	8001184 <HAL_GetTick>
 8001e84:	0002      	movs	r2, r0
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d302      	bcc.n	8001e96 <I2C_WaitOnFlagUntilTimeout+0x2e>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d113      	bne.n	8001ebe <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	2220      	movs	r2, #32
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2241      	movs	r2, #65	; 0x41
 8001ea6:	2120      	movs	r1, #32
 8001ea8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2242      	movs	r2, #66	; 0x42
 8001eae:	2100      	movs	r1, #0
 8001eb0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e00f      	b.n	8001ede <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	68ba      	ldr	r2, [r7, #8]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	425a      	negs	r2, r3
 8001ece:	4153      	adcs	r3, r2
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	001a      	movs	r2, r3
 8001ed4:	1dfb      	adds	r3, r7, #7
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d0ce      	beq.n	8001e7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	0018      	movs	r0, r3
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	b004      	add	sp, #16
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ef2:	e02b      	b.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	0018      	movs	r0, r3
 8001efc:	f000 f86e 	bl	8001fdc <I2C_IsAcknowledgeFailed>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e029      	b.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f08:	68bb      	ldr	r3, [r7, #8]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	d01e      	beq.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0e:	f7ff f939 	bl	8001184 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	68ba      	ldr	r2, [r7, #8]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d302      	bcc.n	8001f24 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d113      	bne.n	8001f4c <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f28:	2220      	movs	r2, #32
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2241      	movs	r2, #65	; 0x41
 8001f34:	2120      	movs	r1, #32
 8001f36:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2242      	movs	r2, #66	; 0x42
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2240      	movs	r2, #64	; 0x40
 8001f44:	2100      	movs	r1, #0
 8001f46:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e007      	b.n	8001f5c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2202      	movs	r2, #2
 8001f54:	4013      	ands	r3, r2
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d1cc      	bne.n	8001ef4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001f5a:	2300      	movs	r3, #0
}
 8001f5c:	0018      	movs	r0, r3
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	b004      	add	sp, #16
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b084      	sub	sp, #16
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	60f8      	str	r0, [r7, #12]
 8001f6c:	60b9      	str	r1, [r7, #8]
 8001f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f70:	e028      	b.n	8001fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	0018      	movs	r0, r3
 8001f7a:	f000 f82f 	bl	8001fdc <I2C_IsAcknowledgeFailed>
 8001f7e:	1e03      	subs	r3, r0, #0
 8001f80:	d001      	beq.n	8001f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e026      	b.n	8001fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f86:	f7ff f8fd 	bl	8001184 <HAL_GetTick>
 8001f8a:	0002      	movs	r2, r0
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	68ba      	ldr	r2, [r7, #8]
 8001f92:	429a      	cmp	r2, r3
 8001f94:	d302      	bcc.n	8001f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001f96:	68bb      	ldr	r3, [r7, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d113      	bne.n	8001fc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	2220      	movs	r2, #32
 8001fa2:	431a      	orrs	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2241      	movs	r2, #65	; 0x41
 8001fac:	2120      	movs	r1, #32
 8001fae:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2242      	movs	r2, #66	; 0x42
 8001fb4:	2100      	movs	r1, #0
 8001fb6:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2240      	movs	r2, #64	; 0x40
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e007      	b.n	8001fd4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	4013      	ands	r3, r2
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d1cf      	bne.n	8001f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	0018      	movs	r0, r3
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	b004      	add	sp, #16
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	60f8      	str	r0, [r7, #12]
 8001fe4:	60b9      	str	r1, [r7, #8]
 8001fe6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	2210      	movs	r2, #16
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	2b10      	cmp	r3, #16
 8001ff4:	d164      	bne.n	80020c0 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	685a      	ldr	r2, [r3, #4]
 8001ffc:	2380      	movs	r3, #128	; 0x80
 8001ffe:	049b      	lsls	r3, r3, #18
 8002000:	401a      	ands	r2, r3
 8002002:	2380      	movs	r3, #128	; 0x80
 8002004:	049b      	lsls	r3, r3, #18
 8002006:	429a      	cmp	r2, r3
 8002008:	d02b      	beq.n	8002062 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	685a      	ldr	r2, [r3, #4]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2180      	movs	r1, #128	; 0x80
 8002016:	01c9      	lsls	r1, r1, #7
 8002018:	430a      	orrs	r2, r1
 800201a:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800201c:	e021      	b.n	8002062 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	3301      	adds	r3, #1
 8002022:	d01e      	beq.n	8002062 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002024:	f7ff f8ae 	bl	8001184 <HAL_GetTick>
 8002028:	0002      	movs	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68ba      	ldr	r2, [r7, #8]
 8002030:	429a      	cmp	r2, r3
 8002032:	d302      	bcc.n	800203a <I2C_IsAcknowledgeFailed+0x5e>
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d113      	bne.n	8002062 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	2220      	movs	r2, #32
 8002040:	431a      	orrs	r2, r3
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2241      	movs	r2, #65	; 0x41
 800204a:	2120      	movs	r1, #32
 800204c:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2242      	movs	r2, #66	; 0x42
 8002052:	2100      	movs	r1, #0
 8002054:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2240      	movs	r2, #64	; 0x40
 800205a:	2100      	movs	r1, #0
 800205c:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e02f      	b.n	80020c2 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	699b      	ldr	r3, [r3, #24]
 8002068:	2220      	movs	r2, #32
 800206a:	4013      	ands	r3, r2
 800206c:	2b20      	cmp	r3, #32
 800206e:	d1d6      	bne.n	800201e <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	2210      	movs	r2, #16
 8002076:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2220      	movs	r2, #32
 800207e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	0018      	movs	r0, r3
 8002084:	f7ff fece 	bl	8001e24 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	490e      	ldr	r1, [pc, #56]	; (80020cc <I2C_IsAcknowledgeFailed+0xf0>)
 8002094:	400a      	ands	r2, r1
 8002096:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	2204      	movs	r2, #4
 800209e:	431a      	orrs	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2241      	movs	r2, #65	; 0x41
 80020a8:	2120      	movs	r1, #32
 80020aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2242      	movs	r2, #66	; 0x42
 80020b0:	2100      	movs	r1, #0
 80020b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2240      	movs	r2, #64	; 0x40
 80020b8:	2100      	movs	r1, #0
 80020ba:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e000      	b.n	80020c2 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	0018      	movs	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	b004      	add	sp, #16
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	46c0      	nop			; (mov r8, r8)
 80020cc:	fe00e800 	.word	0xfe00e800

080020d0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80020d0:	b590      	push	{r4, r7, lr}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	0008      	movs	r0, r1
 80020da:	0011      	movs	r1, r2
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	240a      	movs	r4, #10
 80020e0:	193b      	adds	r3, r7, r4
 80020e2:	1c02      	adds	r2, r0, #0
 80020e4:	801a      	strh	r2, [r3, #0]
 80020e6:	2009      	movs	r0, #9
 80020e8:	183b      	adds	r3, r7, r0
 80020ea:	1c0a      	adds	r2, r1, #0
 80020ec:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	6a3a      	ldr	r2, [r7, #32]
 80020f6:	0d51      	lsrs	r1, r2, #21
 80020f8:	2280      	movs	r2, #128	; 0x80
 80020fa:	00d2      	lsls	r2, r2, #3
 80020fc:	400a      	ands	r2, r1
 80020fe:	490e      	ldr	r1, [pc, #56]	; (8002138 <I2C_TransferConfig+0x68>)
 8002100:	430a      	orrs	r2, r1
 8002102:	43d2      	mvns	r2, r2
 8002104:	401a      	ands	r2, r3
 8002106:	0011      	movs	r1, r2
 8002108:	193b      	adds	r3, r7, r4
 800210a:	881b      	ldrh	r3, [r3, #0]
 800210c:	059b      	lsls	r3, r3, #22
 800210e:	0d9a      	lsrs	r2, r3, #22
 8002110:	183b      	adds	r3, r7, r0
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	0418      	lsls	r0, r3, #16
 8002116:	23ff      	movs	r3, #255	; 0xff
 8002118:	041b      	lsls	r3, r3, #16
 800211a:	4003      	ands	r3, r0
 800211c:	431a      	orrs	r2, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	431a      	orrs	r2, r3
 8002122:	6a3b      	ldr	r3, [r7, #32]
 8002124:	431a      	orrs	r2, r3
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	46bd      	mov	sp, r7
 8002132:	b005      	add	sp, #20
 8002134:	bd90      	pop	{r4, r7, pc}
 8002136:	46c0      	nop			; (mov r8, r8)
 8002138:	03ff63ff 	.word	0x03ff63ff

0800213c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2241      	movs	r2, #65	; 0x41
 800214a:	5c9b      	ldrb	r3, [r3, r2]
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b20      	cmp	r3, #32
 8002150:	d138      	bne.n	80021c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2240      	movs	r2, #64	; 0x40
 8002156:	5c9b      	ldrb	r3, [r3, r2]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d101      	bne.n	8002160 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800215c:	2302      	movs	r3, #2
 800215e:	e032      	b.n	80021c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2240      	movs	r2, #64	; 0x40
 8002164:	2101      	movs	r1, #1
 8002166:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2241      	movs	r2, #65	; 0x41
 800216c:	2124      	movs	r1, #36	; 0x24
 800216e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2101      	movs	r1, #1
 800217c:	438a      	bics	r2, r1
 800217e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4911      	ldr	r1, [pc, #68]	; (80021d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800218c:	400a      	ands	r2, r1
 800218e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6819      	ldr	r1, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	430a      	orrs	r2, r1
 800219e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	2101      	movs	r1, #1
 80021ac:	430a      	orrs	r2, r1
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2241      	movs	r2, #65	; 0x41
 80021b4:	2120      	movs	r1, #32
 80021b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2240      	movs	r2, #64	; 0x40
 80021bc:	2100      	movs	r1, #0
 80021be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	0018      	movs	r0, r3
 80021c8:	46bd      	mov	sp, r7
 80021ca:	b002      	add	sp, #8
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	ffffefff 	.word	0xffffefff

080021d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b084      	sub	sp, #16
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	2241      	movs	r2, #65	; 0x41
 80021e2:	5c9b      	ldrb	r3, [r3, r2]
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b20      	cmp	r3, #32
 80021e8:	d139      	bne.n	800225e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2240      	movs	r2, #64	; 0x40
 80021ee:	5c9b      	ldrb	r3, [r3, r2]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d101      	bne.n	80021f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80021f4:	2302      	movs	r3, #2
 80021f6:	e033      	b.n	8002260 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	2101      	movs	r1, #1
 80021fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2241      	movs	r2, #65	; 0x41
 8002204:	2124      	movs	r1, #36	; 0x24
 8002206:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	681a      	ldr	r2, [r3, #0]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2101      	movs	r1, #1
 8002214:	438a      	bics	r2, r1
 8002216:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	4a11      	ldr	r2, [pc, #68]	; (8002268 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002224:	4013      	ands	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2101      	movs	r1, #1
 8002246:	430a      	orrs	r2, r1
 8002248:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2241      	movs	r2, #65	; 0x41
 800224e:	2120      	movs	r1, #32
 8002250:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2240      	movs	r2, #64	; 0x40
 8002256:	2100      	movs	r1, #0
 8002258:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	e000      	b.n	8002260 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800225e:	2302      	movs	r3, #2
  }
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bd80      	pop	{r7, pc}
 8002268:	fffff0ff 	.word	0xfffff0ff

0800226c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800226c:	b5b0      	push	{r4, r5, r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d102      	bne.n	8002280 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	f000 fb6c 	bl	8002958 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002280:	4bc8      	ldr	r3, [pc, #800]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	220c      	movs	r2, #12
 8002286:	4013      	ands	r3, r2
 8002288:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800228a:	4bc6      	ldr	r3, [pc, #792]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	2380      	movs	r3, #128	; 0x80
 8002290:	025b      	lsls	r3, r3, #9
 8002292:	4013      	ands	r3, r2
 8002294:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2201      	movs	r2, #1
 800229c:	4013      	ands	r3, r2
 800229e:	d100      	bne.n	80022a2 <HAL_RCC_OscConfig+0x36>
 80022a0:	e07d      	b.n	800239e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	2b08      	cmp	r3, #8
 80022a6:	d007      	beq.n	80022b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	2b0c      	cmp	r3, #12
 80022ac:	d112      	bne.n	80022d4 <HAL_RCC_OscConfig+0x68>
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	2380      	movs	r3, #128	; 0x80
 80022b2:	025b      	lsls	r3, r3, #9
 80022b4:	429a      	cmp	r2, r3
 80022b6:	d10d      	bne.n	80022d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	4bba      	ldr	r3, [pc, #744]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	2380      	movs	r3, #128	; 0x80
 80022be:	029b      	lsls	r3, r3, #10
 80022c0:	4013      	ands	r3, r2
 80022c2:	d100      	bne.n	80022c6 <HAL_RCC_OscConfig+0x5a>
 80022c4:	e06a      	b.n	800239c <HAL_RCC_OscConfig+0x130>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d166      	bne.n	800239c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	f000 fb42 	bl	8002958 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	2380      	movs	r3, #128	; 0x80
 80022da:	025b      	lsls	r3, r3, #9
 80022dc:	429a      	cmp	r2, r3
 80022de:	d107      	bne.n	80022f0 <HAL_RCC_OscConfig+0x84>
 80022e0:	4bb0      	ldr	r3, [pc, #704]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4baf      	ldr	r3, [pc, #700]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80022e6:	2180      	movs	r1, #128	; 0x80
 80022e8:	0249      	lsls	r1, r1, #9
 80022ea:	430a      	orrs	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e027      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	23a0      	movs	r3, #160	; 0xa0
 80022f6:	02db      	lsls	r3, r3, #11
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d10e      	bne.n	800231a <HAL_RCC_OscConfig+0xae>
 80022fc:	4ba9      	ldr	r3, [pc, #676]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	4ba8      	ldr	r3, [pc, #672]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002302:	2180      	movs	r1, #128	; 0x80
 8002304:	02c9      	lsls	r1, r1, #11
 8002306:	430a      	orrs	r2, r1
 8002308:	601a      	str	r2, [r3, #0]
 800230a:	4ba6      	ldr	r3, [pc, #664]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	4ba5      	ldr	r3, [pc, #660]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002310:	2180      	movs	r1, #128	; 0x80
 8002312:	0249      	lsls	r1, r1, #9
 8002314:	430a      	orrs	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
 8002318:	e012      	b.n	8002340 <HAL_RCC_OscConfig+0xd4>
 800231a:	4ba2      	ldr	r3, [pc, #648]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	4ba1      	ldr	r3, [pc, #644]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002320:	49a1      	ldr	r1, [pc, #644]	; (80025a8 <HAL_RCC_OscConfig+0x33c>)
 8002322:	400a      	ands	r2, r1
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	4b9f      	ldr	r3, [pc, #636]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	025b      	lsls	r3, r3, #9
 800232e:	4013      	ands	r3, r2
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	4b9b      	ldr	r3, [pc, #620]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	4b9a      	ldr	r3, [pc, #616]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800233a:	499c      	ldr	r1, [pc, #624]	; (80025ac <HAL_RCC_OscConfig+0x340>)
 800233c:	400a      	ands	r2, r1
 800233e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d014      	beq.n	8002372 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002348:	f7fe ff1c 	bl	8001184 <HAL_GetTick>
 800234c:	0003      	movs	r3, r0
 800234e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002350:	e008      	b.n	8002364 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002352:	f7fe ff17 	bl	8001184 <HAL_GetTick>
 8002356:	0002      	movs	r2, r0
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b64      	cmp	r3, #100	; 0x64
 800235e:	d901      	bls.n	8002364 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e2f9      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002364:	4b8f      	ldr	r3, [pc, #572]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	2380      	movs	r3, #128	; 0x80
 800236a:	029b      	lsls	r3, r3, #10
 800236c:	4013      	ands	r3, r2
 800236e:	d0f0      	beq.n	8002352 <HAL_RCC_OscConfig+0xe6>
 8002370:	e015      	b.n	800239e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002372:	f7fe ff07 	bl	8001184 <HAL_GetTick>
 8002376:	0003      	movs	r3, r0
 8002378:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800237c:	f7fe ff02 	bl	8001184 <HAL_GetTick>
 8002380:	0002      	movs	r2, r0
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	; 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e2e4      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800238e:	4b85      	ldr	r3, [pc, #532]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002390:	681a      	ldr	r2, [r3, #0]
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	029b      	lsls	r3, r3, #10
 8002396:	4013      	ands	r3, r2
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x110>
 800239a:	e000      	b.n	800239e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2202      	movs	r2, #2
 80023a4:	4013      	ands	r3, r2
 80023a6:	d100      	bne.n	80023aa <HAL_RCC_OscConfig+0x13e>
 80023a8:	e099      	b.n	80024de <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	2220      	movs	r2, #32
 80023b4:	4013      	ands	r3, r2
 80023b6:	d009      	beq.n	80023cc <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 80023b8:	4b7a      	ldr	r3, [pc, #488]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b79      	ldr	r3, [pc, #484]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80023be:	2120      	movs	r1, #32
 80023c0:	430a      	orrs	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	2220      	movs	r2, #32
 80023c8:	4393      	bics	r3, r2
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b04      	cmp	r3, #4
 80023d0:	d005      	beq.n	80023de <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	2b0c      	cmp	r3, #12
 80023d6:	d13e      	bne.n	8002456 <HAL_RCC_OscConfig+0x1ea>
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d13b      	bne.n	8002456 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80023de:	4b71      	ldr	r3, [pc, #452]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2204      	movs	r2, #4
 80023e4:	4013      	ands	r3, r2
 80023e6:	d004      	beq.n	80023f2 <HAL_RCC_OscConfig+0x186>
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d101      	bne.n	80023f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e2b2      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023f2:	4b6c      	ldr	r3, [pc, #432]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	4a6e      	ldr	r2, [pc, #440]	; (80025b0 <HAL_RCC_OscConfig+0x344>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	0019      	movs	r1, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	691b      	ldr	r3, [r3, #16]
 8002400:	021a      	lsls	r2, r3, #8
 8002402:	4b68      	ldr	r3, [pc, #416]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002404:	430a      	orrs	r2, r1
 8002406:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2209      	movs	r2, #9
 800240e:	4393      	bics	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	4b64      	ldr	r3, [pc, #400]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002416:	430a      	orrs	r2, r1
 8002418:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800241a:	f000 fbeb 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 800241e:	0001      	movs	r1, r0
 8002420:	4b60      	ldr	r3, [pc, #384]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	091b      	lsrs	r3, r3, #4
 8002426:	220f      	movs	r2, #15
 8002428:	4013      	ands	r3, r2
 800242a:	4a62      	ldr	r2, [pc, #392]	; (80025b4 <HAL_RCC_OscConfig+0x348>)
 800242c:	5cd3      	ldrb	r3, [r2, r3]
 800242e:	000a      	movs	r2, r1
 8002430:	40da      	lsrs	r2, r3
 8002432:	4b61      	ldr	r3, [pc, #388]	; (80025b8 <HAL_RCC_OscConfig+0x34c>)
 8002434:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8002436:	4b61      	ldr	r3, [pc, #388]	; (80025bc <HAL_RCC_OscConfig+0x350>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2513      	movs	r5, #19
 800243c:	197c      	adds	r4, r7, r5
 800243e:	0018      	movs	r0, r3
 8002440:	f7fe fe5a 	bl	80010f8 <HAL_InitTick>
 8002444:	0003      	movs	r3, r0
 8002446:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8002448:	197b      	adds	r3, r7, r5
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d046      	beq.n	80024de <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8002450:	197b      	adds	r3, r7, r5
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	e280      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8002456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002458:	2b00      	cmp	r3, #0
 800245a:	d027      	beq.n	80024ac <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800245c:	4b51      	ldr	r3, [pc, #324]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	2209      	movs	r2, #9
 8002462:	4393      	bics	r3, r2
 8002464:	0019      	movs	r1, r3
 8002466:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800246a:	430a      	orrs	r2, r1
 800246c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800246e:	f7fe fe89 	bl	8001184 <HAL_GetTick>
 8002472:	0003      	movs	r3, r0
 8002474:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002478:	f7fe fe84 	bl	8001184 <HAL_GetTick>
 800247c:	0002      	movs	r2, r0
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e266      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2204      	movs	r2, #4
 8002490:	4013      	ands	r3, r2
 8002492:	d0f1      	beq.n	8002478 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002494:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	4a45      	ldr	r2, [pc, #276]	; (80025b0 <HAL_RCC_OscConfig+0x344>)
 800249a:	4013      	ands	r3, r2
 800249c:	0019      	movs	r1, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	021a      	lsls	r2, r3, #8
 80024a4:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80024a6:	430a      	orrs	r2, r1
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	e018      	b.n	80024de <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024ac:	4b3d      	ldr	r3, [pc, #244]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b3c      	ldr	r3, [pc, #240]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80024b2:	2101      	movs	r1, #1
 80024b4:	438a      	bics	r2, r1
 80024b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b8:	f7fe fe64 	bl	8001184 <HAL_GetTick>
 80024bc:	0003      	movs	r3, r0
 80024be:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024c0:	e008      	b.n	80024d4 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024c2:	f7fe fe5f 	bl	8001184 <HAL_GetTick>
 80024c6:	0002      	movs	r2, r0
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	1ad3      	subs	r3, r2, r3
 80024cc:	2b02      	cmp	r3, #2
 80024ce:	d901      	bls.n	80024d4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80024d0:	2303      	movs	r3, #3
 80024d2:	e241      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024d4:	4b33      	ldr	r3, [pc, #204]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2204      	movs	r2, #4
 80024da:	4013      	ands	r3, r2
 80024dc:	d1f1      	bne.n	80024c2 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	2210      	movs	r2, #16
 80024e4:	4013      	ands	r3, r2
 80024e6:	d100      	bne.n	80024ea <HAL_RCC_OscConfig+0x27e>
 80024e8:	e0a1      	b.n	800262e <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d140      	bne.n	8002572 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024f0:	4b2c      	ldr	r3, [pc, #176]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	4013      	ands	r3, r2
 80024fa:	d005      	beq.n	8002508 <HAL_RCC_OscConfig+0x29c>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d101      	bne.n	8002508 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e227      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002508:	4b26      	ldr	r3, [pc, #152]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	4a2c      	ldr	r2, [pc, #176]	; (80025c0 <HAL_RCC_OscConfig+0x354>)
 800250e:	4013      	ands	r3, r2
 8002510:	0019      	movs	r1, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1a      	ldr	r2, [r3, #32]
 8002516:	4b23      	ldr	r3, [pc, #140]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002518:	430a      	orrs	r2, r1
 800251a:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800251c:	4b21      	ldr	r3, [pc, #132]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	021b      	lsls	r3, r3, #8
 8002522:	0a19      	lsrs	r1, r3, #8
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	061a      	lsls	r2, r3, #24
 800252a:	4b1e      	ldr	r3, [pc, #120]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800252c:	430a      	orrs	r2, r1
 800252e:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	0b5b      	lsrs	r3, r3, #13
 8002536:	3301      	adds	r3, #1
 8002538:	2280      	movs	r2, #128	; 0x80
 800253a:	0212      	lsls	r2, r2, #8
 800253c:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800253e:	4b19      	ldr	r3, [pc, #100]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	091b      	lsrs	r3, r3, #4
 8002544:	210f      	movs	r1, #15
 8002546:	400b      	ands	r3, r1
 8002548:	491a      	ldr	r1, [pc, #104]	; (80025b4 <HAL_RCC_OscConfig+0x348>)
 800254a:	5ccb      	ldrb	r3, [r1, r3]
 800254c:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <HAL_RCC_OscConfig+0x34c>)
 8002550:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8002552:	4b1a      	ldr	r3, [pc, #104]	; (80025bc <HAL_RCC_OscConfig+0x350>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2513      	movs	r5, #19
 8002558:	197c      	adds	r4, r7, r5
 800255a:	0018      	movs	r0, r3
 800255c:	f7fe fdcc 	bl	80010f8 <HAL_InitTick>
 8002560:	0003      	movs	r3, r0
 8002562:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8002564:	197b      	adds	r3, r7, r5
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d060      	beq.n	800262e <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 800256c:	197b      	adds	r3, r7, r5
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	e1f2      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	699b      	ldr	r3, [r3, #24]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d03f      	beq.n	80025fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800257a:	4b0a      	ldr	r3, [pc, #40]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	4b09      	ldr	r3, [pc, #36]	; (80025a4 <HAL_RCC_OscConfig+0x338>)
 8002580:	2180      	movs	r1, #128	; 0x80
 8002582:	0049      	lsls	r1, r1, #1
 8002584:	430a      	orrs	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002588:	f7fe fdfc 	bl	8001184 <HAL_GetTick>
 800258c:	0003      	movs	r3, r0
 800258e:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002590:	e018      	b.n	80025c4 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002592:	f7fe fdf7 	bl	8001184 <HAL_GetTick>
 8002596:	0002      	movs	r2, r0
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	1ad3      	subs	r3, r2, r3
 800259c:	2b02      	cmp	r3, #2
 800259e:	d911      	bls.n	80025c4 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 80025a0:	2303      	movs	r3, #3
 80025a2:	e1d9      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
 80025a4:	40021000 	.word	0x40021000
 80025a8:	fffeffff 	.word	0xfffeffff
 80025ac:	fffbffff 	.word	0xfffbffff
 80025b0:	ffffe0ff 	.word	0xffffe0ff
 80025b4:	08004aa0 	.word	0x08004aa0
 80025b8:	20000000 	.word	0x20000000
 80025bc:	20000004 	.word	0x20000004
 80025c0:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80025c4:	4bc9      	ldr	r3, [pc, #804]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80025c6:	681a      	ldr	r2, [r3, #0]
 80025c8:	2380      	movs	r3, #128	; 0x80
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4013      	ands	r3, r2
 80025ce:	d0e0      	beq.n	8002592 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d0:	4bc6      	ldr	r3, [pc, #792]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4ac6      	ldr	r2, [pc, #792]	; (80028f0 <HAL_RCC_OscConfig+0x684>)
 80025d6:	4013      	ands	r3, r2
 80025d8:	0019      	movs	r1, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1a      	ldr	r2, [r3, #32]
 80025de:	4bc3      	ldr	r3, [pc, #780]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80025e0:	430a      	orrs	r2, r1
 80025e2:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025e4:	4bc1      	ldr	r3, [pc, #772]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	021b      	lsls	r3, r3, #8
 80025ea:	0a19      	lsrs	r1, r3, #8
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	69db      	ldr	r3, [r3, #28]
 80025f0:	061a      	lsls	r2, r3, #24
 80025f2:	4bbe      	ldr	r3, [pc, #760]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80025f4:	430a      	orrs	r2, r1
 80025f6:	605a      	str	r2, [r3, #4]
 80025f8:	e019      	b.n	800262e <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025fa:	4bbc      	ldr	r3, [pc, #752]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	4bbb      	ldr	r3, [pc, #748]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002600:	49bc      	ldr	r1, [pc, #752]	; (80028f4 <HAL_RCC_OscConfig+0x688>)
 8002602:	400a      	ands	r2, r1
 8002604:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002606:	f7fe fdbd 	bl	8001184 <HAL_GetTick>
 800260a:	0003      	movs	r3, r0
 800260c:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002610:	f7fe fdb8 	bl	8001184 <HAL_GetTick>
 8002614:	0002      	movs	r2, r0
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e19a      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002622:	4bb2      	ldr	r3, [pc, #712]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	2380      	movs	r3, #128	; 0x80
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	4013      	ands	r3, r2
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2208      	movs	r2, #8
 8002634:	4013      	ands	r3, r2
 8002636:	d036      	beq.n	80026a6 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d019      	beq.n	8002674 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002640:	4baa      	ldr	r3, [pc, #680]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002642:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002644:	4ba9      	ldr	r3, [pc, #676]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002646:	2101      	movs	r1, #1
 8002648:	430a      	orrs	r2, r1
 800264a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264c:	f7fe fd9a 	bl	8001184 <HAL_GetTick>
 8002650:	0003      	movs	r3, r0
 8002652:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002654:	e008      	b.n	8002668 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002656:	f7fe fd95 	bl	8001184 <HAL_GetTick>
 800265a:	0002      	movs	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	2b02      	cmp	r3, #2
 8002662:	d901      	bls.n	8002668 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002664:	2303      	movs	r3, #3
 8002666:	e177      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002668:	4ba0      	ldr	r3, [pc, #640]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800266a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266c:	2202      	movs	r2, #2
 800266e:	4013      	ands	r3, r2
 8002670:	d0f1      	beq.n	8002656 <HAL_RCC_OscConfig+0x3ea>
 8002672:	e018      	b.n	80026a6 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002674:	4b9d      	ldr	r3, [pc, #628]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002676:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002678:	4b9c      	ldr	r3, [pc, #624]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800267a:	2101      	movs	r1, #1
 800267c:	438a      	bics	r2, r1
 800267e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002680:	f7fe fd80 	bl	8001184 <HAL_GetTick>
 8002684:	0003      	movs	r3, r0
 8002686:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002688:	e008      	b.n	800269c <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800268a:	f7fe fd7b 	bl	8001184 <HAL_GetTick>
 800268e:	0002      	movs	r2, r0
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d901      	bls.n	800269c <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e15d      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800269c:	4b93      	ldr	r3, [pc, #588]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800269e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a0:	2202      	movs	r2, #2
 80026a2:	4013      	ands	r3, r2
 80026a4:	d1f1      	bne.n	800268a <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2204      	movs	r2, #4
 80026ac:	4013      	ands	r3, r2
 80026ae:	d100      	bne.n	80026b2 <HAL_RCC_OscConfig+0x446>
 80026b0:	e0ae      	b.n	8002810 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026b2:	2023      	movs	r0, #35	; 0x23
 80026b4:	183b      	adds	r3, r7, r0
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ba:	4b8c      	ldr	r3, [pc, #560]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80026bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026be:	2380      	movs	r3, #128	; 0x80
 80026c0:	055b      	lsls	r3, r3, #21
 80026c2:	4013      	ands	r3, r2
 80026c4:	d109      	bne.n	80026da <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026c6:	4b89      	ldr	r3, [pc, #548]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80026c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026ca:	4b88      	ldr	r3, [pc, #544]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80026cc:	2180      	movs	r1, #128	; 0x80
 80026ce:	0549      	lsls	r1, r1, #21
 80026d0:	430a      	orrs	r2, r1
 80026d2:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80026d4:	183b      	adds	r3, r7, r0
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026da:	4b87      	ldr	r3, [pc, #540]	; (80028f8 <HAL_RCC_OscConfig+0x68c>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	2380      	movs	r3, #128	; 0x80
 80026e0:	005b      	lsls	r3, r3, #1
 80026e2:	4013      	ands	r3, r2
 80026e4:	d11a      	bne.n	800271c <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026e6:	4b84      	ldr	r3, [pc, #528]	; (80028f8 <HAL_RCC_OscConfig+0x68c>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b83      	ldr	r3, [pc, #524]	; (80028f8 <HAL_RCC_OscConfig+0x68c>)
 80026ec:	2180      	movs	r1, #128	; 0x80
 80026ee:	0049      	lsls	r1, r1, #1
 80026f0:	430a      	orrs	r2, r1
 80026f2:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026f4:	f7fe fd46 	bl	8001184 <HAL_GetTick>
 80026f8:	0003      	movs	r3, r0
 80026fa:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fc:	e008      	b.n	8002710 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026fe:	f7fe fd41 	bl	8001184 <HAL_GetTick>
 8002702:	0002      	movs	r2, r0
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	2b64      	cmp	r3, #100	; 0x64
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e123      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	4b79      	ldr	r3, [pc, #484]	; (80028f8 <HAL_RCC_OscConfig+0x68c>)
 8002712:	681a      	ldr	r2, [r3, #0]
 8002714:	2380      	movs	r3, #128	; 0x80
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	4013      	ands	r3, r2
 800271a:	d0f0      	beq.n	80026fe <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	2380      	movs	r3, #128	; 0x80
 8002722:	005b      	lsls	r3, r3, #1
 8002724:	429a      	cmp	r2, r3
 8002726:	d107      	bne.n	8002738 <HAL_RCC_OscConfig+0x4cc>
 8002728:	4b70      	ldr	r3, [pc, #448]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800272a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800272c:	4b6f      	ldr	r3, [pc, #444]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800272e:	2180      	movs	r1, #128	; 0x80
 8002730:	0049      	lsls	r1, r1, #1
 8002732:	430a      	orrs	r2, r1
 8002734:	651a      	str	r2, [r3, #80]	; 0x50
 8002736:	e031      	b.n	800279c <HAL_RCC_OscConfig+0x530>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d10c      	bne.n	800275a <HAL_RCC_OscConfig+0x4ee>
 8002740:	4b6a      	ldr	r3, [pc, #424]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002742:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002744:	4b69      	ldr	r3, [pc, #420]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002746:	496b      	ldr	r1, [pc, #428]	; (80028f4 <HAL_RCC_OscConfig+0x688>)
 8002748:	400a      	ands	r2, r1
 800274a:	651a      	str	r2, [r3, #80]	; 0x50
 800274c:	4b67      	ldr	r3, [pc, #412]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800274e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002750:	4b66      	ldr	r3, [pc, #408]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002752:	496a      	ldr	r1, [pc, #424]	; (80028fc <HAL_RCC_OscConfig+0x690>)
 8002754:	400a      	ands	r2, r1
 8002756:	651a      	str	r2, [r3, #80]	; 0x50
 8002758:	e020      	b.n	800279c <HAL_RCC_OscConfig+0x530>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	689a      	ldr	r2, [r3, #8]
 800275e:	23a0      	movs	r3, #160	; 0xa0
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	429a      	cmp	r2, r3
 8002764:	d10e      	bne.n	8002784 <HAL_RCC_OscConfig+0x518>
 8002766:	4b61      	ldr	r3, [pc, #388]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002768:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800276a:	4b60      	ldr	r3, [pc, #384]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800276c:	2180      	movs	r1, #128	; 0x80
 800276e:	00c9      	lsls	r1, r1, #3
 8002770:	430a      	orrs	r2, r1
 8002772:	651a      	str	r2, [r3, #80]	; 0x50
 8002774:	4b5d      	ldr	r3, [pc, #372]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002778:	4b5c      	ldr	r3, [pc, #368]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800277a:	2180      	movs	r1, #128	; 0x80
 800277c:	0049      	lsls	r1, r1, #1
 800277e:	430a      	orrs	r2, r1
 8002780:	651a      	str	r2, [r3, #80]	; 0x50
 8002782:	e00b      	b.n	800279c <HAL_RCC_OscConfig+0x530>
 8002784:	4b59      	ldr	r3, [pc, #356]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002786:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002788:	4b58      	ldr	r3, [pc, #352]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800278a:	495a      	ldr	r1, [pc, #360]	; (80028f4 <HAL_RCC_OscConfig+0x688>)
 800278c:	400a      	ands	r2, r1
 800278e:	651a      	str	r2, [r3, #80]	; 0x50
 8002790:	4b56      	ldr	r3, [pc, #344]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002792:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002794:	4b55      	ldr	r3, [pc, #340]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002796:	4959      	ldr	r1, [pc, #356]	; (80028fc <HAL_RCC_OscConfig+0x690>)
 8002798:	400a      	ands	r2, r1
 800279a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d015      	beq.n	80027d0 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027a4:	f7fe fcee 	bl	8001184 <HAL_GetTick>
 80027a8:	0003      	movs	r3, r0
 80027aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027ac:	e009      	b.n	80027c2 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027ae:	f7fe fce9 	bl	8001184 <HAL_GetTick>
 80027b2:	0002      	movs	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	4a51      	ldr	r2, [pc, #324]	; (8002900 <HAL_RCC_OscConfig+0x694>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e0ca      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027c2:	4b4a      	ldr	r3, [pc, #296]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80027c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4013      	ands	r3, r2
 80027cc:	d0ef      	beq.n	80027ae <HAL_RCC_OscConfig+0x542>
 80027ce:	e014      	b.n	80027fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027d0:	f7fe fcd8 	bl	8001184 <HAL_GetTick>
 80027d4:	0003      	movs	r3, r0
 80027d6:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027d8:	e009      	b.n	80027ee <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027da:	f7fe fcd3 	bl	8001184 <HAL_GetTick>
 80027de:	0002      	movs	r2, r0
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	4a46      	ldr	r2, [pc, #280]	; (8002900 <HAL_RCC_OscConfig+0x694>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e0b4      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80027ee:	4b3f      	ldr	r3, [pc, #252]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80027f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027f2:	2380      	movs	r3, #128	; 0x80
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4013      	ands	r3, r2
 80027f8:	d1ef      	bne.n	80027da <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027fa:	2323      	movs	r3, #35	; 0x23
 80027fc:	18fb      	adds	r3, r7, r3
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d105      	bne.n	8002810 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002804:	4b39      	ldr	r3, [pc, #228]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002806:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002808:	4b38      	ldr	r3, [pc, #224]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800280a:	493e      	ldr	r1, [pc, #248]	; (8002904 <HAL_RCC_OscConfig+0x698>)
 800280c:	400a      	ands	r2, r1
 800280e:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	2b00      	cmp	r3, #0
 8002816:	d100      	bne.n	800281a <HAL_RCC_OscConfig+0x5ae>
 8002818:	e09d      	b.n	8002956 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	2b0c      	cmp	r3, #12
 800281e:	d100      	bne.n	8002822 <HAL_RCC_OscConfig+0x5b6>
 8002820:	e076      	b.n	8002910 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002826:	2b02      	cmp	r3, #2
 8002828:	d145      	bne.n	80028b6 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282a:	4b30      	ldr	r3, [pc, #192]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	4b2f      	ldr	r3, [pc, #188]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002830:	4935      	ldr	r1, [pc, #212]	; (8002908 <HAL_RCC_OscConfig+0x69c>)
 8002832:	400a      	ands	r2, r1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002836:	f7fe fca5 	bl	8001184 <HAL_GetTick>
 800283a:	0003      	movs	r3, r0
 800283c:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fca0 	bl	8001184 <HAL_GetTick>
 8002844:	0002      	movs	r2, r0
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e082      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002852:	4b26      	ldr	r3, [pc, #152]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	2380      	movs	r3, #128	; 0x80
 8002858:	049b      	lsls	r3, r3, #18
 800285a:	4013      	ands	r3, r2
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800285e:	4b23      	ldr	r3, [pc, #140]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	4a2a      	ldr	r2, [pc, #168]	; (800290c <HAL_RCC_OscConfig+0x6a0>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	431a      	orrs	r2, r3
 8002878:	4b1c      	ldr	r3, [pc, #112]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 800287a:	430a      	orrs	r2, r1
 800287c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287e:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	4b1a      	ldr	r3, [pc, #104]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 8002884:	2180      	movs	r1, #128	; 0x80
 8002886:	0449      	lsls	r1, r1, #17
 8002888:	430a      	orrs	r2, r1
 800288a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800288c:	f7fe fc7a 	bl	8001184 <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002894:	e008      	b.n	80028a8 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002896:	f7fe fc75 	bl	8001184 <HAL_GetTick>
 800289a:	0002      	movs	r2, r0
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	1ad3      	subs	r3, r2, r3
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d901      	bls.n	80028a8 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 80028a4:	2303      	movs	r3, #3
 80028a6:	e057      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	2380      	movs	r3, #128	; 0x80
 80028ae:	049b      	lsls	r3, r3, #18
 80028b0:	4013      	ands	r3, r2
 80028b2:	d0f0      	beq.n	8002896 <HAL_RCC_OscConfig+0x62a>
 80028b4:	e04f      	b.n	8002956 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028b6:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80028bc:	4912      	ldr	r1, [pc, #72]	; (8002908 <HAL_RCC_OscConfig+0x69c>)
 80028be:	400a      	ands	r2, r1
 80028c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028c2:	f7fe fc5f 	bl	8001184 <HAL_GetTick>
 80028c6:	0003      	movs	r3, r0
 80028c8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028cc:	f7fe fc5a 	bl	8001184 <HAL_GetTick>
 80028d0:	0002      	movs	r2, r0
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e03c      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80028de:	4b03      	ldr	r3, [pc, #12]	; (80028ec <HAL_RCC_OscConfig+0x680>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	2380      	movs	r3, #128	; 0x80
 80028e4:	049b      	lsls	r3, r3, #18
 80028e6:	4013      	ands	r3, r2
 80028e8:	d1f0      	bne.n	80028cc <HAL_RCC_OscConfig+0x660>
 80028ea:	e034      	b.n	8002956 <HAL_RCC_OscConfig+0x6ea>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	ffff1fff 	.word	0xffff1fff
 80028f4:	fffffeff 	.word	0xfffffeff
 80028f8:	40007000 	.word	0x40007000
 80028fc:	fffffbff 	.word	0xfffffbff
 8002900:	00001388 	.word	0x00001388
 8002904:	efffffff 	.word	0xefffffff
 8002908:	feffffff 	.word	0xfeffffff
 800290c:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e01d      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800291c:	4b10      	ldr	r3, [pc, #64]	; (8002960 <HAL_RCC_OscConfig+0x6f4>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	2380      	movs	r3, #128	; 0x80
 8002926:	025b      	lsls	r3, r3, #9
 8002928:	401a      	ands	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800292e:	429a      	cmp	r2, r3
 8002930:	d10f      	bne.n	8002952 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	23f0      	movs	r3, #240	; 0xf0
 8002936:	039b      	lsls	r3, r3, #14
 8002938:	401a      	ands	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d107      	bne.n	8002952 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	23c0      	movs	r3, #192	; 0xc0
 8002946:	041b      	lsls	r3, r3, #16
 8002948:	401a      	ands	r2, r3
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800294e:	429a      	cmp	r2, r3
 8002950:	d001      	beq.n	8002956 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e000      	b.n	8002958 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	0018      	movs	r0, r3
 800295a:	46bd      	mov	sp, r7
 800295c:	b00a      	add	sp, #40	; 0x28
 800295e:	bdb0      	pop	{r4, r5, r7, pc}
 8002960:	40021000 	.word	0x40021000

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b5b0      	push	{r4, r5, r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e128      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b96      	ldr	r3, [pc, #600]	; (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2201      	movs	r2, #1
 800297e:	4013      	ands	r3, r2
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d91e      	bls.n	80029c4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b93      	ldr	r3, [pc, #588]	; (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	4393      	bics	r3, r2
 800298e:	0019      	movs	r1, r3
 8002990:	4b90      	ldr	r3, [pc, #576]	; (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	430a      	orrs	r2, r1
 8002996:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002998:	f7fe fbf4 	bl	8001184 <HAL_GetTick>
 800299c:	0003      	movs	r3, r0
 800299e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a0:	e009      	b.n	80029b6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029a2:	f7fe fbef 	bl	8001184 <HAL_GetTick>
 80029a6:	0002      	movs	r2, r0
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	4a8a      	ldr	r2, [pc, #552]	; (8002bd8 <HAL_RCC_ClockConfig+0x274>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d901      	bls.n	80029b6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80029b2:	2303      	movs	r3, #3
 80029b4:	e109      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029b6:	4b87      	ldr	r3, [pc, #540]	; (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2201      	movs	r2, #1
 80029bc:	4013      	ands	r3, r2
 80029be:	683a      	ldr	r2, [r7, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d1ee      	bne.n	80029a2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2202      	movs	r2, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	d009      	beq.n	80029e2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ce:	4b83      	ldr	r3, [pc, #524]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	22f0      	movs	r2, #240	; 0xf0
 80029d4:	4393      	bics	r3, r2
 80029d6:	0019      	movs	r1, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689a      	ldr	r2, [r3, #8]
 80029dc:	4b7f      	ldr	r3, [pc, #508]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 80029de:	430a      	orrs	r2, r1
 80029e0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2201      	movs	r2, #1
 80029e8:	4013      	ands	r3, r2
 80029ea:	d100      	bne.n	80029ee <HAL_RCC_ClockConfig+0x8a>
 80029ec:	e089      	b.n	8002b02 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d107      	bne.n	8002a06 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80029f6:	4b79      	ldr	r3, [pc, #484]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	029b      	lsls	r3, r3, #10
 80029fe:	4013      	ands	r3, r2
 8002a00:	d120      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e0e1      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	2b03      	cmp	r3, #3
 8002a0c:	d107      	bne.n	8002a1e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a0e:	4b73      	ldr	r3, [pc, #460]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	2380      	movs	r3, #128	; 0x80
 8002a14:	049b      	lsls	r3, r3, #18
 8002a16:	4013      	ands	r3, r2
 8002a18:	d114      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e0d5      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d106      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a26:	4b6d      	ldr	r3, [pc, #436]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2204      	movs	r2, #4
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0ca      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a34:	4b69      	ldr	r3, [pc, #420]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	2380      	movs	r3, #128	; 0x80
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0c2      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a44:	4b65      	ldr	r3, [pc, #404]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	4393      	bics	r3, r2
 8002a4c:	0019      	movs	r1, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4b62      	ldr	r3, [pc, #392]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002a54:	430a      	orrs	r2, r1
 8002a56:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fb94 	bl	8001184 <HAL_GetTick>
 8002a5c:	0003      	movs	r3, r0
 8002a5e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d111      	bne.n	8002a8c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a68:	e009      	b.n	8002a7e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a6a:	f7fe fb8b 	bl	8001184 <HAL_GetTick>
 8002a6e:	0002      	movs	r2, r0
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	4a58      	ldr	r2, [pc, #352]	; (8002bd8 <HAL_RCC_ClockConfig+0x274>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d901      	bls.n	8002a7e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	e0a5      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a7e:	4b57      	ldr	r3, [pc, #348]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	220c      	movs	r2, #12
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b08      	cmp	r3, #8
 8002a88:	d1ef      	bne.n	8002a6a <HAL_RCC_ClockConfig+0x106>
 8002a8a:	e03a      	b.n	8002b02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	2b03      	cmp	r3, #3
 8002a92:	d111      	bne.n	8002ab8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a94:	e009      	b.n	8002aaa <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a96:	f7fe fb75 	bl	8001184 <HAL_GetTick>
 8002a9a:	0002      	movs	r2, r0
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	4a4d      	ldr	r2, [pc, #308]	; (8002bd8 <HAL_RCC_ClockConfig+0x274>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e08f      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002aaa:	4b4c      	ldr	r3, [pc, #304]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	220c      	movs	r2, #12
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b0c      	cmp	r3, #12
 8002ab4:	d1ef      	bne.n	8002a96 <HAL_RCC_ClockConfig+0x132>
 8002ab6:	e024      	b.n	8002b02 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d11b      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ac0:	e009      	b.n	8002ad6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ac2:	f7fe fb5f 	bl	8001184 <HAL_GetTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	4a42      	ldr	r2, [pc, #264]	; (8002bd8 <HAL_RCC_ClockConfig+0x274>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d901      	bls.n	8002ad6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	e079      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002ad8:	68db      	ldr	r3, [r3, #12]
 8002ada:	220c      	movs	r2, #12
 8002adc:	4013      	ands	r3, r2
 8002ade:	2b04      	cmp	r3, #4
 8002ae0:	d1ef      	bne.n	8002ac2 <HAL_RCC_ClockConfig+0x15e>
 8002ae2:	e00e      	b.n	8002b02 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae4:	f7fe fb4e 	bl	8001184 <HAL_GetTick>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	1ad3      	subs	r3, r2, r3
 8002aee:	4a3a      	ldr	r2, [pc, #232]	; (8002bd8 <HAL_RCC_ClockConfig+0x274>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d901      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002af4:	2303      	movs	r3, #3
 8002af6:	e068      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002af8:	4b38      	ldr	r3, [pc, #224]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	220c      	movs	r2, #12
 8002afe:	4013      	ands	r3, r2
 8002b00:	d1f0      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b02:	4b34      	ldr	r3, [pc, #208]	; (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	2201      	movs	r2, #1
 8002b08:	4013      	ands	r3, r2
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d21e      	bcs.n	8002b4e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b10:	4b30      	ldr	r3, [pc, #192]	; (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2201      	movs	r2, #1
 8002b16:	4393      	bics	r3, r2
 8002b18:	0019      	movs	r1, r3
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 8002b1c:	683a      	ldr	r2, [r7, #0]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b22:	f7fe fb2f 	bl	8001184 <HAL_GetTick>
 8002b26:	0003      	movs	r3, r0
 8002b28:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2a:	e009      	b.n	8002b40 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2c:	f7fe fb2a 	bl	8001184 <HAL_GetTick>
 8002b30:	0002      	movs	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	4a28      	ldr	r2, [pc, #160]	; (8002bd8 <HAL_RCC_ClockConfig+0x274>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d901      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e044      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b40:	4b24      	ldr	r3, [pc, #144]	; (8002bd4 <HAL_RCC_ClockConfig+0x270>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	2201      	movs	r2, #1
 8002b46:	4013      	ands	r3, r2
 8002b48:	683a      	ldr	r2, [r7, #0]
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d1ee      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2204      	movs	r2, #4
 8002b54:	4013      	ands	r3, r2
 8002b56:	d009      	beq.n	8002b6c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b58:	4b20      	ldr	r3, [pc, #128]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	4a20      	ldr	r2, [pc, #128]	; (8002be0 <HAL_RCC_ClockConfig+0x27c>)
 8002b5e:	4013      	ands	r3, r2
 8002b60:	0019      	movs	r1, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	68da      	ldr	r2, [r3, #12]
 8002b66:	4b1d      	ldr	r3, [pc, #116]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2208      	movs	r2, #8
 8002b72:	4013      	ands	r3, r2
 8002b74:	d00a      	beq.n	8002b8c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b76:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	4a1a      	ldr	r2, [pc, #104]	; (8002be4 <HAL_RCC_ClockConfig+0x280>)
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	0019      	movs	r1, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	00da      	lsls	r2, r3, #3
 8002b86:	4b15      	ldr	r3, [pc, #84]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b8c:	f000 f832 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8002b90:	0001      	movs	r1, r0
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x278>)
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	091b      	lsrs	r3, r3, #4
 8002b98:	220f      	movs	r2, #15
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <HAL_RCC_ClockConfig+0x284>)
 8002b9e:	5cd3      	ldrb	r3, [r2, r3]
 8002ba0:	000a      	movs	r2, r1
 8002ba2:	40da      	lsrs	r2, r3
 8002ba4:	4b11      	ldr	r3, [pc, #68]	; (8002bec <HAL_RCC_ClockConfig+0x288>)
 8002ba6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ba8:	4b11      	ldr	r3, [pc, #68]	; (8002bf0 <HAL_RCC_ClockConfig+0x28c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	250b      	movs	r5, #11
 8002bae:	197c      	adds	r4, r7, r5
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	f7fe faa1 	bl	80010f8 <HAL_InitTick>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002bba:	197b      	adds	r3, r7, r5
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002bc2:	197b      	adds	r3, r7, r5
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	e000      	b.n	8002bca <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
}
 8002bca:	0018      	movs	r0, r3
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	b004      	add	sp, #16
 8002bd0:	bdb0      	pop	{r4, r5, r7, pc}
 8002bd2:	46c0      	nop			; (mov r8, r8)
 8002bd4:	40022000 	.word	0x40022000
 8002bd8:	00001388 	.word	0x00001388
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	fffff8ff 	.word	0xfffff8ff
 8002be4:	ffffc7ff 	.word	0xffffc7ff
 8002be8:	08004aa0 	.word	0x08004aa0
 8002bec:	20000000 	.word	0x20000000
 8002bf0:	20000004 	.word	0x20000004

08002bf4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf4:	b5b0      	push	{r4, r5, r7, lr}
 8002bf6:	b08e      	sub	sp, #56	; 0x38
 8002bf8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002bfa:	4b4c      	ldr	r3, [pc, #304]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c02:	230c      	movs	r3, #12
 8002c04:	4013      	ands	r3, r2
 8002c06:	2b0c      	cmp	r3, #12
 8002c08:	d014      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x40>
 8002c0a:	d900      	bls.n	8002c0e <HAL_RCC_GetSysClockFreq+0x1a>
 8002c0c:	e07b      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x112>
 8002c0e:	2b04      	cmp	r3, #4
 8002c10:	d002      	beq.n	8002c18 <HAL_RCC_GetSysClockFreq+0x24>
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d00b      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c16:	e076      	b.n	8002d06 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c18:	4b44      	ldr	r3, [pc, #272]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	4013      	ands	r3, r2
 8002c20:	d002      	beq.n	8002c28 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002c24:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002c26:	e07c      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002c28:	4b42      	ldr	r3, [pc, #264]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c2c:	e079      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c2e:	4b41      	ldr	r3, [pc, #260]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002c32:	e076      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c36:	0c9a      	lsrs	r2, r3, #18
 8002c38:	230f      	movs	r3, #15
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	4b3e      	ldr	r3, [pc, #248]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x144>)
 8002c3e:	5c9b      	ldrb	r3, [r3, r2]
 8002c40:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c44:	0d9a      	lsrs	r2, r3, #22
 8002c46:	2303      	movs	r3, #3
 8002c48:	4013      	ands	r3, r2
 8002c4a:	3301      	adds	r3, #1
 8002c4c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4e:	4b37      	ldr	r3, [pc, #220]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c50:	68da      	ldr	r2, [r3, #12]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	025b      	lsls	r3, r3, #9
 8002c56:	4013      	ands	r3, r2
 8002c58:	d01a      	beq.n	8002c90 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	4a34      	ldr	r2, [pc, #208]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x140>)
 8002c64:	2300      	movs	r3, #0
 8002c66:	69b8      	ldr	r0, [r7, #24]
 8002c68:	69f9      	ldr	r1, [r7, #28]
 8002c6a:	f7fd fb0b 	bl	8000284 <__aeabi_lmul>
 8002c6e:	0002      	movs	r2, r0
 8002c70:	000b      	movs	r3, r1
 8002c72:	0010      	movs	r0, r2
 8002c74:	0019      	movs	r1, r3
 8002c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c78:	613b      	str	r3, [r7, #16]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	f7fd fadf 	bl	8000244 <__aeabi_uldivmod>
 8002c86:	0002      	movs	r2, r0
 8002c88:	000b      	movs	r3, r1
 8002c8a:	0013      	movs	r3, r2
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c8e:	e037      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002c90:	4b26      	ldr	r3, [pc, #152]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2210      	movs	r2, #16
 8002c96:	4013      	ands	r3, r2
 8002c98:	d01a      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60fb      	str	r3, [r7, #12]
 8002ca2:	4a23      	ldr	r2, [pc, #140]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	68b8      	ldr	r0, [r7, #8]
 8002ca8:	68f9      	ldr	r1, [r7, #12]
 8002caa:	f7fd faeb 	bl	8000284 <__aeabi_lmul>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	000b      	movs	r3, r1
 8002cb2:	0010      	movs	r0, r2
 8002cb4:	0019      	movs	r1, r3
 8002cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb8:	603b      	str	r3, [r7, #0]
 8002cba:	2300      	movs	r3, #0
 8002cbc:	607b      	str	r3, [r7, #4]
 8002cbe:	683a      	ldr	r2, [r7, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f7fd fabf 	bl	8000244 <__aeabi_uldivmod>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	000b      	movs	r3, r1
 8002cca:	0013      	movs	r3, r2
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
 8002cce:	e017      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cd2:	0018      	movs	r0, r3
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	0019      	movs	r1, r3
 8002cd8:	4a16      	ldr	r2, [pc, #88]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x140>)
 8002cda:	2300      	movs	r3, #0
 8002cdc:	f7fd fad2 	bl	8000284 <__aeabi_lmul>
 8002ce0:	0002      	movs	r2, r0
 8002ce2:	000b      	movs	r3, r1
 8002ce4:	0010      	movs	r0, r2
 8002ce6:	0019      	movs	r1, r3
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	001c      	movs	r4, r3
 8002cec:	2300      	movs	r3, #0
 8002cee:	001d      	movs	r5, r3
 8002cf0:	0022      	movs	r2, r4
 8002cf2:	002b      	movs	r3, r5
 8002cf4:	f7fd faa6 	bl	8000244 <__aeabi_uldivmod>
 8002cf8:	0002      	movs	r2, r0
 8002cfa:	000b      	movs	r3, r1
 8002cfc:	0013      	movs	r3, r2
 8002cfe:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d04:	e00d      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x138>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	0b5b      	lsrs	r3, r3, #13
 8002d0c:	2207      	movs	r2, #7
 8002d0e:	4013      	ands	r3, r2
 8002d10:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	3301      	adds	r3, #1
 8002d16:	2280      	movs	r2, #128	; 0x80
 8002d18:	0212      	lsls	r2, r2, #8
 8002d1a:	409a      	lsls	r2, r3
 8002d1c:	0013      	movs	r3, r2
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d20:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d24:	0018      	movs	r0, r3
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b00e      	add	sp, #56	; 0x38
 8002d2a:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2c:	40021000 	.word	0x40021000
 8002d30:	003d0900 	.word	0x003d0900
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	08004ab8 	.word	0x08004ab8

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b02      	ldr	r3, [pc, #8]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x10>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	0018      	movs	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	20000000 	.word	0x20000000

08002d50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d54:	f7ff fff2 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d58:	0001      	movs	r1, r0
 8002d5a:	4b06      	ldr	r3, [pc, #24]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	0a1b      	lsrs	r3, r3, #8
 8002d60:	2207      	movs	r2, #7
 8002d62:	4013      	ands	r3, r2
 8002d64:	4a04      	ldr	r2, [pc, #16]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d66:	5cd3      	ldrb	r3, [r2, r3]
 8002d68:	40d9      	lsrs	r1, r3
 8002d6a:	000b      	movs	r3, r1
}
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	40021000 	.word	0x40021000
 8002d78:	08004ab0 	.word	0x08004ab0

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d80:	f7ff ffdc 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d84:	0001      	movs	r1, r0
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	0adb      	lsrs	r3, r3, #11
 8002d8c:	2207      	movs	r2, #7
 8002d8e:	4013      	ands	r3, r2
 8002d90:	4a04      	ldr	r2, [pc, #16]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	40d9      	lsrs	r1, r3
 8002d96:	000b      	movs	r3, r1
}
 8002d98:	0018      	movs	r0, r3
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08004ab0 	.word	0x08004ab0

08002da8 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b086      	sub	sp, #24
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002db0:	2017      	movs	r0, #23
 8002db2:	183b      	adds	r3, r7, r0
 8002db4:	2200      	movs	r2, #0
 8002db6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2220      	movs	r2, #32
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	d100      	bne.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002dc2:	e0c2      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc4:	4b91      	ldr	r3, [pc, #580]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc8:	2380      	movs	r3, #128	; 0x80
 8002dca:	055b      	lsls	r3, r3, #21
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d109      	bne.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd0:	4b8e      	ldr	r3, [pc, #568]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dd4:	4b8d      	ldr	r3, [pc, #564]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dd6:	2180      	movs	r1, #128	; 0x80
 8002dd8:	0549      	lsls	r1, r1, #21
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002dde:	183b      	adds	r3, r7, r0
 8002de0:	2201      	movs	r2, #1
 8002de2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	4b8a      	ldr	r3, [pc, #552]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	005b      	lsls	r3, r3, #1
 8002dec:	4013      	ands	r3, r2
 8002dee:	d11a      	bne.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df0:	4b87      	ldr	r3, [pc, #540]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	4b86      	ldr	r3, [pc, #536]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002df6:	2180      	movs	r1, #128	; 0x80
 8002df8:	0049      	lsls	r1, r1, #1
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dfe:	f7fe f9c1 	bl	8001184 <HAL_GetTick>
 8002e02:	0003      	movs	r3, r0
 8002e04:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e06:	e008      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e08:	f7fe f9bc 	bl	8001184 <HAL_GetTick>
 8002e0c:	0002      	movs	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b64      	cmp	r3, #100	; 0x64
 8002e14:	d901      	bls.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e0f3      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e1a:	4b7d      	ldr	r3, [pc, #500]	; (8003010 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	2380      	movs	r3, #128	; 0x80
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	4013      	ands	r3, r2
 8002e24:	d0f0      	beq.n	8002e08 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002e26:	4b79      	ldr	r3, [pc, #484]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	23c0      	movs	r3, #192	; 0xc0
 8002e2c:	039b      	lsls	r3, r3, #14
 8002e2e:	4013      	ands	r3, r2
 8002e30:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	23c0      	movs	r3, #192	; 0xc0
 8002e38:	039b      	lsls	r3, r3, #14
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d013      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	23c0      	movs	r3, #192	; 0xc0
 8002e48:	029b      	lsls	r3, r3, #10
 8002e4a:	401a      	ands	r2, r3
 8002e4c:	23c0      	movs	r3, #192	; 0xc0
 8002e4e:	029b      	lsls	r3, r3, #10
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d10a      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002e54:	4b6d      	ldr	r3, [pc, #436]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	2380      	movs	r3, #128	; 0x80
 8002e5a:	029b      	lsls	r3, r3, #10
 8002e5c:	401a      	ands	r2, r3
 8002e5e:	2380      	movs	r3, #128	; 0x80
 8002e60:	029b      	lsls	r3, r3, #10
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0cb      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002e6a:	4b68      	ldr	r3, [pc, #416]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002e6e:	23c0      	movs	r3, #192	; 0xc0
 8002e70:	029b      	lsls	r3, r3, #10
 8002e72:	4013      	ands	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d03b      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	23c0      	movs	r3, #192	; 0xc0
 8002e82:	029b      	lsls	r3, r3, #10
 8002e84:	4013      	ands	r3, r2
 8002e86:	68fa      	ldr	r2, [r7, #12]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d033      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2220      	movs	r2, #32
 8002e92:	4013      	ands	r3, r2
 8002e94:	d02e      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002e96:	4b5d      	ldr	r3, [pc, #372]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e9a:	4a5e      	ldr	r2, [pc, #376]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ea0:	4b5a      	ldr	r3, [pc, #360]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ea2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ea4:	4b59      	ldr	r3, [pc, #356]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ea6:	2180      	movs	r1, #128	; 0x80
 8002ea8:	0309      	lsls	r1, r1, #12
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eae:	4b57      	ldr	r3, [pc, #348]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eb2:	4b56      	ldr	r3, [pc, #344]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eb4:	4958      	ldr	r1, [pc, #352]	; (8003018 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002eb6:	400a      	ands	r2, r1
 8002eb8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002eba:	4b54      	ldr	r3, [pc, #336]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ebc:	68fa      	ldr	r2, [r7, #12]
 8002ebe:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	d014      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eca:	f7fe f95b 	bl	8001184 <HAL_GetTick>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ed2:	e009      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7fe f956 	bl	8001184 <HAL_GetTick>
 8002ed8:	0002      	movs	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	4a4f      	ldr	r2, [pc, #316]	; (800301c <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d901      	bls.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e08c      	b.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ee8:	4b48      	ldr	r3, [pc, #288]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002eea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d0ef      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	23c0      	movs	r3, #192	; 0xc0
 8002efa:	029b      	lsls	r3, r3, #10
 8002efc:	401a      	ands	r2, r3
 8002efe:	23c0      	movs	r3, #192	; 0xc0
 8002f00:	029b      	lsls	r3, r3, #10
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d10c      	bne.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8002f06:	4b41      	ldr	r3, [pc, #260]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a45      	ldr	r2, [pc, #276]	; (8003020 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	0019      	movs	r1, r3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	23c0      	movs	r3, #192	; 0xc0
 8002f16:	039b      	lsls	r3, r3, #14
 8002f18:	401a      	ands	r2, r3
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	4b3a      	ldr	r3, [pc, #232]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f22:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	23c0      	movs	r3, #192	; 0xc0
 8002f2a:	029b      	lsls	r3, r3, #10
 8002f2c:	401a      	ands	r2, r3
 8002f2e:	4b37      	ldr	r3, [pc, #220]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f30:	430a      	orrs	r2, r1
 8002f32:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f34:	2317      	movs	r3, #23
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d105      	bne.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f3e:	4b33      	ldr	r3, [pc, #204]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f42:	4b32      	ldr	r3, [pc, #200]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f44:	4937      	ldr	r1, [pc, #220]	; (8003024 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8002f46:	400a      	ands	r2, r1
 8002f48:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f54:	4b2d      	ldr	r3, [pc, #180]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f58:	2203      	movs	r2, #3
 8002f5a:	4393      	bics	r3, r2
 8002f5c:	0019      	movs	r1, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	689a      	ldr	r2, [r3, #8]
 8002f62:	4b2a      	ldr	r3, [pc, #168]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f64:	430a      	orrs	r2, r1
 8002f66:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f72:	4b26      	ldr	r3, [pc, #152]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f76:	220c      	movs	r2, #12
 8002f78:	4393      	bics	r3, r2
 8002f7a:	0019      	movs	r1, r3
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	4b22      	ldr	r3, [pc, #136]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f82:	430a      	orrs	r2, r1
 8002f84:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2204      	movs	r2, #4
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	d009      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f90:	4b1e      	ldr	r3, [pc, #120]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f94:	4a24      	ldr	r2, [pc, #144]	; (8003028 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002f96:	4013      	ands	r3, r2
 8002f98:	0019      	movs	r1, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	4b1b      	ldr	r3, [pc, #108]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2208      	movs	r2, #8
 8002faa:	4013      	ands	r3, r2
 8002fac:	d009      	beq.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fae:	4b17      	ldr	r3, [pc, #92]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	4a1e      	ldr	r2, [pc, #120]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	4b13      	ldr	r3, [pc, #76]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	2380      	movs	r3, #128	; 0x80
 8002fc8:	005b      	lsls	r3, r3, #1
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fce:	4b0f      	ldr	r3, [pc, #60]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fd2:	4a10      	ldr	r2, [pc, #64]	; (8003014 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	0019      	movs	r1, r3
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	699a      	ldr	r2, [r3, #24]
 8002fdc:	4b0b      	ldr	r3, [pc, #44]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	2280      	movs	r2, #128	; 0x80
 8002fe8:	4013      	ands	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002fec:	4b07      	ldr	r3, [pc, #28]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ff0:	4a0f      	ldr	r2, [pc, #60]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	0019      	movs	r1, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	69da      	ldr	r2, [r3, #28]
 8002ffa:	4b04      	ldr	r3, [pc, #16]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003000:	2300      	movs	r3, #0
}
 8003002:	0018      	movs	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	b006      	add	sp, #24
 8003008:	bd80      	pop	{r7, pc}
 800300a:	46c0      	nop			; (mov r8, r8)
 800300c:	40021000 	.word	0x40021000
 8003010:	40007000 	.word	0x40007000
 8003014:	fffcffff 	.word	0xfffcffff
 8003018:	fff7ffff 	.word	0xfff7ffff
 800301c:	00001388 	.word	0x00001388
 8003020:	ffcfffff 	.word	0xffcfffff
 8003024:	efffffff 	.word	0xefffffff
 8003028:	fffff3ff 	.word	0xfffff3ff
 800302c:	ffffcfff 	.word	0xffffcfff
 8003030:	fff3ffff 	.word	0xfff3ffff

08003034 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b082      	sub	sp, #8
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e083      	b.n	800314e <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	2382      	movs	r3, #130	; 0x82
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	429a      	cmp	r2, r3
 8003058:	d009      	beq.n	800306e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	61da      	str	r2, [r3, #28]
 8003060:	e005      	b.n	800306e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	2200      	movs	r2, #0
 8003072:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2251      	movs	r2, #81	; 0x51
 8003078:	5c9b      	ldrb	r3, [r3, r2]
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d107      	bne.n	8003090 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2250      	movs	r2, #80	; 0x50
 8003084:	2100      	movs	r1, #0
 8003086:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	0018      	movs	r0, r3
 800308c:	f7fd fe84 	bl	8000d98 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2251      	movs	r2, #81	; 0x51
 8003094:	2102      	movs	r1, #2
 8003096:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2140      	movs	r1, #64	; 0x40
 80030a4:	438a      	bics	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	2382      	movs	r3, #130	; 0x82
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	401a      	ands	r2, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6899      	ldr	r1, [r3, #8]
 80030b6:	2384      	movs	r3, #132	; 0x84
 80030b8:	021b      	lsls	r3, r3, #8
 80030ba:	400b      	ands	r3, r1
 80030bc:	431a      	orrs	r2, r3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68d9      	ldr	r1, [r3, #12]
 80030c2:	2380      	movs	r3, #128	; 0x80
 80030c4:	011b      	lsls	r3, r3, #4
 80030c6:	400b      	ands	r3, r1
 80030c8:	431a      	orrs	r2, r3
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691b      	ldr	r3, [r3, #16]
 80030ce:	2102      	movs	r1, #2
 80030d0:	400b      	ands	r3, r1
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	695b      	ldr	r3, [r3, #20]
 80030d8:	2101      	movs	r1, #1
 80030da:	400b      	ands	r3, r1
 80030dc:	431a      	orrs	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6999      	ldr	r1, [r3, #24]
 80030e2:	2380      	movs	r3, #128	; 0x80
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	400b      	ands	r3, r1
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	2138      	movs	r1, #56	; 0x38
 80030f0:	400b      	ands	r3, r1
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6a1b      	ldr	r3, [r3, #32]
 80030f8:	2180      	movs	r1, #128	; 0x80
 80030fa:	400b      	ands	r3, r1
 80030fc:	431a      	orrs	r2, r3
 80030fe:	0011      	movs	r1, r2
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003104:	2380      	movs	r3, #128	; 0x80
 8003106:	019b      	lsls	r3, r3, #6
 8003108:	401a      	ands	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	0c1b      	lsrs	r3, r3, #16
 8003118:	2204      	movs	r2, #4
 800311a:	4013      	ands	r3, r2
 800311c:	0019      	movs	r1, r3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003122:	2210      	movs	r2, #16
 8003124:	401a      	ands	r2, r3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4907      	ldr	r1, [pc, #28]	; (8003158 <HAL_SPI_Init+0x124>)
 800313a:	400a      	ands	r2, r1
 800313c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2251      	movs	r2, #81	; 0x51
 8003148:	2101      	movs	r1, #1
 800314a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	0018      	movs	r0, r3
 8003150:	46bd      	mov	sp, r7
 8003152:	b002      	add	sp, #8
 8003154:	bd80      	pop	{r7, pc}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	fffff7ff 	.word	0xfffff7ff

0800315c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	b088      	sub	sp, #32
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	099b      	lsrs	r3, r3, #6
 8003178:	001a      	movs	r2, r3
 800317a:	2301      	movs	r3, #1
 800317c:	4013      	ands	r3, r2
 800317e:	d10f      	bne.n	80031a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003186:	d00b      	beq.n	80031a0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	099b      	lsrs	r3, r3, #6
 800318c:	001a      	movs	r2, r3
 800318e:	2301      	movs	r3, #1
 8003190:	4013      	ands	r3, r2
 8003192:	d005      	beq.n	80031a0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	0010      	movs	r0, r2
 800319c:	4798      	blx	r3
    return;
 800319e:	e0d5      	b.n	800334c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80031a0:	69bb      	ldr	r3, [r7, #24]
 80031a2:	085b      	lsrs	r3, r3, #1
 80031a4:	001a      	movs	r2, r3
 80031a6:	2301      	movs	r3, #1
 80031a8:	4013      	ands	r3, r2
 80031aa:	d00b      	beq.n	80031c4 <HAL_SPI_IRQHandler+0x68>
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	09db      	lsrs	r3, r3, #7
 80031b0:	001a      	movs	r2, r3
 80031b2:	2301      	movs	r3, #1
 80031b4:	4013      	ands	r3, r2
 80031b6:	d005      	beq.n	80031c4 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	0010      	movs	r0, r2
 80031c0:	4798      	blx	r3
    return;
 80031c2:	e0c3      	b.n	800334c <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	095b      	lsrs	r3, r3, #5
 80031c8:	001a      	movs	r2, r3
 80031ca:	2301      	movs	r3, #1
 80031cc:	4013      	ands	r3, r2
 80031ce:	d10c      	bne.n	80031ea <HAL_SPI_IRQHandler+0x8e>
 80031d0:	69bb      	ldr	r3, [r7, #24]
 80031d2:	099b      	lsrs	r3, r3, #6
 80031d4:	001a      	movs	r2, r3
 80031d6:	2301      	movs	r3, #1
 80031d8:	4013      	ands	r3, r2
 80031da:	d106      	bne.n	80031ea <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	0a1b      	lsrs	r3, r3, #8
 80031e0:	001a      	movs	r2, r3
 80031e2:	2301      	movs	r3, #1
 80031e4:	4013      	ands	r3, r2
 80031e6:	d100      	bne.n	80031ea <HAL_SPI_IRQHandler+0x8e>
 80031e8:	e0b0      	b.n	800334c <HAL_SPI_IRQHandler+0x1f0>
 80031ea:	69fb      	ldr	r3, [r7, #28]
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	001a      	movs	r2, r3
 80031f0:	2301      	movs	r3, #1
 80031f2:	4013      	ands	r3, r2
 80031f4:	d100      	bne.n	80031f8 <HAL_SPI_IRQHandler+0x9c>
 80031f6:	e0a9      	b.n	800334c <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	099b      	lsrs	r3, r3, #6
 80031fc:	001a      	movs	r2, r3
 80031fe:	2301      	movs	r3, #1
 8003200:	4013      	ands	r3, r2
 8003202:	d023      	beq.n	800324c <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2251      	movs	r2, #81	; 0x51
 8003208:	5c9b      	ldrb	r3, [r3, r2]
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b03      	cmp	r3, #3
 800320e:	d011      	beq.n	8003234 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003214:	2204      	movs	r2, #4
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800321c:	2300      	movs	r3, #0
 800321e:	617b      	str	r3, [r7, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	617b      	str	r3, [r7, #20]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	617b      	str	r3, [r7, #20]
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	e00b      	b.n	800324c <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	613b      	str	r3, [r7, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	613b      	str	r3, [r7, #16]
 8003248:	693b      	ldr	r3, [r7, #16]
        return;
 800324a:	e07f      	b.n	800334c <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	001a      	movs	r2, r3
 8003252:	2301      	movs	r3, #1
 8003254:	4013      	ands	r3, r2
 8003256:	d014      	beq.n	8003282 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325c:	2201      	movs	r2, #1
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003264:	2300      	movs	r3, #0
 8003266:	60fb      	str	r3, [r7, #12]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2140      	movs	r1, #64	; 0x40
 800327c:	438a      	bics	r2, r1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003282:	69bb      	ldr	r3, [r7, #24]
 8003284:	0a1b      	lsrs	r3, r3, #8
 8003286:	001a      	movs	r2, r3
 8003288:	2301      	movs	r3, #1
 800328a:	4013      	ands	r3, r2
 800328c:	d00c      	beq.n	80032a8 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003292:	2208      	movs	r2, #8
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800329a:	2300      	movs	r3, #0
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	60bb      	str	r3, [r7, #8]
 80032a6:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d04c      	beq.n	800334a <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	21e0      	movs	r1, #224	; 0xe0
 80032bc:	438a      	bics	r2, r1
 80032be:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2251      	movs	r2, #81	; 0x51
 80032c4:	2101      	movs	r1, #1
 80032c6:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	2202      	movs	r2, #2
 80032cc:	4013      	ands	r3, r2
 80032ce:	d103      	bne.n	80032d8 <HAL_SPI_IRQHandler+0x17c>
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2201      	movs	r2, #1
 80032d4:	4013      	ands	r3, r2
 80032d6:	d032      	beq.n	800333e <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2103      	movs	r1, #3
 80032e4:	438a      	bics	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d010      	beq.n	8003312 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032f4:	4a17      	ldr	r2, [pc, #92]	; (8003354 <HAL_SPI_IRQHandler+0x1f8>)
 80032f6:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032fc:	0018      	movs	r0, r3
 80032fe:	f7fe f84d 	bl	800139c <HAL_DMA_Abort_IT>
 8003302:	1e03      	subs	r3, r0, #0
 8003304:	d005      	beq.n	8003312 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800330a:	2240      	movs	r2, #64	; 0x40
 800330c:	431a      	orrs	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800331e:	4a0d      	ldr	r2, [pc, #52]	; (8003354 <HAL_SPI_IRQHandler+0x1f8>)
 8003320:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003326:	0018      	movs	r0, r3
 8003328:	f7fe f838 	bl	800139c <HAL_DMA_Abort_IT>
 800332c:	1e03      	subs	r3, r0, #0
 800332e:	d00b      	beq.n	8003348 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003334:	2240      	movs	r2, #64	; 0x40
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 800333c:	e004      	b.n	8003348 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	0018      	movs	r0, r3
 8003342:	f000 f809 	bl	8003358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003346:	e000      	b.n	800334a <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8003348:	46c0      	nop			; (mov r8, r8)
    return;
 800334a:	46c0      	nop			; (mov r8, r8)
  }
}
 800334c:	46bd      	mov	sp, r7
 800334e:	b008      	add	sp, #32
 8003350:	bd80      	pop	{r7, pc}
 8003352:	46c0      	nop			; (mov r8, r8)
 8003354:	08003369 	.word	0x08003369

08003358 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	46bd      	mov	sp, r7
 8003364:	b002      	add	sp, #8
 8003366:	bd80      	pop	{r7, pc}

08003368 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2200      	movs	r2, #0
 800337a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	0018      	movs	r0, r3
 8003386:	f7ff ffe7 	bl	8003358 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	46bd      	mov	sp, r7
 800338e:	b004      	add	sp, #16
 8003390:	bd80      	pop	{r7, pc}
	...

08003394 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b082      	sub	sp, #8
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e044      	b.n	8003430 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d107      	bne.n	80033be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2274      	movs	r2, #116	; 0x74
 80033b2:	2100      	movs	r1, #0
 80033b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f7fd fd87 	bl	8000ecc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2224      	movs	r2, #36	; 0x24
 80033c2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2101      	movs	r1, #1
 80033d0:	438a      	bics	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	0018      	movs	r0, r3
 80033d8:	f000 f8d8 	bl	800358c <UART_SetConfig>
 80033dc:	0003      	movs	r3, r0
 80033de:	2b01      	cmp	r3, #1
 80033e0:	d101      	bne.n	80033e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e024      	b.n	8003430 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f000 fb6b 	bl	8003acc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	490d      	ldr	r1, [pc, #52]	; (8003438 <HAL_UART_Init+0xa4>)
 8003402:	400a      	ands	r2, r1
 8003404:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	212a      	movs	r1, #42	; 0x2a
 8003412:	438a      	bics	r2, r1
 8003414:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2101      	movs	r1, #1
 8003422:	430a      	orrs	r2, r1
 8003424:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	0018      	movs	r0, r3
 800342a:	f000 fc03 	bl	8003c34 <UART_CheckIdleState>
 800342e:	0003      	movs	r3, r0
}
 8003430:	0018      	movs	r0, r3
 8003432:	46bd      	mov	sp, r7
 8003434:	b002      	add	sp, #8
 8003436:	bd80      	pop	{r7, pc}
 8003438:	ffffb7ff 	.word	0xffffb7ff

0800343c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b08a      	sub	sp, #40	; 0x28
 8003440:	af02      	add	r7, sp, #8
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	603b      	str	r3, [r7, #0]
 8003448:	1dbb      	adds	r3, r7, #6
 800344a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003450:	2b20      	cmp	r3, #32
 8003452:	d000      	beq.n	8003456 <HAL_UART_Transmit+0x1a>
 8003454:	e095      	b.n	8003582 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_UART_Transmit+0x28>
 800345c:	1dbb      	adds	r3, r7, #6
 800345e:	881b      	ldrh	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d101      	bne.n	8003468 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e08d      	b.n	8003584 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	2380      	movs	r3, #128	; 0x80
 800346e:	015b      	lsls	r3, r3, #5
 8003470:	429a      	cmp	r2, r3
 8003472:	d109      	bne.n	8003488 <HAL_UART_Transmit+0x4c>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d105      	bne.n	8003488 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800347c:	68bb      	ldr	r3, [r7, #8]
 800347e:	2201      	movs	r2, #1
 8003480:	4013      	ands	r3, r2
 8003482:	d001      	beq.n	8003488 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e07d      	b.n	8003584 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2274      	movs	r2, #116	; 0x74
 800348c:	5c9b      	ldrb	r3, [r3, r2]
 800348e:	2b01      	cmp	r3, #1
 8003490:	d101      	bne.n	8003496 <HAL_UART_Transmit+0x5a>
 8003492:	2302      	movs	r3, #2
 8003494:	e076      	b.n	8003584 <HAL_UART_Transmit+0x148>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2274      	movs	r2, #116	; 0x74
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2280      	movs	r2, #128	; 0x80
 80034a2:	2100      	movs	r1, #0
 80034a4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2221      	movs	r2, #33	; 0x21
 80034aa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ac:	f7fd fe6a 	bl	8001184 <HAL_GetTick>
 80034b0:	0003      	movs	r3, r0
 80034b2:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1dba      	adds	r2, r7, #6
 80034b8:	2150      	movs	r1, #80	; 0x50
 80034ba:	8812      	ldrh	r2, [r2, #0]
 80034bc:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	1dba      	adds	r2, r7, #6
 80034c2:	2152      	movs	r1, #82	; 0x52
 80034c4:	8812      	ldrh	r2, [r2, #0]
 80034c6:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	015b      	lsls	r3, r3, #5
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d108      	bne.n	80034e6 <HAL_UART_Transmit+0xaa>
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d104      	bne.n	80034e6 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	61bb      	str	r3, [r7, #24]
 80034e4:	e003      	b.n	80034ee <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2274      	movs	r2, #116	; 0x74
 80034f2:	2100      	movs	r1, #0
 80034f4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80034f6:	e02c      	b.n	8003552 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	9300      	str	r3, [sp, #0]
 8003500:	0013      	movs	r3, r2
 8003502:	2200      	movs	r2, #0
 8003504:	2180      	movs	r1, #128	; 0x80
 8003506:	f000 fbdd 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 800350a:	1e03      	subs	r3, r0, #0
 800350c:	d001      	beq.n	8003512 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e038      	b.n	8003584 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	001a      	movs	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	05d2      	lsls	r2, r2, #23
 8003524:	0dd2      	lsrs	r2, r2, #23
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003528:	69bb      	ldr	r3, [r7, #24]
 800352a:	3302      	adds	r3, #2
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e007      	b.n	8003540 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003530:	69fb      	ldr	r3, [r7, #28]
 8003532:	781a      	ldrb	r2, [r3, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800353a:	69fb      	ldr	r3, [r7, #28]
 800353c:	3301      	adds	r3, #1
 800353e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2252      	movs	r2, #82	; 0x52
 8003544:	5a9b      	ldrh	r3, [r3, r2]
 8003546:	b29b      	uxth	r3, r3
 8003548:	3b01      	subs	r3, #1
 800354a:	b299      	uxth	r1, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2252      	movs	r2, #82	; 0x52
 8003550:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2252      	movs	r2, #82	; 0x52
 8003556:	5a9b      	ldrh	r3, [r3, r2]
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1cc      	bne.n	80034f8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	9300      	str	r3, [sp, #0]
 8003566:	0013      	movs	r3, r2
 8003568:	2200      	movs	r2, #0
 800356a:	2140      	movs	r1, #64	; 0x40
 800356c:	f000 fbaa 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 8003570:	1e03      	subs	r3, r0, #0
 8003572:	d001      	beq.n	8003578 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e005      	b.n	8003584 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2220      	movs	r2, #32
 800357c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800357e:	2300      	movs	r3, #0
 8003580:	e000      	b.n	8003584 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8003582:	2302      	movs	r3, #2
  }
}
 8003584:	0018      	movs	r0, r3
 8003586:	46bd      	mov	sp, r7
 8003588:	b008      	add	sp, #32
 800358a:	bd80      	pop	{r7, pc}

0800358c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800358c:	b5b0      	push	{r4, r5, r7, lr}
 800358e:	b08e      	sub	sp, #56	; 0x38
 8003590:	af00      	add	r7, sp, #0
 8003592:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003594:	231a      	movs	r3, #26
 8003596:	2218      	movs	r2, #24
 8003598:	189b      	adds	r3, r3, r2
 800359a:	19db      	adds	r3, r3, r7
 800359c:	2200      	movs	r2, #0
 800359e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	431a      	orrs	r2, r3
 80035aa:	69fb      	ldr	r3, [r7, #28]
 80035ac:	695b      	ldr	r3, [r3, #20]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	69db      	ldr	r3, [r3, #28]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4ac3      	ldr	r2, [pc, #780]	; (80038cc <UART_SetConfig+0x340>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	0019      	movs	r1, r3
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035ca:	430a      	orrs	r2, r1
 80035cc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	4abe      	ldr	r2, [pc, #760]	; (80038d0 <UART_SetConfig+0x344>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4ab8      	ldr	r2, [pc, #736]	; (80038d4 <UART_SetConfig+0x348>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d004      	beq.n	8003600 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035fc:	4313      	orrs	r3, r2
 80035fe:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	4ab4      	ldr	r2, [pc, #720]	; (80038d8 <UART_SetConfig+0x34c>)
 8003608:	4013      	ands	r3, r2
 800360a:	0019      	movs	r1, r3
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003612:	430a      	orrs	r2, r1
 8003614:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4ab0      	ldr	r2, [pc, #704]	; (80038dc <UART_SetConfig+0x350>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d131      	bne.n	8003684 <UART_SetConfig+0xf8>
 8003620:	4baf      	ldr	r3, [pc, #700]	; (80038e0 <UART_SetConfig+0x354>)
 8003622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003624:	2203      	movs	r2, #3
 8003626:	4013      	ands	r3, r2
 8003628:	2b03      	cmp	r3, #3
 800362a:	d01d      	beq.n	8003668 <UART_SetConfig+0xdc>
 800362c:	d823      	bhi.n	8003676 <UART_SetConfig+0xea>
 800362e:	2b02      	cmp	r3, #2
 8003630:	d00c      	beq.n	800364c <UART_SetConfig+0xc0>
 8003632:	d820      	bhi.n	8003676 <UART_SetConfig+0xea>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d002      	beq.n	800363e <UART_SetConfig+0xb2>
 8003638:	2b01      	cmp	r3, #1
 800363a:	d00e      	beq.n	800365a <UART_SetConfig+0xce>
 800363c:	e01b      	b.n	8003676 <UART_SetConfig+0xea>
 800363e:	231b      	movs	r3, #27
 8003640:	2218      	movs	r2, #24
 8003642:	189b      	adds	r3, r3, r2
 8003644:	19db      	adds	r3, r3, r7
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e0b4      	b.n	80037b6 <UART_SetConfig+0x22a>
 800364c:	231b      	movs	r3, #27
 800364e:	2218      	movs	r2, #24
 8003650:	189b      	adds	r3, r3, r2
 8003652:	19db      	adds	r3, r3, r7
 8003654:	2202      	movs	r2, #2
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e0ad      	b.n	80037b6 <UART_SetConfig+0x22a>
 800365a:	231b      	movs	r3, #27
 800365c:	2218      	movs	r2, #24
 800365e:	189b      	adds	r3, r3, r2
 8003660:	19db      	adds	r3, r3, r7
 8003662:	2204      	movs	r2, #4
 8003664:	701a      	strb	r2, [r3, #0]
 8003666:	e0a6      	b.n	80037b6 <UART_SetConfig+0x22a>
 8003668:	231b      	movs	r3, #27
 800366a:	2218      	movs	r2, #24
 800366c:	189b      	adds	r3, r3, r2
 800366e:	19db      	adds	r3, r3, r7
 8003670:	2208      	movs	r2, #8
 8003672:	701a      	strb	r2, [r3, #0]
 8003674:	e09f      	b.n	80037b6 <UART_SetConfig+0x22a>
 8003676:	231b      	movs	r3, #27
 8003678:	2218      	movs	r2, #24
 800367a:	189b      	adds	r3, r3, r2
 800367c:	19db      	adds	r3, r3, r7
 800367e:	2210      	movs	r2, #16
 8003680:	701a      	strb	r2, [r3, #0]
 8003682:	e098      	b.n	80037b6 <UART_SetConfig+0x22a>
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a96      	ldr	r2, [pc, #600]	; (80038e4 <UART_SetConfig+0x358>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d131      	bne.n	80036f2 <UART_SetConfig+0x166>
 800368e:	4b94      	ldr	r3, [pc, #592]	; (80038e0 <UART_SetConfig+0x354>)
 8003690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003692:	220c      	movs	r2, #12
 8003694:	4013      	ands	r3, r2
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d01d      	beq.n	80036d6 <UART_SetConfig+0x14a>
 800369a:	d823      	bhi.n	80036e4 <UART_SetConfig+0x158>
 800369c:	2b08      	cmp	r3, #8
 800369e:	d00c      	beq.n	80036ba <UART_SetConfig+0x12e>
 80036a0:	d820      	bhi.n	80036e4 <UART_SetConfig+0x158>
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d002      	beq.n	80036ac <UART_SetConfig+0x120>
 80036a6:	2b04      	cmp	r3, #4
 80036a8:	d00e      	beq.n	80036c8 <UART_SetConfig+0x13c>
 80036aa:	e01b      	b.n	80036e4 <UART_SetConfig+0x158>
 80036ac:	231b      	movs	r3, #27
 80036ae:	2218      	movs	r2, #24
 80036b0:	189b      	adds	r3, r3, r2
 80036b2:	19db      	adds	r3, r3, r7
 80036b4:	2200      	movs	r2, #0
 80036b6:	701a      	strb	r2, [r3, #0]
 80036b8:	e07d      	b.n	80037b6 <UART_SetConfig+0x22a>
 80036ba:	231b      	movs	r3, #27
 80036bc:	2218      	movs	r2, #24
 80036be:	189b      	adds	r3, r3, r2
 80036c0:	19db      	adds	r3, r3, r7
 80036c2:	2202      	movs	r2, #2
 80036c4:	701a      	strb	r2, [r3, #0]
 80036c6:	e076      	b.n	80037b6 <UART_SetConfig+0x22a>
 80036c8:	231b      	movs	r3, #27
 80036ca:	2218      	movs	r2, #24
 80036cc:	189b      	adds	r3, r3, r2
 80036ce:	19db      	adds	r3, r3, r7
 80036d0:	2204      	movs	r2, #4
 80036d2:	701a      	strb	r2, [r3, #0]
 80036d4:	e06f      	b.n	80037b6 <UART_SetConfig+0x22a>
 80036d6:	231b      	movs	r3, #27
 80036d8:	2218      	movs	r2, #24
 80036da:	189b      	adds	r3, r3, r2
 80036dc:	19db      	adds	r3, r3, r7
 80036de:	2208      	movs	r2, #8
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e068      	b.n	80037b6 <UART_SetConfig+0x22a>
 80036e4:	231b      	movs	r3, #27
 80036e6:	2218      	movs	r2, #24
 80036e8:	189b      	adds	r3, r3, r2
 80036ea:	19db      	adds	r3, r3, r7
 80036ec:	2210      	movs	r2, #16
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e061      	b.n	80037b6 <UART_SetConfig+0x22a>
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a7c      	ldr	r2, [pc, #496]	; (80038e8 <UART_SetConfig+0x35c>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d106      	bne.n	800370a <UART_SetConfig+0x17e>
 80036fc:	231b      	movs	r3, #27
 80036fe:	2218      	movs	r2, #24
 8003700:	189b      	adds	r3, r3, r2
 8003702:	19db      	adds	r3, r3, r7
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
 8003708:	e055      	b.n	80037b6 <UART_SetConfig+0x22a>
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a77      	ldr	r2, [pc, #476]	; (80038ec <UART_SetConfig+0x360>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d106      	bne.n	8003722 <UART_SetConfig+0x196>
 8003714:	231b      	movs	r3, #27
 8003716:	2218      	movs	r2, #24
 8003718:	189b      	adds	r3, r3, r2
 800371a:	19db      	adds	r3, r3, r7
 800371c:	2200      	movs	r2, #0
 800371e:	701a      	strb	r2, [r3, #0]
 8003720:	e049      	b.n	80037b6 <UART_SetConfig+0x22a>
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a6b      	ldr	r2, [pc, #428]	; (80038d4 <UART_SetConfig+0x348>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d13e      	bne.n	80037aa <UART_SetConfig+0x21e>
 800372c:	4b6c      	ldr	r3, [pc, #432]	; (80038e0 <UART_SetConfig+0x354>)
 800372e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003730:	23c0      	movs	r3, #192	; 0xc0
 8003732:	011b      	lsls	r3, r3, #4
 8003734:	4013      	ands	r3, r2
 8003736:	22c0      	movs	r2, #192	; 0xc0
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	4293      	cmp	r3, r2
 800373c:	d027      	beq.n	800378e <UART_SetConfig+0x202>
 800373e:	22c0      	movs	r2, #192	; 0xc0
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	4293      	cmp	r3, r2
 8003744:	d82a      	bhi.n	800379c <UART_SetConfig+0x210>
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	0112      	lsls	r2, r2, #4
 800374a:	4293      	cmp	r3, r2
 800374c:	d011      	beq.n	8003772 <UART_SetConfig+0x1e6>
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	0112      	lsls	r2, r2, #4
 8003752:	4293      	cmp	r3, r2
 8003754:	d822      	bhi.n	800379c <UART_SetConfig+0x210>
 8003756:	2b00      	cmp	r3, #0
 8003758:	d004      	beq.n	8003764 <UART_SetConfig+0x1d8>
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	00d2      	lsls	r2, r2, #3
 800375e:	4293      	cmp	r3, r2
 8003760:	d00e      	beq.n	8003780 <UART_SetConfig+0x1f4>
 8003762:	e01b      	b.n	800379c <UART_SetConfig+0x210>
 8003764:	231b      	movs	r3, #27
 8003766:	2218      	movs	r2, #24
 8003768:	189b      	adds	r3, r3, r2
 800376a:	19db      	adds	r3, r3, r7
 800376c:	2200      	movs	r2, #0
 800376e:	701a      	strb	r2, [r3, #0]
 8003770:	e021      	b.n	80037b6 <UART_SetConfig+0x22a>
 8003772:	231b      	movs	r3, #27
 8003774:	2218      	movs	r2, #24
 8003776:	189b      	adds	r3, r3, r2
 8003778:	19db      	adds	r3, r3, r7
 800377a:	2202      	movs	r2, #2
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e01a      	b.n	80037b6 <UART_SetConfig+0x22a>
 8003780:	231b      	movs	r3, #27
 8003782:	2218      	movs	r2, #24
 8003784:	189b      	adds	r3, r3, r2
 8003786:	19db      	adds	r3, r3, r7
 8003788:	2204      	movs	r2, #4
 800378a:	701a      	strb	r2, [r3, #0]
 800378c:	e013      	b.n	80037b6 <UART_SetConfig+0x22a>
 800378e:	231b      	movs	r3, #27
 8003790:	2218      	movs	r2, #24
 8003792:	189b      	adds	r3, r3, r2
 8003794:	19db      	adds	r3, r3, r7
 8003796:	2208      	movs	r2, #8
 8003798:	701a      	strb	r2, [r3, #0]
 800379a:	e00c      	b.n	80037b6 <UART_SetConfig+0x22a>
 800379c:	231b      	movs	r3, #27
 800379e:	2218      	movs	r2, #24
 80037a0:	189b      	adds	r3, r3, r2
 80037a2:	19db      	adds	r3, r3, r7
 80037a4:	2210      	movs	r2, #16
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	e005      	b.n	80037b6 <UART_SetConfig+0x22a>
 80037aa:	231b      	movs	r3, #27
 80037ac:	2218      	movs	r2, #24
 80037ae:	189b      	adds	r3, r3, r2
 80037b0:	19db      	adds	r3, r3, r7
 80037b2:	2210      	movs	r2, #16
 80037b4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a46      	ldr	r2, [pc, #280]	; (80038d4 <UART_SetConfig+0x348>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d000      	beq.n	80037c2 <UART_SetConfig+0x236>
 80037c0:	e09a      	b.n	80038f8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037c2:	231b      	movs	r3, #27
 80037c4:	2218      	movs	r2, #24
 80037c6:	189b      	adds	r3, r3, r2
 80037c8:	19db      	adds	r3, r3, r7
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d01d      	beq.n	800380c <UART_SetConfig+0x280>
 80037d0:	dc20      	bgt.n	8003814 <UART_SetConfig+0x288>
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d015      	beq.n	8003802 <UART_SetConfig+0x276>
 80037d6:	dc1d      	bgt.n	8003814 <UART_SetConfig+0x288>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d002      	beq.n	80037e2 <UART_SetConfig+0x256>
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d005      	beq.n	80037ec <UART_SetConfig+0x260>
 80037e0:	e018      	b.n	8003814 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037e2:	f7ff fab5 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 80037e6:	0003      	movs	r3, r0
 80037e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037ea:	e01c      	b.n	8003826 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80037ec:	4b3c      	ldr	r3, [pc, #240]	; (80038e0 <UART_SetConfig+0x354>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2210      	movs	r2, #16
 80037f2:	4013      	ands	r3, r2
 80037f4:	d002      	beq.n	80037fc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80037f6:	4b3e      	ldr	r3, [pc, #248]	; (80038f0 <UART_SetConfig+0x364>)
 80037f8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80037fa:	e014      	b.n	8003826 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 80037fc:	4b3d      	ldr	r3, [pc, #244]	; (80038f4 <UART_SetConfig+0x368>)
 80037fe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003800:	e011      	b.n	8003826 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003802:	f7ff f9f7 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8003806:	0003      	movs	r3, r0
 8003808:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800380a:	e00c      	b.n	8003826 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380c:	2380      	movs	r3, #128	; 0x80
 800380e:	021b      	lsls	r3, r3, #8
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003812:	e008      	b.n	8003826 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003818:	231a      	movs	r3, #26
 800381a:	2218      	movs	r2, #24
 800381c:	189b      	adds	r3, r3, r2
 800381e:	19db      	adds	r3, r3, r7
 8003820:	2201      	movs	r2, #1
 8003822:	701a      	strb	r2, [r3, #0]
        break;
 8003824:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003828:	2b00      	cmp	r3, #0
 800382a:	d100      	bne.n	800382e <UART_SetConfig+0x2a2>
 800382c:	e134      	b.n	8003a98 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	685a      	ldr	r2, [r3, #4]
 8003832:	0013      	movs	r3, r2
 8003834:	005b      	lsls	r3, r3, #1
 8003836:	189b      	adds	r3, r3, r2
 8003838:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800383a:	429a      	cmp	r2, r3
 800383c:	d305      	bcc.n	800384a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800383e:	69fb      	ldr	r3, [r7, #28]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003846:	429a      	cmp	r2, r3
 8003848:	d906      	bls.n	8003858 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800384a:	231a      	movs	r3, #26
 800384c:	2218      	movs	r2, #24
 800384e:	189b      	adds	r3, r3, r2
 8003850:	19db      	adds	r3, r3, r7
 8003852:	2201      	movs	r2, #1
 8003854:	701a      	strb	r2, [r3, #0]
 8003856:	e11f      	b.n	8003a98 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
 8003860:	6939      	ldr	r1, [r7, #16]
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	000b      	movs	r3, r1
 8003866:	0e1b      	lsrs	r3, r3, #24
 8003868:	0010      	movs	r0, r2
 800386a:	0205      	lsls	r5, r0, #8
 800386c:	431d      	orrs	r5, r3
 800386e:	000b      	movs	r3, r1
 8003870:	021c      	lsls	r4, r3, #8
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	60bb      	str	r3, [r7, #8]
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
 800387e:	68b8      	ldr	r0, [r7, #8]
 8003880:	68f9      	ldr	r1, [r7, #12]
 8003882:	1900      	adds	r0, r0, r4
 8003884:	4169      	adcs	r1, r5
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	603b      	str	r3, [r7, #0]
 800388c:	2300      	movs	r3, #0
 800388e:	607b      	str	r3, [r7, #4]
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	f7fc fcd6 	bl	8000244 <__aeabi_uldivmod>
 8003898:	0002      	movs	r2, r0
 800389a:	000b      	movs	r3, r1
 800389c:	0013      	movs	r3, r2
 800389e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038a2:	23c0      	movs	r3, #192	; 0xc0
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d309      	bcc.n	80038be <UART_SetConfig+0x332>
 80038aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ac:	2380      	movs	r3, #128	; 0x80
 80038ae:	035b      	lsls	r3, r3, #13
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d204      	bcs.n	80038be <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038ba:	60da      	str	r2, [r3, #12]
 80038bc:	e0ec      	b.n	8003a98 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 80038be:	231a      	movs	r3, #26
 80038c0:	2218      	movs	r2, #24
 80038c2:	189b      	adds	r3, r3, r2
 80038c4:	19db      	adds	r3, r3, r7
 80038c6:	2201      	movs	r2, #1
 80038c8:	701a      	strb	r2, [r3, #0]
 80038ca:	e0e5      	b.n	8003a98 <UART_SetConfig+0x50c>
 80038cc:	efff69f3 	.word	0xefff69f3
 80038d0:	ffffcfff 	.word	0xffffcfff
 80038d4:	40004800 	.word	0x40004800
 80038d8:	fffff4ff 	.word	0xfffff4ff
 80038dc:	40013800 	.word	0x40013800
 80038e0:	40021000 	.word	0x40021000
 80038e4:	40004400 	.word	0x40004400
 80038e8:	40004c00 	.word	0x40004c00
 80038ec:	40005000 	.word	0x40005000
 80038f0:	003d0900 	.word	0x003d0900
 80038f4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	69da      	ldr	r2, [r3, #28]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	021b      	lsls	r3, r3, #8
 8003900:	429a      	cmp	r2, r3
 8003902:	d000      	beq.n	8003906 <UART_SetConfig+0x37a>
 8003904:	e071      	b.n	80039ea <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003906:	231b      	movs	r3, #27
 8003908:	2218      	movs	r2, #24
 800390a:	189b      	adds	r3, r3, r2
 800390c:	19db      	adds	r3, r3, r7
 800390e:	781b      	ldrb	r3, [r3, #0]
 8003910:	2b08      	cmp	r3, #8
 8003912:	d822      	bhi.n	800395a <UART_SetConfig+0x3ce>
 8003914:	009a      	lsls	r2, r3, #2
 8003916:	4b68      	ldr	r3, [pc, #416]	; (8003ab8 <UART_SetConfig+0x52c>)
 8003918:	18d3      	adds	r3, r2, r3
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800391e:	f7ff fa17 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8003922:	0003      	movs	r3, r0
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003926:	e021      	b.n	800396c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003928:	f7ff fa28 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 800392c:	0003      	movs	r3, r0
 800392e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003930:	e01c      	b.n	800396c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003932:	4b62      	ldr	r3, [pc, #392]	; (8003abc <UART_SetConfig+0x530>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	2210      	movs	r2, #16
 8003938:	4013      	ands	r3, r2
 800393a:	d002      	beq.n	8003942 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800393c:	4b60      	ldr	r3, [pc, #384]	; (8003ac0 <UART_SetConfig+0x534>)
 800393e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003940:	e014      	b.n	800396c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003942:	4b60      	ldr	r3, [pc, #384]	; (8003ac4 <UART_SetConfig+0x538>)
 8003944:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003946:	e011      	b.n	800396c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003948:	f7ff f954 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 800394c:	0003      	movs	r3, r0
 800394e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003950:	e00c      	b.n	800396c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	2380      	movs	r3, #128	; 0x80
 8003954:	021b      	lsls	r3, r3, #8
 8003956:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003958:	e008      	b.n	800396c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800395e:	231a      	movs	r3, #26
 8003960:	2218      	movs	r2, #24
 8003962:	189b      	adds	r3, r3, r2
 8003964:	19db      	adds	r3, r3, r7
 8003966:	2201      	movs	r2, #1
 8003968:	701a      	strb	r2, [r3, #0]
        break;
 800396a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800396c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d100      	bne.n	8003974 <UART_SetConfig+0x3e8>
 8003972:	e091      	b.n	8003a98 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003976:	005a      	lsls	r2, r3, #1
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	18d2      	adds	r2, r2, r3
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	0019      	movs	r1, r3
 8003986:	0010      	movs	r0, r2
 8003988:	f7fc fbd0 	bl	800012c <__udivsi3>
 800398c:	0003      	movs	r3, r0
 800398e:	b29b      	uxth	r3, r3
 8003990:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003994:	2b0f      	cmp	r3, #15
 8003996:	d921      	bls.n	80039dc <UART_SetConfig+0x450>
 8003998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800399a:	2380      	movs	r3, #128	; 0x80
 800399c:	025b      	lsls	r3, r3, #9
 800399e:	429a      	cmp	r2, r3
 80039a0:	d21c      	bcs.n	80039dc <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	200e      	movs	r0, #14
 80039a8:	2418      	movs	r4, #24
 80039aa:	1903      	adds	r3, r0, r4
 80039ac:	19db      	adds	r3, r3, r7
 80039ae:	210f      	movs	r1, #15
 80039b0:	438a      	bics	r2, r1
 80039b2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b6:	085b      	lsrs	r3, r3, #1
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	2207      	movs	r2, #7
 80039bc:	4013      	ands	r3, r2
 80039be:	b299      	uxth	r1, r3
 80039c0:	1903      	adds	r3, r0, r4
 80039c2:	19db      	adds	r3, r3, r7
 80039c4:	1902      	adds	r2, r0, r4
 80039c6:	19d2      	adds	r2, r2, r7
 80039c8:	8812      	ldrh	r2, [r2, #0]
 80039ca:	430a      	orrs	r2, r1
 80039cc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	1902      	adds	r2, r0, r4
 80039d4:	19d2      	adds	r2, r2, r7
 80039d6:	8812      	ldrh	r2, [r2, #0]
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	e05d      	b.n	8003a98 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80039dc:	231a      	movs	r3, #26
 80039de:	2218      	movs	r2, #24
 80039e0:	189b      	adds	r3, r3, r2
 80039e2:	19db      	adds	r3, r3, r7
 80039e4:	2201      	movs	r2, #1
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e056      	b.n	8003a98 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039ea:	231b      	movs	r3, #27
 80039ec:	2218      	movs	r2, #24
 80039ee:	189b      	adds	r3, r3, r2
 80039f0:	19db      	adds	r3, r3, r7
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d822      	bhi.n	8003a3e <UART_SetConfig+0x4b2>
 80039f8:	009a      	lsls	r2, r3, #2
 80039fa:	4b33      	ldr	r3, [pc, #204]	; (8003ac8 <UART_SetConfig+0x53c>)
 80039fc:	18d3      	adds	r3, r2, r3
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a02:	f7ff f9a5 	bl	8002d50 <HAL_RCC_GetPCLK1Freq>
 8003a06:	0003      	movs	r3, r0
 8003a08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a0a:	e021      	b.n	8003a50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a0c:	f7ff f9b6 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 8003a10:	0003      	movs	r3, r0
 8003a12:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a14:	e01c      	b.n	8003a50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <UART_SetConfig+0x530>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2210      	movs	r2, #16
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d002      	beq.n	8003a26 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <UART_SetConfig+0x534>)
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003a24:	e014      	b.n	8003a50 <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8003a26:	4b27      	ldr	r3, [pc, #156]	; (8003ac4 <UART_SetConfig+0x538>)
 8003a28:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a2a:	e011      	b.n	8003a50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a2c:	f7ff f8e2 	bl	8002bf4 <HAL_RCC_GetSysClockFreq>
 8003a30:	0003      	movs	r3, r0
 8003a32:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a34:	e00c      	b.n	8003a50 <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a36:	2380      	movs	r3, #128	; 0x80
 8003a38:	021b      	lsls	r3, r3, #8
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003a3c:	e008      	b.n	8003a50 <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003a42:	231a      	movs	r3, #26
 8003a44:	2218      	movs	r2, #24
 8003a46:	189b      	adds	r3, r3, r2
 8003a48:	19db      	adds	r3, r3, r7
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	701a      	strb	r2, [r3, #0]
        break;
 8003a4e:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d020      	beq.n	8003a98 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	085a      	lsrs	r2, r3, #1
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	18d2      	adds	r2, r2, r3
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	0019      	movs	r1, r3
 8003a66:	0010      	movs	r0, r2
 8003a68:	f7fc fb60 	bl	800012c <__udivsi3>
 8003a6c:	0003      	movs	r3, r0
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a74:	2b0f      	cmp	r3, #15
 8003a76:	d909      	bls.n	8003a8c <UART_SetConfig+0x500>
 8003a78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a7a:	2380      	movs	r3, #128	; 0x80
 8003a7c:	025b      	lsls	r3, r3, #9
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d204      	bcs.n	8003a8c <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003a88:	60da      	str	r2, [r3, #12]
 8003a8a:	e005      	b.n	8003a98 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a8c:	231a      	movs	r3, #26
 8003a8e:	2218      	movs	r2, #24
 8003a90:	189b      	adds	r3, r3, r2
 8003a92:	19db      	adds	r3, r3, r7
 8003a94:	2201      	movs	r2, #1
 8003a96:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a98:	69fb      	ldr	r3, [r7, #28]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003aa4:	231a      	movs	r3, #26
 8003aa6:	2218      	movs	r2, #24
 8003aa8:	189b      	adds	r3, r3, r2
 8003aaa:	19db      	adds	r3, r3, r7
 8003aac:	781b      	ldrb	r3, [r3, #0]
}
 8003aae:	0018      	movs	r0, r3
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	b00e      	add	sp, #56	; 0x38
 8003ab4:	bdb0      	pop	{r4, r5, r7, pc}
 8003ab6:	46c0      	nop			; (mov r8, r8)
 8003ab8:	08004ac4 	.word	0x08004ac4
 8003abc:	40021000 	.word	0x40021000
 8003ac0:	003d0900 	.word	0x003d0900
 8003ac4:	00f42400 	.word	0x00f42400
 8003ac8:	08004ae8 	.word	0x08004ae8

08003acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a4a      	ldr	r2, [pc, #296]	; (8003c10 <UART_AdvFeatureConfig+0x144>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2202      	movs	r2, #2
 8003afc:	4013      	ands	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a43      	ldr	r2, [pc, #268]	; (8003c14 <UART_AdvFeatureConfig+0x148>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <UART_AdvFeatureConfig+0x14c>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2208      	movs	r2, #8
 8003b40:	4013      	ands	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a34      	ldr	r2, [pc, #208]	; (8003c1c <UART_AdvFeatureConfig+0x150>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	0019      	movs	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2210      	movs	r2, #16
 8003b62:	4013      	ands	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <UART_AdvFeatureConfig+0x154>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2220      	movs	r2, #32
 8003b84:	4013      	ands	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <UART_AdvFeatureConfig+0x158>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <UART_AdvFeatureConfig+0x15c>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	035b      	lsls	r3, r3, #13
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d10b      	bne.n	8003be6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <UART_AdvFeatureConfig+0x160>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	4013      	ands	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <UART_AdvFeatureConfig+0x164>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fffdffff 	.word	0xfffdffff
 8003c14:	fffeffff 	.word	0xfffeffff
 8003c18:	fffbffff 	.word	0xfffbffff
 8003c1c:	ffff7fff 	.word	0xffff7fff
 8003c20:	ffffefff 	.word	0xffffefff
 8003c24:	ffffdfff 	.word	0xffffdfff
 8003c28:	ffefffff 	.word	0xffefffff
 8003c2c:	ff9fffff 	.word	0xff9fffff
 8003c30:	fff7ffff 	.word	0xfff7ffff

08003c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b086      	sub	sp, #24
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2280      	movs	r2, #128	; 0x80
 8003c40:	2100      	movs	r1, #0
 8003c42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c44:	f7fd fa9e 	bl	8001184 <HAL_GetTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2208      	movs	r2, #8
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d10c      	bne.n	8003c74 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	0391      	lsls	r1, r2, #14
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4a17      	ldr	r2, [pc, #92]	; (8003cc0 <UART_CheckIdleState+0x8c>)
 8003c64:	9200      	str	r2, [sp, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f000 f82c 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 8003c6c:	1e03      	subs	r3, r0, #0
 8003c6e:	d001      	beq.n	8003c74 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c70:	2303      	movs	r3, #3
 8003c72:	e021      	b.n	8003cb8 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	2204      	movs	r2, #4
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b04      	cmp	r3, #4
 8003c80:	d10c      	bne.n	8003c9c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2280      	movs	r2, #128	; 0x80
 8003c86:	03d1      	lsls	r1, r2, #15
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	4a0d      	ldr	r2, [pc, #52]	; (8003cc0 <UART_CheckIdleState+0x8c>)
 8003c8c:	9200      	str	r2, [sp, #0]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f000 f818 	bl	8003cc4 <UART_WaitOnFlagUntilTimeout>
 8003c94:	1e03      	subs	r3, r0, #0
 8003c96:	d001      	beq.n	8003c9c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e00d      	b.n	8003cb8 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2274      	movs	r2, #116	; 0x74
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	0018      	movs	r0, r3
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	b004      	add	sp, #16
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	01ffffff 	.word	0x01ffffff

08003cc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b094      	sub	sp, #80	; 0x50
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	603b      	str	r3, [r7, #0]
 8003cd0:	1dfb      	adds	r3, r7, #7
 8003cd2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd4:	e0a3      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd8:	3301      	adds	r3, #1
 8003cda:	d100      	bne.n	8003cde <UART_WaitOnFlagUntilTimeout+0x1a>
 8003cdc:	e09f      	b.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cde:	f7fd fa51 	bl	8001184 <HAL_GetTick>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	1ad3      	subs	r3, r2, r3
 8003ce8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <UART_WaitOnFlagUntilTimeout+0x30>
 8003cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d13d      	bne.n	8003d70 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf4:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cfc:	647b      	str	r3, [r7, #68]	; 0x44
 8003cfe:	2301      	movs	r3, #1
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			; (mov r8, r8)
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	494c      	ldr	r1, [pc, #304]	; (8003e48 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003d16:	400a      	ands	r2, r1
 8003d18:	601a      	str	r2, [r3, #0]
 8003d1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d1c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	f383 8810 	msr	PRIMASK, r3
}
 8003d24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d26:	f3ef 8310 	mrs	r3, PRIMASK
 8003d2a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2e:	643b      	str	r3, [r7, #64]	; 0x40
 8003d30:	2301      	movs	r3, #1
 8003d32:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d36:	f383 8810 	msr	PRIMASK, r3
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	689a      	ldr	r2, [r3, #8]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2101      	movs	r1, #1
 8003d48:	438a      	bics	r2, r1
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d52:	f383 8810 	msr	PRIMASK, r3
}
 8003d56:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2274      	movs	r2, #116	; 0x74
 8003d68:	2100      	movs	r1, #0
 8003d6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e067      	b.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	2204      	movs	r2, #4
 8003d78:	4013      	ands	r3, r2
 8003d7a:	d050      	beq.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	69da      	ldr	r2, [r3, #28]
 8003d82:	2380      	movs	r3, #128	; 0x80
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	401a      	ands	r2, r3
 8003d88:	2380      	movs	r3, #128	; 0x80
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	d146      	bne.n	8003e1e <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2280      	movs	r2, #128	; 0x80
 8003d96:	0112      	lsls	r2, r2, #4
 8003d98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d9e:	613b      	str	r3, [r7, #16]
  return(result);
 8003da0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da4:	2301      	movs	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	f383 8810 	msr	PRIMASK, r3
}
 8003dae:	46c0      	nop			; (mov r8, r8)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4923      	ldr	r1, [pc, #140]	; (8003e48 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003dbc:	400a      	ands	r2, r1
 8003dbe:	601a      	str	r2, [r3, #0]
 8003dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f383 8810 	msr	PRIMASK, r3
}
 8003dca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003dd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003dd2:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dda:	6a3b      	ldr	r3, [r7, #32]
 8003ddc:	f383 8810 	msr	PRIMASK, r3
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	689a      	ldr	r2, [r3, #8]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	2101      	movs	r1, #1
 8003dee:	438a      	bics	r2, r1
 8003df0:	609a      	str	r2, [r3, #8]
 8003df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003df4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df8:	f383 8810 	msr	PRIMASK, r3
}
 8003dfc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2220      	movs	r2, #32
 8003e02:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2220      	movs	r2, #32
 8003e08:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	2120      	movs	r1, #32
 8003e10:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2274      	movs	r2, #116	; 0x74
 8003e16:	2100      	movs	r1, #0
 8003e18:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e010      	b.n	8003e40 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69db      	ldr	r3, [r3, #28]
 8003e24:	68ba      	ldr	r2, [r7, #8]
 8003e26:	4013      	ands	r3, r2
 8003e28:	68ba      	ldr	r2, [r7, #8]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	425a      	negs	r2, r3
 8003e2e:	4153      	adcs	r3, r2
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	001a      	movs	r2, r3
 8003e34:	1dfb      	adds	r3, r7, #7
 8003e36:	781b      	ldrb	r3, [r3, #0]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d100      	bne.n	8003e3e <UART_WaitOnFlagUntilTimeout+0x17a>
 8003e3c:	e74b      	b.n	8003cd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	0018      	movs	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	b014      	add	sp, #80	; 0x50
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	fffffe5f 	.word	0xfffffe5f

08003e4c <__errno>:
 8003e4c:	4b01      	ldr	r3, [pc, #4]	; (8003e54 <__errno+0x8>)
 8003e4e:	6818      	ldr	r0, [r3, #0]
 8003e50:	4770      	bx	lr
 8003e52:	46c0      	nop			; (mov r8, r8)
 8003e54:	2000000c 	.word	0x2000000c

08003e58 <__libc_init_array>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	2600      	movs	r6, #0
 8003e5c:	4d0c      	ldr	r5, [pc, #48]	; (8003e90 <__libc_init_array+0x38>)
 8003e5e:	4c0d      	ldr	r4, [pc, #52]	; (8003e94 <__libc_init_array+0x3c>)
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	42a6      	cmp	r6, r4
 8003e66:	d109      	bne.n	8003e7c <__libc_init_array+0x24>
 8003e68:	2600      	movs	r6, #0
 8003e6a:	f000 fc8b 	bl	8004784 <_init>
 8003e6e:	4d0a      	ldr	r5, [pc, #40]	; (8003e98 <__libc_init_array+0x40>)
 8003e70:	4c0a      	ldr	r4, [pc, #40]	; (8003e9c <__libc_init_array+0x44>)
 8003e72:	1b64      	subs	r4, r4, r5
 8003e74:	10a4      	asrs	r4, r4, #2
 8003e76:	42a6      	cmp	r6, r4
 8003e78:	d105      	bne.n	8003e86 <__libc_init_array+0x2e>
 8003e7a:	bd70      	pop	{r4, r5, r6, pc}
 8003e7c:	00b3      	lsls	r3, r6, #2
 8003e7e:	58eb      	ldr	r3, [r5, r3]
 8003e80:	4798      	blx	r3
 8003e82:	3601      	adds	r6, #1
 8003e84:	e7ee      	b.n	8003e64 <__libc_init_array+0xc>
 8003e86:	00b3      	lsls	r3, r6, #2
 8003e88:	58eb      	ldr	r3, [r5, r3]
 8003e8a:	4798      	blx	r3
 8003e8c:	3601      	adds	r6, #1
 8003e8e:	e7f2      	b.n	8003e76 <__libc_init_array+0x1e>
 8003e90:	08004ba8 	.word	0x08004ba8
 8003e94:	08004ba8 	.word	0x08004ba8
 8003e98:	08004ba8 	.word	0x08004ba8
 8003e9c:	08004bac 	.word	0x08004bac

08003ea0 <memcpy>:
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	b510      	push	{r4, lr}
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d100      	bne.n	8003eaa <memcpy+0xa>
 8003ea8:	bd10      	pop	{r4, pc}
 8003eaa:	5ccc      	ldrb	r4, [r1, r3]
 8003eac:	54c4      	strb	r4, [r0, r3]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	e7f8      	b.n	8003ea4 <memcpy+0x4>

08003eb2 <memset>:
 8003eb2:	0003      	movs	r3, r0
 8003eb4:	1882      	adds	r2, r0, r2
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d100      	bne.n	8003ebc <memset+0xa>
 8003eba:	4770      	bx	lr
 8003ebc:	7019      	strb	r1, [r3, #0]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	e7f9      	b.n	8003eb6 <memset+0x4>
	...

08003ec4 <siprintf>:
 8003ec4:	b40e      	push	{r1, r2, r3}
 8003ec6:	b500      	push	{lr}
 8003ec8:	490b      	ldr	r1, [pc, #44]	; (8003ef8 <siprintf+0x34>)
 8003eca:	b09c      	sub	sp, #112	; 0x70
 8003ecc:	ab1d      	add	r3, sp, #116	; 0x74
 8003ece:	9002      	str	r0, [sp, #8]
 8003ed0:	9006      	str	r0, [sp, #24]
 8003ed2:	9107      	str	r1, [sp, #28]
 8003ed4:	9104      	str	r1, [sp, #16]
 8003ed6:	4809      	ldr	r0, [pc, #36]	; (8003efc <siprintf+0x38>)
 8003ed8:	4909      	ldr	r1, [pc, #36]	; (8003f00 <siprintf+0x3c>)
 8003eda:	cb04      	ldmia	r3!, {r2}
 8003edc:	9105      	str	r1, [sp, #20]
 8003ede:	6800      	ldr	r0, [r0, #0]
 8003ee0:	a902      	add	r1, sp, #8
 8003ee2:	9301      	str	r3, [sp, #4]
 8003ee4:	f000 f870 	bl	8003fc8 <_svfiprintf_r>
 8003ee8:	2300      	movs	r3, #0
 8003eea:	9a02      	ldr	r2, [sp, #8]
 8003eec:	7013      	strb	r3, [r2, #0]
 8003eee:	b01c      	add	sp, #112	; 0x70
 8003ef0:	bc08      	pop	{r3}
 8003ef2:	b003      	add	sp, #12
 8003ef4:	4718      	bx	r3
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	7fffffff 	.word	0x7fffffff
 8003efc:	2000000c 	.word	0x2000000c
 8003f00:	ffff0208 	.word	0xffff0208

08003f04 <__ssputs_r>:
 8003f04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f06:	688e      	ldr	r6, [r1, #8]
 8003f08:	b085      	sub	sp, #20
 8003f0a:	0007      	movs	r7, r0
 8003f0c:	000c      	movs	r4, r1
 8003f0e:	9203      	str	r2, [sp, #12]
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	429e      	cmp	r6, r3
 8003f14:	d83c      	bhi.n	8003f90 <__ssputs_r+0x8c>
 8003f16:	2390      	movs	r3, #144	; 0x90
 8003f18:	898a      	ldrh	r2, [r1, #12]
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	421a      	tst	r2, r3
 8003f1e:	d034      	beq.n	8003f8a <__ssputs_r+0x86>
 8003f20:	6909      	ldr	r1, [r1, #16]
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	6960      	ldr	r0, [r4, #20]
 8003f26:	1a5b      	subs	r3, r3, r1
 8003f28:	9302      	str	r3, [sp, #8]
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	4343      	muls	r3, r0
 8003f2e:	0fdd      	lsrs	r5, r3, #31
 8003f30:	18ed      	adds	r5, r5, r3
 8003f32:	9b01      	ldr	r3, [sp, #4]
 8003f34:	9802      	ldr	r0, [sp, #8]
 8003f36:	3301      	adds	r3, #1
 8003f38:	181b      	adds	r3, r3, r0
 8003f3a:	106d      	asrs	r5, r5, #1
 8003f3c:	42ab      	cmp	r3, r5
 8003f3e:	d900      	bls.n	8003f42 <__ssputs_r+0x3e>
 8003f40:	001d      	movs	r5, r3
 8003f42:	0553      	lsls	r3, r2, #21
 8003f44:	d532      	bpl.n	8003fac <__ssputs_r+0xa8>
 8003f46:	0029      	movs	r1, r5
 8003f48:	0038      	movs	r0, r7
 8003f4a:	f000 fb4b 	bl	80045e4 <_malloc_r>
 8003f4e:	1e06      	subs	r6, r0, #0
 8003f50:	d109      	bne.n	8003f66 <__ssputs_r+0x62>
 8003f52:	230c      	movs	r3, #12
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	2340      	movs	r3, #64	; 0x40
 8003f58:	2001      	movs	r0, #1
 8003f5a:	89a2      	ldrh	r2, [r4, #12]
 8003f5c:	4240      	negs	r0, r0
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	b005      	add	sp, #20
 8003f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f66:	9a02      	ldr	r2, [sp, #8]
 8003f68:	6921      	ldr	r1, [r4, #16]
 8003f6a:	f7ff ff99 	bl	8003ea0 <memcpy>
 8003f6e:	89a3      	ldrh	r3, [r4, #12]
 8003f70:	4a14      	ldr	r2, [pc, #80]	; (8003fc4 <__ssputs_r+0xc0>)
 8003f72:	401a      	ands	r2, r3
 8003f74:	2380      	movs	r3, #128	; 0x80
 8003f76:	4313      	orrs	r3, r2
 8003f78:	81a3      	strh	r3, [r4, #12]
 8003f7a:	9b02      	ldr	r3, [sp, #8]
 8003f7c:	6126      	str	r6, [r4, #16]
 8003f7e:	18f6      	adds	r6, r6, r3
 8003f80:	6026      	str	r6, [r4, #0]
 8003f82:	6165      	str	r5, [r4, #20]
 8003f84:	9e01      	ldr	r6, [sp, #4]
 8003f86:	1aed      	subs	r5, r5, r3
 8003f88:	60a5      	str	r5, [r4, #8]
 8003f8a:	9b01      	ldr	r3, [sp, #4]
 8003f8c:	429e      	cmp	r6, r3
 8003f8e:	d900      	bls.n	8003f92 <__ssputs_r+0x8e>
 8003f90:	9e01      	ldr	r6, [sp, #4]
 8003f92:	0032      	movs	r2, r6
 8003f94:	9903      	ldr	r1, [sp, #12]
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	f000 faa5 	bl	80044e6 <memmove>
 8003f9c:	68a3      	ldr	r3, [r4, #8]
 8003f9e:	2000      	movs	r0, #0
 8003fa0:	1b9b      	subs	r3, r3, r6
 8003fa2:	60a3      	str	r3, [r4, #8]
 8003fa4:	6823      	ldr	r3, [r4, #0]
 8003fa6:	199e      	adds	r6, r3, r6
 8003fa8:	6026      	str	r6, [r4, #0]
 8003faa:	e7da      	b.n	8003f62 <__ssputs_r+0x5e>
 8003fac:	002a      	movs	r2, r5
 8003fae:	0038      	movs	r0, r7
 8003fb0:	f000 fb8e 	bl	80046d0 <_realloc_r>
 8003fb4:	1e06      	subs	r6, r0, #0
 8003fb6:	d1e0      	bne.n	8003f7a <__ssputs_r+0x76>
 8003fb8:	0038      	movs	r0, r7
 8003fba:	6921      	ldr	r1, [r4, #16]
 8003fbc:	f000 faa6 	bl	800450c <_free_r>
 8003fc0:	e7c7      	b.n	8003f52 <__ssputs_r+0x4e>
 8003fc2:	46c0      	nop			; (mov r8, r8)
 8003fc4:	fffffb7f 	.word	0xfffffb7f

08003fc8 <_svfiprintf_r>:
 8003fc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fca:	b0a1      	sub	sp, #132	; 0x84
 8003fcc:	9003      	str	r0, [sp, #12]
 8003fce:	001d      	movs	r5, r3
 8003fd0:	898b      	ldrh	r3, [r1, #12]
 8003fd2:	000f      	movs	r7, r1
 8003fd4:	0016      	movs	r6, r2
 8003fd6:	061b      	lsls	r3, r3, #24
 8003fd8:	d511      	bpl.n	8003ffe <_svfiprintf_r+0x36>
 8003fda:	690b      	ldr	r3, [r1, #16]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10e      	bne.n	8003ffe <_svfiprintf_r+0x36>
 8003fe0:	2140      	movs	r1, #64	; 0x40
 8003fe2:	f000 faff 	bl	80045e4 <_malloc_r>
 8003fe6:	6038      	str	r0, [r7, #0]
 8003fe8:	6138      	str	r0, [r7, #16]
 8003fea:	2800      	cmp	r0, #0
 8003fec:	d105      	bne.n	8003ffa <_svfiprintf_r+0x32>
 8003fee:	230c      	movs	r3, #12
 8003ff0:	9a03      	ldr	r2, [sp, #12]
 8003ff2:	3801      	subs	r0, #1
 8003ff4:	6013      	str	r3, [r2, #0]
 8003ff6:	b021      	add	sp, #132	; 0x84
 8003ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ffa:	2340      	movs	r3, #64	; 0x40
 8003ffc:	617b      	str	r3, [r7, #20]
 8003ffe:	2300      	movs	r3, #0
 8004000:	ac08      	add	r4, sp, #32
 8004002:	6163      	str	r3, [r4, #20]
 8004004:	3320      	adds	r3, #32
 8004006:	7663      	strb	r3, [r4, #25]
 8004008:	3310      	adds	r3, #16
 800400a:	76a3      	strb	r3, [r4, #26]
 800400c:	9507      	str	r5, [sp, #28]
 800400e:	0035      	movs	r5, r6
 8004010:	782b      	ldrb	r3, [r5, #0]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d001      	beq.n	800401a <_svfiprintf_r+0x52>
 8004016:	2b25      	cmp	r3, #37	; 0x25
 8004018:	d147      	bne.n	80040aa <_svfiprintf_r+0xe2>
 800401a:	1bab      	subs	r3, r5, r6
 800401c:	9305      	str	r3, [sp, #20]
 800401e:	42b5      	cmp	r5, r6
 8004020:	d00c      	beq.n	800403c <_svfiprintf_r+0x74>
 8004022:	0032      	movs	r2, r6
 8004024:	0039      	movs	r1, r7
 8004026:	9803      	ldr	r0, [sp, #12]
 8004028:	f7ff ff6c 	bl	8003f04 <__ssputs_r>
 800402c:	1c43      	adds	r3, r0, #1
 800402e:	d100      	bne.n	8004032 <_svfiprintf_r+0x6a>
 8004030:	e0ae      	b.n	8004190 <_svfiprintf_r+0x1c8>
 8004032:	6962      	ldr	r2, [r4, #20]
 8004034:	9b05      	ldr	r3, [sp, #20]
 8004036:	4694      	mov	ip, r2
 8004038:	4463      	add	r3, ip
 800403a:	6163      	str	r3, [r4, #20]
 800403c:	782b      	ldrb	r3, [r5, #0]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d100      	bne.n	8004044 <_svfiprintf_r+0x7c>
 8004042:	e0a5      	b.n	8004190 <_svfiprintf_r+0x1c8>
 8004044:	2201      	movs	r2, #1
 8004046:	2300      	movs	r3, #0
 8004048:	4252      	negs	r2, r2
 800404a:	6062      	str	r2, [r4, #4]
 800404c:	a904      	add	r1, sp, #16
 800404e:	3254      	adds	r2, #84	; 0x54
 8004050:	1852      	adds	r2, r2, r1
 8004052:	1c6e      	adds	r6, r5, #1
 8004054:	6023      	str	r3, [r4, #0]
 8004056:	60e3      	str	r3, [r4, #12]
 8004058:	60a3      	str	r3, [r4, #8]
 800405a:	7013      	strb	r3, [r2, #0]
 800405c:	65a3      	str	r3, [r4, #88]	; 0x58
 800405e:	2205      	movs	r2, #5
 8004060:	7831      	ldrb	r1, [r6, #0]
 8004062:	4854      	ldr	r0, [pc, #336]	; (80041b4 <_svfiprintf_r+0x1ec>)
 8004064:	f000 fa34 	bl	80044d0 <memchr>
 8004068:	1c75      	adds	r5, r6, #1
 800406a:	2800      	cmp	r0, #0
 800406c:	d11f      	bne.n	80040ae <_svfiprintf_r+0xe6>
 800406e:	6822      	ldr	r2, [r4, #0]
 8004070:	06d3      	lsls	r3, r2, #27
 8004072:	d504      	bpl.n	800407e <_svfiprintf_r+0xb6>
 8004074:	2353      	movs	r3, #83	; 0x53
 8004076:	a904      	add	r1, sp, #16
 8004078:	185b      	adds	r3, r3, r1
 800407a:	2120      	movs	r1, #32
 800407c:	7019      	strb	r1, [r3, #0]
 800407e:	0713      	lsls	r3, r2, #28
 8004080:	d504      	bpl.n	800408c <_svfiprintf_r+0xc4>
 8004082:	2353      	movs	r3, #83	; 0x53
 8004084:	a904      	add	r1, sp, #16
 8004086:	185b      	adds	r3, r3, r1
 8004088:	212b      	movs	r1, #43	; 0x2b
 800408a:	7019      	strb	r1, [r3, #0]
 800408c:	7833      	ldrb	r3, [r6, #0]
 800408e:	2b2a      	cmp	r3, #42	; 0x2a
 8004090:	d016      	beq.n	80040c0 <_svfiprintf_r+0xf8>
 8004092:	0035      	movs	r5, r6
 8004094:	2100      	movs	r1, #0
 8004096:	200a      	movs	r0, #10
 8004098:	68e3      	ldr	r3, [r4, #12]
 800409a:	782a      	ldrb	r2, [r5, #0]
 800409c:	1c6e      	adds	r6, r5, #1
 800409e:	3a30      	subs	r2, #48	; 0x30
 80040a0:	2a09      	cmp	r2, #9
 80040a2:	d94e      	bls.n	8004142 <_svfiprintf_r+0x17a>
 80040a4:	2900      	cmp	r1, #0
 80040a6:	d111      	bne.n	80040cc <_svfiprintf_r+0x104>
 80040a8:	e017      	b.n	80040da <_svfiprintf_r+0x112>
 80040aa:	3501      	adds	r5, #1
 80040ac:	e7b0      	b.n	8004010 <_svfiprintf_r+0x48>
 80040ae:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <_svfiprintf_r+0x1ec>)
 80040b0:	6822      	ldr	r2, [r4, #0]
 80040b2:	1ac0      	subs	r0, r0, r3
 80040b4:	2301      	movs	r3, #1
 80040b6:	4083      	lsls	r3, r0
 80040b8:	4313      	orrs	r3, r2
 80040ba:	002e      	movs	r6, r5
 80040bc:	6023      	str	r3, [r4, #0]
 80040be:	e7ce      	b.n	800405e <_svfiprintf_r+0x96>
 80040c0:	9b07      	ldr	r3, [sp, #28]
 80040c2:	1d19      	adds	r1, r3, #4
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	9107      	str	r1, [sp, #28]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	db01      	blt.n	80040d0 <_svfiprintf_r+0x108>
 80040cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ce:	e004      	b.n	80040da <_svfiprintf_r+0x112>
 80040d0:	425b      	negs	r3, r3
 80040d2:	60e3      	str	r3, [r4, #12]
 80040d4:	2302      	movs	r3, #2
 80040d6:	4313      	orrs	r3, r2
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	782b      	ldrb	r3, [r5, #0]
 80040dc:	2b2e      	cmp	r3, #46	; 0x2e
 80040de:	d10a      	bne.n	80040f6 <_svfiprintf_r+0x12e>
 80040e0:	786b      	ldrb	r3, [r5, #1]
 80040e2:	2b2a      	cmp	r3, #42	; 0x2a
 80040e4:	d135      	bne.n	8004152 <_svfiprintf_r+0x18a>
 80040e6:	9b07      	ldr	r3, [sp, #28]
 80040e8:	3502      	adds	r5, #2
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	9207      	str	r2, [sp, #28]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	db2b      	blt.n	800414c <_svfiprintf_r+0x184>
 80040f4:	9309      	str	r3, [sp, #36]	; 0x24
 80040f6:	4e30      	ldr	r6, [pc, #192]	; (80041b8 <_svfiprintf_r+0x1f0>)
 80040f8:	2203      	movs	r2, #3
 80040fa:	0030      	movs	r0, r6
 80040fc:	7829      	ldrb	r1, [r5, #0]
 80040fe:	f000 f9e7 	bl	80044d0 <memchr>
 8004102:	2800      	cmp	r0, #0
 8004104:	d006      	beq.n	8004114 <_svfiprintf_r+0x14c>
 8004106:	2340      	movs	r3, #64	; 0x40
 8004108:	1b80      	subs	r0, r0, r6
 800410a:	4083      	lsls	r3, r0
 800410c:	6822      	ldr	r2, [r4, #0]
 800410e:	3501      	adds	r5, #1
 8004110:	4313      	orrs	r3, r2
 8004112:	6023      	str	r3, [r4, #0]
 8004114:	7829      	ldrb	r1, [r5, #0]
 8004116:	2206      	movs	r2, #6
 8004118:	4828      	ldr	r0, [pc, #160]	; (80041bc <_svfiprintf_r+0x1f4>)
 800411a:	1c6e      	adds	r6, r5, #1
 800411c:	7621      	strb	r1, [r4, #24]
 800411e:	f000 f9d7 	bl	80044d0 <memchr>
 8004122:	2800      	cmp	r0, #0
 8004124:	d03c      	beq.n	80041a0 <_svfiprintf_r+0x1d8>
 8004126:	4b26      	ldr	r3, [pc, #152]	; (80041c0 <_svfiprintf_r+0x1f8>)
 8004128:	2b00      	cmp	r3, #0
 800412a:	d125      	bne.n	8004178 <_svfiprintf_r+0x1b0>
 800412c:	2207      	movs	r2, #7
 800412e:	9b07      	ldr	r3, [sp, #28]
 8004130:	3307      	adds	r3, #7
 8004132:	4393      	bics	r3, r2
 8004134:	3308      	adds	r3, #8
 8004136:	9307      	str	r3, [sp, #28]
 8004138:	6963      	ldr	r3, [r4, #20]
 800413a:	9a04      	ldr	r2, [sp, #16]
 800413c:	189b      	adds	r3, r3, r2
 800413e:	6163      	str	r3, [r4, #20]
 8004140:	e765      	b.n	800400e <_svfiprintf_r+0x46>
 8004142:	4343      	muls	r3, r0
 8004144:	0035      	movs	r5, r6
 8004146:	2101      	movs	r1, #1
 8004148:	189b      	adds	r3, r3, r2
 800414a:	e7a6      	b.n	800409a <_svfiprintf_r+0xd2>
 800414c:	2301      	movs	r3, #1
 800414e:	425b      	negs	r3, r3
 8004150:	e7d0      	b.n	80040f4 <_svfiprintf_r+0x12c>
 8004152:	2300      	movs	r3, #0
 8004154:	200a      	movs	r0, #10
 8004156:	001a      	movs	r2, r3
 8004158:	3501      	adds	r5, #1
 800415a:	6063      	str	r3, [r4, #4]
 800415c:	7829      	ldrb	r1, [r5, #0]
 800415e:	1c6e      	adds	r6, r5, #1
 8004160:	3930      	subs	r1, #48	; 0x30
 8004162:	2909      	cmp	r1, #9
 8004164:	d903      	bls.n	800416e <_svfiprintf_r+0x1a6>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0c5      	beq.n	80040f6 <_svfiprintf_r+0x12e>
 800416a:	9209      	str	r2, [sp, #36]	; 0x24
 800416c:	e7c3      	b.n	80040f6 <_svfiprintf_r+0x12e>
 800416e:	4342      	muls	r2, r0
 8004170:	0035      	movs	r5, r6
 8004172:	2301      	movs	r3, #1
 8004174:	1852      	adds	r2, r2, r1
 8004176:	e7f1      	b.n	800415c <_svfiprintf_r+0x194>
 8004178:	ab07      	add	r3, sp, #28
 800417a:	9300      	str	r3, [sp, #0]
 800417c:	003a      	movs	r2, r7
 800417e:	0021      	movs	r1, r4
 8004180:	4b10      	ldr	r3, [pc, #64]	; (80041c4 <_svfiprintf_r+0x1fc>)
 8004182:	9803      	ldr	r0, [sp, #12]
 8004184:	e000      	b.n	8004188 <_svfiprintf_r+0x1c0>
 8004186:	bf00      	nop
 8004188:	9004      	str	r0, [sp, #16]
 800418a:	9b04      	ldr	r3, [sp, #16]
 800418c:	3301      	adds	r3, #1
 800418e:	d1d3      	bne.n	8004138 <_svfiprintf_r+0x170>
 8004190:	89bb      	ldrh	r3, [r7, #12]
 8004192:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004194:	065b      	lsls	r3, r3, #25
 8004196:	d400      	bmi.n	800419a <_svfiprintf_r+0x1d2>
 8004198:	e72d      	b.n	8003ff6 <_svfiprintf_r+0x2e>
 800419a:	2001      	movs	r0, #1
 800419c:	4240      	negs	r0, r0
 800419e:	e72a      	b.n	8003ff6 <_svfiprintf_r+0x2e>
 80041a0:	ab07      	add	r3, sp, #28
 80041a2:	9300      	str	r3, [sp, #0]
 80041a4:	003a      	movs	r2, r7
 80041a6:	0021      	movs	r1, r4
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <_svfiprintf_r+0x1fc>)
 80041aa:	9803      	ldr	r0, [sp, #12]
 80041ac:	f000 f87c 	bl	80042a8 <_printf_i>
 80041b0:	e7ea      	b.n	8004188 <_svfiprintf_r+0x1c0>
 80041b2:	46c0      	nop			; (mov r8, r8)
 80041b4:	08004b0c 	.word	0x08004b0c
 80041b8:	08004b12 	.word	0x08004b12
 80041bc:	08004b16 	.word	0x08004b16
 80041c0:	00000000 	.word	0x00000000
 80041c4:	08003f05 	.word	0x08003f05

080041c8 <_printf_common>:
 80041c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ca:	0015      	movs	r5, r2
 80041cc:	9301      	str	r3, [sp, #4]
 80041ce:	688a      	ldr	r2, [r1, #8]
 80041d0:	690b      	ldr	r3, [r1, #16]
 80041d2:	000c      	movs	r4, r1
 80041d4:	9000      	str	r0, [sp, #0]
 80041d6:	4293      	cmp	r3, r2
 80041d8:	da00      	bge.n	80041dc <_printf_common+0x14>
 80041da:	0013      	movs	r3, r2
 80041dc:	0022      	movs	r2, r4
 80041de:	602b      	str	r3, [r5, #0]
 80041e0:	3243      	adds	r2, #67	; 0x43
 80041e2:	7812      	ldrb	r2, [r2, #0]
 80041e4:	2a00      	cmp	r2, #0
 80041e6:	d001      	beq.n	80041ec <_printf_common+0x24>
 80041e8:	3301      	adds	r3, #1
 80041ea:	602b      	str	r3, [r5, #0]
 80041ec:	6823      	ldr	r3, [r4, #0]
 80041ee:	069b      	lsls	r3, r3, #26
 80041f0:	d502      	bpl.n	80041f8 <_printf_common+0x30>
 80041f2:	682b      	ldr	r3, [r5, #0]
 80041f4:	3302      	adds	r3, #2
 80041f6:	602b      	str	r3, [r5, #0]
 80041f8:	6822      	ldr	r2, [r4, #0]
 80041fa:	2306      	movs	r3, #6
 80041fc:	0017      	movs	r7, r2
 80041fe:	401f      	ands	r7, r3
 8004200:	421a      	tst	r2, r3
 8004202:	d027      	beq.n	8004254 <_printf_common+0x8c>
 8004204:	0023      	movs	r3, r4
 8004206:	3343      	adds	r3, #67	; 0x43
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	1e5a      	subs	r2, r3, #1
 800420c:	4193      	sbcs	r3, r2
 800420e:	6822      	ldr	r2, [r4, #0]
 8004210:	0692      	lsls	r2, r2, #26
 8004212:	d430      	bmi.n	8004276 <_printf_common+0xae>
 8004214:	0022      	movs	r2, r4
 8004216:	9901      	ldr	r1, [sp, #4]
 8004218:	9800      	ldr	r0, [sp, #0]
 800421a:	9e08      	ldr	r6, [sp, #32]
 800421c:	3243      	adds	r2, #67	; 0x43
 800421e:	47b0      	blx	r6
 8004220:	1c43      	adds	r3, r0, #1
 8004222:	d025      	beq.n	8004270 <_printf_common+0xa8>
 8004224:	2306      	movs	r3, #6
 8004226:	6820      	ldr	r0, [r4, #0]
 8004228:	682a      	ldr	r2, [r5, #0]
 800422a:	68e1      	ldr	r1, [r4, #12]
 800422c:	2500      	movs	r5, #0
 800422e:	4003      	ands	r3, r0
 8004230:	2b04      	cmp	r3, #4
 8004232:	d103      	bne.n	800423c <_printf_common+0x74>
 8004234:	1a8d      	subs	r5, r1, r2
 8004236:	43eb      	mvns	r3, r5
 8004238:	17db      	asrs	r3, r3, #31
 800423a:	401d      	ands	r5, r3
 800423c:	68a3      	ldr	r3, [r4, #8]
 800423e:	6922      	ldr	r2, [r4, #16]
 8004240:	4293      	cmp	r3, r2
 8004242:	dd01      	ble.n	8004248 <_printf_common+0x80>
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	18ed      	adds	r5, r5, r3
 8004248:	2700      	movs	r7, #0
 800424a:	42bd      	cmp	r5, r7
 800424c:	d120      	bne.n	8004290 <_printf_common+0xc8>
 800424e:	2000      	movs	r0, #0
 8004250:	e010      	b.n	8004274 <_printf_common+0xac>
 8004252:	3701      	adds	r7, #1
 8004254:	68e3      	ldr	r3, [r4, #12]
 8004256:	682a      	ldr	r2, [r5, #0]
 8004258:	1a9b      	subs	r3, r3, r2
 800425a:	42bb      	cmp	r3, r7
 800425c:	ddd2      	ble.n	8004204 <_printf_common+0x3c>
 800425e:	0022      	movs	r2, r4
 8004260:	2301      	movs	r3, #1
 8004262:	9901      	ldr	r1, [sp, #4]
 8004264:	9800      	ldr	r0, [sp, #0]
 8004266:	9e08      	ldr	r6, [sp, #32]
 8004268:	3219      	adds	r2, #25
 800426a:	47b0      	blx	r6
 800426c:	1c43      	adds	r3, r0, #1
 800426e:	d1f0      	bne.n	8004252 <_printf_common+0x8a>
 8004270:	2001      	movs	r0, #1
 8004272:	4240      	negs	r0, r0
 8004274:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004276:	2030      	movs	r0, #48	; 0x30
 8004278:	18e1      	adds	r1, r4, r3
 800427a:	3143      	adds	r1, #67	; 0x43
 800427c:	7008      	strb	r0, [r1, #0]
 800427e:	0021      	movs	r1, r4
 8004280:	1c5a      	adds	r2, r3, #1
 8004282:	3145      	adds	r1, #69	; 0x45
 8004284:	7809      	ldrb	r1, [r1, #0]
 8004286:	18a2      	adds	r2, r4, r2
 8004288:	3243      	adds	r2, #67	; 0x43
 800428a:	3302      	adds	r3, #2
 800428c:	7011      	strb	r1, [r2, #0]
 800428e:	e7c1      	b.n	8004214 <_printf_common+0x4c>
 8004290:	0022      	movs	r2, r4
 8004292:	2301      	movs	r3, #1
 8004294:	9901      	ldr	r1, [sp, #4]
 8004296:	9800      	ldr	r0, [sp, #0]
 8004298:	9e08      	ldr	r6, [sp, #32]
 800429a:	321a      	adds	r2, #26
 800429c:	47b0      	blx	r6
 800429e:	1c43      	adds	r3, r0, #1
 80042a0:	d0e6      	beq.n	8004270 <_printf_common+0xa8>
 80042a2:	3701      	adds	r7, #1
 80042a4:	e7d1      	b.n	800424a <_printf_common+0x82>
	...

080042a8 <_printf_i>:
 80042a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042aa:	b08b      	sub	sp, #44	; 0x2c
 80042ac:	9206      	str	r2, [sp, #24]
 80042ae:	000a      	movs	r2, r1
 80042b0:	3243      	adds	r2, #67	; 0x43
 80042b2:	9307      	str	r3, [sp, #28]
 80042b4:	9005      	str	r0, [sp, #20]
 80042b6:	9204      	str	r2, [sp, #16]
 80042b8:	7e0a      	ldrb	r2, [r1, #24]
 80042ba:	000c      	movs	r4, r1
 80042bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042be:	2a78      	cmp	r2, #120	; 0x78
 80042c0:	d807      	bhi.n	80042d2 <_printf_i+0x2a>
 80042c2:	2a62      	cmp	r2, #98	; 0x62
 80042c4:	d809      	bhi.n	80042da <_printf_i+0x32>
 80042c6:	2a00      	cmp	r2, #0
 80042c8:	d100      	bne.n	80042cc <_printf_i+0x24>
 80042ca:	e0c1      	b.n	8004450 <_printf_i+0x1a8>
 80042cc:	2a58      	cmp	r2, #88	; 0x58
 80042ce:	d100      	bne.n	80042d2 <_printf_i+0x2a>
 80042d0:	e08c      	b.n	80043ec <_printf_i+0x144>
 80042d2:	0026      	movs	r6, r4
 80042d4:	3642      	adds	r6, #66	; 0x42
 80042d6:	7032      	strb	r2, [r6, #0]
 80042d8:	e022      	b.n	8004320 <_printf_i+0x78>
 80042da:	0010      	movs	r0, r2
 80042dc:	3863      	subs	r0, #99	; 0x63
 80042de:	2815      	cmp	r0, #21
 80042e0:	d8f7      	bhi.n	80042d2 <_printf_i+0x2a>
 80042e2:	f7fb ff19 	bl	8000118 <__gnu_thumb1_case_shi>
 80042e6:	0016      	.short	0x0016
 80042e8:	fff6001f 	.word	0xfff6001f
 80042ec:	fff6fff6 	.word	0xfff6fff6
 80042f0:	001ffff6 	.word	0x001ffff6
 80042f4:	fff6fff6 	.word	0xfff6fff6
 80042f8:	fff6fff6 	.word	0xfff6fff6
 80042fc:	003600a8 	.word	0x003600a8
 8004300:	fff6009a 	.word	0xfff6009a
 8004304:	00b9fff6 	.word	0x00b9fff6
 8004308:	0036fff6 	.word	0x0036fff6
 800430c:	fff6fff6 	.word	0xfff6fff6
 8004310:	009e      	.short	0x009e
 8004312:	0026      	movs	r6, r4
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	3642      	adds	r6, #66	; 0x42
 8004318:	1d11      	adds	r1, r2, #4
 800431a:	6019      	str	r1, [r3, #0]
 800431c:	6813      	ldr	r3, [r2, #0]
 800431e:	7033      	strb	r3, [r6, #0]
 8004320:	2301      	movs	r3, #1
 8004322:	e0a7      	b.n	8004474 <_printf_i+0x1cc>
 8004324:	6808      	ldr	r0, [r1, #0]
 8004326:	6819      	ldr	r1, [r3, #0]
 8004328:	1d0a      	adds	r2, r1, #4
 800432a:	0605      	lsls	r5, r0, #24
 800432c:	d50b      	bpl.n	8004346 <_printf_i+0x9e>
 800432e:	680d      	ldr	r5, [r1, #0]
 8004330:	601a      	str	r2, [r3, #0]
 8004332:	2d00      	cmp	r5, #0
 8004334:	da03      	bge.n	800433e <_printf_i+0x96>
 8004336:	232d      	movs	r3, #45	; 0x2d
 8004338:	9a04      	ldr	r2, [sp, #16]
 800433a:	426d      	negs	r5, r5
 800433c:	7013      	strb	r3, [r2, #0]
 800433e:	4b61      	ldr	r3, [pc, #388]	; (80044c4 <_printf_i+0x21c>)
 8004340:	270a      	movs	r7, #10
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	e01b      	b.n	800437e <_printf_i+0xd6>
 8004346:	680d      	ldr	r5, [r1, #0]
 8004348:	601a      	str	r2, [r3, #0]
 800434a:	0641      	lsls	r1, r0, #25
 800434c:	d5f1      	bpl.n	8004332 <_printf_i+0x8a>
 800434e:	b22d      	sxth	r5, r5
 8004350:	e7ef      	b.n	8004332 <_printf_i+0x8a>
 8004352:	680d      	ldr	r5, [r1, #0]
 8004354:	6819      	ldr	r1, [r3, #0]
 8004356:	1d08      	adds	r0, r1, #4
 8004358:	6018      	str	r0, [r3, #0]
 800435a:	062e      	lsls	r6, r5, #24
 800435c:	d501      	bpl.n	8004362 <_printf_i+0xba>
 800435e:	680d      	ldr	r5, [r1, #0]
 8004360:	e003      	b.n	800436a <_printf_i+0xc2>
 8004362:	066d      	lsls	r5, r5, #25
 8004364:	d5fb      	bpl.n	800435e <_printf_i+0xb6>
 8004366:	680d      	ldr	r5, [r1, #0]
 8004368:	b2ad      	uxth	r5, r5
 800436a:	4b56      	ldr	r3, [pc, #344]	; (80044c4 <_printf_i+0x21c>)
 800436c:	2708      	movs	r7, #8
 800436e:	9303      	str	r3, [sp, #12]
 8004370:	2a6f      	cmp	r2, #111	; 0x6f
 8004372:	d000      	beq.n	8004376 <_printf_i+0xce>
 8004374:	3702      	adds	r7, #2
 8004376:	0023      	movs	r3, r4
 8004378:	2200      	movs	r2, #0
 800437a:	3343      	adds	r3, #67	; 0x43
 800437c:	701a      	strb	r2, [r3, #0]
 800437e:	6863      	ldr	r3, [r4, #4]
 8004380:	60a3      	str	r3, [r4, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	db03      	blt.n	800438e <_printf_i+0xe6>
 8004386:	2204      	movs	r2, #4
 8004388:	6821      	ldr	r1, [r4, #0]
 800438a:	4391      	bics	r1, r2
 800438c:	6021      	str	r1, [r4, #0]
 800438e:	2d00      	cmp	r5, #0
 8004390:	d102      	bne.n	8004398 <_printf_i+0xf0>
 8004392:	9e04      	ldr	r6, [sp, #16]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00c      	beq.n	80043b2 <_printf_i+0x10a>
 8004398:	9e04      	ldr	r6, [sp, #16]
 800439a:	0028      	movs	r0, r5
 800439c:	0039      	movs	r1, r7
 800439e:	f7fb ff4b 	bl	8000238 <__aeabi_uidivmod>
 80043a2:	9b03      	ldr	r3, [sp, #12]
 80043a4:	3e01      	subs	r6, #1
 80043a6:	5c5b      	ldrb	r3, [r3, r1]
 80043a8:	7033      	strb	r3, [r6, #0]
 80043aa:	002b      	movs	r3, r5
 80043ac:	0005      	movs	r5, r0
 80043ae:	429f      	cmp	r7, r3
 80043b0:	d9f3      	bls.n	800439a <_printf_i+0xf2>
 80043b2:	2f08      	cmp	r7, #8
 80043b4:	d109      	bne.n	80043ca <_printf_i+0x122>
 80043b6:	6823      	ldr	r3, [r4, #0]
 80043b8:	07db      	lsls	r3, r3, #31
 80043ba:	d506      	bpl.n	80043ca <_printf_i+0x122>
 80043bc:	6863      	ldr	r3, [r4, #4]
 80043be:	6922      	ldr	r2, [r4, #16]
 80043c0:	4293      	cmp	r3, r2
 80043c2:	dc02      	bgt.n	80043ca <_printf_i+0x122>
 80043c4:	2330      	movs	r3, #48	; 0x30
 80043c6:	3e01      	subs	r6, #1
 80043c8:	7033      	strb	r3, [r6, #0]
 80043ca:	9b04      	ldr	r3, [sp, #16]
 80043cc:	1b9b      	subs	r3, r3, r6
 80043ce:	6123      	str	r3, [r4, #16]
 80043d0:	9b07      	ldr	r3, [sp, #28]
 80043d2:	0021      	movs	r1, r4
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	9805      	ldr	r0, [sp, #20]
 80043d8:	9b06      	ldr	r3, [sp, #24]
 80043da:	aa09      	add	r2, sp, #36	; 0x24
 80043dc:	f7ff fef4 	bl	80041c8 <_printf_common>
 80043e0:	1c43      	adds	r3, r0, #1
 80043e2:	d14c      	bne.n	800447e <_printf_i+0x1d6>
 80043e4:	2001      	movs	r0, #1
 80043e6:	4240      	negs	r0, r0
 80043e8:	b00b      	add	sp, #44	; 0x2c
 80043ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043ec:	3145      	adds	r1, #69	; 0x45
 80043ee:	700a      	strb	r2, [r1, #0]
 80043f0:	4a34      	ldr	r2, [pc, #208]	; (80044c4 <_printf_i+0x21c>)
 80043f2:	9203      	str	r2, [sp, #12]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	6821      	ldr	r1, [r4, #0]
 80043f8:	ca20      	ldmia	r2!, {r5}
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	0608      	lsls	r0, r1, #24
 80043fe:	d516      	bpl.n	800442e <_printf_i+0x186>
 8004400:	07cb      	lsls	r3, r1, #31
 8004402:	d502      	bpl.n	800440a <_printf_i+0x162>
 8004404:	2320      	movs	r3, #32
 8004406:	4319      	orrs	r1, r3
 8004408:	6021      	str	r1, [r4, #0]
 800440a:	2710      	movs	r7, #16
 800440c:	2d00      	cmp	r5, #0
 800440e:	d1b2      	bne.n	8004376 <_printf_i+0xce>
 8004410:	2320      	movs	r3, #32
 8004412:	6822      	ldr	r2, [r4, #0]
 8004414:	439a      	bics	r2, r3
 8004416:	6022      	str	r2, [r4, #0]
 8004418:	e7ad      	b.n	8004376 <_printf_i+0xce>
 800441a:	2220      	movs	r2, #32
 800441c:	6809      	ldr	r1, [r1, #0]
 800441e:	430a      	orrs	r2, r1
 8004420:	6022      	str	r2, [r4, #0]
 8004422:	0022      	movs	r2, r4
 8004424:	2178      	movs	r1, #120	; 0x78
 8004426:	3245      	adds	r2, #69	; 0x45
 8004428:	7011      	strb	r1, [r2, #0]
 800442a:	4a27      	ldr	r2, [pc, #156]	; (80044c8 <_printf_i+0x220>)
 800442c:	e7e1      	b.n	80043f2 <_printf_i+0x14a>
 800442e:	0648      	lsls	r0, r1, #25
 8004430:	d5e6      	bpl.n	8004400 <_printf_i+0x158>
 8004432:	b2ad      	uxth	r5, r5
 8004434:	e7e4      	b.n	8004400 <_printf_i+0x158>
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	680d      	ldr	r5, [r1, #0]
 800443a:	1d10      	adds	r0, r2, #4
 800443c:	6949      	ldr	r1, [r1, #20]
 800443e:	6018      	str	r0, [r3, #0]
 8004440:	6813      	ldr	r3, [r2, #0]
 8004442:	062e      	lsls	r6, r5, #24
 8004444:	d501      	bpl.n	800444a <_printf_i+0x1a2>
 8004446:	6019      	str	r1, [r3, #0]
 8004448:	e002      	b.n	8004450 <_printf_i+0x1a8>
 800444a:	066d      	lsls	r5, r5, #25
 800444c:	d5fb      	bpl.n	8004446 <_printf_i+0x19e>
 800444e:	8019      	strh	r1, [r3, #0]
 8004450:	2300      	movs	r3, #0
 8004452:	9e04      	ldr	r6, [sp, #16]
 8004454:	6123      	str	r3, [r4, #16]
 8004456:	e7bb      	b.n	80043d0 <_printf_i+0x128>
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	1d11      	adds	r1, r2, #4
 800445c:	6019      	str	r1, [r3, #0]
 800445e:	6816      	ldr	r6, [r2, #0]
 8004460:	2100      	movs	r1, #0
 8004462:	0030      	movs	r0, r6
 8004464:	6862      	ldr	r2, [r4, #4]
 8004466:	f000 f833 	bl	80044d0 <memchr>
 800446a:	2800      	cmp	r0, #0
 800446c:	d001      	beq.n	8004472 <_printf_i+0x1ca>
 800446e:	1b80      	subs	r0, r0, r6
 8004470:	6060      	str	r0, [r4, #4]
 8004472:	6863      	ldr	r3, [r4, #4]
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	2300      	movs	r3, #0
 8004478:	9a04      	ldr	r2, [sp, #16]
 800447a:	7013      	strb	r3, [r2, #0]
 800447c:	e7a8      	b.n	80043d0 <_printf_i+0x128>
 800447e:	6923      	ldr	r3, [r4, #16]
 8004480:	0032      	movs	r2, r6
 8004482:	9906      	ldr	r1, [sp, #24]
 8004484:	9805      	ldr	r0, [sp, #20]
 8004486:	9d07      	ldr	r5, [sp, #28]
 8004488:	47a8      	blx	r5
 800448a:	1c43      	adds	r3, r0, #1
 800448c:	d0aa      	beq.n	80043e4 <_printf_i+0x13c>
 800448e:	6823      	ldr	r3, [r4, #0]
 8004490:	079b      	lsls	r3, r3, #30
 8004492:	d415      	bmi.n	80044c0 <_printf_i+0x218>
 8004494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004496:	68e0      	ldr	r0, [r4, #12]
 8004498:	4298      	cmp	r0, r3
 800449a:	daa5      	bge.n	80043e8 <_printf_i+0x140>
 800449c:	0018      	movs	r0, r3
 800449e:	e7a3      	b.n	80043e8 <_printf_i+0x140>
 80044a0:	0022      	movs	r2, r4
 80044a2:	2301      	movs	r3, #1
 80044a4:	9906      	ldr	r1, [sp, #24]
 80044a6:	9805      	ldr	r0, [sp, #20]
 80044a8:	9e07      	ldr	r6, [sp, #28]
 80044aa:	3219      	adds	r2, #25
 80044ac:	47b0      	blx	r6
 80044ae:	1c43      	adds	r3, r0, #1
 80044b0:	d098      	beq.n	80043e4 <_printf_i+0x13c>
 80044b2:	3501      	adds	r5, #1
 80044b4:	68e3      	ldr	r3, [r4, #12]
 80044b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044b8:	1a9b      	subs	r3, r3, r2
 80044ba:	42ab      	cmp	r3, r5
 80044bc:	dcf0      	bgt.n	80044a0 <_printf_i+0x1f8>
 80044be:	e7e9      	b.n	8004494 <_printf_i+0x1ec>
 80044c0:	2500      	movs	r5, #0
 80044c2:	e7f7      	b.n	80044b4 <_printf_i+0x20c>
 80044c4:	08004b1d 	.word	0x08004b1d
 80044c8:	08004b2e 	.word	0x08004b2e

080044cc <__retarget_lock_acquire_recursive>:
 80044cc:	4770      	bx	lr

080044ce <__retarget_lock_release_recursive>:
 80044ce:	4770      	bx	lr

080044d0 <memchr>:
 80044d0:	b2c9      	uxtb	r1, r1
 80044d2:	1882      	adds	r2, r0, r2
 80044d4:	4290      	cmp	r0, r2
 80044d6:	d101      	bne.n	80044dc <memchr+0xc>
 80044d8:	2000      	movs	r0, #0
 80044da:	4770      	bx	lr
 80044dc:	7803      	ldrb	r3, [r0, #0]
 80044de:	428b      	cmp	r3, r1
 80044e0:	d0fb      	beq.n	80044da <memchr+0xa>
 80044e2:	3001      	adds	r0, #1
 80044e4:	e7f6      	b.n	80044d4 <memchr+0x4>

080044e6 <memmove>:
 80044e6:	b510      	push	{r4, lr}
 80044e8:	4288      	cmp	r0, r1
 80044ea:	d902      	bls.n	80044f2 <memmove+0xc>
 80044ec:	188b      	adds	r3, r1, r2
 80044ee:	4298      	cmp	r0, r3
 80044f0:	d303      	bcc.n	80044fa <memmove+0x14>
 80044f2:	2300      	movs	r3, #0
 80044f4:	e007      	b.n	8004506 <memmove+0x20>
 80044f6:	5c8b      	ldrb	r3, [r1, r2]
 80044f8:	5483      	strb	r3, [r0, r2]
 80044fa:	3a01      	subs	r2, #1
 80044fc:	d2fb      	bcs.n	80044f6 <memmove+0x10>
 80044fe:	bd10      	pop	{r4, pc}
 8004500:	5ccc      	ldrb	r4, [r1, r3]
 8004502:	54c4      	strb	r4, [r0, r3]
 8004504:	3301      	adds	r3, #1
 8004506:	429a      	cmp	r2, r3
 8004508:	d1fa      	bne.n	8004500 <memmove+0x1a>
 800450a:	e7f8      	b.n	80044fe <memmove+0x18>

0800450c <_free_r>:
 800450c:	b570      	push	{r4, r5, r6, lr}
 800450e:	0005      	movs	r5, r0
 8004510:	2900      	cmp	r1, #0
 8004512:	d010      	beq.n	8004536 <_free_r+0x2a>
 8004514:	1f0c      	subs	r4, r1, #4
 8004516:	6823      	ldr	r3, [r4, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	da00      	bge.n	800451e <_free_r+0x12>
 800451c:	18e4      	adds	r4, r4, r3
 800451e:	0028      	movs	r0, r5
 8004520:	f000 f918 	bl	8004754 <__malloc_lock>
 8004524:	4a1d      	ldr	r2, [pc, #116]	; (800459c <_free_r+0x90>)
 8004526:	6813      	ldr	r3, [r2, #0]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d105      	bne.n	8004538 <_free_r+0x2c>
 800452c:	6063      	str	r3, [r4, #4]
 800452e:	6014      	str	r4, [r2, #0]
 8004530:	0028      	movs	r0, r5
 8004532:	f000 f917 	bl	8004764 <__malloc_unlock>
 8004536:	bd70      	pop	{r4, r5, r6, pc}
 8004538:	42a3      	cmp	r3, r4
 800453a:	d908      	bls.n	800454e <_free_r+0x42>
 800453c:	6821      	ldr	r1, [r4, #0]
 800453e:	1860      	adds	r0, r4, r1
 8004540:	4283      	cmp	r3, r0
 8004542:	d1f3      	bne.n	800452c <_free_r+0x20>
 8004544:	6818      	ldr	r0, [r3, #0]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	1841      	adds	r1, r0, r1
 800454a:	6021      	str	r1, [r4, #0]
 800454c:	e7ee      	b.n	800452c <_free_r+0x20>
 800454e:	001a      	movs	r2, r3
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <_free_r+0x4e>
 8004556:	42a3      	cmp	r3, r4
 8004558:	d9f9      	bls.n	800454e <_free_r+0x42>
 800455a:	6811      	ldr	r1, [r2, #0]
 800455c:	1850      	adds	r0, r2, r1
 800455e:	42a0      	cmp	r0, r4
 8004560:	d10b      	bne.n	800457a <_free_r+0x6e>
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	1809      	adds	r1, r1, r0
 8004566:	1850      	adds	r0, r2, r1
 8004568:	6011      	str	r1, [r2, #0]
 800456a:	4283      	cmp	r3, r0
 800456c:	d1e0      	bne.n	8004530 <_free_r+0x24>
 800456e:	6818      	ldr	r0, [r3, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	1841      	adds	r1, r0, r1
 8004574:	6011      	str	r1, [r2, #0]
 8004576:	6053      	str	r3, [r2, #4]
 8004578:	e7da      	b.n	8004530 <_free_r+0x24>
 800457a:	42a0      	cmp	r0, r4
 800457c:	d902      	bls.n	8004584 <_free_r+0x78>
 800457e:	230c      	movs	r3, #12
 8004580:	602b      	str	r3, [r5, #0]
 8004582:	e7d5      	b.n	8004530 <_free_r+0x24>
 8004584:	6821      	ldr	r1, [r4, #0]
 8004586:	1860      	adds	r0, r4, r1
 8004588:	4283      	cmp	r3, r0
 800458a:	d103      	bne.n	8004594 <_free_r+0x88>
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	685b      	ldr	r3, [r3, #4]
 8004590:	1841      	adds	r1, r0, r1
 8004592:	6021      	str	r1, [r4, #0]
 8004594:	6063      	str	r3, [r4, #4]
 8004596:	6054      	str	r4, [r2, #4]
 8004598:	e7ca      	b.n	8004530 <_free_r+0x24>
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	20000268 	.word	0x20000268

080045a0 <sbrk_aligned>:
 80045a0:	b570      	push	{r4, r5, r6, lr}
 80045a2:	4e0f      	ldr	r6, [pc, #60]	; (80045e0 <sbrk_aligned+0x40>)
 80045a4:	000d      	movs	r5, r1
 80045a6:	6831      	ldr	r1, [r6, #0]
 80045a8:	0004      	movs	r4, r0
 80045aa:	2900      	cmp	r1, #0
 80045ac:	d102      	bne.n	80045b4 <sbrk_aligned+0x14>
 80045ae:	f000 f8bf 	bl	8004730 <_sbrk_r>
 80045b2:	6030      	str	r0, [r6, #0]
 80045b4:	0029      	movs	r1, r5
 80045b6:	0020      	movs	r0, r4
 80045b8:	f000 f8ba 	bl	8004730 <_sbrk_r>
 80045bc:	1c43      	adds	r3, r0, #1
 80045be:	d00a      	beq.n	80045d6 <sbrk_aligned+0x36>
 80045c0:	2303      	movs	r3, #3
 80045c2:	1cc5      	adds	r5, r0, #3
 80045c4:	439d      	bics	r5, r3
 80045c6:	42a8      	cmp	r0, r5
 80045c8:	d007      	beq.n	80045da <sbrk_aligned+0x3a>
 80045ca:	1a29      	subs	r1, r5, r0
 80045cc:	0020      	movs	r0, r4
 80045ce:	f000 f8af 	bl	8004730 <_sbrk_r>
 80045d2:	1c43      	adds	r3, r0, #1
 80045d4:	d101      	bne.n	80045da <sbrk_aligned+0x3a>
 80045d6:	2501      	movs	r5, #1
 80045d8:	426d      	negs	r5, r5
 80045da:	0028      	movs	r0, r5
 80045dc:	bd70      	pop	{r4, r5, r6, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	2000026c 	.word	0x2000026c

080045e4 <_malloc_r>:
 80045e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045e6:	2203      	movs	r2, #3
 80045e8:	1ccb      	adds	r3, r1, #3
 80045ea:	4393      	bics	r3, r2
 80045ec:	3308      	adds	r3, #8
 80045ee:	0006      	movs	r6, r0
 80045f0:	001f      	movs	r7, r3
 80045f2:	2b0c      	cmp	r3, #12
 80045f4:	d232      	bcs.n	800465c <_malloc_r+0x78>
 80045f6:	270c      	movs	r7, #12
 80045f8:	42b9      	cmp	r1, r7
 80045fa:	d831      	bhi.n	8004660 <_malloc_r+0x7c>
 80045fc:	0030      	movs	r0, r6
 80045fe:	f000 f8a9 	bl	8004754 <__malloc_lock>
 8004602:	4d32      	ldr	r5, [pc, #200]	; (80046cc <_malloc_r+0xe8>)
 8004604:	682b      	ldr	r3, [r5, #0]
 8004606:	001c      	movs	r4, r3
 8004608:	2c00      	cmp	r4, #0
 800460a:	d12e      	bne.n	800466a <_malloc_r+0x86>
 800460c:	0039      	movs	r1, r7
 800460e:	0030      	movs	r0, r6
 8004610:	f7ff ffc6 	bl	80045a0 <sbrk_aligned>
 8004614:	0004      	movs	r4, r0
 8004616:	1c43      	adds	r3, r0, #1
 8004618:	d11e      	bne.n	8004658 <_malloc_r+0x74>
 800461a:	682c      	ldr	r4, [r5, #0]
 800461c:	0025      	movs	r5, r4
 800461e:	2d00      	cmp	r5, #0
 8004620:	d14a      	bne.n	80046b8 <_malloc_r+0xd4>
 8004622:	6823      	ldr	r3, [r4, #0]
 8004624:	0029      	movs	r1, r5
 8004626:	18e3      	adds	r3, r4, r3
 8004628:	0030      	movs	r0, r6
 800462a:	9301      	str	r3, [sp, #4]
 800462c:	f000 f880 	bl	8004730 <_sbrk_r>
 8004630:	9b01      	ldr	r3, [sp, #4]
 8004632:	4283      	cmp	r3, r0
 8004634:	d143      	bne.n	80046be <_malloc_r+0xda>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	3703      	adds	r7, #3
 800463a:	1aff      	subs	r7, r7, r3
 800463c:	2303      	movs	r3, #3
 800463e:	439f      	bics	r7, r3
 8004640:	3708      	adds	r7, #8
 8004642:	2f0c      	cmp	r7, #12
 8004644:	d200      	bcs.n	8004648 <_malloc_r+0x64>
 8004646:	270c      	movs	r7, #12
 8004648:	0039      	movs	r1, r7
 800464a:	0030      	movs	r0, r6
 800464c:	f7ff ffa8 	bl	80045a0 <sbrk_aligned>
 8004650:	1c43      	adds	r3, r0, #1
 8004652:	d034      	beq.n	80046be <_malloc_r+0xda>
 8004654:	6823      	ldr	r3, [r4, #0]
 8004656:	19df      	adds	r7, r3, r7
 8004658:	6027      	str	r7, [r4, #0]
 800465a:	e013      	b.n	8004684 <_malloc_r+0xa0>
 800465c:	2b00      	cmp	r3, #0
 800465e:	dacb      	bge.n	80045f8 <_malloc_r+0x14>
 8004660:	230c      	movs	r3, #12
 8004662:	2500      	movs	r5, #0
 8004664:	6033      	str	r3, [r6, #0]
 8004666:	0028      	movs	r0, r5
 8004668:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800466a:	6822      	ldr	r2, [r4, #0]
 800466c:	1bd1      	subs	r1, r2, r7
 800466e:	d420      	bmi.n	80046b2 <_malloc_r+0xce>
 8004670:	290b      	cmp	r1, #11
 8004672:	d917      	bls.n	80046a4 <_malloc_r+0xc0>
 8004674:	19e2      	adds	r2, r4, r7
 8004676:	6027      	str	r7, [r4, #0]
 8004678:	42a3      	cmp	r3, r4
 800467a:	d111      	bne.n	80046a0 <_malloc_r+0xbc>
 800467c:	602a      	str	r2, [r5, #0]
 800467e:	6863      	ldr	r3, [r4, #4]
 8004680:	6011      	str	r1, [r2, #0]
 8004682:	6053      	str	r3, [r2, #4]
 8004684:	0030      	movs	r0, r6
 8004686:	0025      	movs	r5, r4
 8004688:	f000 f86c 	bl	8004764 <__malloc_unlock>
 800468c:	2207      	movs	r2, #7
 800468e:	350b      	adds	r5, #11
 8004690:	1d23      	adds	r3, r4, #4
 8004692:	4395      	bics	r5, r2
 8004694:	1aea      	subs	r2, r5, r3
 8004696:	429d      	cmp	r5, r3
 8004698:	d0e5      	beq.n	8004666 <_malloc_r+0x82>
 800469a:	1b5b      	subs	r3, r3, r5
 800469c:	50a3      	str	r3, [r4, r2]
 800469e:	e7e2      	b.n	8004666 <_malloc_r+0x82>
 80046a0:	605a      	str	r2, [r3, #4]
 80046a2:	e7ec      	b.n	800467e <_malloc_r+0x9a>
 80046a4:	6862      	ldr	r2, [r4, #4]
 80046a6:	42a3      	cmp	r3, r4
 80046a8:	d101      	bne.n	80046ae <_malloc_r+0xca>
 80046aa:	602a      	str	r2, [r5, #0]
 80046ac:	e7ea      	b.n	8004684 <_malloc_r+0xa0>
 80046ae:	605a      	str	r2, [r3, #4]
 80046b0:	e7e8      	b.n	8004684 <_malloc_r+0xa0>
 80046b2:	0023      	movs	r3, r4
 80046b4:	6864      	ldr	r4, [r4, #4]
 80046b6:	e7a7      	b.n	8004608 <_malloc_r+0x24>
 80046b8:	002c      	movs	r4, r5
 80046ba:	686d      	ldr	r5, [r5, #4]
 80046bc:	e7af      	b.n	800461e <_malloc_r+0x3a>
 80046be:	230c      	movs	r3, #12
 80046c0:	0030      	movs	r0, r6
 80046c2:	6033      	str	r3, [r6, #0]
 80046c4:	f000 f84e 	bl	8004764 <__malloc_unlock>
 80046c8:	e7cd      	b.n	8004666 <_malloc_r+0x82>
 80046ca:	46c0      	nop			; (mov r8, r8)
 80046cc:	20000268 	.word	0x20000268

080046d0 <_realloc_r>:
 80046d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80046d2:	0007      	movs	r7, r0
 80046d4:	000e      	movs	r6, r1
 80046d6:	0014      	movs	r4, r2
 80046d8:	2900      	cmp	r1, #0
 80046da:	d105      	bne.n	80046e8 <_realloc_r+0x18>
 80046dc:	0011      	movs	r1, r2
 80046de:	f7ff ff81 	bl	80045e4 <_malloc_r>
 80046e2:	0005      	movs	r5, r0
 80046e4:	0028      	movs	r0, r5
 80046e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046e8:	2a00      	cmp	r2, #0
 80046ea:	d103      	bne.n	80046f4 <_realloc_r+0x24>
 80046ec:	f7ff ff0e 	bl	800450c <_free_r>
 80046f0:	0025      	movs	r5, r4
 80046f2:	e7f7      	b.n	80046e4 <_realloc_r+0x14>
 80046f4:	f000 f83e 	bl	8004774 <_malloc_usable_size_r>
 80046f8:	9001      	str	r0, [sp, #4]
 80046fa:	4284      	cmp	r4, r0
 80046fc:	d803      	bhi.n	8004706 <_realloc_r+0x36>
 80046fe:	0035      	movs	r5, r6
 8004700:	0843      	lsrs	r3, r0, #1
 8004702:	42a3      	cmp	r3, r4
 8004704:	d3ee      	bcc.n	80046e4 <_realloc_r+0x14>
 8004706:	0021      	movs	r1, r4
 8004708:	0038      	movs	r0, r7
 800470a:	f7ff ff6b 	bl	80045e4 <_malloc_r>
 800470e:	1e05      	subs	r5, r0, #0
 8004710:	d0e8      	beq.n	80046e4 <_realloc_r+0x14>
 8004712:	9b01      	ldr	r3, [sp, #4]
 8004714:	0022      	movs	r2, r4
 8004716:	429c      	cmp	r4, r3
 8004718:	d900      	bls.n	800471c <_realloc_r+0x4c>
 800471a:	001a      	movs	r2, r3
 800471c:	0031      	movs	r1, r6
 800471e:	0028      	movs	r0, r5
 8004720:	f7ff fbbe 	bl	8003ea0 <memcpy>
 8004724:	0031      	movs	r1, r6
 8004726:	0038      	movs	r0, r7
 8004728:	f7ff fef0 	bl	800450c <_free_r>
 800472c:	e7da      	b.n	80046e4 <_realloc_r+0x14>
	...

08004730 <_sbrk_r>:
 8004730:	2300      	movs	r3, #0
 8004732:	b570      	push	{r4, r5, r6, lr}
 8004734:	4d06      	ldr	r5, [pc, #24]	; (8004750 <_sbrk_r+0x20>)
 8004736:	0004      	movs	r4, r0
 8004738:	0008      	movs	r0, r1
 800473a:	602b      	str	r3, [r5, #0]
 800473c:	f7fc fc2e 	bl	8000f9c <_sbrk>
 8004740:	1c43      	adds	r3, r0, #1
 8004742:	d103      	bne.n	800474c <_sbrk_r+0x1c>
 8004744:	682b      	ldr	r3, [r5, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d000      	beq.n	800474c <_sbrk_r+0x1c>
 800474a:	6023      	str	r3, [r4, #0]
 800474c:	bd70      	pop	{r4, r5, r6, pc}
 800474e:	46c0      	nop			; (mov r8, r8)
 8004750:	20000260 	.word	0x20000260

08004754 <__malloc_lock>:
 8004754:	b510      	push	{r4, lr}
 8004756:	4802      	ldr	r0, [pc, #8]	; (8004760 <__malloc_lock+0xc>)
 8004758:	f7ff feb8 	bl	80044cc <__retarget_lock_acquire_recursive>
 800475c:	bd10      	pop	{r4, pc}
 800475e:	46c0      	nop			; (mov r8, r8)
 8004760:	20000264 	.word	0x20000264

08004764 <__malloc_unlock>:
 8004764:	b510      	push	{r4, lr}
 8004766:	4802      	ldr	r0, [pc, #8]	; (8004770 <__malloc_unlock+0xc>)
 8004768:	f7ff feb1 	bl	80044ce <__retarget_lock_release_recursive>
 800476c:	bd10      	pop	{r4, pc}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	20000264 	.word	0x20000264

08004774 <_malloc_usable_size_r>:
 8004774:	1f0b      	subs	r3, r1, #4
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	1f18      	subs	r0, r3, #4
 800477a:	2b00      	cmp	r3, #0
 800477c:	da01      	bge.n	8004782 <_malloc_usable_size_r+0xe>
 800477e:	580b      	ldr	r3, [r1, r0]
 8004780:	18c0      	adds	r0, r0, r3
 8004782:	4770      	bx	lr

08004784 <_init>:
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004786:	46c0      	nop			; (mov r8, r8)
 8004788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800478a:	bc08      	pop	{r3}
 800478c:	469e      	mov	lr, r3
 800478e:	4770      	bx	lr

08004790 <_fini>:
 8004790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004792:	46c0      	nop			; (mov r8, r8)
 8004794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004796:	bc08      	pop	{r3}
 8004798:	469e      	mov	lr, r3
 800479a:	4770      	bx	lr
