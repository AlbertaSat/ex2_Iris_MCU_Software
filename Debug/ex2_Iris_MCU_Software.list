
ex2_Iris_MCU_Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b48  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005068  08005068  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005068  08005068  00015068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005070  08005070  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005070  08005070  00015070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005074  08005074  00015074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000070  080050e8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080050e8  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb66  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002414  00000000  00000000  0002fbfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00032018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c08  00000000  00000000  00032d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013c0f  00000000  00000000  00033920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010fcb  00000000  00000000  0004752f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074336  00000000  00000000  000584fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cc830  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003388  00000000  00000000  000cc880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004bf0 	.word	0x08004bf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004bf0 	.word	0x08004bf0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	0008      	movs	r0, r1
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f834 	bl	80002e0 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	46ce      	mov	lr, r9
 8000288:	4647      	mov	r7, r8
 800028a:	b580      	push	{r7, lr}
 800028c:	0007      	movs	r7, r0
 800028e:	4699      	mov	r9, r3
 8000290:	0c3b      	lsrs	r3, r7, #16
 8000292:	469c      	mov	ip, r3
 8000294:	0413      	lsls	r3, r2, #16
 8000296:	0c1b      	lsrs	r3, r3, #16
 8000298:	001d      	movs	r5, r3
 800029a:	000e      	movs	r6, r1
 800029c:	4661      	mov	r1, ip
 800029e:	0400      	lsls	r0, r0, #16
 80002a0:	0c14      	lsrs	r4, r2, #16
 80002a2:	0c00      	lsrs	r0, r0, #16
 80002a4:	4345      	muls	r5, r0
 80002a6:	434b      	muls	r3, r1
 80002a8:	4360      	muls	r0, r4
 80002aa:	4361      	muls	r1, r4
 80002ac:	18c0      	adds	r0, r0, r3
 80002ae:	0c2c      	lsrs	r4, r5, #16
 80002b0:	1820      	adds	r0, r4, r0
 80002b2:	468c      	mov	ip, r1
 80002b4:	4283      	cmp	r3, r0
 80002b6:	d903      	bls.n	80002c0 <__aeabi_lmul+0x3c>
 80002b8:	2380      	movs	r3, #128	; 0x80
 80002ba:	025b      	lsls	r3, r3, #9
 80002bc:	4698      	mov	r8, r3
 80002be:	44c4      	add	ip, r8
 80002c0:	4649      	mov	r1, r9
 80002c2:	4379      	muls	r1, r7
 80002c4:	4372      	muls	r2, r6
 80002c6:	0c03      	lsrs	r3, r0, #16
 80002c8:	4463      	add	r3, ip
 80002ca:	042d      	lsls	r5, r5, #16
 80002cc:	0c2d      	lsrs	r5, r5, #16
 80002ce:	18c9      	adds	r1, r1, r3
 80002d0:	0400      	lsls	r0, r0, #16
 80002d2:	1940      	adds	r0, r0, r5
 80002d4:	1889      	adds	r1, r1, r2
 80002d6:	bcc0      	pop	{r6, r7}
 80002d8:	46b9      	mov	r9, r7
 80002da:	46b0      	mov	r8, r6
 80002dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002de:	46c0      	nop			; (mov r8, r8)

080002e0 <__udivmoddi4>:
 80002e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002e2:	4657      	mov	r7, sl
 80002e4:	464e      	mov	r6, r9
 80002e6:	4645      	mov	r5, r8
 80002e8:	46de      	mov	lr, fp
 80002ea:	b5e0      	push	{r5, r6, r7, lr}
 80002ec:	0004      	movs	r4, r0
 80002ee:	000d      	movs	r5, r1
 80002f0:	4692      	mov	sl, r2
 80002f2:	4699      	mov	r9, r3
 80002f4:	b083      	sub	sp, #12
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d830      	bhi.n	800035c <__udivmoddi4+0x7c>
 80002fa:	d02d      	beq.n	8000358 <__udivmoddi4+0x78>
 80002fc:	4649      	mov	r1, r9
 80002fe:	4650      	mov	r0, sl
 8000300:	f000 f8d8 	bl	80004b4 <__clzdi2>
 8000304:	0029      	movs	r1, r5
 8000306:	0006      	movs	r6, r0
 8000308:	0020      	movs	r0, r4
 800030a:	f000 f8d3 	bl	80004b4 <__clzdi2>
 800030e:	1a33      	subs	r3, r6, r0
 8000310:	4698      	mov	r8, r3
 8000312:	3b20      	subs	r3, #32
 8000314:	469b      	mov	fp, r3
 8000316:	d433      	bmi.n	8000380 <__udivmoddi4+0xa0>
 8000318:	465a      	mov	r2, fp
 800031a:	4653      	mov	r3, sl
 800031c:	4093      	lsls	r3, r2
 800031e:	4642      	mov	r2, r8
 8000320:	001f      	movs	r7, r3
 8000322:	4653      	mov	r3, sl
 8000324:	4093      	lsls	r3, r2
 8000326:	001e      	movs	r6, r3
 8000328:	42af      	cmp	r7, r5
 800032a:	d83a      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 800032c:	42af      	cmp	r7, r5
 800032e:	d100      	bne.n	8000332 <__udivmoddi4+0x52>
 8000330:	e078      	b.n	8000424 <__udivmoddi4+0x144>
 8000332:	465b      	mov	r3, fp
 8000334:	1ba4      	subs	r4, r4, r6
 8000336:	41bd      	sbcs	r5, r7
 8000338:	2b00      	cmp	r3, #0
 800033a:	da00      	bge.n	800033e <__udivmoddi4+0x5e>
 800033c:	e075      	b.n	800042a <__udivmoddi4+0x14a>
 800033e:	2200      	movs	r2, #0
 8000340:	2300      	movs	r3, #0
 8000342:	9200      	str	r2, [sp, #0]
 8000344:	9301      	str	r3, [sp, #4]
 8000346:	2301      	movs	r3, #1
 8000348:	465a      	mov	r2, fp
 800034a:	4093      	lsls	r3, r2
 800034c:	9301      	str	r3, [sp, #4]
 800034e:	2301      	movs	r3, #1
 8000350:	4642      	mov	r2, r8
 8000352:	4093      	lsls	r3, r2
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	e028      	b.n	80003aa <__udivmoddi4+0xca>
 8000358:	4282      	cmp	r2, r0
 800035a:	d9cf      	bls.n	80002fc <__udivmoddi4+0x1c>
 800035c:	2200      	movs	r2, #0
 800035e:	2300      	movs	r3, #0
 8000360:	9200      	str	r2, [sp, #0]
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <__udivmoddi4+0x8e>
 800036a:	601c      	str	r4, [r3, #0]
 800036c:	605d      	str	r5, [r3, #4]
 800036e:	9800      	ldr	r0, [sp, #0]
 8000370:	9901      	ldr	r1, [sp, #4]
 8000372:	b003      	add	sp, #12
 8000374:	bcf0      	pop	{r4, r5, r6, r7}
 8000376:	46bb      	mov	fp, r7
 8000378:	46b2      	mov	sl, r6
 800037a:	46a9      	mov	r9, r5
 800037c:	46a0      	mov	r8, r4
 800037e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000380:	4642      	mov	r2, r8
 8000382:	2320      	movs	r3, #32
 8000384:	1a9b      	subs	r3, r3, r2
 8000386:	4652      	mov	r2, sl
 8000388:	40da      	lsrs	r2, r3
 800038a:	4641      	mov	r1, r8
 800038c:	0013      	movs	r3, r2
 800038e:	464a      	mov	r2, r9
 8000390:	408a      	lsls	r2, r1
 8000392:	0017      	movs	r7, r2
 8000394:	4642      	mov	r2, r8
 8000396:	431f      	orrs	r7, r3
 8000398:	4653      	mov	r3, sl
 800039a:	4093      	lsls	r3, r2
 800039c:	001e      	movs	r6, r3
 800039e:	42af      	cmp	r7, r5
 80003a0:	d9c4      	bls.n	800032c <__udivmoddi4+0x4c>
 80003a2:	2200      	movs	r2, #0
 80003a4:	2300      	movs	r3, #0
 80003a6:	9200      	str	r2, [sp, #0]
 80003a8:	9301      	str	r3, [sp, #4]
 80003aa:	4643      	mov	r3, r8
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	d0d9      	beq.n	8000364 <__udivmoddi4+0x84>
 80003b0:	07fb      	lsls	r3, r7, #31
 80003b2:	0872      	lsrs	r2, r6, #1
 80003b4:	431a      	orrs	r2, r3
 80003b6:	4646      	mov	r6, r8
 80003b8:	087b      	lsrs	r3, r7, #1
 80003ba:	e00e      	b.n	80003da <__udivmoddi4+0xfa>
 80003bc:	42ab      	cmp	r3, r5
 80003be:	d101      	bne.n	80003c4 <__udivmoddi4+0xe4>
 80003c0:	42a2      	cmp	r2, r4
 80003c2:	d80c      	bhi.n	80003de <__udivmoddi4+0xfe>
 80003c4:	1aa4      	subs	r4, r4, r2
 80003c6:	419d      	sbcs	r5, r3
 80003c8:	2001      	movs	r0, #1
 80003ca:	1924      	adds	r4, r4, r4
 80003cc:	416d      	adcs	r5, r5
 80003ce:	2100      	movs	r1, #0
 80003d0:	3e01      	subs	r6, #1
 80003d2:	1824      	adds	r4, r4, r0
 80003d4:	414d      	adcs	r5, r1
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d006      	beq.n	80003e8 <__udivmoddi4+0x108>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d9ee      	bls.n	80003bc <__udivmoddi4+0xdc>
 80003de:	3e01      	subs	r6, #1
 80003e0:	1924      	adds	r4, r4, r4
 80003e2:	416d      	adcs	r5, r5
 80003e4:	2e00      	cmp	r6, #0
 80003e6:	d1f8      	bne.n	80003da <__udivmoddi4+0xfa>
 80003e8:	9800      	ldr	r0, [sp, #0]
 80003ea:	9901      	ldr	r1, [sp, #4]
 80003ec:	465b      	mov	r3, fp
 80003ee:	1900      	adds	r0, r0, r4
 80003f0:	4169      	adcs	r1, r5
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	db24      	blt.n	8000440 <__udivmoddi4+0x160>
 80003f6:	002b      	movs	r3, r5
 80003f8:	465a      	mov	r2, fp
 80003fa:	4644      	mov	r4, r8
 80003fc:	40d3      	lsrs	r3, r2
 80003fe:	002a      	movs	r2, r5
 8000400:	40e2      	lsrs	r2, r4
 8000402:	001c      	movs	r4, r3
 8000404:	465b      	mov	r3, fp
 8000406:	0015      	movs	r5, r2
 8000408:	2b00      	cmp	r3, #0
 800040a:	db2a      	blt.n	8000462 <__udivmoddi4+0x182>
 800040c:	0026      	movs	r6, r4
 800040e:	409e      	lsls	r6, r3
 8000410:	0033      	movs	r3, r6
 8000412:	0026      	movs	r6, r4
 8000414:	4647      	mov	r7, r8
 8000416:	40be      	lsls	r6, r7
 8000418:	0032      	movs	r2, r6
 800041a:	1a80      	subs	r0, r0, r2
 800041c:	4199      	sbcs	r1, r3
 800041e:	9000      	str	r0, [sp, #0]
 8000420:	9101      	str	r1, [sp, #4]
 8000422:	e79f      	b.n	8000364 <__udivmoddi4+0x84>
 8000424:	42a3      	cmp	r3, r4
 8000426:	d8bc      	bhi.n	80003a2 <__udivmoddi4+0xc2>
 8000428:	e783      	b.n	8000332 <__udivmoddi4+0x52>
 800042a:	4642      	mov	r2, r8
 800042c:	2320      	movs	r3, #32
 800042e:	2100      	movs	r1, #0
 8000430:	1a9b      	subs	r3, r3, r2
 8000432:	2200      	movs	r2, #0
 8000434:	9100      	str	r1, [sp, #0]
 8000436:	9201      	str	r2, [sp, #4]
 8000438:	2201      	movs	r2, #1
 800043a:	40da      	lsrs	r2, r3
 800043c:	9201      	str	r2, [sp, #4]
 800043e:	e786      	b.n	800034e <__udivmoddi4+0x6e>
 8000440:	4642      	mov	r2, r8
 8000442:	2320      	movs	r3, #32
 8000444:	1a9b      	subs	r3, r3, r2
 8000446:	002a      	movs	r2, r5
 8000448:	4646      	mov	r6, r8
 800044a:	409a      	lsls	r2, r3
 800044c:	0023      	movs	r3, r4
 800044e:	40f3      	lsrs	r3, r6
 8000450:	4644      	mov	r4, r8
 8000452:	4313      	orrs	r3, r2
 8000454:	002a      	movs	r2, r5
 8000456:	40e2      	lsrs	r2, r4
 8000458:	001c      	movs	r4, r3
 800045a:	465b      	mov	r3, fp
 800045c:	0015      	movs	r5, r2
 800045e:	2b00      	cmp	r3, #0
 8000460:	dad4      	bge.n	800040c <__udivmoddi4+0x12c>
 8000462:	4642      	mov	r2, r8
 8000464:	002f      	movs	r7, r5
 8000466:	2320      	movs	r3, #32
 8000468:	0026      	movs	r6, r4
 800046a:	4097      	lsls	r7, r2
 800046c:	1a9b      	subs	r3, r3, r2
 800046e:	40de      	lsrs	r6, r3
 8000470:	003b      	movs	r3, r7
 8000472:	4333      	orrs	r3, r6
 8000474:	e7cd      	b.n	8000412 <__udivmoddi4+0x132>
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__clzsi2>:
 8000478:	211c      	movs	r1, #28
 800047a:	2301      	movs	r3, #1
 800047c:	041b      	lsls	r3, r3, #16
 800047e:	4298      	cmp	r0, r3
 8000480:	d301      	bcc.n	8000486 <__clzsi2+0xe>
 8000482:	0c00      	lsrs	r0, r0, #16
 8000484:	3910      	subs	r1, #16
 8000486:	0a1b      	lsrs	r3, r3, #8
 8000488:	4298      	cmp	r0, r3
 800048a:	d301      	bcc.n	8000490 <__clzsi2+0x18>
 800048c:	0a00      	lsrs	r0, r0, #8
 800048e:	3908      	subs	r1, #8
 8000490:	091b      	lsrs	r3, r3, #4
 8000492:	4298      	cmp	r0, r3
 8000494:	d301      	bcc.n	800049a <__clzsi2+0x22>
 8000496:	0900      	lsrs	r0, r0, #4
 8000498:	3904      	subs	r1, #4
 800049a:	a202      	add	r2, pc, #8	; (adr r2, 80004a4 <__clzsi2+0x2c>)
 800049c:	5c10      	ldrb	r0, [r2, r0]
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	4770      	bx	lr
 80004a2:	46c0      	nop			; (mov r8, r8)
 80004a4:	02020304 	.word	0x02020304
 80004a8:	01010101 	.word	0x01010101
	...

080004b4 <__clzdi2>:
 80004b4:	b510      	push	{r4, lr}
 80004b6:	2900      	cmp	r1, #0
 80004b8:	d103      	bne.n	80004c2 <__clzdi2+0xe>
 80004ba:	f7ff ffdd 	bl	8000478 <__clzsi2>
 80004be:	3020      	adds	r0, #32
 80004c0:	e002      	b.n	80004c8 <__clzdi2+0x14>
 80004c2:	0008      	movs	r0, r1
 80004c4:	f7ff ffd8 	bl	8000478 <__clzsi2>
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)

080004cc <DBG_PUT>:
#include <stdio.h>
#include <string.h>

extern UART_HandleTypeDef huart1;

static inline void DBG_PUT(char *str) {
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	0018      	movs	r0, r3
 80004d8:	f7ff fe16 	bl	8000108 <strlen>
 80004dc:	0003      	movs	r3, r0
 80004de:	b29a      	uxth	r2, r3
 80004e0:	6879      	ldr	r1, [r7, #4]
 80004e2:	4804      	ldr	r0, [pc, #16]	; (80004f4 <DBG_PUT+0x28>)
 80004e4:	2364      	movs	r3, #100	; 0x64
 80004e6:	f003 f9df 	bl	80038a8 <HAL_UART_Transmit>
}
 80004ea:	46c0      	nop			; (mov r8, r8)
 80004ec:	46bd      	mov	sp, r7
 80004ee:	b002      	add	sp, #8
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	46c0      	nop			; (mov r8, r8)
 80004f4:	200001d4 	.word	0x200001d4

080004f8 <i2c2_read8_8>:
void i2c2_write16_8(uint8_t addr, uint16_t register_pointer, uint16_t register_value){
	hi2c_write16_8(hi2c2, addr, register_pointer, register_value);
	return;
}

uint8_t i2c2_read8_8(uint8_t addr, uint8_t register_pointer){
 80004f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004fa:	b097      	sub	sp, #92	; 0x5c
 80004fc:	af12      	add	r7, sp, #72	; 0x48
 80004fe:	0002      	movs	r2, r0
 8000500:	1dfb      	adds	r3, r7, #7
 8000502:	701a      	strb	r2, [r3, #0]
 8000504:	1dbb      	adds	r3, r7, #6
 8000506:	1c0a      	adds	r2, r1, #0
 8000508:	701a      	strb	r2, [r3, #0]
	uint8_t val = hi2c_read8_8(hi2c2, addr, register_pointer);
 800050a:	260f      	movs	r6, #15
 800050c:	19bd      	adds	r5, r7, r6
 800050e:	4c0e      	ldr	r4, [pc, #56]	; (8000548 <i2c2_read8_8+0x50>)
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	9310      	str	r3, [sp, #64]	; 0x40
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	930f      	str	r3, [sp, #60]	; 0x3c
 800051c:	466b      	mov	r3, sp
 800051e:	0018      	movs	r0, r3
 8000520:	0023      	movs	r3, r4
 8000522:	3310      	adds	r3, #16
 8000524:	223c      	movs	r2, #60	; 0x3c
 8000526:	0019      	movs	r1, r3
 8000528:	f003 fef0 	bl	800430c <memcpy>
 800052c:	6820      	ldr	r0, [r4, #0]
 800052e:	6861      	ldr	r1, [r4, #4]
 8000530:	68a2      	ldr	r2, [r4, #8]
 8000532:	68e3      	ldr	r3, [r4, #12]
 8000534:	f000 f838 	bl	80005a8 <hi2c_read8_8>
 8000538:	0003      	movs	r3, r0
 800053a:	702b      	strb	r3, [r5, #0]
	return val;
 800053c:	19bb      	adds	r3, r7, r6
 800053e:	781b      	ldrb	r3, [r3, #0]
}
 8000540:	0018      	movs	r0, r3
 8000542:	46bd      	mov	sp, r7
 8000544:	b005      	add	sp, #20
 8000546:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000548:	200000d8 	.word	0x200000d8

0800054c <i2c2_write8_8>:
void i2c2_write8_8(uint8_t addr, uint8_t register_pointer, uint8_t register_value){
 800054c:	b590      	push	{r4, r7, lr}
 800054e:	b095      	sub	sp, #84	; 0x54
 8000550:	af12      	add	r7, sp, #72	; 0x48
 8000552:	0004      	movs	r4, r0
 8000554:	0008      	movs	r0, r1
 8000556:	0011      	movs	r1, r2
 8000558:	1dfb      	adds	r3, r7, #7
 800055a:	1c22      	adds	r2, r4, #0
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	1dbb      	adds	r3, r7, #6
 8000560:	1c02      	adds	r2, r0, #0
 8000562:	701a      	strb	r2, [r3, #0]
 8000564:	1d7b      	adds	r3, r7, #5
 8000566:	1c0a      	adds	r2, r1, #0
 8000568:	701a      	strb	r2, [r3, #0]
	hi2c_write8_8(hi2c2, addr, register_pointer, register_value);
 800056a:	4c0e      	ldr	r4, [pc, #56]	; (80005a4 <i2c2_write8_8+0x58>)
 800056c:	1d7b      	adds	r3, r7, #5
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	9311      	str	r3, [sp, #68]	; 0x44
 8000572:	1dbb      	adds	r3, r7, #6
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	9310      	str	r3, [sp, #64]	; 0x40
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	930f      	str	r3, [sp, #60]	; 0x3c
 800057e:	466b      	mov	r3, sp
 8000580:	0018      	movs	r0, r3
 8000582:	0023      	movs	r3, r4
 8000584:	3310      	adds	r3, #16
 8000586:	223c      	movs	r2, #60	; 0x3c
 8000588:	0019      	movs	r1, r3
 800058a:	f003 febf 	bl	800430c <memcpy>
 800058e:	6820      	ldr	r0, [r4, #0]
 8000590:	6861      	ldr	r1, [r4, #4]
 8000592:	68a2      	ldr	r2, [r4, #8]
 8000594:	68e3      	ldr	r3, [r4, #12]
 8000596:	f000 f861 	bl	800065c <hi2c_write8_8>
	return;
 800059a:	46c0      	nop			; (mov r8, r8)
}
 800059c:	46bd      	mov	sp, r7
 800059e:	b003      	add	sp, #12
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	200000d8 	.word	0x200000d8

080005a8 <hi2c_read8_8>:
        }
}

// UNTESTED BELOW
uint8_t hi2c_read8_8(I2C_HandleTypeDef hi2c, uint8_t addr, uint8_t register_pointer)
{
 80005a8:	b084      	sub	sp, #16
 80005aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ac:	b097      	sub	sp, #92	; 0x5c
 80005ae:	af04      	add	r7, sp, #16
 80005b0:	2558      	movs	r5, #88	; 0x58
 80005b2:	2608      	movs	r6, #8
 80005b4:	19ac      	adds	r4, r5, r6
 80005b6:	19e4      	adds	r4, r4, r7
 80005b8:	6020      	str	r0, [r4, #0]
 80005ba:	6061      	str	r1, [r4, #4]
 80005bc:	60a2      	str	r2, [r4, #8]
 80005be:	60e3      	str	r3, [r4, #12]
    uint16_t return_value = 0;
 80005c0:	2344      	movs	r3, #68	; 0x44
 80005c2:	18fb      	adds	r3, r7, r3
 80005c4:	2200      	movs	r2, #0
 80005c6:	801a      	strh	r2, [r3, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80005c8:	2047      	movs	r0, #71	; 0x47
 80005ca:	183b      	adds	r3, r7, r0
 80005cc:	2200      	movs	r2, #0
 80005ce:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Read(&hi2c, addr << 1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, &return_value, 1, 100);
 80005d0:	234c      	movs	r3, #76	; 0x4c
 80005d2:	195a      	adds	r2, r3, r5
 80005d4:	19bb      	adds	r3, r7, r6
 80005d6:	18d3      	adds	r3, r2, r3
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	18db      	adds	r3, r3, r3
 80005de:	b299      	uxth	r1, r3
 80005e0:	2350      	movs	r3, #80	; 0x50
 80005e2:	195a      	adds	r2, r3, r5
 80005e4:	19bc      	adds	r4, r7, r6
 80005e6:	1913      	adds	r3, r2, r4
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	0006      	movs	r6, r0
 80005ee:	183c      	adds	r4, r7, r0
 80005f0:	2308      	movs	r3, #8
 80005f2:	18eb      	adds	r3, r5, r3
 80005f4:	19d8      	adds	r0, r3, r7
 80005f6:	2364      	movs	r3, #100	; 0x64
 80005f8:	9302      	str	r3, [sp, #8]
 80005fa:	2301      	movs	r3, #1
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2344      	movs	r3, #68	; 0x44
 8000600:	18fb      	adds	r3, r7, r3
 8000602:	9300      	str	r3, [sp, #0]
 8000604:	2301      	movs	r3, #1
 8000606:	f001 fb2f 	bl	8001c68 <HAL_I2C_Mem_Read>
 800060a:	0003      	movs	r3, r0
 800060c:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800060e:	19bb      	adds	r3, r7, r6
 8000610:	781b      	ldrb	r3, [r3, #0]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d015      	beq.n	8000642 <hi2c_read8_8+0x9a>
            char buf[64];
            sprintf(buf, "I2C8_8 read from 0x%x register 0x%x failed\r\n", addr, register_pointer);
 8000616:	234c      	movs	r3, #76	; 0x4c
 8000618:	195b      	adds	r3, r3, r5
 800061a:	2208      	movs	r2, #8
 800061c:	4694      	mov	ip, r2
 800061e:	44bc      	add	ip, r7
 8000620:	4463      	add	r3, ip
 8000622:	781a      	ldrb	r2, [r3, #0]
 8000624:	2350      	movs	r3, #80	; 0x50
 8000626:	195b      	adds	r3, r3, r5
 8000628:	2108      	movs	r1, #8
 800062a:	468c      	mov	ip, r1
 800062c:	44bc      	add	ip, r7
 800062e:	4463      	add	r3, ip
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	4909      	ldr	r1, [pc, #36]	; (8000658 <hi2c_read8_8+0xb0>)
 8000634:	1d38      	adds	r0, r7, #4
 8000636:	f003 fe7b 	bl	8004330 <siprintf>
            DBG_PUT(buf);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	0018      	movs	r0, r3
 800063e:	f7ff ff45 	bl	80004cc <DBG_PUT>
        }
    return return_value;
 8000642:	2344      	movs	r3, #68	; 0x44
 8000644:	18fb      	adds	r3, r7, r3
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	b2db      	uxtb	r3, r3
}
 800064a:	0018      	movs	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	b013      	add	sp, #76	; 0x4c
 8000650:	bcf0      	pop	{r4, r5, r6, r7}
 8000652:	bc08      	pop	{r3}
 8000654:	b004      	add	sp, #16
 8000656:	4718      	bx	r3
 8000658:	08004c60 	.word	0x08004c60

0800065c <hi2c_write8_8>:

void hi2c_write8_8(I2C_HandleTypeDef hi2c, uint8_t addr, uint8_t register_pointer, uint8_t register_value)
{
 800065c:	b084      	sub	sp, #16
 800065e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000660:	b097      	sub	sp, #92	; 0x5c
 8000662:	af04      	add	r7, sp, #16
 8000664:	2558      	movs	r5, #88	; 0x58
 8000666:	2608      	movs	r6, #8
 8000668:	19ac      	adds	r4, r5, r6
 800066a:	19e4      	adds	r4, r4, r7
 800066c:	6020      	str	r0, [r4, #0]
 800066e:	6061      	str	r1, [r4, #4]
 8000670:	60a2      	str	r2, [r4, #8]
 8000672:	60e3      	str	r3, [r4, #12]
    uint8_t dataBuffer[1];
	HAL_StatusTypeDef status = HAL_OK;
 8000674:	2047      	movs	r0, #71	; 0x47
 8000676:	183b      	adds	r3, r7, r0
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
    dataBuffer[0] = register_value;
 800067c:	2344      	movs	r3, #68	; 0x44
 800067e:	18fb      	adds	r3, r7, r3
 8000680:	2254      	movs	r2, #84	; 0x54
 8000682:	1952      	adds	r2, r2, r5
 8000684:	2108      	movs	r1, #8
 8000686:	468c      	mov	ip, r1
 8000688:	44bc      	add	ip, r7
 800068a:	4462      	add	r2, ip
 800068c:	7812      	ldrb	r2, [r2, #0]
 800068e:	701a      	strb	r2, [r3, #0]
    status = HAL_I2C_Mem_Write(&hi2c, addr << 1, (uint8_t)register_pointer, I2C_MEMADD_SIZE_8BIT, dataBuffer, 1, 100);
 8000690:	234c      	movs	r3, #76	; 0x4c
 8000692:	195a      	adds	r2, r3, r5
 8000694:	19bb      	adds	r3, r7, r6
 8000696:	18d3      	adds	r3, r2, r3
 8000698:	781b      	ldrb	r3, [r3, #0]
 800069a:	b29b      	uxth	r3, r3
 800069c:	18db      	adds	r3, r3, r3
 800069e:	b299      	uxth	r1, r3
 80006a0:	2350      	movs	r3, #80	; 0x50
 80006a2:	195a      	adds	r2, r3, r5
 80006a4:	19bc      	adds	r4, r7, r6
 80006a6:	1913      	adds	r3, r2, r4
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	b29a      	uxth	r2, r3
 80006ac:	0006      	movs	r6, r0
 80006ae:	183c      	adds	r4, r7, r0
 80006b0:	2308      	movs	r3, #8
 80006b2:	18eb      	adds	r3, r5, r3
 80006b4:	19d8      	adds	r0, r3, r7
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	9302      	str	r3, [sp, #8]
 80006ba:	2301      	movs	r3, #1
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	2344      	movs	r3, #68	; 0x44
 80006c0:	18fb      	adds	r3, r7, r3
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2301      	movs	r3, #1
 80006c6:	f001 f9a1 	bl	8001a0c <HAL_I2C_Mem_Write>
 80006ca:	0003      	movs	r3, r0
 80006cc:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80006ce:	19bb      	adds	r3, r7, r6
 80006d0:	781b      	ldrb	r3, [r3, #0]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d015      	beq.n	8000702 <hi2c_write8_8+0xa6>
            char buf[64];
            sprintf(buf, "I2C8_8 write to 0x%x failed: 0x%x\r\n", addr, register_pointer);
 80006d6:	234c      	movs	r3, #76	; 0x4c
 80006d8:	195b      	adds	r3, r3, r5
 80006da:	2208      	movs	r2, #8
 80006dc:	4694      	mov	ip, r2
 80006de:	44bc      	add	ip, r7
 80006e0:	4463      	add	r3, ip
 80006e2:	781a      	ldrb	r2, [r3, #0]
 80006e4:	2350      	movs	r3, #80	; 0x50
 80006e6:	195b      	adds	r3, r3, r5
 80006e8:	2108      	movs	r1, #8
 80006ea:	468c      	mov	ip, r1
 80006ec:	44bc      	add	ip, r7
 80006ee:	4463      	add	r3, ip
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	4907      	ldr	r1, [pc, #28]	; (8000710 <hi2c_write8_8+0xb4>)
 80006f4:	1d38      	adds	r0, r7, #4
 80006f6:	f003 fe1b 	bl	8004330 <siprintf>
            DBG_PUT(buf);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff fee5 	bl	80004cc <DBG_PUT>
        }
}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	b013      	add	sp, #76	; 0x4c
 8000708:	bcf0      	pop	{r4, r5, r6, r7}
 800070a:	bc08      	pop	{r3}
 800070c:	b004      	add	sp, #16
 800070e:	4718      	bx	r3
 8000710:	08004c90 	.word	0x08004c90

08000714 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	0018      	movs	r0, r3
 8000720:	f7ff fcf2 	bl	8000108 <strlen>
 8000724:	0003      	movs	r3, r0
 8000726:	b29a      	uxth	r2, r3
 8000728:	6879      	ldr	r1, [r7, #4]
 800072a:	4804      	ldr	r0, [pc, #16]	; (800073c <DBG_PUT+0x28>)
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	f003 f8bb 	bl	80038a8 <HAL_UART_Transmit>
}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b002      	add	sp, #8
 8000738:	bd80      	pop	{r7, pc}
 800073a:	46c0      	nop			; (mov r8, r8)
 800073c:	200001d4 	.word	0x200001d4

08000740 <_toggleLED>:
	DBG_PUT("--------------------\r\n");

	HAL_Delay(1000);
}

void _toggleLED(void){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(TEST_OUT1_GPIO_Port, TEST_OUT1_Pin);
 8000744:	4b03      	ldr	r3, [pc, #12]	; (8000754 <_toggleLED+0x14>)
 8000746:	2101      	movs	r1, #1
 8000748:	0018      	movs	r0, r3
 800074a:	f001 f8ae 	bl	80018aa <HAL_GPIO_TogglePin>
}
 800074e:	46c0      	nop			; (mov r8, r8)
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	50000400 	.word	0x50000400

08000758 <_testScanI2C>:
	}
}



void _testScanI2C(){
 8000758:	b5b0      	push	{r4, r5, r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
	 HAL_StatusTypeDef result;
	 uint8_t i;
	 char buf[64];
	 int deviceFound = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	64bb      	str	r3, [r7, #72]	; 0x48
	 for (i=1; i<128; i++){
 8000762:	234f      	movs	r3, #79	; 0x4f
 8000764:	18fb      	adds	r3, r7, r3
 8000766:	2201      	movs	r2, #1
 8000768:	701a      	strb	r2, [r3, #0]
 800076a:	e029      	b.n	80007c0 <_testScanI2C+0x68>
		 result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 2, 2);
 800076c:	234f      	movs	r3, #79	; 0x4f
 800076e:	18fb      	adds	r3, r7, r3
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	b29b      	uxth	r3, r3
 8000774:	18db      	adds	r3, r3, r3
 8000776:	b299      	uxth	r1, r3
 8000778:	2547      	movs	r5, #71	; 0x47
 800077a:	197c      	adds	r4, r7, r5
 800077c:	481d      	ldr	r0, [pc, #116]	; (80007f4 <_testScanI2C+0x9c>)
 800077e:	2302      	movs	r3, #2
 8000780:	2202      	movs	r2, #2
 8000782:	f001 fba5 	bl	8001ed0 <HAL_I2C_IsDeviceReady>
 8000786:	0003      	movs	r3, r0
 8000788:	7023      	strb	r3, [r4, #0]
		 if (result == HAL_OK){
 800078a:	197b      	adds	r3, r7, r5
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d110      	bne.n	80007b4 <_testScanI2C+0x5c>
			 if (deviceFound == 0){
 8000792:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000794:	2b00      	cmp	r3, #0
 8000796:	d101      	bne.n	800079c <_testScanI2C+0x44>
				 deviceFound = 1; 	// Janky but works for asserting that I2C bus is operational
 8000798:	2301      	movs	r3, #1
 800079a:	64bb      	str	r3, [r7, #72]	; 0x48
			 }
			 sprintf(buf,"I2C address found: 0x%X\r\n", (uint16_t)(i));
 800079c:	234f      	movs	r3, #79	; 0x4f
 800079e:	18fb      	adds	r3, r7, r3
 80007a0:	781a      	ldrb	r2, [r3, #0]
 80007a2:	4915      	ldr	r1, [pc, #84]	; (80007f8 <_testScanI2C+0xa0>)
 80007a4:	1d3b      	adds	r3, r7, #4
 80007a6:	0018      	movs	r0, r3
 80007a8:	f003 fdc2 	bl	8004330 <siprintf>
			 DBG_PUT(buf);
 80007ac:	1d3b      	adds	r3, r7, #4
 80007ae:	0018      	movs	r0, r3
 80007b0:	f7ff ffb0 	bl	8000714 <DBG_PUT>
	 for (i=1; i<128; i++){
 80007b4:	214f      	movs	r1, #79	; 0x4f
 80007b6:	187b      	adds	r3, r7, r1
 80007b8:	781a      	ldrb	r2, [r3, #0]
 80007ba:	187b      	adds	r3, r7, r1
 80007bc:	3201      	adds	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]
 80007c0:	234f      	movs	r3, #79	; 0x4f
 80007c2:	18fb      	adds	r3, r7, r3
 80007c4:	781b      	ldrb	r3, [r3, #0]
 80007c6:	b25b      	sxtb	r3, r3
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	dacf      	bge.n	800076c <_testScanI2C+0x14>
		 	 }
	  	}
	 DBG_PUT("Scan Complete.\r\n");
 80007cc:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <_testScanI2C+0xa4>)
 80007ce:	0018      	movs	r0, r3
 80007d0:	f7ff ffa0 	bl	8000714 <DBG_PUT>
	 if (deviceFound == 1){
 80007d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80007d6:	2b01      	cmp	r3, #1
 80007d8:	d104      	bne.n	80007e4 <_testScanI2C+0x8c>
		 DBG_PUT("I2C TEST PASSED\r\n");
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <_testScanI2C+0xa8>)
 80007dc:	0018      	movs	r0, r3
 80007de:	f7ff ff99 	bl	8000714 <DBG_PUT>
	 }
	 else{
		 DBG_PUT("I2C TEST FAILED\r\n");
	 }
}
 80007e2:	e003      	b.n	80007ec <_testScanI2C+0x94>
		 DBG_PUT("I2C TEST FAILED\r\n");
 80007e4:	4b07      	ldr	r3, [pc, #28]	; (8000804 <_testScanI2C+0xac>)
 80007e6:	0018      	movs	r0, r3
 80007e8:	f7ff ff94 	bl	8000714 <DBG_PUT>
}
 80007ec:	46c0      	nop			; (mov r8, r8)
 80007ee:	46bd      	mov	sp, r7
 80007f0:	b014      	add	sp, #80	; 0x50
 80007f2:	bdb0      	pop	{r4, r5, r7, pc}
 80007f4:	200000d8 	.word	0x200000d8
 80007f8:	08004e4c 	.word	0x08004e4c
 80007fc:	08004e68 	.word	0x08004e68
 8000800:	08004e7c 	.word	0x08004e7c
 8000804:	08004e90 	.word	0x08004e90

08000808 <testTempSensor>:


void testTempSensor(void){
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
	DBG_PUT("\n");
 800080e:	4b1e      	ldr	r3, [pc, #120]	; (8000888 <testTempSensor+0x80>)
 8000810:	0018      	movs	r0, r3
 8000812:	f7ff ff7f 	bl	8000714 <DBG_PUT>
	uint16_t vis_temp = get_temp(0x4C);
 8000816:	1dbc      	adds	r4, r7, #6
 8000818:	204c      	movs	r0, #76	; 0x4c
 800081a:	f000 fc86 	bl	800112a <get_temp>
 800081e:	0003      	movs	r3, r0
 8000820:	8023      	strh	r3, [r4, #0]
	uint16_t nir_temp = get_temp(0x4D);
 8000822:	1d3c      	adds	r4, r7, #4
 8000824:	204d      	movs	r0, #77	; 0x4d
 8000826:	f000 fc80 	bl	800112a <get_temp>
 800082a:	0003      	movs	r3, r0
 800082c:	8023      	strh	r3, [r4, #0]
	uint16_t nand_temp = get_temp(0x4E);
 800082e:	1cbc      	adds	r4, r7, #2
 8000830:	204e      	movs	r0, #78	; 0x4e
 8000832:	f000 fc7a 	bl	800112a <get_temp>
 8000836:	0003      	movs	r3, r0
 8000838:	8023      	strh	r3, [r4, #0]
	uint16_t gate_temp = get_temp(0x4F);
 800083a:	003c      	movs	r4, r7
 800083c:	204f      	movs	r0, #79	; 0x4f
 800083e:	f000 fc74 	bl	800112a <get_temp>
 8000842:	0003      	movs	r3, r0
 8000844:	8023      	strh	r3, [r4, #0]
	printTemp(vis_temp, 0x4C);
 8000846:	1dbb      	adds	r3, r7, #6
 8000848:	881b      	ldrh	r3, [r3, #0]
 800084a:	214c      	movs	r1, #76	; 0x4c
 800084c:	0018      	movs	r0, r3
 800084e:	f000 f81d 	bl	800088c <printTemp>
	printTemp(nir_temp, 0x4D);
 8000852:	1d3b      	adds	r3, r7, #4
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	214d      	movs	r1, #77	; 0x4d
 8000858:	0018      	movs	r0, r3
 800085a:	f000 f817 	bl	800088c <printTemp>
	printTemp(nand_temp, 0x4E);
 800085e:	1cbb      	adds	r3, r7, #2
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	214e      	movs	r1, #78	; 0x4e
 8000864:	0018      	movs	r0, r3
 8000866:	f000 f811 	bl	800088c <printTemp>
	printTemp(gate_temp, 0x4F);
 800086a:	003b      	movs	r3, r7
 800086c:	881b      	ldrh	r3, [r3, #0]
 800086e:	214f      	movs	r1, #79	; 0x4f
 8000870:	0018      	movs	r0, r3
 8000872:	f000 f80b 	bl	800088c <printTemp>
	DBG_PUT("\n");
 8000876:	4b04      	ldr	r3, [pc, #16]	; (8000888 <testTempSensor+0x80>)
 8000878:	0018      	movs	r0, r3
 800087a:	f7ff ff4b 	bl	8000714 <DBG_PUT>
	return;
 800087e:	46c0      	nop			; (mov r8, r8)

}
 8000880:	46bd      	mov	sp, r7
 8000882:	b003      	add	sp, #12
 8000884:	bd90      	pop	{r4, r7, pc}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	08004ea4 	.word	0x08004ea4

0800088c <printTemp>:

void printTemp(uint16_t temp, uint8_t sensor){
 800088c:	b590      	push	{r4, r7, lr}
 800088e:	b093      	sub	sp, #76	; 0x4c
 8000890:	af00      	add	r7, sp, #0
 8000892:	0002      	movs	r2, r0
 8000894:	1dbb      	adds	r3, r7, #6
 8000896:	801a      	strh	r2, [r3, #0]
 8000898:	1d7b      	adds	r3, r7, #5
 800089a:	1c0a      	adds	r2, r1, #0
 800089c:	701a      	strb	r2, [r3, #0]
	char buf[64];
	sprintf(buf,"Sensor 0x%x Temperature: 0x%x \r\n", sensor, temp );
 800089e:	1d7b      	adds	r3, r7, #5
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	1dbb      	adds	r3, r7, #6
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4906      	ldr	r1, [pc, #24]	; (80008c0 <printTemp+0x34>)
 80008a8:	2408      	movs	r4, #8
 80008aa:	1938      	adds	r0, r7, r4
 80008ac:	f003 fd40 	bl	8004330 <siprintf>
	DBG_PUT(buf);
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff ff2e 	bl	8000714 <DBG_PUT>

}
 80008b8:	46c0      	nop			; (mov r8, r8)
 80008ba:	46bd      	mov	sp, r7
 80008bc:	b013      	add	sp, #76	; 0x4c
 80008be:	bd90      	pop	{r4, r7, pc}
 80008c0:	08004ea8 	.word	0x08004ea8

080008c4 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	0018      	movs	r0, r3
 80008d0:	f7ff fc1a 	bl	8000108 <strlen>
 80008d4:	0003      	movs	r3, r0
 80008d6:	b29a      	uxth	r2, r3
 80008d8:	6879      	ldr	r1, [r7, #4]
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <DBG_PUT+0x28>)
 80008dc:	2364      	movs	r3, #100	; 0x64
 80008de:	f002 ffe3 	bl	80038a8 <HAL_UART_Transmit>
}
 80008e2:	46c0      	nop			; (mov r8, r8)
 80008e4:	46bd      	mov	sp, r7
 80008e6:	b002      	add	sp, #8
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	200001d4 	.word	0x200001d4

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	  HAL_Init();
 80008f4:	f000 fc84 	bl	8001200 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f82c 	bl	8000954 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f000 f9b2 	bl	8000c64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000900:	f000 f896 	bl	8000a30 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000904:	f000 f8d4 	bl	8000ab0 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000908:	f000 f912 	bl	8000b30 <MX_SPI1_Init>
  MX_SPI2_Init();
 800090c:	f000 f942 	bl	8000b94 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000910:	f000 f978 	bl	8000c04 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // init nand flash
//  NAND_SPI_Init(&hspi2);
  DBG_PUT("-----------------------------------\r\n");
 8000914:	4b0c      	ldr	r3, [pc, #48]	; (8000948 <main+0x58>)
 8000916:	0018      	movs	r0, r3
 8000918:	f7ff ffd4 	bl	80008c4 <DBG_PUT>
  DBG_PUT("Iris Electronics Long Duration Test Software\r\nVersion 1.01.0; 2022-05-04\r\nSlave Side\r\n");
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <main+0x5c>)
 800091e:	0018      	movs	r0, r3
 8000920:	f7ff ffd0 	bl	80008c4 <DBG_PUT>
  DBG_PUT("-----------------------------------\r\n");
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <main+0x58>)
 8000926:	0018      	movs	r0, r3
 8000928:	f7ff ffcc 	bl	80008c4 <DBG_PUT>
  init_temp_sensors();
 800092c:	f000 fc25 	bl	800117a <init_temp_sensors>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  _toggleLED();
 8000930:	f7ff ff06 	bl	8000740 <_toggleLED>
	  _testScanI2C();
 8000934:	f7ff ff10 	bl	8000758 <_testScanI2C>
	  testTempSensor();
 8000938:	f7ff ff66 	bl	8000808 <testTempSensor>
	  HAL_Delay(2500);
 800093c:	4b04      	ldr	r3, [pc, #16]	; (8000950 <main+0x60>)
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fcce 	bl	80012e0 <HAL_Delay>
  {
 8000944:	e7f4      	b.n	8000930 <main+0x40>
 8000946:	46c0      	nop			; (mov r8, r8)
 8000948:	08004ecc 	.word	0x08004ecc
 800094c:	08004ef4 	.word	0x08004ef4
 8000950:	000009c4 	.word	0x000009c4

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b09b      	sub	sp, #108	; 0x6c
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	2434      	movs	r4, #52	; 0x34
 800095c:	193b      	adds	r3, r7, r4
 800095e:	0018      	movs	r0, r3
 8000960:	2334      	movs	r3, #52	; 0x34
 8000962:	001a      	movs	r2, r3
 8000964:	2100      	movs	r1, #0
 8000966:	f003 fcda 	bl	800431e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800096a:	2320      	movs	r3, #32
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	0018      	movs	r0, r3
 8000970:	2314      	movs	r3, #20
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f003 fcd2 	bl	800431e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097a:	003b      	movs	r3, r7
 800097c:	0018      	movs	r0, r3
 800097e:	2320      	movs	r3, #32
 8000980:	001a      	movs	r2, r3
 8000982:	2100      	movs	r1, #0
 8000984:	f003 fccb 	bl	800431e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000988:	4b27      	ldr	r3, [pc, #156]	; (8000a28 <SystemClock_Config+0xd4>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <SystemClock_Config+0xd8>)
 800098e:	401a      	ands	r2, r3
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <SystemClock_Config+0xd4>)
 8000992:	2180      	movs	r1, #128	; 0x80
 8000994:	0109      	lsls	r1, r1, #4
 8000996:	430a      	orrs	r2, r1
 8000998:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800099a:	0021      	movs	r1, r4
 800099c:	187b      	adds	r3, r7, r1
 800099e:	2210      	movs	r2, #16
 80009a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80009a2:	187b      	adds	r3, r7, r1
 80009a4:	2201      	movs	r2, #1
 80009a6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80009a8:	187b      	adds	r3, r7, r1
 80009aa:	2200      	movs	r2, #0
 80009ac:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80009ae:	187b      	adds	r3, r7, r1
 80009b0:	22a0      	movs	r2, #160	; 0xa0
 80009b2:	0212      	lsls	r2, r2, #8
 80009b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009b6:	187b      	adds	r3, r7, r1
 80009b8:	2200      	movs	r2, #0
 80009ba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	187b      	adds	r3, r7, r1
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 fe8a 	bl	80026d8 <HAL_RCC_OscConfig>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009c8:	f000 f9ca 	bl	8000d60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009cc:	2120      	movs	r1, #32
 80009ce:	187b      	adds	r3, r7, r1
 80009d0:	220f      	movs	r2, #15
 80009d2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80009d4:	187b      	adds	r3, r7, r1
 80009d6:	2200      	movs	r2, #0
 80009d8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009da:	187b      	adds	r3, r7, r1
 80009dc:	2200      	movs	r2, #0
 80009de:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e0:	187b      	adds	r3, r7, r1
 80009e2:	2200      	movs	r2, #0
 80009e4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	187b      	adds	r3, r7, r1
 80009e8:	2200      	movs	r2, #0
 80009ea:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009ec:	187b      	adds	r3, r7, r1
 80009ee:	2100      	movs	r1, #0
 80009f0:	0018      	movs	r0, r3
 80009f2:	f002 f9ed 	bl	8002dd0 <HAL_RCC_ClockConfig>
 80009f6:	1e03      	subs	r3, r0, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80009fa:	f000 f9b1 	bl	8000d60 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 80009fe:	003b      	movs	r3, r7
 8000a00:	2209      	movs	r2, #9
 8000a02:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000a04:	003b      	movs	r3, r7
 8000a06:	2200      	movs	r2, #0
 8000a08:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a0a:	003b      	movs	r3, r7
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	003b      	movs	r3, r7
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 fbfe 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 8000a18:	1e03      	subs	r3, r0, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a1c:	f000 f9a0 	bl	8000d60 <Error_Handler>
  }
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b01b      	add	sp, #108	; 0x6c
 8000a26:	bd90      	pop	{r4, r7, pc}
 8000a28:	40007000 	.word	0x40007000
 8000a2c:	ffffe7ff 	.word	0xffffe7ff

08000a30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a34:	4b1c      	ldr	r3, [pc, #112]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <MX_I2C1_Init+0x7c>)
 8000a38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000a3a:	4b1b      	ldr	r3, [pc, #108]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a3c:	22e1      	movs	r2, #225	; 0xe1
 8000a3e:	00d2      	lsls	r2, r2, #3
 8000a40:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a48:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a4a:	2201      	movs	r2, #1
 8000a4c:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4e:	4b16      	ldr	r3, [pc, #88]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a54:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a66:	4b10      	ldr	r3, [pc, #64]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a6c:	4b0e      	ldr	r3, [pc, #56]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a6e:	0018      	movs	r0, r3
 8000a70:	f000 ff36 	bl	80018e0 <HAL_I2C_Init>
 8000a74:	1e03      	subs	r3, r0, #0
 8000a76:	d001      	beq.n	8000a7c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a78:	f000 f972 	bl	8000d60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a7c:	4b0a      	ldr	r3, [pc, #40]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	0018      	movs	r0, r3
 8000a82:	f001 fd91 	bl	80025a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a8a:	f000 f969 	bl	8000d60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <MX_I2C1_Init+0x78>)
 8000a90:	2100      	movs	r1, #0
 8000a92:	0018      	movs	r0, r3
 8000a94:	f001 fdd4 	bl	8002640 <HAL_I2CEx_ConfigDigitalFilter>
 8000a98:	1e03      	subs	r3, r0, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a9c:	f000 f960 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	2000008c 	.word	0x2000008c
 8000aac:	40005400 	.word	0x40005400

08000ab0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000ab6:	4a1d      	ldr	r2, [pc, #116]	; (8000b2c <MX_I2C2_Init+0x7c>)
 8000ab8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00000708;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000abc:	22e1      	movs	r2, #225	; 0xe1
 8000abe:	00d2      	lsls	r2, r2, #3
 8000ac0:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000ac2:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ac8:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000ad4:	4b14      	ldr	r3, [pc, #80]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ae6:	4b10      	ldr	r3, [pc, #64]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000aec:	4b0e      	ldr	r3, [pc, #56]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000aee:	0018      	movs	r0, r3
 8000af0:	f000 fef6 	bl	80018e0 <HAL_I2C_Init>
 8000af4:	1e03      	subs	r3, r0, #0
 8000af6:	d001      	beq.n	8000afc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000af8:	f000 f932 	bl	8000d60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000afc:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000afe:	2100      	movs	r1, #0
 8000b00:	0018      	movs	r0, r3
 8000b02:	f001 fd51 	bl	80025a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b06:	1e03      	subs	r3, r0, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b0a:	f000 f929 	bl	8000d60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b0e:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <MX_I2C2_Init+0x78>)
 8000b10:	2100      	movs	r1, #0
 8000b12:	0018      	movs	r0, r3
 8000b14:	f001 fd94 	bl	8002640 <HAL_I2CEx_ConfigDigitalFilter>
 8000b18:	1e03      	subs	r3, r0, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b1c:	f000 f920 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	46c0      	nop			; (mov r8, r8)
 8000b28:	200000d8 	.word	0x200000d8
 8000b2c:	40005800 	.word	0x40005800

08000b30 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b34:	4b15      	ldr	r3, [pc, #84]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b36:	4a16      	ldr	r2, [pc, #88]	; (8000b90 <MX_SPI1_Init+0x60>)
 8000b38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8000b3a:	4b14      	ldr	r3, [pc, #80]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b40:	4b12      	ldr	r3, [pc, #72]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b46:	4b11      	ldr	r3, [pc, #68]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b52:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000b58:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b5e:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b64:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b72:	2207      	movs	r2, #7
 8000b74:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <MX_SPI1_Init+0x5c>)
 8000b78:	0018      	movs	r0, r3
 8000b7a:	f002 fc91 	bl	80034a0 <HAL_SPI_Init>
 8000b7e:	1e03      	subs	r3, r0, #0
 8000b80:	d001      	beq.n	8000b86 <MX_SPI1_Init+0x56>
  {
    Error_Handler();
 8000b82:	f000 f8ed 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	20000124 	.word	0x20000124
 8000b90:	40013000 	.word	0x40013000

08000b94 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000b98:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000b9a:	4a19      	ldr	r2, [pc, #100]	; (8000c00 <MX_SPI2_Init+0x6c>)
 8000b9c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000ba0:	2282      	movs	r2, #130	; 0x82
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bac:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bb2:	4b12      	ldr	r3, [pc, #72]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bb8:	4b10      	ldr	r3, [pc, #64]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000bbe:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000bc0:	2280      	movs	r2, #128	; 0x80
 8000bc2:	0092      	lsls	r2, r2, #2
 8000bc4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bd2:	4b0a      	ldr	r3, [pc, #40]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bd8:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000bde:	4b07      	ldr	r3, [pc, #28]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000be0:	2207      	movs	r2, #7
 8000be2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <MX_SPI2_Init+0x68>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 fc5a 	bl	80034a0 <HAL_SPI_Init>
 8000bec:	1e03      	subs	r3, r0, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000bf0:	f000 f8b6 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000bf4:	46c0      	nop			; (mov r8, r8)
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	46c0      	nop			; (mov r8, r8)
 8000bfc:	2000017c 	.word	0x2000017c
 8000c00:	40003800 	.word	0x40003800

08000c04 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c08:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <MX_USART1_UART_Init+0x5c>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c0e:	4b13      	ldr	r3, [pc, #76]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c10:	22e1      	movs	r2, #225	; 0xe1
 8000c12:	0252      	lsls	r2, r2, #9
 8000c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b0e      	ldr	r3, [pc, #56]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b0c      	ldr	r3, [pc, #48]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b0b      	ldr	r3, [pc, #44]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <MX_USART1_UART_Init+0x58>)
 8000c48:	0018      	movs	r0, r3
 8000c4a:	f002 fdd9 	bl	8003800 <HAL_UART_Init>
 8000c4e:	1e03      	subs	r3, r0, #0
 8000c50:	d001      	beq.n	8000c56 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c52:	f000 f885 	bl	8000d60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200001d4 	.word	0x200001d4
 8000c60:	40013800 	.word	0x40013800

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b590      	push	{r4, r7, lr}
 8000c66:	b089      	sub	sp, #36	; 0x24
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	240c      	movs	r4, #12
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	0018      	movs	r0, r3
 8000c70:	2314      	movs	r3, #20
 8000c72:	001a      	movs	r2, r3
 8000c74:	2100      	movs	r1, #0
 8000c76:	f003 fb52 	bl	800431e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	4b35      	ldr	r3, [pc, #212]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7e:	4b34      	ldr	r3, [pc, #208]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000c80:	2180      	movs	r1, #128	; 0x80
 8000c82:	430a      	orrs	r2, r1
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c86:	4b32      	ldr	r3, [pc, #200]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	2280      	movs	r2, #128	; 0x80
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	4b2f      	ldr	r3, [pc, #188]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c96:	4b2e      	ldr	r3, [pc, #184]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000c98:	2101      	movs	r1, #1
 8000c9a:	430a      	orrs	r2, r1
 8000c9c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c9e:	4b2c      	ldr	r3, [pc, #176]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000caa:	4b29      	ldr	r3, [pc, #164]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000cac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cae:	4b28      	ldr	r3, [pc, #160]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000cb0:	2102      	movs	r1, #2
 8000cb2:	430a      	orrs	r2, r1
 8000cb4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cb6:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <MX_GPIO_Init+0xec>)
 8000cb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cba:	2202      	movs	r2, #2
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8000cc2:	4924      	ldr	r1, [pc, #144]	; (8000d54 <MX_GPIO_Init+0xf0>)
 8000cc4:	23a0      	movs	r3, #160	; 0xa0
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	2200      	movs	r2, #0
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f000 fdd0 	bl	8001870 <HAL_GPIO_WritePin>
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_OUT1_Pin|NAND_CS1_Pin, GPIO_PIN_RESET);
 8000cd0:	4921      	ldr	r1, [pc, #132]	; (8000d58 <MX_GPIO_Init+0xf4>)
 8000cd2:	4b22      	ldr	r3, [pc, #136]	; (8000d5c <MX_GPIO_Init+0xf8>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	0018      	movs	r0, r3
 8000cd8:	f000 fdca 	bl	8001870 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : USART2_CS1_Pin USART2_CS2_Pin USART2_MOSI_Pin USART2_CLK_Pin
                           WP__Pin CAM_EN_Pin NAND_CS2_Pin */
  GPIO_InitStruct.Pin = USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8000cdc:	193b      	adds	r3, r7, r4
 8000cde:	4a1d      	ldr	r2, [pc, #116]	; (8000d54 <MX_GPIO_Init+0xf0>)
 8000ce0:	601a      	str	r2, [r3, #0]
                          |WP__Pin|CAM_EN_Pin|NAND_CS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	193b      	adds	r3, r7, r4
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf4:	193a      	adds	r2, r7, r4
 8000cf6:	23a0      	movs	r3, #160	; 0xa0
 8000cf8:	05db      	lsls	r3, r3, #23
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f000 fc39 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_MISO_Pin */
  GPIO_InitStruct.Pin = USART2_MISO_Pin;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2208      	movs	r2, #8
 8000d06:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USART2_MISO_GPIO_Port, &GPIO_InitStruct);
 8000d14:	193a      	adds	r2, r7, r4
 8000d16:	23a0      	movs	r3, #160	; 0xa0
 8000d18:	05db      	lsls	r3, r3, #23
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f000 fc29 	bl	8001574 <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_OUT1_Pin NAND_CS1_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin|NAND_CS1_Pin;
 8000d22:	0021      	movs	r1, r4
 8000d24:	187b      	adds	r3, r7, r1
 8000d26:	4a0c      	ldr	r2, [pc, #48]	; (8000d58 <MX_GPIO_Init+0xf4>)
 8000d28:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2200      	movs	r2, #0
 8000d3a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	4a07      	ldr	r2, [pc, #28]	; (8000d5c <MX_GPIO_Init+0xf8>)
 8000d40:	0019      	movs	r1, r3
 8000d42:	0010      	movs	r0, r2
 8000d44:	f000 fc16 	bl	8001574 <HAL_GPIO_Init>

}
 8000d48:	46c0      	nop			; (mov r8, r8)
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	b009      	add	sp, #36	; 0x24
 8000d4e:	bd90      	pop	{r4, r7, pc}
 8000d50:	40021000 	.word	0x40021000
 8000d54:	00001917 	.word	0x00001917
 8000d58:	00001001 	.word	0x00001001
 8000d5c:	50000400 	.word	0x50000400

08000d60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d64:	b672      	cpsid	i
}
 8000d66:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <Error_Handler+0x8>
	...

08000d6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d70:	4b07      	ldr	r3, [pc, #28]	; (8000d90 <HAL_MspInit+0x24>)
 8000d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d74:	4b06      	ldr	r3, [pc, #24]	; (8000d90 <HAL_MspInit+0x24>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d7c:	4b04      	ldr	r3, [pc, #16]	; (8000d90 <HAL_MspInit+0x24>)
 8000d7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d80:	4b03      	ldr	r3, [pc, #12]	; (8000d90 <HAL_MspInit+0x24>)
 8000d82:	2180      	movs	r1, #128	; 0x80
 8000d84:	0549      	lsls	r1, r1, #21
 8000d86:	430a      	orrs	r2, r1
 8000d88:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40021000 	.word	0x40021000

08000d94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d94:	b590      	push	{r4, r7, lr}
 8000d96:	b08b      	sub	sp, #44	; 0x2c
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9c:	2414      	movs	r4, #20
 8000d9e:	193b      	adds	r3, r7, r4
 8000da0:	0018      	movs	r0, r3
 8000da2:	2314      	movs	r3, #20
 8000da4:	001a      	movs	r2, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	f003 fab9 	bl	800431e <memset>
  if(hi2c->Instance==I2C1)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a3b      	ldr	r2, [pc, #236]	; (8000ea0 <HAL_I2C_MspInit+0x10c>)
 8000db2:	4293      	cmp	r3, r2
 8000db4:	d129      	bne.n	8000e0a <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db6:	4b3b      	ldr	r3, [pc, #236]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000dba:	4b3a      	ldr	r3, [pc, #232]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000dbc:	2102      	movs	r1, #2
 8000dbe:	430a      	orrs	r2, r1
 8000dc0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dc6:	2202      	movs	r2, #2
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dce:	0021      	movs	r1, r4
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	22c0      	movs	r2, #192	; 0xc0
 8000dd4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dd6:	187b      	adds	r3, r7, r1
 8000dd8:	2212      	movs	r2, #18
 8000dda:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	187b      	adds	r3, r7, r1
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de2:	187b      	adds	r3, r7, r1
 8000de4:	2203      	movs	r2, #3
 8000de6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8000de8:	187b      	adds	r3, r7, r1
 8000dea:	2201      	movs	r2, #1
 8000dec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	4a2d      	ldr	r2, [pc, #180]	; (8000ea8 <HAL_I2C_MspInit+0x114>)
 8000df2:	0019      	movs	r1, r3
 8000df4:	0010      	movs	r0, r2
 8000df6:	f000 fbbd 	bl	8001574 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dfe:	4b29      	ldr	r3, [pc, #164]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	0389      	lsls	r1, r1, #14
 8000e04:	430a      	orrs	r2, r1
 8000e06:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e08:	e046      	b.n	8000e98 <HAL_I2C_MspInit+0x104>
  else if(hi2c->Instance==I2C2)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a27      	ldr	r2, [pc, #156]	; (8000eac <HAL_I2C_MspInit+0x118>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d141      	bne.n	8000e98 <HAL_I2C_MspInit+0x104>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e14:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000e20:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e24:	2202      	movs	r2, #2
 8000e26:	4013      	ands	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000e2c:	2114      	movs	r1, #20
 8000e2e:	187b      	adds	r3, r7, r1
 8000e30:	2280      	movs	r2, #128	; 0x80
 8000e32:	0112      	lsls	r2, r2, #4
 8000e34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e36:	000c      	movs	r4, r1
 8000e38:	193b      	adds	r3, r7, r4
 8000e3a:	2212      	movs	r2, #18
 8000e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	193b      	adds	r3, r7, r4
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	193b      	adds	r3, r7, r4
 8000e46:	2203      	movs	r2, #3
 8000e48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000e4a:	193b      	adds	r3, r7, r4
 8000e4c:	2206      	movs	r2, #6
 8000e4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e50:	193b      	adds	r3, r7, r4
 8000e52:	4a15      	ldr	r2, [pc, #84]	; (8000ea8 <HAL_I2C_MspInit+0x114>)
 8000e54:	0019      	movs	r1, r3
 8000e56:	0010      	movs	r0, r2
 8000e58:	f000 fb8c 	bl	8001574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e5c:	0021      	movs	r1, r4
 8000e5e:	187b      	adds	r3, r7, r1
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0192      	lsls	r2, r2, #6
 8000e64:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e66:	187b      	adds	r3, r7, r1
 8000e68:	2212      	movs	r2, #18
 8000e6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	187b      	adds	r3, r7, r1
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	2203      	movs	r2, #3
 8000e76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8000e78:	187b      	adds	r3, r7, r1
 8000e7a:	2205      	movs	r2, #5
 8000e7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7e:	187b      	adds	r3, r7, r1
 8000e80:	4a09      	ldr	r2, [pc, #36]	; (8000ea8 <HAL_I2C_MspInit+0x114>)
 8000e82:	0019      	movs	r1, r3
 8000e84:	0010      	movs	r0, r2
 8000e86:	f000 fb75 	bl	8001574 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e8e:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_I2C_MspInit+0x110>)
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	03c9      	lsls	r1, r1, #15
 8000e94:	430a      	orrs	r2, r1
 8000e96:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e98:	46c0      	nop			; (mov r8, r8)
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	b00b      	add	sp, #44	; 0x2c
 8000e9e:	bd90      	pop	{r4, r7, pc}
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	50000400 	.word	0x50000400
 8000eac:	40005800 	.word	0x40005800

08000eb0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb0:	b590      	push	{r4, r7, lr}
 8000eb2:	b08b      	sub	sp, #44	; 0x2c
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	2414      	movs	r4, #20
 8000eba:	193b      	adds	r3, r7, r4
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	2314      	movs	r3, #20
 8000ec0:	001a      	movs	r2, r3
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	f003 fa2b 	bl	800431e <memset>
  if(hspi->Instance==SPI1)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a40      	ldr	r2, [pc, #256]	; (8000fd0 <HAL_SPI_MspInit+0x120>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d132      	bne.n	8000f38 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed2:	4b40      	ldr	r3, [pc, #256]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000ed4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed6:	4b3f      	ldr	r3, [pc, #252]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000ed8:	2180      	movs	r1, #128	; 0x80
 8000eda:	0149      	lsls	r1, r1, #5
 8000edc:	430a      	orrs	r2, r1
 8000ede:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee0:	4b3c      	ldr	r3, [pc, #240]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ee4:	4b3b      	ldr	r3, [pc, #236]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000ee6:	2101      	movs	r1, #1
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eec:	4b39      	ldr	r3, [pc, #228]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	4013      	ands	r3, r2
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PA15     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15;
 8000ef8:	0021      	movs	r1, r4
 8000efa:	187b      	adds	r3, r7, r1
 8000efc:	4a36      	ldr	r2, [pc, #216]	; (8000fd8 <HAL_SPI_MspInit+0x128>)
 8000efe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	187b      	adds	r3, r7, r1
 8000f02:	2202      	movs	r2, #2
 8000f04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	187b      	adds	r3, r7, r1
 8000f08:	2200      	movs	r2, #0
 8000f0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	2203      	movs	r2, #3
 8000f10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f12:	187b      	adds	r3, r7, r1
 8000f14:	2200      	movs	r2, #0
 8000f16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f18:	187a      	adds	r2, r7, r1
 8000f1a:	23a0      	movs	r3, #160	; 0xa0
 8000f1c:	05db      	lsls	r3, r3, #23
 8000f1e:	0011      	movs	r1, r2
 8000f20:	0018      	movs	r0, r3
 8000f22:	f000 fb27 	bl	8001574 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	2019      	movs	r0, #25
 8000f2c:	f000 faa8 	bl	8001480 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000f30:	2019      	movs	r0, #25
 8000f32:	f000 faba 	bl	80014aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f36:	e046      	b.n	8000fc6 <HAL_SPI_MspInit+0x116>
  else if(hspi->Instance==SPI2)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a27      	ldr	r2, [pc, #156]	; (8000fdc <HAL_SPI_MspInit+0x12c>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d141      	bne.n	8000fc6 <HAL_SPI_MspInit+0x116>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000f48:	2180      	movs	r1, #128	; 0x80
 8000f4a:	01c9      	lsls	r1, r1, #7
 8000f4c:	430a      	orrs	r2, r1
 8000f4e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000f56:	2102      	movs	r1, #2
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <HAL_SPI_MspInit+0x124>)
 8000f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f60:	2202      	movs	r2, #2
 8000f62:	4013      	ands	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f68:	2114      	movs	r1, #20
 8000f6a:	187b      	adds	r3, r7, r1
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	00d2      	lsls	r2, r2, #3
 8000f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f72:	000c      	movs	r4, r1
 8000f74:	193b      	adds	r3, r7, r4
 8000f76:	2202      	movs	r2, #2
 8000f78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	193b      	adds	r3, r7, r4
 8000f82:	2203      	movs	r2, #3
 8000f84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f86:	193b      	adds	r3, r7, r4
 8000f88:	2205      	movs	r2, #5
 8000f8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	193b      	adds	r3, r7, r4
 8000f8e:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_SPI_MspInit+0x130>)
 8000f90:	0019      	movs	r1, r3
 8000f92:	0010      	movs	r0, r2
 8000f94:	f000 faee 	bl	8001574 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000f98:	0021      	movs	r1, r4
 8000f9a:	187b      	adds	r3, r7, r1
 8000f9c:	22c0      	movs	r2, #192	; 0xc0
 8000f9e:	0212      	lsls	r2, r2, #8
 8000fa0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa2:	187b      	adds	r3, r7, r1
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	187b      	adds	r3, r7, r1
 8000faa:	2200      	movs	r2, #0
 8000fac:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fae:	187b      	adds	r3, r7, r1
 8000fb0:	2203      	movs	r2, #3
 8000fb2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000fb4:	187b      	adds	r3, r7, r1
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fba:	187b      	adds	r3, r7, r1
 8000fbc:	4a08      	ldr	r2, [pc, #32]	; (8000fe0 <HAL_SPI_MspInit+0x130>)
 8000fbe:	0019      	movs	r1, r3
 8000fc0:	0010      	movs	r0, r2
 8000fc2:	f000 fad7 	bl	8001574 <HAL_GPIO_Init>
}
 8000fc6:	46c0      	nop			; (mov r8, r8)
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	b00b      	add	sp, #44	; 0x2c
 8000fcc:	bd90      	pop	{r4, r7, pc}
 8000fce:	46c0      	nop			; (mov r8, r8)
 8000fd0:	40013000 	.word	0x40013000
 8000fd4:	40021000 	.word	0x40021000
 8000fd8:	000080e0 	.word	0x000080e0
 8000fdc:	40003800 	.word	0x40003800
 8000fe0:	50000400 	.word	0x50000400

08000fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fe4:	b590      	push	{r4, r7, lr}
 8000fe6:	b089      	sub	sp, #36	; 0x24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fec:	240c      	movs	r4, #12
 8000fee:	193b      	adds	r3, r7, r4
 8000ff0:	0018      	movs	r0, r3
 8000ff2:	2314      	movs	r3, #20
 8000ff4:	001a      	movs	r2, r3
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	f003 f991 	bl	800431e <memset>
  if(huart->Instance==USART1)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_UART_MspInit+0x80>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d12a      	bne.n	800105c <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001006:	4b18      	ldr	r3, [pc, #96]	; (8001068 <HAL_UART_MspInit+0x84>)
 8001008:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800100a:	4b17      	ldr	r3, [pc, #92]	; (8001068 <HAL_UART_MspInit+0x84>)
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	01c9      	lsls	r1, r1, #7
 8001010:	430a      	orrs	r2, r1
 8001012:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <HAL_UART_MspInit+0x84>)
 8001016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <HAL_UART_MspInit+0x84>)
 800101a:	2101      	movs	r1, #1
 800101c:	430a      	orrs	r2, r1
 800101e:	62da      	str	r2, [r3, #44]	; 0x2c
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_UART_MspInit+0x84>)
 8001022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001024:	2201      	movs	r2, #1
 8001026:	4013      	ands	r3, r2
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800102c:	193b      	adds	r3, r7, r4
 800102e:	22c0      	movs	r2, #192	; 0xc0
 8001030:	00d2      	lsls	r2, r2, #3
 8001032:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	0021      	movs	r1, r4
 8001036:	187b      	adds	r3, r7, r1
 8001038:	2202      	movs	r2, #2
 800103a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	187b      	adds	r3, r7, r1
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	187b      	adds	r3, r7, r1
 8001044:	2203      	movs	r2, #3
 8001046:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8001048:	187b      	adds	r3, r7, r1
 800104a:	2204      	movs	r2, #4
 800104c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	187a      	adds	r2, r7, r1
 8001050:	23a0      	movs	r3, #160	; 0xa0
 8001052:	05db      	lsls	r3, r3, #23
 8001054:	0011      	movs	r1, r2
 8001056:	0018      	movs	r0, r3
 8001058:	f000 fa8c 	bl	8001574 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800105c:	46c0      	nop			; (mov r8, r8)
 800105e:	46bd      	mov	sp, r7
 8001060:	b009      	add	sp, #36	; 0x24
 8001062:	bd90      	pop	{r4, r7, pc}
 8001064:	40013800 	.word	0x40013800
 8001068:	40021000 	.word	0x40021000

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b580      	push	{r7, lr}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001086:	46c0      	nop			; (mov r8, r8)
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001090:	f000 f90a 	bl	80012a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001094:	46c0      	nop			; (mov r8, r8)
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <SPI1_IRQHandler+0x14>)
 80010a2:	0018      	movs	r0, r3
 80010a4:	f002 fa90 	bl	80035c8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80010a8:	46c0      	nop			; (mov r8, r8)
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	20000124 	.word	0x20000124

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	; (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	; (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	; (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	18d3      	adds	r3, r2, r3
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f003 f8e8 	bl	80042b8 <__errno>
 80010e8:	0003      	movs	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	2301      	movs	r3, #1
 80010f0:	425b      	negs	r3, r3
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	; (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	18d2      	adds	r2, r2, r3
 8001102:	4b05      	ldr	r3, [pc, #20]	; (8001118 <_sbrk+0x64>)
 8001104:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	0018      	movs	r0, r3
 800110a:	46bd      	mov	sp, r7
 800110c:	b006      	add	sp, #24
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20005000 	.word	0x20005000
 8001114:	00000400 	.word	0x00000400
 8001118:	20000258 	.word	0x20000258
 800111c:	20000270 	.word	0x20000270

08001120 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <get_temp>:
 */
#include "tmp421.h"
#include "debug.h"

// add reset function to the stuff n things
uint16_t get_temp(uint8_t sensor_addr){
 800112a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112c:	b085      	sub	sp, #20
 800112e:	af00      	add	r7, sp, #0
 8001130:	0002      	movs	r2, r0
 8001132:	1dfb      	adds	r3, r7, #7
 8001134:	701a      	strb	r2, [r3, #0]
	// returns a 16 bit unsigned integer with bits [15:8] as the 'high' byte,
	// and the bits [7:4] bits as the 'low' byte. High byte is the integer value with a -64 celsius offset
	// Low byte is [7:4] with 0.0625 celsius per count. Temp is the sum of the high and low byte.
	uint8_t highbyte = i2c2_read8_8(sensor_addr, 0x00);
 8001136:	250f      	movs	r5, #15
 8001138:	197c      	adds	r4, r7, r5
 800113a:	1dfb      	adds	r3, r7, #7
 800113c:	781b      	ldrb	r3, [r3, #0]
 800113e:	2100      	movs	r1, #0
 8001140:	0018      	movs	r0, r3
 8001142:	f7ff f9d9 	bl	80004f8 <i2c2_read8_8>
 8001146:	0003      	movs	r3, r0
 8001148:	7023      	strb	r3, [r4, #0]
	uint8_t lowbyte = i2c2_read8_8(sensor_addr, 0x10);
 800114a:	260e      	movs	r6, #14
 800114c:	19bc      	adds	r4, r7, r6
 800114e:	1dfb      	adds	r3, r7, #7
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2110      	movs	r1, #16
 8001154:	0018      	movs	r0, r3
 8001156:	f7ff f9cf 	bl	80004f8 <i2c2_read8_8>
 800115a:	0003      	movs	r3, r0
 800115c:	7023      	strb	r3, [r4, #0]
	return ((uint16_t)highbyte << 8) | lowbyte;
 800115e:	197b      	adds	r3, r7, r5
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	b21a      	sxth	r2, r3
 8001166:	19bb      	adds	r3, r7, r6
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	b21b      	sxth	r3, r3
 800116c:	4313      	orrs	r3, r2
 800116e:	b21b      	sxth	r3, r3
 8001170:	b29b      	uxth	r3, r3
}
 8001172:	0018      	movs	r0, r3
 8001174:	46bd      	mov	sp, r7
 8001176:	b005      	add	sp, #20
 8001178:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800117a <init_temp_sensors>:

void init_temp_sensors(void){
 800117a:	b580      	push	{r7, lr}
 800117c:	af00      	add	r7, sp, #0
	// change bit 2 of config 1 to set to extended binary
	// and make life easier.
	i2c2_write8_8(VIS_TEMP_SENSOR, 0x09, 0x04);
 800117e:	2204      	movs	r2, #4
 8001180:	2109      	movs	r1, #9
 8001182:	204c      	movs	r0, #76	; 0x4c
 8001184:	f7ff f9e2 	bl	800054c <i2c2_write8_8>
	i2c2_write8_8(NIR_TEMP_SENSOR, 0x09, 0x04);
 8001188:	2204      	movs	r2, #4
 800118a:	2109      	movs	r1, #9
 800118c:	204d      	movs	r0, #77	; 0x4d
 800118e:	f7ff f9dd 	bl	800054c <i2c2_write8_8>
	i2c2_write8_8(TEMP3, 0x09, 0x04);
 8001192:	2204      	movs	r2, #4
 8001194:	2109      	movs	r1, #9
 8001196:	204e      	movs	r0, #78	; 0x4e
 8001198:	f7ff f9d8 	bl	800054c <i2c2_write8_8>
	i2c2_write8_8(TEMP4, 0x09, 0x04);
 800119c:	2204      	movs	r2, #4
 800119e:	2109      	movs	r1, #9
 80011a0:	204f      	movs	r0, #79	; 0x4f
 80011a2:	f7ff f9d3 	bl	800054c <i2c2_write8_8>
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80011ac:	480d      	ldr	r0, [pc, #52]	; (80011e4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80011ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480d      	ldr	r0, [pc, #52]	; (80011e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80011b2:	490e      	ldr	r1, [pc, #56]	; (80011ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80011b4:	4a0e      	ldr	r2, [pc, #56]	; (80011f0 <LoopForever+0xe>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a0b      	ldr	r2, [pc, #44]	; (80011f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011c8:	4c0b      	ldr	r4, [pc, #44]	; (80011f8 <LoopForever+0x16>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80011d6:	f7ff ffa3 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011da:	f003 f873 	bl	80042c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011de:	f7ff fb87 	bl	80008f0 <main>

080011e2 <LoopForever>:

LoopForever:
    b LoopForever
 80011e2:	e7fe      	b.n	80011e2 <LoopForever>
   ldr   r0, =_estack
 80011e4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80011e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011f0:	08005078 	.word	0x08005078
  ldr r2, =_sbss
 80011f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011f8:	20000270 	.word	0x20000270

080011fc <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011fc:	e7fe      	b.n	80011fc <ADC1_COMP_IRQHandler>
	...

08001200 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001206:	1dfb      	adds	r3, r7, #7
 8001208:	2200      	movs	r2, #0
 800120a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_Init+0x3c>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_Init+0x3c>)
 8001212:	2140      	movs	r1, #64	; 0x40
 8001214:	430a      	orrs	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001218:	2003      	movs	r0, #3
 800121a:	f000 f811 	bl	8001240 <HAL_InitTick>
 800121e:	1e03      	subs	r3, r0, #0
 8001220:	d003      	beq.n	800122a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8001222:	1dfb      	adds	r3, r7, #7
 8001224:	2201      	movs	r2, #1
 8001226:	701a      	strb	r2, [r3, #0]
 8001228:	e001      	b.n	800122e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800122a:	f7ff fd9f 	bl	8000d6c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800122e:	1dfb      	adds	r3, r7, #7
 8001230:	781b      	ldrb	r3, [r3, #0]
}
 8001232:	0018      	movs	r0, r3
 8001234:	46bd      	mov	sp, r7
 8001236:	b002      	add	sp, #8
 8001238:	bd80      	pop	{r7, pc}
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	40022000 	.word	0x40022000

08001240 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_InitTick+0x5c>)
 800124a:	681c      	ldr	r4, [r3, #0]
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <HAL_InitTick+0x60>)
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	0019      	movs	r1, r3
 8001252:	23fa      	movs	r3, #250	; 0xfa
 8001254:	0098      	lsls	r0, r3, #2
 8001256:	f7fe ff69 	bl	800012c <__udivsi3>
 800125a:	0003      	movs	r3, r0
 800125c:	0019      	movs	r1, r3
 800125e:	0020      	movs	r0, r4
 8001260:	f7fe ff64 	bl	800012c <__udivsi3>
 8001264:	0003      	movs	r3, r0
 8001266:	0018      	movs	r0, r3
 8001268:	f000 f92f 	bl	80014ca <HAL_SYSTICK_Config>
 800126c:	1e03      	subs	r3, r0, #0
 800126e:	d001      	beq.n	8001274 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e00f      	b.n	8001294 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d80b      	bhi.n	8001292 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800127a:	6879      	ldr	r1, [r7, #4]
 800127c:	2301      	movs	r3, #1
 800127e:	425b      	negs	r3, r3
 8001280:	2200      	movs	r2, #0
 8001282:	0018      	movs	r0, r3
 8001284:	f000 f8fc 	bl	8001480 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001288:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_InitTick+0x64>)
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800128e:	2300      	movs	r3, #0
 8001290:	e000      	b.n	8001294 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
}
 8001294:	0018      	movs	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	b003      	add	sp, #12
 800129a:	bd90      	pop	{r4, r7, pc}
 800129c:	20000000 	.word	0x20000000
 80012a0:	20000008 	.word	0x20000008
 80012a4:	20000004 	.word	0x20000004

080012a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ac:	4b05      	ldr	r3, [pc, #20]	; (80012c4 <HAL_IncTick+0x1c>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	001a      	movs	r2, r3
 80012b2:	4b05      	ldr	r3, [pc, #20]	; (80012c8 <HAL_IncTick+0x20>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	18d2      	adds	r2, r2, r3
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_IncTick+0x20>)
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	46c0      	nop			; (mov r8, r8)
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	20000008 	.word	0x20000008
 80012c8:	2000025c 	.word	0x2000025c

080012cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  return uwTick;
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GetTick+0x10>)
 80012d2:	681b      	ldr	r3, [r3, #0]
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	46c0      	nop			; (mov r8, r8)
 80012dc:	2000025c 	.word	0x2000025c

080012e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e8:	f7ff fff0 	bl	80012cc <HAL_GetTick>
 80012ec:	0003      	movs	r3, r0
 80012ee:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	3301      	adds	r3, #1
 80012f8:	d005      	beq.n	8001306 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012fa:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <HAL_Delay+0x44>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	001a      	movs	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	189b      	adds	r3, r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001306:	46c0      	nop			; (mov r8, r8)
 8001308:	f7ff ffe0 	bl	80012cc <HAL_GetTick>
 800130c:	0002      	movs	r2, r0
 800130e:	68bb      	ldr	r3, [r7, #8]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d8f7      	bhi.n	8001308 <HAL_Delay+0x28>
  {
  }
}
 8001318:	46c0      	nop			; (mov r8, r8)
 800131a:	46c0      	nop			; (mov r8, r8)
 800131c:	46bd      	mov	sp, r7
 800131e:	b004      	add	sp, #16
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	20000008 	.word	0x20000008

08001328 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	0002      	movs	r2, r0
 8001330:	1dfb      	adds	r3, r7, #7
 8001332:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001334:	1dfb      	adds	r3, r7, #7
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b7f      	cmp	r3, #127	; 0x7f
 800133a:	d809      	bhi.n	8001350 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	001a      	movs	r2, r3
 8001342:	231f      	movs	r3, #31
 8001344:	401a      	ands	r2, r3
 8001346:	4b04      	ldr	r3, [pc, #16]	; (8001358 <__NVIC_EnableIRQ+0x30>)
 8001348:	2101      	movs	r1, #1
 800134a:	4091      	lsls	r1, r2
 800134c:	000a      	movs	r2, r1
 800134e:	601a      	str	r2, [r3, #0]
  }
}
 8001350:	46c0      	nop			; (mov r8, r8)
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}
 8001358:	e000e100 	.word	0xe000e100

0800135c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	0002      	movs	r2, r0
 8001364:	6039      	str	r1, [r7, #0]
 8001366:	1dfb      	adds	r3, r7, #7
 8001368:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b7f      	cmp	r3, #127	; 0x7f
 8001370:	d828      	bhi.n	80013c4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001372:	4a2f      	ldr	r2, [pc, #188]	; (8001430 <__NVIC_SetPriority+0xd4>)
 8001374:	1dfb      	adds	r3, r7, #7
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b25b      	sxtb	r3, r3
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	33c0      	adds	r3, #192	; 0xc0
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	589b      	ldr	r3, [r3, r2]
 8001382:	1dfa      	adds	r2, r7, #7
 8001384:	7812      	ldrb	r2, [r2, #0]
 8001386:	0011      	movs	r1, r2
 8001388:	2203      	movs	r2, #3
 800138a:	400a      	ands	r2, r1
 800138c:	00d2      	lsls	r2, r2, #3
 800138e:	21ff      	movs	r1, #255	; 0xff
 8001390:	4091      	lsls	r1, r2
 8001392:	000a      	movs	r2, r1
 8001394:	43d2      	mvns	r2, r2
 8001396:	401a      	ands	r2, r3
 8001398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	019b      	lsls	r3, r3, #6
 800139e:	22ff      	movs	r2, #255	; 0xff
 80013a0:	401a      	ands	r2, r3
 80013a2:	1dfb      	adds	r3, r7, #7
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	0018      	movs	r0, r3
 80013a8:	2303      	movs	r3, #3
 80013aa:	4003      	ands	r3, r0
 80013ac:	00db      	lsls	r3, r3, #3
 80013ae:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013b0:	481f      	ldr	r0, [pc, #124]	; (8001430 <__NVIC_SetPriority+0xd4>)
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	781b      	ldrb	r3, [r3, #0]
 80013b6:	b25b      	sxtb	r3, r3
 80013b8:	089b      	lsrs	r3, r3, #2
 80013ba:	430a      	orrs	r2, r1
 80013bc:	33c0      	adds	r3, #192	; 0xc0
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013c2:	e031      	b.n	8001428 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c4:	4a1b      	ldr	r2, [pc, #108]	; (8001434 <__NVIC_SetPriority+0xd8>)
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	0019      	movs	r1, r3
 80013cc:	230f      	movs	r3, #15
 80013ce:	400b      	ands	r3, r1
 80013d0:	3b08      	subs	r3, #8
 80013d2:	089b      	lsrs	r3, r3, #2
 80013d4:	3306      	adds	r3, #6
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	18d3      	adds	r3, r2, r3
 80013da:	3304      	adds	r3, #4
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	1dfa      	adds	r2, r7, #7
 80013e0:	7812      	ldrb	r2, [r2, #0]
 80013e2:	0011      	movs	r1, r2
 80013e4:	2203      	movs	r2, #3
 80013e6:	400a      	ands	r2, r1
 80013e8:	00d2      	lsls	r2, r2, #3
 80013ea:	21ff      	movs	r1, #255	; 0xff
 80013ec:	4091      	lsls	r1, r2
 80013ee:	000a      	movs	r2, r1
 80013f0:	43d2      	mvns	r2, r2
 80013f2:	401a      	ands	r2, r3
 80013f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	019b      	lsls	r3, r3, #6
 80013fa:	22ff      	movs	r2, #255	; 0xff
 80013fc:	401a      	ands	r2, r3
 80013fe:	1dfb      	adds	r3, r7, #7
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	0018      	movs	r0, r3
 8001404:	2303      	movs	r3, #3
 8001406:	4003      	ands	r3, r0
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <__NVIC_SetPriority+0xd8>)
 800140e:	1dfb      	adds	r3, r7, #7
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	001c      	movs	r4, r3
 8001414:	230f      	movs	r3, #15
 8001416:	4023      	ands	r3, r4
 8001418:	3b08      	subs	r3, #8
 800141a:	089b      	lsrs	r3, r3, #2
 800141c:	430a      	orrs	r2, r1
 800141e:	3306      	adds	r3, #6
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	18c3      	adds	r3, r0, r3
 8001424:	3304      	adds	r3, #4
 8001426:	601a      	str	r2, [r3, #0]
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b003      	add	sp, #12
 800142e:	bd90      	pop	{r4, r7, pc}
 8001430:	e000e100 	.word	0xe000e100
 8001434:	e000ed00 	.word	0xe000ed00

08001438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	1e5a      	subs	r2, r3, #1
 8001444:	2380      	movs	r3, #128	; 0x80
 8001446:	045b      	lsls	r3, r3, #17
 8001448:	429a      	cmp	r2, r3
 800144a:	d301      	bcc.n	8001450 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800144c:	2301      	movs	r3, #1
 800144e:	e010      	b.n	8001472 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001450:	4b0a      	ldr	r3, [pc, #40]	; (800147c <SysTick_Config+0x44>)
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	3a01      	subs	r2, #1
 8001456:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001458:	2301      	movs	r3, #1
 800145a:	425b      	negs	r3, r3
 800145c:	2103      	movs	r1, #3
 800145e:	0018      	movs	r0, r3
 8001460:	f7ff ff7c 	bl	800135c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <SysTick_Config+0x44>)
 8001466:	2200      	movs	r2, #0
 8001468:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146a:	4b04      	ldr	r3, [pc, #16]	; (800147c <SysTick_Config+0x44>)
 800146c:	2207      	movs	r2, #7
 800146e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001470:	2300      	movs	r3, #0
}
 8001472:	0018      	movs	r0, r3
 8001474:	46bd      	mov	sp, r7
 8001476:	b002      	add	sp, #8
 8001478:	bd80      	pop	{r7, pc}
 800147a:	46c0      	nop			; (mov r8, r8)
 800147c:	e000e010 	.word	0xe000e010

08001480 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	210f      	movs	r1, #15
 800148c:	187b      	adds	r3, r7, r1
 800148e:	1c02      	adds	r2, r0, #0
 8001490:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	187b      	adds	r3, r7, r1
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	b25b      	sxtb	r3, r3
 800149a:	0011      	movs	r1, r2
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff ff5d 	bl	800135c <__NVIC_SetPriority>
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b004      	add	sp, #16
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b082      	sub	sp, #8
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	0002      	movs	r2, r0
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014b6:	1dfb      	adds	r3, r7, #7
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	b25b      	sxtb	r3, r3
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff ff33 	bl	8001328 <__NVIC_EnableIRQ>
}
 80014c2:	46c0      	nop			; (mov r8, r8)
 80014c4:	46bd      	mov	sp, r7
 80014c6:	b002      	add	sp, #8
 80014c8:	bd80      	pop	{r7, pc}

080014ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	0018      	movs	r0, r3
 80014d6:	f7ff ffaf 	bl	8001438 <SysTick_Config>
 80014da:	0003      	movs	r3, r0
}
 80014dc:	0018      	movs	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	b002      	add	sp, #8
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b084      	sub	sp, #16
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ec:	210f      	movs	r1, #15
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2225      	movs	r2, #37	; 0x25
 80014f8:	5c9b      	ldrb	r3, [r3, r2]
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d006      	beq.n	800150e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2204      	movs	r2, #4
 8001504:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001506:	187b      	adds	r3, r7, r1
 8001508:	2201      	movs	r2, #1
 800150a:	701a      	strb	r2, [r3, #0]
 800150c:	e02a      	b.n	8001564 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	210e      	movs	r1, #14
 800151a:	438a      	bics	r2, r1
 800151c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2101      	movs	r1, #1
 800152a:	438a      	bics	r2, r1
 800152c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	221c      	movs	r2, #28
 8001534:	401a      	ands	r2, r3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	2101      	movs	r1, #1
 800153c:	4091      	lsls	r1, r2
 800153e:	000a      	movs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2225      	movs	r2, #37	; 0x25
 8001546:	2101      	movs	r1, #1
 8001548:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2224      	movs	r2, #36	; 0x24
 800154e:	2100      	movs	r1, #0
 8001550:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155e:	687a      	ldr	r2, [r7, #4]
 8001560:	0010      	movs	r0, r2
 8001562:	4798      	blx	r3
    }
  }
  return status;
 8001564:	230f      	movs	r3, #15
 8001566:	18fb      	adds	r3, r7, r3
 8001568:	781b      	ldrb	r3, [r3, #0]
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b004      	add	sp, #16
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b086      	sub	sp, #24
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001582:	2300      	movs	r3, #0
 8001584:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001586:	2300      	movs	r3, #0
 8001588:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800158a:	e155      	b.n	8001838 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2101      	movs	r1, #1
 8001592:	697a      	ldr	r2, [r7, #20]
 8001594:	4091      	lsls	r1, r2
 8001596:	000a      	movs	r2, r1
 8001598:	4013      	ands	r3, r2
 800159a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d100      	bne.n	80015a4 <HAL_GPIO_Init+0x30>
 80015a2:	e146      	b.n	8001832 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2203      	movs	r2, #3
 80015aa:	4013      	ands	r3, r2
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d005      	beq.n	80015bc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2203      	movs	r2, #3
 80015b6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80015b8:	2b02      	cmp	r3, #2
 80015ba:	d130      	bne.n	800161e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	2203      	movs	r2, #3
 80015c8:	409a      	lsls	r2, r3
 80015ca:	0013      	movs	r3, r2
 80015cc:	43da      	mvns	r2, r3
 80015ce:	693b      	ldr	r3, [r7, #16]
 80015d0:	4013      	ands	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	68da      	ldr	r2, [r3, #12]
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	409a      	lsls	r2, r3
 80015de:	0013      	movs	r3, r2
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015f2:	2201      	movs	r2, #1
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	409a      	lsls	r2, r3
 80015f8:	0013      	movs	r3, r2
 80015fa:	43da      	mvns	r2, r3
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4013      	ands	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	091b      	lsrs	r3, r3, #4
 8001608:	2201      	movs	r2, #1
 800160a:	401a      	ands	r2, r3
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	409a      	lsls	r2, r3
 8001610:	0013      	movs	r3, r2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	4313      	orrs	r3, r2
 8001616:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	693a      	ldr	r2, [r7, #16]
 800161c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	2203      	movs	r2, #3
 8001624:	4013      	ands	r3, r2
 8001626:	2b03      	cmp	r3, #3
 8001628:	d017      	beq.n	800165a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	2203      	movs	r2, #3
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	43da      	mvns	r2, r3
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	4013      	ands	r3, r2
 8001640:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	689a      	ldr	r2, [r3, #8]
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	409a      	lsls	r2, r3
 800164c:	0013      	movs	r3, r2
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	4313      	orrs	r3, r2
 8001652:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	2203      	movs	r2, #3
 8001660:	4013      	ands	r3, r2
 8001662:	2b02      	cmp	r3, #2
 8001664:	d123      	bne.n	80016ae <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	08da      	lsrs	r2, r3, #3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	3208      	adds	r2, #8
 800166e:	0092      	lsls	r2, r2, #2
 8001670:	58d3      	ldr	r3, [r2, r3]
 8001672:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	2207      	movs	r2, #7
 8001678:	4013      	ands	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	220f      	movs	r2, #15
 800167e:	409a      	lsls	r2, r3
 8001680:	0013      	movs	r3, r2
 8001682:	43da      	mvns	r2, r3
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	4013      	ands	r3, r2
 8001688:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	691a      	ldr	r2, [r3, #16]
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	2107      	movs	r1, #7
 8001692:	400b      	ands	r3, r1
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	409a      	lsls	r2, r3
 8001698:	0013      	movs	r3, r2
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	4313      	orrs	r3, r2
 800169e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	08da      	lsrs	r2, r3, #3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3208      	adds	r2, #8
 80016a8:	0092      	lsls	r2, r2, #2
 80016aa:	6939      	ldr	r1, [r7, #16]
 80016ac:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	005b      	lsls	r3, r3, #1
 80016b8:	2203      	movs	r2, #3
 80016ba:	409a      	lsls	r2, r3
 80016bc:	0013      	movs	r3, r2
 80016be:	43da      	mvns	r2, r3
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4013      	ands	r3, r2
 80016c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2203      	movs	r2, #3
 80016cc:	401a      	ands	r2, r3
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	005b      	lsls	r3, r3, #1
 80016d2:	409a      	lsls	r2, r3
 80016d4:	0013      	movs	r3, r2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	4313      	orrs	r3, r2
 80016da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	23c0      	movs	r3, #192	; 0xc0
 80016e8:	029b      	lsls	r3, r3, #10
 80016ea:	4013      	ands	r3, r2
 80016ec:	d100      	bne.n	80016f0 <HAL_GPIO_Init+0x17c>
 80016ee:	e0a0      	b.n	8001832 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f0:	4b57      	ldr	r3, [pc, #348]	; (8001850 <HAL_GPIO_Init+0x2dc>)
 80016f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016f4:	4b56      	ldr	r3, [pc, #344]	; (8001850 <HAL_GPIO_Init+0x2dc>)
 80016f6:	2101      	movs	r1, #1
 80016f8:	430a      	orrs	r2, r1
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fc:	4a55      	ldr	r2, [pc, #340]	; (8001854 <HAL_GPIO_Init+0x2e0>)
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	089b      	lsrs	r3, r3, #2
 8001702:	3302      	adds	r3, #2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	589b      	ldr	r3, [r3, r2]
 8001708:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	2203      	movs	r2, #3
 800170e:	4013      	ands	r3, r2
 8001710:	009b      	lsls	r3, r3, #2
 8001712:	220f      	movs	r2, #15
 8001714:	409a      	lsls	r2, r3
 8001716:	0013      	movs	r3, r2
 8001718:	43da      	mvns	r2, r3
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4013      	ands	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	23a0      	movs	r3, #160	; 0xa0
 8001724:	05db      	lsls	r3, r3, #23
 8001726:	429a      	cmp	r2, r3
 8001728:	d01f      	beq.n	800176a <HAL_GPIO_Init+0x1f6>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_GPIO_Init+0x2e4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d019      	beq.n	8001766 <HAL_GPIO_Init+0x1f2>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a49      	ldr	r2, [pc, #292]	; (800185c <HAL_GPIO_Init+0x2e8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x1ee>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_GPIO_Init+0x2ec>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x1ea>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a47      	ldr	r2, [pc, #284]	; (8001864 <HAL_GPIO_Init+0x2f0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x1e6>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a46      	ldr	r2, [pc, #280]	; (8001868 <HAL_GPIO_Init+0x2f4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x1e2>
 8001752:	2305      	movs	r3, #5
 8001754:	e00a      	b.n	800176c <HAL_GPIO_Init+0x1f8>
 8001756:	2306      	movs	r3, #6
 8001758:	e008      	b.n	800176c <HAL_GPIO_Init+0x1f8>
 800175a:	2304      	movs	r3, #4
 800175c:	e006      	b.n	800176c <HAL_GPIO_Init+0x1f8>
 800175e:	2303      	movs	r3, #3
 8001760:	e004      	b.n	800176c <HAL_GPIO_Init+0x1f8>
 8001762:	2302      	movs	r3, #2
 8001764:	e002      	b.n	800176c <HAL_GPIO_Init+0x1f8>
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_GPIO_Init+0x1f8>
 800176a:	2300      	movs	r3, #0
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	2103      	movs	r1, #3
 8001770:	400a      	ands	r2, r1
 8001772:	0092      	lsls	r2, r2, #2
 8001774:	4093      	lsls	r3, r2
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800177c:	4935      	ldr	r1, [pc, #212]	; (8001854 <HAL_GPIO_Init+0x2e0>)
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	089b      	lsrs	r3, r3, #2
 8001782:	3302      	adds	r3, #2
 8001784:	009b      	lsls	r3, r3, #2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178a:	4b38      	ldr	r3, [pc, #224]	; (800186c <HAL_GPIO_Init+0x2f8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	43da      	mvns	r2, r3
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	4013      	ands	r3, r2
 8001798:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	2380      	movs	r3, #128	; 0x80
 80017a0:	025b      	lsls	r3, r3, #9
 80017a2:	4013      	ands	r3, r2
 80017a4:	d003      	beq.n	80017ae <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80017a6:	693a      	ldr	r2, [r7, #16]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80017ae:	4b2f      	ldr	r3, [pc, #188]	; (800186c <HAL_GPIO_Init+0x2f8>)
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80017b4:	4b2d      	ldr	r3, [pc, #180]	; (800186c <HAL_GPIO_Init+0x2f8>)
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	43da      	mvns	r2, r3
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	029b      	lsls	r3, r3, #10
 80017cc:	4013      	ands	r3, r2
 80017ce:	d003      	beq.n	80017d8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	4313      	orrs	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80017d8:	4b24      	ldr	r3, [pc, #144]	; (800186c <HAL_GPIO_Init+0x2f8>)
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017de:	4b23      	ldr	r3, [pc, #140]	; (800186c <HAL_GPIO_Init+0x2f8>)
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	43da      	mvns	r2, r3
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	4013      	ands	r3, r2
 80017ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	035b      	lsls	r3, r3, #13
 80017f6:	4013      	ands	r3, r2
 80017f8:	d003      	beq.n	8001802 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4313      	orrs	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001802:	4b1a      	ldr	r3, [pc, #104]	; (800186c <HAL_GPIO_Init+0x2f8>)
 8001804:	693a      	ldr	r2, [r7, #16]
 8001806:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001808:	4b18      	ldr	r3, [pc, #96]	; (800186c <HAL_GPIO_Init+0x2f8>)
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43da      	mvns	r2, r3
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685a      	ldr	r2, [r3, #4]
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	039b      	lsls	r3, r3, #14
 8001820:	4013      	ands	r3, r2
 8001822:	d003      	beq.n	800182c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8001824:	693a      	ldr	r2, [r7, #16]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	4313      	orrs	r3, r2
 800182a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800182c:	4b0f      	ldr	r3, [pc, #60]	; (800186c <HAL_GPIO_Init+0x2f8>)
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	40da      	lsrs	r2, r3
 8001840:	1e13      	subs	r3, r2, #0
 8001842:	d000      	beq.n	8001846 <HAL_GPIO_Init+0x2d2>
 8001844:	e6a2      	b.n	800158c <HAL_GPIO_Init+0x18>
  }
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b006      	add	sp, #24
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	40010000 	.word	0x40010000
 8001858:	50000400 	.word	0x50000400
 800185c:	50000800 	.word	0x50000800
 8001860:	50000c00 	.word	0x50000c00
 8001864:	50001000 	.word	0x50001000
 8001868:	50001c00 	.word	0x50001c00
 800186c:	40010400 	.word	0x40010400

08001870 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
 8001878:	0008      	movs	r0, r1
 800187a:	0011      	movs	r1, r2
 800187c:	1cbb      	adds	r3, r7, #2
 800187e:	1c02      	adds	r2, r0, #0
 8001880:	801a      	strh	r2, [r3, #0]
 8001882:	1c7b      	adds	r3, r7, #1
 8001884:	1c0a      	adds	r2, r1, #0
 8001886:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001888:	1c7b      	adds	r3, r7, #1
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d004      	beq.n	800189a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001890:	1cbb      	adds	r3, r7, #2
 8001892:	881a      	ldrh	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001898:	e003      	b.n	80018a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800189a:	1cbb      	adds	r3, r7, #2
 800189c:	881a      	ldrh	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80018a2:	46c0      	nop			; (mov r8, r8)
 80018a4:	46bd      	mov	sp, r7
 80018a6:	b002      	add	sp, #8
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
 80018b2:	000a      	movs	r2, r1
 80018b4:	1cbb      	adds	r3, r7, #2
 80018b6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	695b      	ldr	r3, [r3, #20]
 80018bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018be:	1cbb      	adds	r3, r7, #2
 80018c0:	881b      	ldrh	r3, [r3, #0]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	4013      	ands	r3, r2
 80018c6:	041a      	lsls	r2, r3, #16
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	1cb9      	adds	r1, r7, #2
 80018ce:	8809      	ldrh	r1, [r1, #0]
 80018d0:	400b      	ands	r3, r1
 80018d2:	431a      	orrs	r2, r3
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	619a      	str	r2, [r3, #24]
}
 80018d8:	46c0      	nop			; (mov r8, r8)
 80018da:	46bd      	mov	sp, r7
 80018dc:	b004      	add	sp, #16
 80018de:	bd80      	pop	{r7, pc}

080018e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e082      	b.n	80019f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2241      	movs	r2, #65	; 0x41
 80018f6:	5c9b      	ldrb	r3, [r3, r2]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d107      	bne.n	800190e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2240      	movs	r2, #64	; 0x40
 8001902:	2100      	movs	r1, #0
 8001904:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	0018      	movs	r0, r3
 800190a:	f7ff fa43 	bl	8000d94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2241      	movs	r2, #65	; 0x41
 8001912:	2124      	movs	r1, #36	; 0x24
 8001914:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2101      	movs	r1, #1
 8001922:	438a      	bics	r2, r1
 8001924:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685a      	ldr	r2, [r3, #4]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4934      	ldr	r1, [pc, #208]	; (8001a00 <HAL_I2C_Init+0x120>)
 8001930:	400a      	ands	r2, r1
 8001932:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689a      	ldr	r2, [r3, #8]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4931      	ldr	r1, [pc, #196]	; (8001a04 <HAL_I2C_Init+0x124>)
 8001940:	400a      	ands	r2, r1
 8001942:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d108      	bne.n	800195e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689a      	ldr	r2, [r3, #8]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	0209      	lsls	r1, r1, #8
 8001958:	430a      	orrs	r2, r1
 800195a:	609a      	str	r2, [r3, #8]
 800195c:	e007      	b.n	800196e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689a      	ldr	r2, [r3, #8]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2184      	movs	r1, #132	; 0x84
 8001968:	0209      	lsls	r1, r1, #8
 800196a:	430a      	orrs	r2, r1
 800196c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d104      	bne.n	8001980 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2280      	movs	r2, #128	; 0x80
 800197c:	0112      	lsls	r2, r2, #4
 800197e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	491f      	ldr	r1, [pc, #124]	; (8001a08 <HAL_I2C_Init+0x128>)
 800198c:	430a      	orrs	r2, r1
 800198e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68da      	ldr	r2, [r3, #12]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	491a      	ldr	r1, [pc, #104]	; (8001a04 <HAL_I2C_Init+0x124>)
 800199c:	400a      	ands	r2, r1
 800199e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691a      	ldr	r2, [r3, #16]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	431a      	orrs	r2, r3
 80019aa:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	430a      	orrs	r2, r1
 80019b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	69d9      	ldr	r1, [r3, #28]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a1a      	ldr	r2, [r3, #32]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	430a      	orrs	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	430a      	orrs	r2, r1
 80019d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2200      	movs	r2, #0
 80019de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2241      	movs	r2, #65	; 0x41
 80019e4:	2120      	movs	r1, #32
 80019e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2242      	movs	r2, #66	; 0x42
 80019f2:	2100      	movs	r1, #0
 80019f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	0018      	movs	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	b002      	add	sp, #8
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	f0ffffff 	.word	0xf0ffffff
 8001a04:	ffff7fff 	.word	0xffff7fff
 8001a08:	02008000 	.word	0x02008000

08001a0c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a0c:	b590      	push	{r4, r7, lr}
 8001a0e:	b089      	sub	sp, #36	; 0x24
 8001a10:	af02      	add	r7, sp, #8
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	000c      	movs	r4, r1
 8001a16:	0010      	movs	r0, r2
 8001a18:	0019      	movs	r1, r3
 8001a1a:	230a      	movs	r3, #10
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	1c22      	adds	r2, r4, #0
 8001a20:	801a      	strh	r2, [r3, #0]
 8001a22:	2308      	movs	r3, #8
 8001a24:	18fb      	adds	r3, r7, r3
 8001a26:	1c02      	adds	r2, r0, #0
 8001a28:	801a      	strh	r2, [r3, #0]
 8001a2a:	1dbb      	adds	r3, r7, #6
 8001a2c:	1c0a      	adds	r2, r1, #0
 8001a2e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2241      	movs	r2, #65	; 0x41
 8001a34:	5c9b      	ldrb	r3, [r3, r2]
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	2b20      	cmp	r3, #32
 8001a3a:	d000      	beq.n	8001a3e <HAL_I2C_Mem_Write+0x32>
 8001a3c:	e10c      	b.n	8001c58 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d004      	beq.n	8001a4e <HAL_I2C_Mem_Write+0x42>
 8001a44:	232c      	movs	r3, #44	; 0x2c
 8001a46:	18fb      	adds	r3, r7, r3
 8001a48:	881b      	ldrh	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2280      	movs	r2, #128	; 0x80
 8001a52:	0092      	lsls	r2, r2, #2
 8001a54:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0ff      	b.n	8001c5a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2240      	movs	r2, #64	; 0x40
 8001a5e:	5c9b      	ldrb	r3, [r3, r2]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d101      	bne.n	8001a68 <HAL_I2C_Mem_Write+0x5c>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e0f8      	b.n	8001c5a <HAL_I2C_Mem_Write+0x24e>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	2240      	movs	r2, #64	; 0x40
 8001a6c:	2101      	movs	r1, #1
 8001a6e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001a70:	f7ff fc2c 	bl	80012cc <HAL_GetTick>
 8001a74:	0003      	movs	r3, r0
 8001a76:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	0219      	lsls	r1, r3, #8
 8001a7c:	68f8      	ldr	r0, [r7, #12]
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2319      	movs	r3, #25
 8001a84:	2201      	movs	r2, #1
 8001a86:	f000 fc25 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8001a8a:	1e03      	subs	r3, r0, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e0e3      	b.n	8001c5a <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2241      	movs	r2, #65	; 0x41
 8001a96:	2121      	movs	r1, #33	; 0x21
 8001a98:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	2242      	movs	r2, #66	; 0x42
 8001a9e:	2140      	movs	r1, #64	; 0x40
 8001aa0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001aac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	222c      	movs	r2, #44	; 0x2c
 8001ab2:	18ba      	adds	r2, r7, r2
 8001ab4:	8812      	ldrh	r2, [r2, #0]
 8001ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001abe:	1dbb      	adds	r3, r7, #6
 8001ac0:	881c      	ldrh	r4, [r3, #0]
 8001ac2:	2308      	movs	r3, #8
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	881a      	ldrh	r2, [r3, #0]
 8001ac8:	230a      	movs	r3, #10
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	8819      	ldrh	r1, [r3, #0]
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	0023      	movs	r3, r4
 8001ada:	f000 fb13 	bl	8002104 <I2C_RequestMemoryWrite>
 8001ade:	1e03      	subs	r3, r0, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	2240      	movs	r2, #64	; 0x40
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0b5      	b.n	8001c5a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	2bff      	cmp	r3, #255	; 0xff
 8001af6:	d911      	bls.n	8001b1c <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	22ff      	movs	r2, #255	; 0xff
 8001afc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	045c      	lsls	r4, r3, #17
 8001b08:	230a      	movs	r3, #10
 8001b0a:	18fb      	adds	r3, r7, r3
 8001b0c:	8819      	ldrh	r1, [r3, #0]
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	0023      	movs	r3, r4
 8001b16:	f000 fd11 	bl	800253c <I2C_TransferConfig>
 8001b1a:	e012      	b.n	8001b42 <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b20:	b29a      	uxth	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	049c      	lsls	r4, r3, #18
 8001b30:	230a      	movs	r3, #10
 8001b32:	18fb      	adds	r3, r7, r3
 8001b34:	8819      	ldrh	r1, [r3, #0]
 8001b36:	68f8      	ldr	r0, [r7, #12]
 8001b38:	2300      	movs	r3, #0
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	0023      	movs	r3, r4
 8001b3e:	f000 fcfd 	bl	800253c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b42:	697a      	ldr	r2, [r7, #20]
 8001b44:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f000 fc02 	bl	8002352 <I2C_WaitOnTXISFlagUntilTimeout>
 8001b4e:	1e03      	subs	r3, r0, #0
 8001b50:	d001      	beq.n	8001b56 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e081      	b.n	8001c5a <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	781a      	ldrb	r2, [r3, #0]
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b66:	1c5a      	adds	r2, r3, #1
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b70:	b29b      	uxth	r3, r3
 8001b72:	3b01      	subs	r3, #1
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d03a      	beq.n	8001c06 <HAL_I2C_Mem_Write+0x1fa>
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d136      	bne.n	8001c06 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001b98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	0013      	movs	r3, r2
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2180      	movs	r1, #128	; 0x80
 8001ba6:	f000 fb95 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8001baa:	1e03      	subs	r3, r0, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e053      	b.n	8001c5a <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	2bff      	cmp	r3, #255	; 0xff
 8001bba:	d911      	bls.n	8001be0 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	22ff      	movs	r2, #255	; 0xff
 8001bc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	2380      	movs	r3, #128	; 0x80
 8001bca:	045c      	lsls	r4, r3, #17
 8001bcc:	230a      	movs	r3, #10
 8001bce:	18fb      	adds	r3, r7, r3
 8001bd0:	8819      	ldrh	r1, [r3, #0]
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	0023      	movs	r3, r4
 8001bda:	f000 fcaf 	bl	800253c <I2C_TransferConfig>
 8001bde:	e012      	b.n	8001c06 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001be4:	b29a      	uxth	r2, r3
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bee:	b2da      	uxtb	r2, r3
 8001bf0:	2380      	movs	r3, #128	; 0x80
 8001bf2:	049c      	lsls	r4, r3, #18
 8001bf4:	230a      	movs	r3, #10
 8001bf6:	18fb      	adds	r3, r7, r3
 8001bf8:	8819      	ldrh	r1, [r3, #0]
 8001bfa:	68f8      	ldr	r0, [r7, #12]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	0023      	movs	r3, r4
 8001c02:	f000 fc9b 	bl	800253c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0a:	b29b      	uxth	r3, r3
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d198      	bne.n	8001b42 <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c10:	697a      	ldr	r2, [r7, #20]
 8001c12:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	0018      	movs	r0, r3
 8001c18:	f000 fbda 	bl	80023d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e01a      	b.n	8001c5a <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2220      	movs	r2, #32
 8001c2a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	490b      	ldr	r1, [pc, #44]	; (8001c64 <HAL_I2C_Mem_Write+0x258>)
 8001c38:	400a      	ands	r2, r1
 8001c3a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2241      	movs	r2, #65	; 0x41
 8001c40:	2120      	movs	r1, #32
 8001c42:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	2242      	movs	r2, #66	; 0x42
 8001c48:	2100      	movs	r1, #0
 8001c4a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2240      	movs	r2, #64	; 0x40
 8001c50:	2100      	movs	r1, #0
 8001c52:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8001c58:	2302      	movs	r3, #2
  }
}
 8001c5a:	0018      	movs	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	b007      	add	sp, #28
 8001c60:	bd90      	pop	{r4, r7, pc}
 8001c62:	46c0      	nop			; (mov r8, r8)
 8001c64:	fe00e800 	.word	0xfe00e800

08001c68 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c68:	b590      	push	{r4, r7, lr}
 8001c6a:	b089      	sub	sp, #36	; 0x24
 8001c6c:	af02      	add	r7, sp, #8
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	000c      	movs	r4, r1
 8001c72:	0010      	movs	r0, r2
 8001c74:	0019      	movs	r1, r3
 8001c76:	230a      	movs	r3, #10
 8001c78:	18fb      	adds	r3, r7, r3
 8001c7a:	1c22      	adds	r2, r4, #0
 8001c7c:	801a      	strh	r2, [r3, #0]
 8001c7e:	2308      	movs	r3, #8
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	1c02      	adds	r2, r0, #0
 8001c84:	801a      	strh	r2, [r3, #0]
 8001c86:	1dbb      	adds	r3, r7, #6
 8001c88:	1c0a      	adds	r2, r1, #0
 8001c8a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2241      	movs	r2, #65	; 0x41
 8001c90:	5c9b      	ldrb	r3, [r3, r2]
 8001c92:	b2db      	uxtb	r3, r3
 8001c94:	2b20      	cmp	r3, #32
 8001c96:	d000      	beq.n	8001c9a <HAL_I2C_Mem_Read+0x32>
 8001c98:	e110      	b.n	8001ebc <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d004      	beq.n	8001caa <HAL_I2C_Mem_Read+0x42>
 8001ca0:	232c      	movs	r3, #44	; 0x2c
 8001ca2:	18fb      	adds	r3, r7, r3
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2280      	movs	r2, #128	; 0x80
 8001cae:	0092      	lsls	r2, r2, #2
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e103      	b.n	8001ebe <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2240      	movs	r2, #64	; 0x40
 8001cba:	5c9b      	ldrb	r3, [r3, r2]
 8001cbc:	2b01      	cmp	r3, #1
 8001cbe:	d101      	bne.n	8001cc4 <HAL_I2C_Mem_Read+0x5c>
 8001cc0:	2302      	movs	r3, #2
 8001cc2:	e0fc      	b.n	8001ebe <HAL_I2C_Mem_Read+0x256>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2240      	movs	r2, #64	; 0x40
 8001cc8:	2101      	movs	r1, #1
 8001cca:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001ccc:	f7ff fafe 	bl	80012cc <HAL_GetTick>
 8001cd0:	0003      	movs	r3, r0
 8001cd2:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001cd4:	2380      	movs	r3, #128	; 0x80
 8001cd6:	0219      	lsls	r1, r3, #8
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	9300      	str	r3, [sp, #0]
 8001cde:	2319      	movs	r3, #25
 8001ce0:	2201      	movs	r2, #1
 8001ce2:	f000 faf7 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8001ce6:	1e03      	subs	r3, r0, #0
 8001ce8:	d001      	beq.n	8001cee <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0e7      	b.n	8001ebe <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2241      	movs	r2, #65	; 0x41
 8001cf2:	2122      	movs	r1, #34	; 0x22
 8001cf4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2242      	movs	r2, #66	; 0x42
 8001cfa:	2140      	movs	r1, #64	; 0x40
 8001cfc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2200      	movs	r2, #0
 8001d02:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	222c      	movs	r2, #44	; 0x2c
 8001d0e:	18ba      	adds	r2, r7, r2
 8001d10:	8812      	ldrh	r2, [r2, #0]
 8001d12:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2200      	movs	r2, #0
 8001d18:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d1a:	1dbb      	adds	r3, r7, #6
 8001d1c:	881c      	ldrh	r4, [r3, #0]
 8001d1e:	2308      	movs	r3, #8
 8001d20:	18fb      	adds	r3, r7, r3
 8001d22:	881a      	ldrh	r2, [r3, #0]
 8001d24:	230a      	movs	r3, #10
 8001d26:	18fb      	adds	r3, r7, r3
 8001d28:	8819      	ldrh	r1, [r3, #0]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	0023      	movs	r3, r4
 8001d36:	f000 fa49 	bl	80021cc <I2C_RequestMemoryRead>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0b9      	b.n	8001ebe <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	2bff      	cmp	r3, #255	; 0xff
 8001d52:	d911      	bls.n	8001d78 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	22ff      	movs	r2, #255	; 0xff
 8001d58:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d5e:	b2da      	uxtb	r2, r3
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	045c      	lsls	r4, r3, #17
 8001d64:	230a      	movs	r3, #10
 8001d66:	18fb      	adds	r3, r7, r3
 8001d68:	8819      	ldrh	r1, [r3, #0]
 8001d6a:	68f8      	ldr	r0, [r7, #12]
 8001d6c:	4b56      	ldr	r3, [pc, #344]	; (8001ec8 <HAL_I2C_Mem_Read+0x260>)
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	0023      	movs	r3, r4
 8001d72:	f000 fbe3 	bl	800253c <I2C_TransferConfig>
 8001d76:	e012      	b.n	8001d9e <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d86:	b2da      	uxtb	r2, r3
 8001d88:	2380      	movs	r3, #128	; 0x80
 8001d8a:	049c      	lsls	r4, r3, #18
 8001d8c:	230a      	movs	r3, #10
 8001d8e:	18fb      	adds	r3, r7, r3
 8001d90:	8819      	ldrh	r1, [r3, #0]
 8001d92:	68f8      	ldr	r0, [r7, #12]
 8001d94:	4b4c      	ldr	r3, [pc, #304]	; (8001ec8 <HAL_I2C_Mem_Read+0x260>)
 8001d96:	9300      	str	r3, [sp, #0]
 8001d98:	0023      	movs	r3, r4
 8001d9a:	f000 fbcf 	bl	800253c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001da0:	68f8      	ldr	r0, [r7, #12]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	0013      	movs	r3, r2
 8001da8:	2200      	movs	r2, #0
 8001daa:	2104      	movs	r1, #4
 8001dac:	f000 fa92 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8001db0:	1e03      	subs	r3, r0, #0
 8001db2:	d001      	beq.n	8001db8 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e082      	b.n	8001ebe <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	1c5a      	adds	r2, r3, #1
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dd4:	3b01      	subs	r3, #1
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001de0:	b29b      	uxth	r3, r3
 8001de2:	3b01      	subs	r3, #1
 8001de4:	b29a      	uxth	r2, r3
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dee:	b29b      	uxth	r3, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d03a      	beq.n	8001e6a <HAL_I2C_Mem_Read+0x202>
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d136      	bne.n	8001e6a <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001dfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	0013      	movs	r3, r2
 8001e06:	2200      	movs	r2, #0
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	f000 fa63 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8001e0e:	1e03      	subs	r3, r0, #0
 8001e10:	d001      	beq.n	8001e16 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e053      	b.n	8001ebe <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	2bff      	cmp	r3, #255	; 0xff
 8001e1e:	d911      	bls.n	8001e44 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	22ff      	movs	r2, #255	; 0xff
 8001e24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	045c      	lsls	r4, r3, #17
 8001e30:	230a      	movs	r3, #10
 8001e32:	18fb      	adds	r3, r7, r3
 8001e34:	8819      	ldrh	r1, [r3, #0]
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	2300      	movs	r3, #0
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	0023      	movs	r3, r4
 8001e3e:	f000 fb7d 	bl	800253c <I2C_TransferConfig>
 8001e42:	e012      	b.n	8001e6a <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e48:	b29a      	uxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	049c      	lsls	r4, r3, #18
 8001e58:	230a      	movs	r3, #10
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	8819      	ldrh	r1, [r3, #0]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	2300      	movs	r3, #0
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	0023      	movs	r3, r4
 8001e66:	f000 fb69 	bl	800253c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d194      	bne.n	8001d9e <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e74:	697a      	ldr	r2, [r7, #20]
 8001e76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	0018      	movs	r0, r3
 8001e7c:	f000 faa8 	bl	80023d0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001e80:	1e03      	subs	r3, r0, #0
 8001e82:	d001      	beq.n	8001e88 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e01a      	b.n	8001ebe <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2220      	movs	r2, #32
 8001e8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	490c      	ldr	r1, [pc, #48]	; (8001ecc <HAL_I2C_Mem_Read+0x264>)
 8001e9c:	400a      	ands	r2, r1
 8001e9e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2241      	movs	r2, #65	; 0x41
 8001ea4:	2120      	movs	r1, #32
 8001ea6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2242      	movs	r2, #66	; 0x42
 8001eac:	2100      	movs	r1, #0
 8001eae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2240      	movs	r2, #64	; 0x40
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	e000      	b.n	8001ebe <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001ebc:	2302      	movs	r3, #2
  }
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b007      	add	sp, #28
 8001ec4:	bd90      	pop	{r4, r7, pc}
 8001ec6:	46c0      	nop			; (mov r8, r8)
 8001ec8:	80002400 	.word	0x80002400
 8001ecc:	fe00e800 	.word	0xfe00e800

08001ed0 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08a      	sub	sp, #40	; 0x28
 8001ed4:	af02      	add	r7, sp, #8
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607a      	str	r2, [r7, #4]
 8001eda:	603b      	str	r3, [r7, #0]
 8001edc:	230a      	movs	r3, #10
 8001ede:	18fb      	adds	r3, r7, r3
 8001ee0:	1c0a      	adds	r2, r1, #0
 8001ee2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	2241      	movs	r2, #65	; 0x41
 8001eec:	5c9b      	ldrb	r3, [r3, r2]
 8001eee:	b2db      	uxtb	r3, r3
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d000      	beq.n	8001ef6 <HAL_I2C_IsDeviceReady+0x26>
 8001ef4:	e0fe      	b.n	80020f4 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	699a      	ldr	r2, [r3, #24]
 8001efc:	2380      	movs	r3, #128	; 0x80
 8001efe:	021b      	lsls	r3, r3, #8
 8001f00:	401a      	ands	r2, r3
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	021b      	lsls	r3, r3, #8
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d101      	bne.n	8001f0e <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e0f3      	b.n	80020f6 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2240      	movs	r2, #64	; 0x40
 8001f12:	5c9b      	ldrb	r3, [r3, r2]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d101      	bne.n	8001f1c <HAL_I2C_IsDeviceReady+0x4c>
 8001f18:	2302      	movs	r3, #2
 8001f1a:	e0ec      	b.n	80020f6 <HAL_I2C_IsDeviceReady+0x226>
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2240      	movs	r2, #64	; 0x40
 8001f20:	2101      	movs	r1, #1
 8001f22:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2241      	movs	r2, #65	; 0x41
 8001f28:	2124      	movs	r1, #36	; 0x24
 8001f2a:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d107      	bne.n	8001f4a <HAL_I2C_IsDeviceReady+0x7a>
 8001f3a:	230a      	movs	r3, #10
 8001f3c:	18fb      	adds	r3, r7, r3
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	059b      	lsls	r3, r3, #22
 8001f42:	0d9b      	lsrs	r3, r3, #22
 8001f44:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_I2C_IsDeviceReady+0x230>)
 8001f46:	431a      	orrs	r2, r3
 8001f48:	e007      	b.n	8001f5a <HAL_I2C_IsDeviceReady+0x8a>
 8001f4a:	230a      	movs	r3, #10
 8001f4c:	18fb      	adds	r3, r7, r3
 8001f4e:	881b      	ldrh	r3, [r3, #0]
 8001f50:	059b      	lsls	r3, r3, #22
 8001f52:	0d9b      	lsrs	r3, r3, #22
 8001f54:	22a0      	movs	r2, #160	; 0xa0
 8001f56:	0192      	lsls	r2, r2, #6
 8001f58:	431a      	orrs	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001f60:	f7ff f9b4 	bl	80012cc <HAL_GetTick>
 8001f64:	0003      	movs	r3, r0
 8001f66:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	4013      	ands	r3, r2
 8001f72:	3b20      	subs	r3, #32
 8001f74:	425a      	negs	r2, r3
 8001f76:	4153      	adcs	r3, r2
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	231f      	movs	r3, #31
 8001f7c:	18fb      	adds	r3, r7, r3
 8001f7e:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2210      	movs	r2, #16
 8001f88:	4013      	ands	r3, r2
 8001f8a:	3b10      	subs	r3, #16
 8001f8c:	425a      	negs	r2, r3
 8001f8e:	4153      	adcs	r3, r2
 8001f90:	b2da      	uxtb	r2, r3
 8001f92:	231e      	movs	r3, #30
 8001f94:	18fb      	adds	r3, r7, r3
 8001f96:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001f98:	e035      	b.n	8002006 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	d01a      	beq.n	8001fd6 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001fa0:	f7ff f994 	bl	80012cc <HAL_GetTick>
 8001fa4:	0002      	movs	r2, r0
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d302      	bcc.n	8001fb6 <HAL_I2C_IsDeviceReady+0xe6>
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2241      	movs	r2, #65	; 0x41
 8001fba:	2120      	movs	r1, #32
 8001fbc:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2240      	movs	r2, #64	; 0x40
 8001fce:	2100      	movs	r1, #0
 8001fd0:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e08f      	b.n	80020f6 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	4013      	ands	r3, r2
 8001fe0:	3b20      	subs	r3, #32
 8001fe2:	425a      	negs	r2, r3
 8001fe4:	4153      	adcs	r3, r2
 8001fe6:	b2da      	uxtb	r2, r3
 8001fe8:	231f      	movs	r3, #31
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	2210      	movs	r2, #16
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	3b10      	subs	r3, #16
 8001ffa:	425a      	negs	r2, r3
 8001ffc:	4153      	adcs	r3, r2
 8001ffe:	b2da      	uxtb	r2, r3
 8002000:	231e      	movs	r3, #30
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002006:	231f      	movs	r3, #31
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d104      	bne.n	800201a <HAL_I2C_IsDeviceReady+0x14a>
 8002010:	231e      	movs	r3, #30
 8002012:	18fb      	adds	r3, r7, r3
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0bf      	beq.n	8001f9a <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	2210      	movs	r2, #16
 8002022:	4013      	ands	r3, r2
 8002024:	2b10      	cmp	r3, #16
 8002026:	d01a      	beq.n	800205e <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	69bb      	ldr	r3, [r7, #24]
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	0013      	movs	r3, r2
 8002032:	2200      	movs	r2, #0
 8002034:	2120      	movs	r1, #32
 8002036:	f000 f94d 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 800203a:	1e03      	subs	r3, r0, #0
 800203c:	d001      	beq.n	8002042 <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e059      	b.n	80020f6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2220      	movs	r2, #32
 8002048:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2241      	movs	r2, #65	; 0x41
 800204e:	2120      	movs	r1, #32
 8002050:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2240      	movs	r2, #64	; 0x40
 8002056:	2100      	movs	r1, #0
 8002058:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 800205a:	2300      	movs	r3, #0
 800205c:	e04b      	b.n	80020f6 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	68f8      	ldr	r0, [r7, #12]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	0013      	movs	r3, r2
 8002068:	2200      	movs	r2, #0
 800206a:	2120      	movs	r1, #32
 800206c:	f000 f932 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8002070:	1e03      	subs	r3, r0, #0
 8002072:	d001      	beq.n	8002078 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8002074:	2301      	movs	r3, #1
 8002076:	e03e      	b.n	80020f6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2210      	movs	r2, #16
 800207e:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2220      	movs	r2, #32
 8002086:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	429a      	cmp	r2, r3
 800208e:	d119      	bne.n	80020c4 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	685a      	ldr	r2, [r3, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	01c9      	lsls	r1, r1, #7
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80020a2:	683a      	ldr	r2, [r7, #0]
 80020a4:	68f8      	ldr	r0, [r7, #12]
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	0013      	movs	r3, r2
 80020ac:	2200      	movs	r2, #0
 80020ae:	2120      	movs	r1, #32
 80020b0:	f000 f910 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 80020b4:	1e03      	subs	r3, r0, #0
 80020b6:	d001      	beq.n	80020bc <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e01c      	b.n	80020f6 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2220      	movs	r2, #32
 80020c2:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 80020c4:	697b      	ldr	r3, [r7, #20]
 80020c6:	3301      	adds	r3, #1
 80020c8:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d900      	bls.n	80020d4 <HAL_I2C_IsDeviceReady+0x204>
 80020d2:	e72e      	b.n	8001f32 <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2241      	movs	r2, #65	; 0x41
 80020d8:	2120      	movs	r1, #32
 80020da:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e0:	2220      	movs	r2, #32
 80020e2:	431a      	orrs	r2, r3
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2240      	movs	r2, #64	; 0x40
 80020ec:	2100      	movs	r1, #0
 80020ee:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
  }
}
 80020f6:	0018      	movs	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	b008      	add	sp, #32
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	02002000 	.word	0x02002000

08002104 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8002104:	b5b0      	push	{r4, r5, r7, lr}
 8002106:	b086      	sub	sp, #24
 8002108:	af02      	add	r7, sp, #8
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	000c      	movs	r4, r1
 800210e:	0010      	movs	r0, r2
 8002110:	0019      	movs	r1, r3
 8002112:	250a      	movs	r5, #10
 8002114:	197b      	adds	r3, r7, r5
 8002116:	1c22      	adds	r2, r4, #0
 8002118:	801a      	strh	r2, [r3, #0]
 800211a:	2308      	movs	r3, #8
 800211c:	18fb      	adds	r3, r7, r3
 800211e:	1c02      	adds	r2, r0, #0
 8002120:	801a      	strh	r2, [r3, #0]
 8002122:	1dbb      	adds	r3, r7, #6
 8002124:	1c0a      	adds	r2, r1, #0
 8002126:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8002128:	1dbb      	adds	r3, r7, #6
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	b2da      	uxtb	r2, r3
 800212e:	2380      	movs	r3, #128	; 0x80
 8002130:	045c      	lsls	r4, r3, #17
 8002132:	197b      	adds	r3, r7, r5
 8002134:	8819      	ldrh	r1, [r3, #0]
 8002136:	68f8      	ldr	r0, [r7, #12]
 8002138:	4b23      	ldr	r3, [pc, #140]	; (80021c8 <I2C_RequestMemoryWrite+0xc4>)
 800213a:	9300      	str	r3, [sp, #0]
 800213c:	0023      	movs	r3, r4
 800213e:	f000 f9fd 	bl	800253c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	6a39      	ldr	r1, [r7, #32]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	0018      	movs	r0, r3
 800214a:	f000 f902 	bl	8002352 <I2C_WaitOnTXISFlagUntilTimeout>
 800214e:	1e03      	subs	r3, r0, #0
 8002150:	d001      	beq.n	8002156 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e033      	b.n	80021be <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002156:	1dbb      	adds	r3, r7, #6
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d107      	bne.n	800216e <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800215e:	2308      	movs	r3, #8
 8002160:	18fb      	adds	r3, r7, r3
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	b2da      	uxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
 800216c:	e019      	b.n	80021a2 <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800216e:	2308      	movs	r3, #8
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	0a1b      	lsrs	r3, r3, #8
 8002176:	b29b      	uxth	r3, r3
 8002178:	b2da      	uxtb	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	6a39      	ldr	r1, [r7, #32]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	0018      	movs	r0, r3
 8002188:	f000 f8e3 	bl	8002352 <I2C_WaitOnTXISFlagUntilTimeout>
 800218c:	1e03      	subs	r3, r0, #0
 800218e:	d001      	beq.n	8002194 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e014      	b.n	80021be <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002194:	2308      	movs	r3, #8
 8002196:	18fb      	adds	r3, r7, r3
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b2da      	uxtb	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80021a2:	6a3a      	ldr	r2, [r7, #32]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	0013      	movs	r3, r2
 80021ac:	2200      	movs	r2, #0
 80021ae:	2180      	movs	r1, #128	; 0x80
 80021b0:	f000 f890 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 80021b4:	1e03      	subs	r3, r0, #0
 80021b6:	d001      	beq.n	80021bc <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b004      	add	sp, #16
 80021c4:	bdb0      	pop	{r4, r5, r7, pc}
 80021c6:	46c0      	nop			; (mov r8, r8)
 80021c8:	80002000 	.word	0x80002000

080021cc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80021cc:	b5b0      	push	{r4, r5, r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af02      	add	r7, sp, #8
 80021d2:	60f8      	str	r0, [r7, #12]
 80021d4:	000c      	movs	r4, r1
 80021d6:	0010      	movs	r0, r2
 80021d8:	0019      	movs	r1, r3
 80021da:	250a      	movs	r5, #10
 80021dc:	197b      	adds	r3, r7, r5
 80021de:	1c22      	adds	r2, r4, #0
 80021e0:	801a      	strh	r2, [r3, #0]
 80021e2:	2308      	movs	r3, #8
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	1c02      	adds	r2, r0, #0
 80021e8:	801a      	strh	r2, [r3, #0]
 80021ea:	1dbb      	adds	r3, r7, #6
 80021ec:	1c0a      	adds	r2, r1, #0
 80021ee:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80021f0:	1dbb      	adds	r3, r7, #6
 80021f2:	881b      	ldrh	r3, [r3, #0]
 80021f4:	b2da      	uxtb	r2, r3
 80021f6:	197b      	adds	r3, r7, r5
 80021f8:	8819      	ldrh	r1, [r3, #0]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <I2C_RequestMemoryRead+0xc0>)
 80021fe:	9300      	str	r3, [sp, #0]
 8002200:	2300      	movs	r3, #0
 8002202:	f000 f99b 	bl	800253c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	6a39      	ldr	r1, [r7, #32]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	0018      	movs	r0, r3
 800220e:	f000 f8a0 	bl	8002352 <I2C_WaitOnTXISFlagUntilTimeout>
 8002212:	1e03      	subs	r3, r0, #0
 8002214:	d001      	beq.n	800221a <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e033      	b.n	8002282 <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800221a:	1dbb      	adds	r3, r7, #6
 800221c:	881b      	ldrh	r3, [r3, #0]
 800221e:	2b01      	cmp	r3, #1
 8002220:	d107      	bne.n	8002232 <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002222:	2308      	movs	r3, #8
 8002224:	18fb      	adds	r3, r7, r3
 8002226:	881b      	ldrh	r3, [r3, #0]
 8002228:	b2da      	uxtb	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28
 8002230:	e019      	b.n	8002266 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002232:	2308      	movs	r3, #8
 8002234:	18fb      	adds	r3, r7, r3
 8002236:	881b      	ldrh	r3, [r3, #0]
 8002238:	0a1b      	lsrs	r3, r3, #8
 800223a:	b29b      	uxth	r3, r3
 800223c:	b2da      	uxtb	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002244:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002246:	6a39      	ldr	r1, [r7, #32]
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	0018      	movs	r0, r3
 800224c:	f000 f881 	bl	8002352 <I2C_WaitOnTXISFlagUntilTimeout>
 8002250:	1e03      	subs	r3, r0, #0
 8002252:	d001      	beq.n	8002258 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e014      	b.n	8002282 <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002258:	2308      	movs	r3, #8
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b2da      	uxtb	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002266:	6a3a      	ldr	r2, [r7, #32]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	0013      	movs	r3, r2
 8002270:	2200      	movs	r2, #0
 8002272:	2140      	movs	r1, #64	; 0x40
 8002274:	f000 f82e 	bl	80022d4 <I2C_WaitOnFlagUntilTimeout>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d001      	beq.n	8002280 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	0018      	movs	r0, r3
 8002284:	46bd      	mov	sp, r7
 8002286:	b004      	add	sp, #16
 8002288:	bdb0      	pop	{r4, r5, r7, pc}
 800228a:	46c0      	nop			; (mov r8, r8)
 800228c:	80002000 	.word	0x80002000

08002290 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	699b      	ldr	r3, [r3, #24]
 800229e:	2202      	movs	r2, #2
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d103      	bne.n	80022ae <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	2201      	movs	r2, #1
 80022b6:	4013      	ands	r3, r2
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d007      	beq.n	80022cc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	699a      	ldr	r2, [r3, #24]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2101      	movs	r1, #1
 80022c8:	430a      	orrs	r2, r1
 80022ca:	619a      	str	r2, [r3, #24]
  }
}
 80022cc:	46c0      	nop			; (mov r8, r8)
 80022ce:	46bd      	mov	sp, r7
 80022d0:	b002      	add	sp, #8
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	603b      	str	r3, [r7, #0]
 80022e0:	1dfb      	adds	r3, r7, #7
 80022e2:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022e4:	e021      	b.n	800232a <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	3301      	adds	r3, #1
 80022ea:	d01e      	beq.n	800232a <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ec:	f7fe ffee 	bl	80012cc <HAL_GetTick>
 80022f0:	0002      	movs	r2, r0
 80022f2:	69bb      	ldr	r3, [r7, #24]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d302      	bcc.n	8002302 <I2C_WaitOnFlagUntilTimeout+0x2e>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d113      	bne.n	800232a <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002306:	2220      	movs	r2, #32
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2241      	movs	r2, #65	; 0x41
 8002312:	2120      	movs	r1, #32
 8002314:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2242      	movs	r2, #66	; 0x42
 800231a:	2100      	movs	r1, #0
 800231c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2240      	movs	r2, #64	; 0x40
 8002322:	2100      	movs	r1, #0
 8002324:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	68ba      	ldr	r2, [r7, #8]
 8002332:	4013      	ands	r3, r2
 8002334:	68ba      	ldr	r2, [r7, #8]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	425a      	negs	r2, r3
 800233a:	4153      	adcs	r3, r2
 800233c:	b2db      	uxtb	r3, r3
 800233e:	001a      	movs	r2, r3
 8002340:	1dfb      	adds	r3, r7, #7
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	429a      	cmp	r2, r3
 8002346:	d0ce      	beq.n	80022e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	0018      	movs	r0, r3
 800234c:	46bd      	mov	sp, r7
 800234e:	b004      	add	sp, #16
 8002350:	bd80      	pop	{r7, pc}

08002352 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002352:	b580      	push	{r7, lr}
 8002354:	b084      	sub	sp, #16
 8002356:	af00      	add	r7, sp, #0
 8002358:	60f8      	str	r0, [r7, #12]
 800235a:	60b9      	str	r1, [r7, #8]
 800235c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800235e:	e02b      	b.n	80023b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	68b9      	ldr	r1, [r7, #8]
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	0018      	movs	r0, r3
 8002368:	f000 f86e 	bl	8002448 <I2C_IsAcknowledgeFailed>
 800236c:	1e03      	subs	r3, r0, #0
 800236e:	d001      	beq.n	8002374 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e029      	b.n	80023c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	3301      	adds	r3, #1
 8002378:	d01e      	beq.n	80023b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800237a:	f7fe ffa7 	bl	80012cc <HAL_GetTick>
 800237e:	0002      	movs	r2, r0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	68ba      	ldr	r2, [r7, #8]
 8002386:	429a      	cmp	r2, r3
 8002388:	d302      	bcc.n	8002390 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d113      	bne.n	80023b8 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002394:	2220      	movs	r2, #32
 8002396:	431a      	orrs	r2, r3
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2241      	movs	r2, #65	; 0x41
 80023a0:	2120      	movs	r1, #32
 80023a2:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2242      	movs	r2, #66	; 0x42
 80023a8:	2100      	movs	r1, #0
 80023aa:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2240      	movs	r2, #64	; 0x40
 80023b0:	2100      	movs	r1, #0
 80023b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e007      	b.n	80023c8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2202      	movs	r2, #2
 80023c0:	4013      	ands	r3, r2
 80023c2:	2b02      	cmp	r3, #2
 80023c4:	d1cc      	bne.n	8002360 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80023c6:	2300      	movs	r3, #0
}
 80023c8:	0018      	movs	r0, r3
 80023ca:	46bd      	mov	sp, r7
 80023cc:	b004      	add	sp, #16
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023dc:	e028      	b.n	8002430 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	0018      	movs	r0, r3
 80023e6:	f000 f82f 	bl	8002448 <I2C_IsAcknowledgeFailed>
 80023ea:	1e03      	subs	r3, r0, #0
 80023ec:	d001      	beq.n	80023f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e026      	b.n	8002440 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023f2:	f7fe ff6b 	bl	80012cc <HAL_GetTick>
 80023f6:	0002      	movs	r2, r0
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	68ba      	ldr	r2, [r7, #8]
 80023fe:	429a      	cmp	r2, r3
 8002400:	d302      	bcc.n	8002408 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d113      	bne.n	8002430 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240c:	2220      	movs	r2, #32
 800240e:	431a      	orrs	r2, r3
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2241      	movs	r2, #65	; 0x41
 8002418:	2120      	movs	r1, #32
 800241a:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2242      	movs	r2, #66	; 0x42
 8002420:	2100      	movs	r1, #0
 8002422:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2240      	movs	r2, #64	; 0x40
 8002428:	2100      	movs	r1, #0
 800242a:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e007      	b.n	8002440 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2220      	movs	r2, #32
 8002438:	4013      	ands	r3, r2
 800243a:	2b20      	cmp	r3, #32
 800243c:	d1cf      	bne.n	80023de <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	0018      	movs	r0, r3
 8002442:	46bd      	mov	sp, r7
 8002444:	b004      	add	sp, #16
 8002446:	bd80      	pop	{r7, pc}

08002448 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	60f8      	str	r0, [r7, #12]
 8002450:	60b9      	str	r1, [r7, #8]
 8002452:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	2210      	movs	r2, #16
 800245c:	4013      	ands	r3, r2
 800245e:	2b10      	cmp	r3, #16
 8002460:	d164      	bne.n	800252c <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	2380      	movs	r3, #128	; 0x80
 800246a:	049b      	lsls	r3, r3, #18
 800246c:	401a      	ands	r2, r3
 800246e:	2380      	movs	r3, #128	; 0x80
 8002470:	049b      	lsls	r3, r3, #18
 8002472:	429a      	cmp	r2, r3
 8002474:	d02b      	beq.n	80024ce <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2180      	movs	r1, #128	; 0x80
 8002482:	01c9      	lsls	r1, r1, #7
 8002484:	430a      	orrs	r2, r1
 8002486:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002488:	e021      	b.n	80024ce <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3301      	adds	r3, #1
 800248e:	d01e      	beq.n	80024ce <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002490:	f7fe ff1c 	bl	80012cc <HAL_GetTick>
 8002494:	0002      	movs	r2, r0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	429a      	cmp	r2, r3
 800249e:	d302      	bcc.n	80024a6 <I2C_IsAcknowledgeFailed+0x5e>
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d113      	bne.n	80024ce <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024aa:	2220      	movs	r2, #32
 80024ac:	431a      	orrs	r2, r3
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2241      	movs	r2, #65	; 0x41
 80024b6:	2120      	movs	r1, #32
 80024b8:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2242      	movs	r2, #66	; 0x42
 80024be:	2100      	movs	r1, #0
 80024c0:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	2240      	movs	r2, #64	; 0x40
 80024c6:	2100      	movs	r1, #0
 80024c8:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e02f      	b.n	800252e <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	2220      	movs	r2, #32
 80024d6:	4013      	ands	r3, r2
 80024d8:	2b20      	cmp	r3, #32
 80024da:	d1d6      	bne.n	800248a <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2210      	movs	r2, #16
 80024e2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2220      	movs	r2, #32
 80024ea:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	0018      	movs	r0, r3
 80024f0:	f7ff fece 	bl	8002290 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	490e      	ldr	r1, [pc, #56]	; (8002538 <I2C_IsAcknowledgeFailed+0xf0>)
 8002500:	400a      	ands	r2, r1
 8002502:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002508:	2204      	movs	r2, #4
 800250a:	431a      	orrs	r2, r3
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2241      	movs	r2, #65	; 0x41
 8002514:	2120      	movs	r1, #32
 8002516:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	2242      	movs	r2, #66	; 0x42
 800251c:	2100      	movs	r1, #0
 800251e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	2240      	movs	r2, #64	; 0x40
 8002524:	2100      	movs	r1, #0
 8002526:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 800252c:	2300      	movs	r3, #0
}
 800252e:	0018      	movs	r0, r3
 8002530:	46bd      	mov	sp, r7
 8002532:	b004      	add	sp, #16
 8002534:	bd80      	pop	{r7, pc}
 8002536:	46c0      	nop			; (mov r8, r8)
 8002538:	fe00e800 	.word	0xfe00e800

0800253c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b085      	sub	sp, #20
 8002540:	af00      	add	r7, sp, #0
 8002542:	60f8      	str	r0, [r7, #12]
 8002544:	0008      	movs	r0, r1
 8002546:	0011      	movs	r1, r2
 8002548:	607b      	str	r3, [r7, #4]
 800254a:	240a      	movs	r4, #10
 800254c:	193b      	adds	r3, r7, r4
 800254e:	1c02      	adds	r2, r0, #0
 8002550:	801a      	strh	r2, [r3, #0]
 8002552:	2009      	movs	r0, #9
 8002554:	183b      	adds	r3, r7, r0
 8002556:	1c0a      	adds	r2, r1, #0
 8002558:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	6a3a      	ldr	r2, [r7, #32]
 8002562:	0d51      	lsrs	r1, r2, #21
 8002564:	2280      	movs	r2, #128	; 0x80
 8002566:	00d2      	lsls	r2, r2, #3
 8002568:	400a      	ands	r2, r1
 800256a:	490e      	ldr	r1, [pc, #56]	; (80025a4 <I2C_TransferConfig+0x68>)
 800256c:	430a      	orrs	r2, r1
 800256e:	43d2      	mvns	r2, r2
 8002570:	401a      	ands	r2, r3
 8002572:	0011      	movs	r1, r2
 8002574:	193b      	adds	r3, r7, r4
 8002576:	881b      	ldrh	r3, [r3, #0]
 8002578:	059b      	lsls	r3, r3, #22
 800257a:	0d9a      	lsrs	r2, r3, #22
 800257c:	183b      	adds	r3, r7, r0
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	0418      	lsls	r0, r3, #16
 8002582:	23ff      	movs	r3, #255	; 0xff
 8002584:	041b      	lsls	r3, r3, #16
 8002586:	4003      	ands	r3, r0
 8002588:	431a      	orrs	r2, r3
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	431a      	orrs	r2, r3
 800258e:	6a3b      	ldr	r3, [r7, #32]
 8002590:	431a      	orrs	r2, r3
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 800259a:	46c0      	nop			; (mov r8, r8)
 800259c:	46bd      	mov	sp, r7
 800259e:	b005      	add	sp, #20
 80025a0:	bd90      	pop	{r4, r7, pc}
 80025a2:	46c0      	nop			; (mov r8, r8)
 80025a4:	03ff63ff 	.word	0x03ff63ff

080025a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2241      	movs	r2, #65	; 0x41
 80025b6:	5c9b      	ldrb	r3, [r3, r2]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	2b20      	cmp	r3, #32
 80025bc:	d138      	bne.n	8002630 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2240      	movs	r2, #64	; 0x40
 80025c2:	5c9b      	ldrb	r3, [r3, r2]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d101      	bne.n	80025cc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80025c8:	2302      	movs	r3, #2
 80025ca:	e032      	b.n	8002632 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2240      	movs	r2, #64	; 0x40
 80025d0:	2101      	movs	r1, #1
 80025d2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2241      	movs	r2, #65	; 0x41
 80025d8:	2124      	movs	r1, #36	; 0x24
 80025da:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2101      	movs	r1, #1
 80025e8:	438a      	bics	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4911      	ldr	r1, [pc, #68]	; (800263c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80025f8:	400a      	ands	r2, r1
 80025fa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	6819      	ldr	r1, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	683a      	ldr	r2, [r7, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2101      	movs	r1, #1
 8002618:	430a      	orrs	r2, r1
 800261a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2241      	movs	r2, #65	; 0x41
 8002620:	2120      	movs	r1, #32
 8002622:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	2100      	movs	r1, #0
 800262a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800262c:	2300      	movs	r3, #0
 800262e:	e000      	b.n	8002632 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002630:	2302      	movs	r3, #2
  }
}
 8002632:	0018      	movs	r0, r3
 8002634:	46bd      	mov	sp, r7
 8002636:	b002      	add	sp, #8
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			; (mov r8, r8)
 800263c:	ffffefff 	.word	0xffffefff

08002640 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2241      	movs	r2, #65	; 0x41
 800264e:	5c9b      	ldrb	r3, [r3, r2]
 8002650:	b2db      	uxtb	r3, r3
 8002652:	2b20      	cmp	r3, #32
 8002654:	d139      	bne.n	80026ca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2240      	movs	r2, #64	; 0x40
 800265a:	5c9b      	ldrb	r3, [r3, r2]
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002660:	2302      	movs	r3, #2
 8002662:	e033      	b.n	80026cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2240      	movs	r2, #64	; 0x40
 8002668:	2101      	movs	r1, #1
 800266a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2241      	movs	r2, #65	; 0x41
 8002670:	2124      	movs	r1, #36	; 0x24
 8002672:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2101      	movs	r1, #1
 8002680:	438a      	bics	r2, r1
 8002682:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4a11      	ldr	r2, [pc, #68]	; (80026d4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002690:	4013      	ands	r3, r2
 8002692:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	021b      	lsls	r3, r3, #8
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	4313      	orrs	r3, r2
 800269c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2101      	movs	r1, #1
 80026b2:	430a      	orrs	r2, r1
 80026b4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2241      	movs	r2, #65	; 0x41
 80026ba:	2120      	movs	r1, #32
 80026bc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2240      	movs	r2, #64	; 0x40
 80026c2:	2100      	movs	r1, #0
 80026c4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	e000      	b.n	80026cc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80026ca:	2302      	movs	r3, #2
  }
}
 80026cc:	0018      	movs	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b004      	add	sp, #16
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	fffff0ff 	.word	0xfffff0ff

080026d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	b08a      	sub	sp, #40	; 0x28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d102      	bne.n	80026ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	f000 fb6c 	bl	8002dc4 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026ec:	4bc8      	ldr	r3, [pc, #800]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	220c      	movs	r2, #12
 80026f2:	4013      	ands	r3, r2
 80026f4:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026f6:	4bc6      	ldr	r3, [pc, #792]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	2201      	movs	r2, #1
 8002708:	4013      	ands	r3, r2
 800270a:	d100      	bne.n	800270e <HAL_RCC_OscConfig+0x36>
 800270c:	e07d      	b.n	800280a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	2b08      	cmp	r3, #8
 8002712:	d007      	beq.n	8002724 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	2b0c      	cmp	r3, #12
 8002718:	d112      	bne.n	8002740 <HAL_RCC_OscConfig+0x68>
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	2380      	movs	r3, #128	; 0x80
 800271e:	025b      	lsls	r3, r3, #9
 8002720:	429a      	cmp	r2, r3
 8002722:	d10d      	bne.n	8002740 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002724:	4bba      	ldr	r3, [pc, #744]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	2380      	movs	r3, #128	; 0x80
 800272a:	029b      	lsls	r3, r3, #10
 800272c:	4013      	ands	r3, r2
 800272e:	d100      	bne.n	8002732 <HAL_RCC_OscConfig+0x5a>
 8002730:	e06a      	b.n	8002808 <HAL_RCC_OscConfig+0x130>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d166      	bne.n	8002808 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800273a:	2301      	movs	r3, #1
 800273c:	f000 fb42 	bl	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	2380      	movs	r3, #128	; 0x80
 8002746:	025b      	lsls	r3, r3, #9
 8002748:	429a      	cmp	r2, r3
 800274a:	d107      	bne.n	800275c <HAL_RCC_OscConfig+0x84>
 800274c:	4bb0      	ldr	r3, [pc, #704]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	4baf      	ldr	r3, [pc, #700]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002752:	2180      	movs	r1, #128	; 0x80
 8002754:	0249      	lsls	r1, r1, #9
 8002756:	430a      	orrs	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e027      	b.n	80027ac <HAL_RCC_OscConfig+0xd4>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	23a0      	movs	r3, #160	; 0xa0
 8002762:	02db      	lsls	r3, r3, #11
 8002764:	429a      	cmp	r2, r3
 8002766:	d10e      	bne.n	8002786 <HAL_RCC_OscConfig+0xae>
 8002768:	4ba9      	ldr	r3, [pc, #676]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4ba8      	ldr	r3, [pc, #672]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800276e:	2180      	movs	r1, #128	; 0x80
 8002770:	02c9      	lsls	r1, r1, #11
 8002772:	430a      	orrs	r2, r1
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	4ba6      	ldr	r3, [pc, #664]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4ba5      	ldr	r3, [pc, #660]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800277c:	2180      	movs	r1, #128	; 0x80
 800277e:	0249      	lsls	r1, r1, #9
 8002780:	430a      	orrs	r2, r1
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	e012      	b.n	80027ac <HAL_RCC_OscConfig+0xd4>
 8002786:	4ba2      	ldr	r3, [pc, #648]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4ba1      	ldr	r3, [pc, #644]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800278c:	49a1      	ldr	r1, [pc, #644]	; (8002a14 <HAL_RCC_OscConfig+0x33c>)
 800278e:	400a      	ands	r2, r1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	4b9f      	ldr	r3, [pc, #636]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	2380      	movs	r3, #128	; 0x80
 8002798:	025b      	lsls	r3, r3, #9
 800279a:	4013      	ands	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4b9b      	ldr	r3, [pc, #620]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	4b9a      	ldr	r3, [pc, #616]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80027a6:	499c      	ldr	r1, [pc, #624]	; (8002a18 <HAL_RCC_OscConfig+0x340>)
 80027a8:	400a      	ands	r2, r1
 80027aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d014      	beq.n	80027de <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fd8a 	bl	80012cc <HAL_GetTick>
 80027b8:	0003      	movs	r3, r0
 80027ba:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027bc:	e008      	b.n	80027d0 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027be:	f7fe fd85 	bl	80012cc <HAL_GetTick>
 80027c2:	0002      	movs	r2, r0
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	2b64      	cmp	r3, #100	; 0x64
 80027ca:	d901      	bls.n	80027d0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80027cc:	2303      	movs	r3, #3
 80027ce:	e2f9      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027d0:	4b8f      	ldr	r3, [pc, #572]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	; 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	d0f0      	beq.n	80027be <HAL_RCC_OscConfig+0xe6>
 80027dc:	e015      	b.n	800280a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027de:	f7fe fd75 	bl	80012cc <HAL_GetTick>
 80027e2:	0003      	movs	r3, r0
 80027e4:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027e8:	f7fe fd70 	bl	80012cc <HAL_GetTick>
 80027ec:	0002      	movs	r2, r0
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b64      	cmp	r3, #100	; 0x64
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e2e4      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027fa:	4b85      	ldr	r3, [pc, #532]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	2380      	movs	r3, #128	; 0x80
 8002800:	029b      	lsls	r3, r3, #10
 8002802:	4013      	ands	r3, r2
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x110>
 8002806:	e000      	b.n	800280a <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002808:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2202      	movs	r2, #2
 8002810:	4013      	ands	r3, r2
 8002812:	d100      	bne.n	8002816 <HAL_RCC_OscConfig+0x13e>
 8002814:	e099      	b.n	800294a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281e:	2220      	movs	r2, #32
 8002820:	4013      	ands	r3, r2
 8002822:	d009      	beq.n	8002838 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8002824:	4b7a      	ldr	r3, [pc, #488]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	4b79      	ldr	r3, [pc, #484]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800282a:	2120      	movs	r1, #32
 800282c:	430a      	orrs	r2, r1
 800282e:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	2220      	movs	r2, #32
 8002834:	4393      	bics	r3, r2
 8002836:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	2b04      	cmp	r3, #4
 800283c:	d005      	beq.n	800284a <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d13e      	bne.n	80028c2 <HAL_RCC_OscConfig+0x1ea>
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d13b      	bne.n	80028c2 <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800284a:	4b71      	ldr	r3, [pc, #452]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2204      	movs	r2, #4
 8002850:	4013      	ands	r3, r2
 8002852:	d004      	beq.n	800285e <HAL_RCC_OscConfig+0x186>
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e2b2      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800285e:	4b6c      	ldr	r3, [pc, #432]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a6e      	ldr	r2, [pc, #440]	; (8002a1c <HAL_RCC_OscConfig+0x344>)
 8002864:	4013      	ands	r3, r2
 8002866:	0019      	movs	r1, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	021a      	lsls	r2, r3, #8
 800286e:	4b68      	ldr	r3, [pc, #416]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002874:	4b66      	ldr	r3, [pc, #408]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2209      	movs	r2, #9
 800287a:	4393      	bics	r3, r2
 800287c:	0019      	movs	r1, r3
 800287e:	4b64      	ldr	r3, [pc, #400]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002882:	430a      	orrs	r2, r1
 8002884:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002886:	f000 fbeb 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 800288a:	0001      	movs	r1, r0
 800288c:	4b60      	ldr	r3, [pc, #384]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	220f      	movs	r2, #15
 8002894:	4013      	ands	r3, r2
 8002896:	4a62      	ldr	r2, [pc, #392]	; (8002a20 <HAL_RCC_OscConfig+0x348>)
 8002898:	5cd3      	ldrb	r3, [r2, r3]
 800289a:	000a      	movs	r2, r1
 800289c:	40da      	lsrs	r2, r3
 800289e:	4b61      	ldr	r3, [pc, #388]	; (8002a24 <HAL_RCC_OscConfig+0x34c>)
 80028a0:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80028a2:	4b61      	ldr	r3, [pc, #388]	; (8002a28 <HAL_RCC_OscConfig+0x350>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	2513      	movs	r5, #19
 80028a8:	197c      	adds	r4, r7, r5
 80028aa:	0018      	movs	r0, r3
 80028ac:	f7fe fcc8 	bl	8001240 <HAL_InitTick>
 80028b0:	0003      	movs	r3, r0
 80028b2:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80028b4:	197b      	adds	r3, r7, r5
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d046      	beq.n	800294a <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80028bc:	197b      	adds	r3, r7, r5
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	e280      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80028c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d027      	beq.n	8002918 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80028c8:	4b51      	ldr	r3, [pc, #324]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2209      	movs	r2, #9
 80028ce:	4393      	bics	r3, r2
 80028d0:	0019      	movs	r1, r3
 80028d2:	4b4f      	ldr	r3, [pc, #316]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80028d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d6:	430a      	orrs	r2, r1
 80028d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028da:	f7fe fcf7 	bl	80012cc <HAL_GetTick>
 80028de:	0003      	movs	r3, r0
 80028e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028e4:	f7fe fcf2 	bl	80012cc <HAL_GetTick>
 80028e8:	0002      	movs	r2, r0
 80028ea:	697b      	ldr	r3, [r7, #20]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e266      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028f6:	4b46      	ldr	r3, [pc, #280]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	2204      	movs	r2, #4
 80028fc:	4013      	ands	r3, r2
 80028fe:	d0f1      	beq.n	80028e4 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002900:	4b43      	ldr	r3, [pc, #268]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	4a45      	ldr	r2, [pc, #276]	; (8002a1c <HAL_RCC_OscConfig+0x344>)
 8002906:	4013      	ands	r3, r2
 8002908:	0019      	movs	r1, r3
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	021a      	lsls	r2, r3, #8
 8002910:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002912:	430a      	orrs	r2, r1
 8002914:	605a      	str	r2, [r3, #4]
 8002916:	e018      	b.n	800294a <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002918:	4b3d      	ldr	r3, [pc, #244]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800291a:	681a      	ldr	r2, [r3, #0]
 800291c:	4b3c      	ldr	r3, [pc, #240]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800291e:	2101      	movs	r1, #1
 8002920:	438a      	bics	r2, r1
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fcd2 	bl	80012cc <HAL_GetTick>
 8002928:	0003      	movs	r3, r0
 800292a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800292c:	e008      	b.n	8002940 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800292e:	f7fe fccd 	bl	80012cc <HAL_GetTick>
 8002932:	0002      	movs	r2, r0
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	1ad3      	subs	r3, r2, r3
 8002938:	2b02      	cmp	r3, #2
 800293a:	d901      	bls.n	8002940 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800293c:	2303      	movs	r3, #3
 800293e:	e241      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002940:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2204      	movs	r2, #4
 8002946:	4013      	ands	r3, r2
 8002948:	d1f1      	bne.n	800292e <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2210      	movs	r2, #16
 8002950:	4013      	ands	r3, r2
 8002952:	d100      	bne.n	8002956 <HAL_RCC_OscConfig+0x27e>
 8002954:	e0a1      	b.n	8002a9a <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002956:	69fb      	ldr	r3, [r7, #28]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d140      	bne.n	80029de <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800295c:	4b2c      	ldr	r3, [pc, #176]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4013      	ands	r3, r2
 8002966:	d005      	beq.n	8002974 <HAL_RCC_OscConfig+0x29c>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	699b      	ldr	r3, [r3, #24]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d101      	bne.n	8002974 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	e227      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002974:	4b26      	ldr	r3, [pc, #152]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4a2c      	ldr	r2, [pc, #176]	; (8002a2c <HAL_RCC_OscConfig+0x354>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1a      	ldr	r2, [r3, #32]
 8002982:	4b23      	ldr	r3, [pc, #140]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002984:	430a      	orrs	r2, r1
 8002986:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002988:	4b21      	ldr	r3, [pc, #132]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	021b      	lsls	r3, r3, #8
 800298e:	0a19      	lsrs	r1, r3, #8
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	061a      	lsls	r2, r3, #24
 8002996:	4b1e      	ldr	r3, [pc, #120]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 8002998:	430a      	orrs	r2, r1
 800299a:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a1b      	ldr	r3, [r3, #32]
 80029a0:	0b5b      	lsrs	r3, r3, #13
 80029a2:	3301      	adds	r3, #1
 80029a4:	2280      	movs	r2, #128	; 0x80
 80029a6:	0212      	lsls	r2, r2, #8
 80029a8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029aa:	4b19      	ldr	r3, [pc, #100]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80029ac:	68db      	ldr	r3, [r3, #12]
 80029ae:	091b      	lsrs	r3, r3, #4
 80029b0:	210f      	movs	r1, #15
 80029b2:	400b      	ands	r3, r1
 80029b4:	491a      	ldr	r1, [pc, #104]	; (8002a20 <HAL_RCC_OscConfig+0x348>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029ba:	4b1a      	ldr	r3, [pc, #104]	; (8002a24 <HAL_RCC_OscConfig+0x34c>)
 80029bc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80029be:	4b1a      	ldr	r3, [pc, #104]	; (8002a28 <HAL_RCC_OscConfig+0x350>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2513      	movs	r5, #19
 80029c4:	197c      	adds	r4, r7, r5
 80029c6:	0018      	movs	r0, r3
 80029c8:	f7fe fc3a 	bl	8001240 <HAL_InitTick>
 80029cc:	0003      	movs	r3, r0
 80029ce:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80029d0:	197b      	adds	r3, r7, r5
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d060      	beq.n	8002a9a <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80029d8:	197b      	adds	r3, r7, r5
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	e1f2      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d03f      	beq.n	8002a66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029e6:	4b0a      	ldr	r3, [pc, #40]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	4b09      	ldr	r3, [pc, #36]	; (8002a10 <HAL_RCC_OscConfig+0x338>)
 80029ec:	2180      	movs	r1, #128	; 0x80
 80029ee:	0049      	lsls	r1, r1, #1
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe fc6a 	bl	80012cc <HAL_GetTick>
 80029f8:	0003      	movs	r3, r0
 80029fa:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029fc:	e018      	b.n	8002a30 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029fe:	f7fe fc65 	bl	80012cc <HAL_GetTick>
 8002a02:	0002      	movs	r2, r0
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d911      	bls.n	8002a30 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1d9      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
 8002a10:	40021000 	.word	0x40021000
 8002a14:	fffeffff 	.word	0xfffeffff
 8002a18:	fffbffff 	.word	0xfffbffff
 8002a1c:	ffffe0ff 	.word	0xffffe0ff
 8002a20:	08004f68 	.word	0x08004f68
 8002a24:	20000000 	.word	0x20000000
 8002a28:	20000004 	.word	0x20000004
 8002a2c:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002a30:	4bc9      	ldr	r3, [pc, #804]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d0e0      	beq.n	80029fe <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a3c:	4bc6      	ldr	r3, [pc, #792]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4ac6      	ldr	r2, [pc, #792]	; (8002d5c <HAL_RCC_OscConfig+0x684>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	4bc3      	ldr	r3, [pc, #780]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a50:	4bc1      	ldr	r3, [pc, #772]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	021b      	lsls	r3, r3, #8
 8002a56:	0a19      	lsrs	r1, r3, #8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	061a      	lsls	r2, r3, #24
 8002a5e:	4bbe      	ldr	r3, [pc, #760]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002a60:	430a      	orrs	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]
 8002a64:	e019      	b.n	8002a9a <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a66:	4bbc      	ldr	r3, [pc, #752]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	4bbb      	ldr	r3, [pc, #748]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002a6c:	49bc      	ldr	r1, [pc, #752]	; (8002d60 <HAL_RCC_OscConfig+0x688>)
 8002a6e:	400a      	ands	r2, r1
 8002a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a72:	f7fe fc2b 	bl	80012cc <HAL_GetTick>
 8002a76:	0003      	movs	r3, r0
 8002a78:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a7a:	e008      	b.n	8002a8e <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a7c:	f7fe fc26 	bl	80012cc <HAL_GetTick>
 8002a80:	0002      	movs	r2, r0
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d901      	bls.n	8002a8e <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	e19a      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002a8e:	4bb2      	ldr	r3, [pc, #712]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	4013      	ands	r3, r2
 8002a98:	d1f0      	bne.n	8002a7c <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2208      	movs	r2, #8
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d036      	beq.n	8002b12 <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	695b      	ldr	r3, [r3, #20]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d019      	beq.n	8002ae0 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aac:	4baa      	ldr	r3, [pc, #680]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002aae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ab0:	4ba9      	ldr	r3, [pc, #676]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab8:	f7fe fc08 	bl	80012cc <HAL_GetTick>
 8002abc:	0003      	movs	r3, r0
 8002abe:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ac2:	f7fe fc03 	bl	80012cc <HAL_GetTick>
 8002ac6:	0002      	movs	r2, r0
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e177      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002ad4:	4ba0      	ldr	r3, [pc, #640]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ad8:	2202      	movs	r2, #2
 8002ada:	4013      	ands	r3, r2
 8002adc:	d0f1      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x3ea>
 8002ade:	e018      	b.n	8002b12 <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ae0:	4b9d      	ldr	r3, [pc, #628]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002ae2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002ae4:	4b9c      	ldr	r3, [pc, #624]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002ae6:	2101      	movs	r1, #1
 8002ae8:	438a      	bics	r2, r1
 8002aea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aec:	f7fe fbee 	bl	80012cc <HAL_GetTick>
 8002af0:	0003      	movs	r3, r0
 8002af2:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002af4:	e008      	b.n	8002b08 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002af6:	f7fe fbe9 	bl	80012cc <HAL_GetTick>
 8002afa:	0002      	movs	r2, r0
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	1ad3      	subs	r3, r2, r3
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e15d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b08:	4b93      	ldr	r3, [pc, #588]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002b0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b0c:	2202      	movs	r2, #2
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d1f1      	bne.n	8002af6 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	2204      	movs	r2, #4
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <HAL_RCC_OscConfig+0x446>
 8002b1c:	e0ae      	b.n	8002c7c <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b1e:	2023      	movs	r0, #35	; 0x23
 8002b20:	183b      	adds	r3, r7, r0
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b26:	4b8c      	ldr	r3, [pc, #560]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002b28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b2a:	2380      	movs	r3, #128	; 0x80
 8002b2c:	055b      	lsls	r3, r3, #21
 8002b2e:	4013      	ands	r3, r2
 8002b30:	d109      	bne.n	8002b46 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b89      	ldr	r3, [pc, #548]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b36:	4b88      	ldr	r3, [pc, #544]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002b38:	2180      	movs	r1, #128	; 0x80
 8002b3a:	0549      	lsls	r1, r1, #21
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002b40:	183b      	adds	r3, r7, r0
 8002b42:	2201      	movs	r2, #1
 8002b44:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b46:	4b87      	ldr	r3, [pc, #540]	; (8002d64 <HAL_RCC_OscConfig+0x68c>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	2380      	movs	r3, #128	; 0x80
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	4013      	ands	r3, r2
 8002b50:	d11a      	bne.n	8002b88 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b52:	4b84      	ldr	r3, [pc, #528]	; (8002d64 <HAL_RCC_OscConfig+0x68c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b83      	ldr	r3, [pc, #524]	; (8002d64 <HAL_RCC_OscConfig+0x68c>)
 8002b58:	2180      	movs	r1, #128	; 0x80
 8002b5a:	0049      	lsls	r1, r1, #1
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b60:	f7fe fbb4 	bl	80012cc <HAL_GetTick>
 8002b64:	0003      	movs	r3, r0
 8002b66:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b68:	e008      	b.n	8002b7c <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6a:	f7fe fbaf 	bl	80012cc <HAL_GetTick>
 8002b6e:	0002      	movs	r2, r0
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	2b64      	cmp	r3, #100	; 0x64
 8002b76:	d901      	bls.n	8002b7c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8002b78:	2303      	movs	r3, #3
 8002b7a:	e123      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b7c:	4b79      	ldr	r3, [pc, #484]	; (8002d64 <HAL_RCC_OscConfig+0x68c>)
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	2380      	movs	r3, #128	; 0x80
 8002b82:	005b      	lsls	r3, r3, #1
 8002b84:	4013      	ands	r3, r2
 8002b86:	d0f0      	beq.n	8002b6a <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689a      	ldr	r2, [r3, #8]
 8002b8c:	2380      	movs	r3, #128	; 0x80
 8002b8e:	005b      	lsls	r3, r3, #1
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4cc>
 8002b94:	4b70      	ldr	r3, [pc, #448]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002b96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002b9a:	2180      	movs	r1, #128	; 0x80
 8002b9c:	0049      	lsls	r1, r1, #1
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	651a      	str	r2, [r3, #80]	; 0x50
 8002ba2:	e031      	b.n	8002c08 <HAL_RCC_OscConfig+0x530>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x4ee>
 8002bac:	4b6a      	ldr	r3, [pc, #424]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bb0:	4b69      	ldr	r3, [pc, #420]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bb2:	496b      	ldr	r1, [pc, #428]	; (8002d60 <HAL_RCC_OscConfig+0x688>)
 8002bb4:	400a      	ands	r2, r1
 8002bb6:	651a      	str	r2, [r3, #80]	; 0x50
 8002bb8:	4b67      	ldr	r3, [pc, #412]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bbc:	4b66      	ldr	r3, [pc, #408]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bbe:	496a      	ldr	r1, [pc, #424]	; (8002d68 <HAL_RCC_OscConfig+0x690>)
 8002bc0:	400a      	ands	r2, r1
 8002bc2:	651a      	str	r2, [r3, #80]	; 0x50
 8002bc4:	e020      	b.n	8002c08 <HAL_RCC_OscConfig+0x530>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	689a      	ldr	r2, [r3, #8]
 8002bca:	23a0      	movs	r3, #160	; 0xa0
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x518>
 8002bd2:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bd6:	4b60      	ldr	r3, [pc, #384]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bd8:	2180      	movs	r1, #128	; 0x80
 8002bda:	00c9      	lsls	r1, r1, #3
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	651a      	str	r2, [r3, #80]	; 0x50
 8002be0:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002be2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002be4:	4b5c      	ldr	r3, [pc, #368]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002be6:	2180      	movs	r1, #128	; 0x80
 8002be8:	0049      	lsls	r1, r1, #1
 8002bea:	430a      	orrs	r2, r1
 8002bec:	651a      	str	r2, [r3, #80]	; 0x50
 8002bee:	e00b      	b.n	8002c08 <HAL_RCC_OscConfig+0x530>
 8002bf0:	4b59      	ldr	r3, [pc, #356]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bf2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002bf4:	4b58      	ldr	r3, [pc, #352]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bf6:	495a      	ldr	r1, [pc, #360]	; (8002d60 <HAL_RCC_OscConfig+0x688>)
 8002bf8:	400a      	ands	r2, r1
 8002bfa:	651a      	str	r2, [r3, #80]	; 0x50
 8002bfc:	4b56      	ldr	r3, [pc, #344]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002bfe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c00:	4b55      	ldr	r3, [pc, #340]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002c02:	4959      	ldr	r1, [pc, #356]	; (8002d68 <HAL_RCC_OscConfig+0x690>)
 8002c04:	400a      	ands	r2, r1
 8002c06:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	689b      	ldr	r3, [r3, #8]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d015      	beq.n	8002c3c <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c10:	f7fe fb5c 	bl	80012cc <HAL_GetTick>
 8002c14:	0003      	movs	r3, r0
 8002c16:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c18:	e009      	b.n	8002c2e <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c1a:	f7fe fb57 	bl	80012cc <HAL_GetTick>
 8002c1e:	0002      	movs	r2, r0
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	4a51      	ldr	r2, [pc, #324]	; (8002d6c <HAL_RCC_OscConfig+0x694>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e0ca      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002c30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c32:	2380      	movs	r3, #128	; 0x80
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4013      	ands	r3, r2
 8002c38:	d0ef      	beq.n	8002c1a <HAL_RCC_OscConfig+0x542>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c3c:	f7fe fb46 	bl	80012cc <HAL_GetTick>
 8002c40:	0003      	movs	r3, r0
 8002c42:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c44:	e009      	b.n	8002c5a <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c46:	f7fe fb41 	bl	80012cc <HAL_GetTick>
 8002c4a:	0002      	movs	r2, r0
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	1ad3      	subs	r3, r2, r3
 8002c50:	4a46      	ldr	r2, [pc, #280]	; (8002d6c <HAL_RCC_OscConfig+0x694>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e0b4      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c5a:	4b3f      	ldr	r3, [pc, #252]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c5e:	2380      	movs	r3, #128	; 0x80
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4013      	ands	r3, r2
 8002c64:	d1ef      	bne.n	8002c46 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002c66:	2323      	movs	r3, #35	; 0x23
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d105      	bne.n	8002c7c <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002c72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c74:	4b38      	ldr	r3, [pc, #224]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002c76:	493e      	ldr	r1, [pc, #248]	; (8002d70 <HAL_RCC_OscConfig+0x698>)
 8002c78:	400a      	ands	r2, r1
 8002c7a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d100      	bne.n	8002c86 <HAL_RCC_OscConfig+0x5ae>
 8002c84:	e09d      	b.n	8002dc2 <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	2b0c      	cmp	r3, #12
 8002c8a:	d100      	bne.n	8002c8e <HAL_RCC_OscConfig+0x5b6>
 8002c8c:	e076      	b.n	8002d7c <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d145      	bne.n	8002d22 <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002c9c:	4935      	ldr	r1, [pc, #212]	; (8002d74 <HAL_RCC_OscConfig+0x69c>)
 8002c9e:	400a      	ands	r2, r1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fb13 	bl	80012cc <HAL_GetTick>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002caa:	e008      	b.n	8002cbe <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cac:	f7fe fb0e 	bl	80012cc <HAL_GetTick>
 8002cb0:	0002      	movs	r2, r0
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e082      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002cbe:	4b26      	ldr	r3, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	2380      	movs	r3, #128	; 0x80
 8002cc4:	049b      	lsls	r3, r3, #18
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d1f0      	bne.n	8002cac <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cca:	4b23      	ldr	r3, [pc, #140]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	4a2a      	ldr	r2, [pc, #168]	; (8002d78 <HAL_RCC_OscConfig+0x6a0>)
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	4b1c      	ldr	r3, [pc, #112]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002cea:	4b1b      	ldr	r3, [pc, #108]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b1a      	ldr	r3, [pc, #104]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002cf0:	2180      	movs	r1, #128	; 0x80
 8002cf2:	0449      	lsls	r1, r1, #17
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cf8:	f7fe fae8 	bl	80012cc <HAL_GetTick>
 8002cfc:	0003      	movs	r3, r0
 8002cfe:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d02:	f7fe fae3 	bl	80012cc <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e057      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002d14:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	049b      	lsls	r3, r3, #18
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x62a>
 8002d20:	e04f      	b.n	8002dc2 <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d22:	4b0d      	ldr	r3, [pc, #52]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002d28:	4912      	ldr	r1, [pc, #72]	; (8002d74 <HAL_RCC_OscConfig+0x69c>)
 8002d2a:	400a      	ands	r2, r1
 8002d2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d2e:	f7fe facd 	bl	80012cc <HAL_GetTick>
 8002d32:	0003      	movs	r3, r0
 8002d34:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d36:	e008      	b.n	8002d4a <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d38:	f7fe fac8 	bl	80012cc <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d901      	bls.n	8002d4a <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8002d46:	2303      	movs	r3, #3
 8002d48:	e03c      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002d4a:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_RCC_OscConfig+0x680>)
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	2380      	movs	r3, #128	; 0x80
 8002d50:	049b      	lsls	r3, r3, #18
 8002d52:	4013      	ands	r3, r2
 8002d54:	d1f0      	bne.n	8002d38 <HAL_RCC_OscConfig+0x660>
 8002d56:	e034      	b.n	8002dc2 <HAL_RCC_OscConfig+0x6ea>
 8002d58:	40021000 	.word	0x40021000
 8002d5c:	ffff1fff 	.word	0xffff1fff
 8002d60:	fffffeff 	.word	0xfffffeff
 8002d64:	40007000 	.word	0x40007000
 8002d68:	fffffbff 	.word	0xfffffbff
 8002d6c:	00001388 	.word	0x00001388
 8002d70:	efffffff 	.word	0xefffffff
 8002d74:	feffffff 	.word	0xfeffffff
 8002d78:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	e01d      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d88:	4b10      	ldr	r3, [pc, #64]	; (8002dcc <HAL_RCC_OscConfig+0x6f4>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	2380      	movs	r3, #128	; 0x80
 8002d92:	025b      	lsls	r3, r3, #9
 8002d94:	401a      	ands	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d10f      	bne.n	8002dbe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	23f0      	movs	r3, #240	; 0xf0
 8002da2:	039b      	lsls	r3, r3, #14
 8002da4:	401a      	ands	r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d107      	bne.n	8002dbe <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	23c0      	movs	r3, #192	; 0xc0
 8002db2:	041b      	lsls	r3, r3, #16
 8002db4:	401a      	ands	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d001      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e000      	b.n	8002dc4 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 8002dc2:	2300      	movs	r3, #0
}
 8002dc4:	0018      	movs	r0, r3
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	b00a      	add	sp, #40	; 0x28
 8002dca:	bdb0      	pop	{r4, r5, r7, pc}
 8002dcc:	40021000 	.word	0x40021000

08002dd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dd0:	b5b0      	push	{r4, r5, r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e128      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de4:	4b96      	ldr	r3, [pc, #600]	; (8003040 <HAL_RCC_ClockConfig+0x270>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2201      	movs	r2, #1
 8002dea:	4013      	ands	r3, r2
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d91e      	bls.n	8002e30 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df2:	4b93      	ldr	r3, [pc, #588]	; (8003040 <HAL_RCC_ClockConfig+0x270>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	4393      	bics	r3, r2
 8002dfa:	0019      	movs	r1, r3
 8002dfc:	4b90      	ldr	r3, [pc, #576]	; (8003040 <HAL_RCC_ClockConfig+0x270>)
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	430a      	orrs	r2, r1
 8002e02:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002e04:	f7fe fa62 	bl	80012cc <HAL_GetTick>
 8002e08:	0003      	movs	r3, r0
 8002e0a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e0c:	e009      	b.n	8002e22 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e0e:	f7fe fa5d 	bl	80012cc <HAL_GetTick>
 8002e12:	0002      	movs	r2, r0
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	1ad3      	subs	r3, r2, r3
 8002e18:	4a8a      	ldr	r2, [pc, #552]	; (8003044 <HAL_RCC_ClockConfig+0x274>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d901      	bls.n	8002e22 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002e1e:	2303      	movs	r3, #3
 8002e20:	e109      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b87      	ldr	r3, [pc, #540]	; (8003040 <HAL_RCC_ClockConfig+0x270>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2201      	movs	r2, #1
 8002e28:	4013      	ands	r3, r2
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d1ee      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	2202      	movs	r2, #2
 8002e36:	4013      	ands	r3, r2
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e3a:	4b83      	ldr	r3, [pc, #524]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	22f0      	movs	r2, #240	; 0xf0
 8002e40:	4393      	bics	r3, r2
 8002e42:	0019      	movs	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	689a      	ldr	r2, [r3, #8]
 8002e48:	4b7f      	ldr	r3, [pc, #508]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002e4a:	430a      	orrs	r2, r1
 8002e4c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2201      	movs	r2, #1
 8002e54:	4013      	ands	r3, r2
 8002e56:	d100      	bne.n	8002e5a <HAL_RCC_ClockConfig+0x8a>
 8002e58:	e089      	b.n	8002f6e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d107      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e62:	4b79      	ldr	r3, [pc, #484]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	029b      	lsls	r3, r3, #10
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d120      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e0e1      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	2b03      	cmp	r3, #3
 8002e78:	d107      	bne.n	8002e8a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e7a:	4b73      	ldr	r3, [pc, #460]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	049b      	lsls	r3, r3, #18
 8002e82:	4013      	ands	r3, r2
 8002e84:	d114      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e0d5      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d106      	bne.n	8002ea0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e92:	4b6d      	ldr	r3, [pc, #436]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2204      	movs	r2, #4
 8002e98:	4013      	ands	r3, r2
 8002e9a:	d109      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e0ca      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea0:	4b69      	ldr	r3, [pc, #420]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	2380      	movs	r3, #128	; 0x80
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	d101      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e0c2      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eb0:	4b65      	ldr	r3, [pc, #404]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	4393      	bics	r3, r2
 8002eb8:	0019      	movs	r1, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685a      	ldr	r2, [r3, #4]
 8002ebe:	4b62      	ldr	r3, [pc, #392]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ec4:	f7fe fa02 	bl	80012cc <HAL_GetTick>
 8002ec8:	0003      	movs	r3, r0
 8002eca:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d111      	bne.n	8002ef8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ed4:	e009      	b.n	8002eea <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed6:	f7fe f9f9 	bl	80012cc <HAL_GetTick>
 8002eda:	0002      	movs	r2, r0
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	4a58      	ldr	r2, [pc, #352]	; (8003044 <HAL_RCC_ClockConfig+0x274>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e0a5      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002eea:	4b57      	ldr	r3, [pc, #348]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	220c      	movs	r2, #12
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b08      	cmp	r3, #8
 8002ef4:	d1ef      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x106>
 8002ef6:	e03a      	b.n	8002f6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d111      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f00:	e009      	b.n	8002f16 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f02:	f7fe f9e3 	bl	80012cc <HAL_GetTick>
 8002f06:	0002      	movs	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	4a4d      	ldr	r2, [pc, #308]	; (8003044 <HAL_RCC_ClockConfig+0x274>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e08f      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f16:	4b4c      	ldr	r3, [pc, #304]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	220c      	movs	r2, #12
 8002f1c:	4013      	ands	r3, r2
 8002f1e:	2b0c      	cmp	r3, #12
 8002f20:	d1ef      	bne.n	8002f02 <HAL_RCC_ClockConfig+0x132>
 8002f22:	e024      	b.n	8002f6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d11b      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f2c:	e009      	b.n	8002f42 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2e:	f7fe f9cd 	bl	80012cc <HAL_GetTick>
 8002f32:	0002      	movs	r2, r0
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	4a42      	ldr	r2, [pc, #264]	; (8003044 <HAL_RCC_ClockConfig+0x274>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e079      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f42:	4b41      	ldr	r3, [pc, #260]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002f44:	68db      	ldr	r3, [r3, #12]
 8002f46:	220c      	movs	r2, #12
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d1ef      	bne.n	8002f2e <HAL_RCC_ClockConfig+0x15e>
 8002f4e:	e00e      	b.n	8002f6e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f50:	f7fe f9bc 	bl	80012cc <HAL_GetTick>
 8002f54:	0002      	movs	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	4a3a      	ldr	r2, [pc, #232]	; (8003044 <HAL_RCC_ClockConfig+0x274>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d901      	bls.n	8002f64 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e068      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f64:	4b38      	ldr	r3, [pc, #224]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	220c      	movs	r2, #12
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	d1f0      	bne.n	8002f50 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f6e:	4b34      	ldr	r3, [pc, #208]	; (8003040 <HAL_RCC_ClockConfig+0x270>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2201      	movs	r2, #1
 8002f74:	4013      	ands	r3, r2
 8002f76:	683a      	ldr	r2, [r7, #0]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d21e      	bcs.n	8002fba <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f7c:	4b30      	ldr	r3, [pc, #192]	; (8003040 <HAL_RCC_ClockConfig+0x270>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2201      	movs	r2, #1
 8002f82:	4393      	bics	r3, r2
 8002f84:	0019      	movs	r1, r3
 8002f86:	4b2e      	ldr	r3, [pc, #184]	; (8003040 <HAL_RCC_ClockConfig+0x270>)
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f8e:	f7fe f99d 	bl	80012cc <HAL_GetTick>
 8002f92:	0003      	movs	r3, r0
 8002f94:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f96:	e009      	b.n	8002fac <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f98:	f7fe f998 	bl	80012cc <HAL_GetTick>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <HAL_RCC_ClockConfig+0x274>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d901      	bls.n	8002fac <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	e044      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fac:	4b24      	ldr	r3, [pc, #144]	; (8003040 <HAL_RCC_ClockConfig+0x270>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	683a      	ldr	r2, [r7, #0]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d1ee      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2204      	movs	r2, #4
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d009      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fc4:	4b20      	ldr	r3, [pc, #128]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a20      	ldr	r2, [pc, #128]	; (800304c <HAL_RCC_ClockConfig+0x27c>)
 8002fca:	4013      	ands	r3, r2
 8002fcc:	0019      	movs	r1, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2208      	movs	r2, #8
 8002fde:	4013      	ands	r3, r2
 8002fe0:	d00a      	beq.n	8002ff8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002fe2:	4b19      	ldr	r3, [pc, #100]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	4a1a      	ldr	r2, [pc, #104]	; (8003050 <HAL_RCC_ClockConfig+0x280>)
 8002fe8:	4013      	ands	r3, r2
 8002fea:	0019      	movs	r1, r3
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	691b      	ldr	r3, [r3, #16]
 8002ff0:	00da      	lsls	r2, r3, #3
 8002ff2:	4b15      	ldr	r3, [pc, #84]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002ff8:	f000 f832 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8002ffc:	0001      	movs	r1, r0
 8002ffe:	4b12      	ldr	r3, [pc, #72]	; (8003048 <HAL_RCC_ClockConfig+0x278>)
 8003000:	68db      	ldr	r3, [r3, #12]
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	220f      	movs	r2, #15
 8003006:	4013      	ands	r3, r2
 8003008:	4a12      	ldr	r2, [pc, #72]	; (8003054 <HAL_RCC_ClockConfig+0x284>)
 800300a:	5cd3      	ldrb	r3, [r2, r3]
 800300c:	000a      	movs	r2, r1
 800300e:	40da      	lsrs	r2, r3
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <HAL_RCC_ClockConfig+0x288>)
 8003012:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003014:	4b11      	ldr	r3, [pc, #68]	; (800305c <HAL_RCC_ClockConfig+0x28c>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	250b      	movs	r5, #11
 800301a:	197c      	adds	r4, r7, r5
 800301c:	0018      	movs	r0, r3
 800301e:	f7fe f90f 	bl	8001240 <HAL_InitTick>
 8003022:	0003      	movs	r3, r0
 8003024:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003026:	197b      	adds	r3, r7, r5
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800302e:	197b      	adds	r3, r7, r5
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	e000      	b.n	8003036 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003034:	2300      	movs	r3, #0
}
 8003036:	0018      	movs	r0, r3
 8003038:	46bd      	mov	sp, r7
 800303a:	b004      	add	sp, #16
 800303c:	bdb0      	pop	{r4, r5, r7, pc}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	40022000 	.word	0x40022000
 8003044:	00001388 	.word	0x00001388
 8003048:	40021000 	.word	0x40021000
 800304c:	fffff8ff 	.word	0xfffff8ff
 8003050:	ffffc7ff 	.word	0xffffc7ff
 8003054:	08004f68 	.word	0x08004f68
 8003058:	20000000 	.word	0x20000000
 800305c:	20000004 	.word	0x20000004

08003060 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003060:	b5b0      	push	{r4, r5, r7, lr}
 8003062:	b08e      	sub	sp, #56	; 0x38
 8003064:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003066:	4b4c      	ldr	r3, [pc, #304]	; (8003198 <HAL_RCC_GetSysClockFreq+0x138>)
 8003068:	68db      	ldr	r3, [r3, #12]
 800306a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800306c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800306e:	230c      	movs	r3, #12
 8003070:	4013      	ands	r3, r2
 8003072:	2b0c      	cmp	r3, #12
 8003074:	d014      	beq.n	80030a0 <HAL_RCC_GetSysClockFreq+0x40>
 8003076:	d900      	bls.n	800307a <HAL_RCC_GetSysClockFreq+0x1a>
 8003078:	e07b      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x112>
 800307a:	2b04      	cmp	r3, #4
 800307c:	d002      	beq.n	8003084 <HAL_RCC_GetSysClockFreq+0x24>
 800307e:	2b08      	cmp	r3, #8
 8003080:	d00b      	beq.n	800309a <HAL_RCC_GetSysClockFreq+0x3a>
 8003082:	e076      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003084:	4b44      	ldr	r3, [pc, #272]	; (8003198 <HAL_RCC_GetSysClockFreq+0x138>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2210      	movs	r2, #16
 800308a:	4013      	ands	r3, r2
 800308c:	d002      	beq.n	8003094 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800308e:	4b43      	ldr	r3, [pc, #268]	; (800319c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003090:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003092:	e07c      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003094:	4b42      	ldr	r3, [pc, #264]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003098:	e079      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800309a:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x140>)
 800309c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800309e:	e076      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80030a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a2:	0c9a      	lsrs	r2, r3, #18
 80030a4:	230f      	movs	r3, #15
 80030a6:	401a      	ands	r2, r3
 80030a8:	4b3e      	ldr	r3, [pc, #248]	; (80031a4 <HAL_RCC_GetSysClockFreq+0x144>)
 80030aa:	5c9b      	ldrb	r3, [r3, r2]
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80030ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030b0:	0d9a      	lsrs	r2, r3, #22
 80030b2:	2303      	movs	r3, #3
 80030b4:	4013      	ands	r3, r2
 80030b6:	3301      	adds	r3, #1
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ba:	4b37      	ldr	r3, [pc, #220]	; (8003198 <HAL_RCC_GetSysClockFreq+0x138>)
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	2380      	movs	r3, #128	; 0x80
 80030c0:	025b      	lsls	r3, r3, #9
 80030c2:	4013      	ands	r3, r2
 80030c4:	d01a      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80030c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	2300      	movs	r3, #0
 80030cc:	61fb      	str	r3, [r7, #28]
 80030ce:	4a34      	ldr	r2, [pc, #208]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x140>)
 80030d0:	2300      	movs	r3, #0
 80030d2:	69b8      	ldr	r0, [r7, #24]
 80030d4:	69f9      	ldr	r1, [r7, #28]
 80030d6:	f7fd f8d5 	bl	8000284 <__aeabi_lmul>
 80030da:	0002      	movs	r2, r0
 80030dc:	000b      	movs	r3, r1
 80030de:	0010      	movs	r0, r2
 80030e0:	0019      	movs	r1, r3
 80030e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e4:	613b      	str	r3, [r7, #16]
 80030e6:	2300      	movs	r3, #0
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f7fd f8a9 	bl	8000244 <__aeabi_uldivmod>
 80030f2:	0002      	movs	r2, r0
 80030f4:	000b      	movs	r3, r1
 80030f6:	0013      	movs	r3, r2
 80030f8:	637b      	str	r3, [r7, #52]	; 0x34
 80030fa:	e037      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80030fc:	4b26      	ldr	r3, [pc, #152]	; (8003198 <HAL_RCC_GetSysClockFreq+0x138>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2210      	movs	r2, #16
 8003102:	4013      	ands	r3, r2
 8003104:	d01a      	beq.n	800313c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	2300      	movs	r3, #0
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_RCC_GetSysClockFreq+0x13c>)
 8003110:	2300      	movs	r3, #0
 8003112:	68b8      	ldr	r0, [r7, #8]
 8003114:	68f9      	ldr	r1, [r7, #12]
 8003116:	f7fd f8b5 	bl	8000284 <__aeabi_lmul>
 800311a:	0002      	movs	r2, r0
 800311c:	000b      	movs	r3, r1
 800311e:	0010      	movs	r0, r2
 8003120:	0019      	movs	r1, r3
 8003122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003124:	603b      	str	r3, [r7, #0]
 8003126:	2300      	movs	r3, #0
 8003128:	607b      	str	r3, [r7, #4]
 800312a:	683a      	ldr	r2, [r7, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	f7fd f889 	bl	8000244 <__aeabi_uldivmod>
 8003132:	0002      	movs	r2, r0
 8003134:	000b      	movs	r3, r1
 8003136:	0013      	movs	r3, r2
 8003138:	637b      	str	r3, [r7, #52]	; 0x34
 800313a:	e017      	b.n	800316c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800313c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800313e:	0018      	movs	r0, r3
 8003140:	2300      	movs	r3, #0
 8003142:	0019      	movs	r1, r3
 8003144:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <HAL_RCC_GetSysClockFreq+0x140>)
 8003146:	2300      	movs	r3, #0
 8003148:	f7fd f89c 	bl	8000284 <__aeabi_lmul>
 800314c:	0002      	movs	r2, r0
 800314e:	000b      	movs	r3, r1
 8003150:	0010      	movs	r0, r2
 8003152:	0019      	movs	r1, r3
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	001c      	movs	r4, r3
 8003158:	2300      	movs	r3, #0
 800315a:	001d      	movs	r5, r3
 800315c:	0022      	movs	r2, r4
 800315e:	002b      	movs	r3, r5
 8003160:	f7fd f870 	bl	8000244 <__aeabi_uldivmod>
 8003164:	0002      	movs	r2, r0
 8003166:	000b      	movs	r3, r1
 8003168:	0013      	movs	r3, r2
 800316a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 800316c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800316e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003170:	e00d      	b.n	800318e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003172:	4b09      	ldr	r3, [pc, #36]	; (8003198 <HAL_RCC_GetSysClockFreq+0x138>)
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	0b5b      	lsrs	r3, r3, #13
 8003178:	2207      	movs	r2, #7
 800317a:	4013      	ands	r3, r2
 800317c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800317e:	6a3b      	ldr	r3, [r7, #32]
 8003180:	3301      	adds	r3, #1
 8003182:	2280      	movs	r2, #128	; 0x80
 8003184:	0212      	lsls	r2, r2, #8
 8003186:	409a      	lsls	r2, r3
 8003188:	0013      	movs	r3, r2
 800318a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800318c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800318e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003190:	0018      	movs	r0, r3
 8003192:	46bd      	mov	sp, r7
 8003194:	b00e      	add	sp, #56	; 0x38
 8003196:	bdb0      	pop	{r4, r5, r7, pc}
 8003198:	40021000 	.word	0x40021000
 800319c:	003d0900 	.word	0x003d0900
 80031a0:	00f42400 	.word	0x00f42400
 80031a4:	08004f80 	.word	0x08004f80

080031a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031ac:	4b02      	ldr	r3, [pc, #8]	; (80031b8 <HAL_RCC_GetHCLKFreq+0x10>)
 80031ae:	681b      	ldr	r3, [r3, #0]
}
 80031b0:	0018      	movs	r0, r3
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	46c0      	nop			; (mov r8, r8)
 80031b8:	20000000 	.word	0x20000000

080031bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031c0:	f7ff fff2 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031c4:	0001      	movs	r1, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c8:	68db      	ldr	r3, [r3, #12]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	2207      	movs	r2, #7
 80031ce:	4013      	ands	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	40d9      	lsrs	r1, r3
 80031d6:	000b      	movs	r3, r1
}
 80031d8:	0018      	movs	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08004f78 	.word	0x08004f78

080031e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80031ec:	f7ff ffdc 	bl	80031a8 <HAL_RCC_GetHCLKFreq>
 80031f0:	0001      	movs	r1, r0
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_GetPCLK2Freq+0x24>)
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	0adb      	lsrs	r3, r3, #11
 80031f8:	2207      	movs	r2, #7
 80031fa:	4013      	ands	r3, r2
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	40d9      	lsrs	r1, r3
 8003202:	000b      	movs	r3, r1
}
 8003204:	0018      	movs	r0, r3
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	40021000 	.word	0x40021000
 8003210:	08004f78 	.word	0x08004f78

08003214 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800321c:	2017      	movs	r0, #23
 800321e:	183b      	adds	r3, r7, r0
 8003220:	2200      	movs	r2, #0
 8003222:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	2220      	movs	r2, #32
 800322a:	4013      	ands	r3, r2
 800322c:	d100      	bne.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800322e:	e0c2      	b.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003230:	4b91      	ldr	r3, [pc, #580]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	055b      	lsls	r3, r3, #21
 8003238:	4013      	ands	r3, r2
 800323a:	d109      	bne.n	8003250 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800323c:	4b8e      	ldr	r3, [pc, #568]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800323e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003240:	4b8d      	ldr	r3, [pc, #564]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003242:	2180      	movs	r1, #128	; 0x80
 8003244:	0549      	lsls	r1, r1, #21
 8003246:	430a      	orrs	r2, r1
 8003248:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800324a:	183b      	adds	r3, r7, r0
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003250:	4b8a      	ldr	r3, [pc, #552]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	2380      	movs	r3, #128	; 0x80
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	4013      	ands	r3, r2
 800325a:	d11a      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800325c:	4b87      	ldr	r3, [pc, #540]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	4b86      	ldr	r3, [pc, #536]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	0049      	lsls	r1, r1, #1
 8003266:	430a      	orrs	r2, r1
 8003268:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800326a:	f7fe f82f 	bl	80012cc <HAL_GetTick>
 800326e:	0003      	movs	r3, r0
 8003270:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003272:	e008      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003274:	f7fe f82a 	bl	80012cc <HAL_GetTick>
 8003278:	0002      	movs	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e0f3      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b7d      	ldr	r3, [pc, #500]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	005b      	lsls	r3, r3, #1
 800328e:	4013      	ands	r3, r2
 8003290:	d0f0      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003292:	4b79      	ldr	r3, [pc, #484]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	23c0      	movs	r3, #192	; 0xc0
 8003298:	039b      	lsls	r3, r3, #14
 800329a:	4013      	ands	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685a      	ldr	r2, [r3, #4]
 80032a2:	23c0      	movs	r3, #192	; 0xc0
 80032a4:	039b      	lsls	r3, r3, #14
 80032a6:	4013      	ands	r3, r2
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d013      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	23c0      	movs	r3, #192	; 0xc0
 80032b4:	029b      	lsls	r3, r3, #10
 80032b6:	401a      	ands	r2, r3
 80032b8:	23c0      	movs	r3, #192	; 0xc0
 80032ba:	029b      	lsls	r3, r3, #10
 80032bc:	429a      	cmp	r2, r3
 80032be:	d10a      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80032c0:	4b6d      	ldr	r3, [pc, #436]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	2380      	movs	r3, #128	; 0x80
 80032c6:	029b      	lsls	r3, r3, #10
 80032c8:	401a      	ands	r2, r3
 80032ca:	2380      	movs	r3, #128	; 0x80
 80032cc:	029b      	lsls	r3, r3, #10
 80032ce:	429a      	cmp	r2, r3
 80032d0:	d101      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0cb      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80032d6:	4b68      	ldr	r3, [pc, #416]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80032da:	23c0      	movs	r3, #192	; 0xc0
 80032dc:	029b      	lsls	r3, r3, #10
 80032de:	4013      	ands	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d03b      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685a      	ldr	r2, [r3, #4]
 80032ec:	23c0      	movs	r3, #192	; 0xc0
 80032ee:	029b      	lsls	r3, r3, #10
 80032f0:	4013      	ands	r3, r2
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d033      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2220      	movs	r2, #32
 80032fe:	4013      	ands	r3, r2
 8003300:	d02e      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003302:	4b5d      	ldr	r3, [pc, #372]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003306:	4a5e      	ldr	r2, [pc, #376]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003308:	4013      	ands	r3, r2
 800330a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800330c:	4b5a      	ldr	r3, [pc, #360]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800330e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003310:	4b59      	ldr	r3, [pc, #356]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003312:	2180      	movs	r1, #128	; 0x80
 8003314:	0309      	lsls	r1, r1, #12
 8003316:	430a      	orrs	r2, r1
 8003318:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800331a:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800331c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800331e:	4b56      	ldr	r3, [pc, #344]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003320:	4958      	ldr	r1, [pc, #352]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8003322:	400a      	ands	r2, r1
 8003324:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003326:	4b54      	ldr	r3, [pc, #336]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003328:	68fa      	ldr	r2, [r7, #12]
 800332a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	2380      	movs	r3, #128	; 0x80
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4013      	ands	r3, r2
 8003334:	d014      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fd ffc9 	bl	80012cc <HAL_GetTick>
 800333a:	0003      	movs	r3, r0
 800333c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800333e:	e009      	b.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fd ffc4 	bl	80012cc <HAL_GetTick>
 8003344:	0002      	movs	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	4a4f      	ldr	r2, [pc, #316]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d901      	bls.n	8003354 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e08c      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003354:	4b48      	ldr	r3, [pc, #288]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003356:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003358:	2380      	movs	r3, #128	; 0x80
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4013      	ands	r3, r2
 800335e:	d0ef      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	23c0      	movs	r3, #192	; 0xc0
 8003366:	029b      	lsls	r3, r3, #10
 8003368:	401a      	ands	r2, r3
 800336a:	23c0      	movs	r3, #192	; 0xc0
 800336c:	029b      	lsls	r3, r3, #10
 800336e:	429a      	cmp	r2, r3
 8003370:	d10c      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x178>
 8003372:	4b41      	ldr	r3, [pc, #260]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a45      	ldr	r2, [pc, #276]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8003378:	4013      	ands	r3, r2
 800337a:	0019      	movs	r1, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	23c0      	movs	r3, #192	; 0xc0
 8003382:	039b      	lsls	r3, r3, #14
 8003384:	401a      	ands	r2, r3
 8003386:	4b3c      	ldr	r3, [pc, #240]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003388:	430a      	orrs	r2, r1
 800338a:	601a      	str	r2, [r3, #0]
 800338c:	4b3a      	ldr	r3, [pc, #232]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	685a      	ldr	r2, [r3, #4]
 8003394:	23c0      	movs	r3, #192	; 0xc0
 8003396:	029b      	lsls	r3, r3, #10
 8003398:	401a      	ands	r2, r3
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800339c:	430a      	orrs	r2, r1
 800339e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033a0:	2317      	movs	r3, #23
 80033a2:	18fb      	adds	r3, r7, r3
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d105      	bne.n	80033b6 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033aa:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ae:	4b32      	ldr	r3, [pc, #200]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b0:	4937      	ldr	r1, [pc, #220]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80033b2:	400a      	ands	r2, r1
 80033b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4013      	ands	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033c0:	4b2d      	ldr	r3, [pc, #180]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033c4:	2203      	movs	r2, #3
 80033c6:	4393      	bics	r3, r2
 80033c8:	0019      	movs	r1, r3
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	4b2a      	ldr	r3, [pc, #168]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033d0:	430a      	orrs	r2, r1
 80033d2:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2202      	movs	r2, #2
 80033da:	4013      	ands	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033de:	4b26      	ldr	r3, [pc, #152]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033e2:	220c      	movs	r2, #12
 80033e4:	4393      	bics	r3, r2
 80033e6:	0019      	movs	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	68da      	ldr	r2, [r3, #12]
 80033ec:	4b22      	ldr	r3, [pc, #136]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033ee:	430a      	orrs	r2, r1
 80033f0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2204      	movs	r2, #4
 80033f8:	4013      	ands	r3, r2
 80033fa:	d009      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80033fc:	4b1e      	ldr	r3, [pc, #120]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003400:	4a24      	ldr	r2, [pc, #144]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8003402:	4013      	ands	r3, r2
 8003404:	0019      	movs	r1, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691a      	ldr	r2, [r3, #16]
 800340a:	4b1b      	ldr	r3, [pc, #108]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800340c:	430a      	orrs	r2, r1
 800340e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2208      	movs	r2, #8
 8003416:	4013      	ands	r3, r2
 8003418:	d009      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800341a:	4b17      	ldr	r3, [pc, #92]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800341c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800341e:	4a1e      	ldr	r2, [pc, #120]	; (8003498 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	695a      	ldr	r2, [r3, #20]
 8003428:	4b13      	ldr	r3, [pc, #76]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800342a:	430a      	orrs	r2, r1
 800342c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681a      	ldr	r2, [r3, #0]
 8003432:	2380      	movs	r3, #128	; 0x80
 8003434:	005b      	lsls	r3, r3, #1
 8003436:	4013      	ands	r3, r2
 8003438:	d009      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800343a:	4b0f      	ldr	r3, [pc, #60]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	4a10      	ldr	r2, [pc, #64]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003440:	4013      	ands	r3, r2
 8003442:	0019      	movs	r1, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699a      	ldr	r2, [r3, #24]
 8003448:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800344a:	430a      	orrs	r2, r1
 800344c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2280      	movs	r2, #128	; 0x80
 8003454:	4013      	ands	r3, r2
 8003456:	d009      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800345a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345c:	4a0f      	ldr	r2, [pc, #60]	; (800349c <HAL_RCCEx_PeriphCLKConfig+0x288>)
 800345e:	4013      	ands	r3, r2
 8003460:	0019      	movs	r1, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003468:	430a      	orrs	r2, r1
 800346a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b006      	add	sp, #24
 8003474:	bd80      	pop	{r7, pc}
 8003476:	46c0      	nop			; (mov r8, r8)
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	fffcffff 	.word	0xfffcffff
 8003484:	fff7ffff 	.word	0xfff7ffff
 8003488:	00001388 	.word	0x00001388
 800348c:	ffcfffff 	.word	0xffcfffff
 8003490:	efffffff 	.word	0xefffffff
 8003494:	fffff3ff 	.word	0xfffff3ff
 8003498:	ffffcfff 	.word	0xffffcfff
 800349c:	fff3ffff 	.word	0xfff3ffff

080034a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b082      	sub	sp, #8
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e083      	b.n	80035ba <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	2382      	movs	r3, #130	; 0x82
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d009      	beq.n	80034da <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	61da      	str	r2, [r3, #28]
 80034cc:	e005      	b.n	80034da <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2251      	movs	r2, #81	; 0x51
 80034e4:	5c9b      	ldrb	r3, [r3, r2]
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d107      	bne.n	80034fc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2250      	movs	r2, #80	; 0x50
 80034f0:	2100      	movs	r1, #0
 80034f2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	0018      	movs	r0, r3
 80034f8:	f7fd fcda 	bl	8000eb0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2251      	movs	r2, #81	; 0x51
 8003500:	2102      	movs	r1, #2
 8003502:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2140      	movs	r1, #64	; 0x40
 8003510:	438a      	bics	r2, r1
 8003512:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	2382      	movs	r3, #130	; 0x82
 800351a:	005b      	lsls	r3, r3, #1
 800351c:	401a      	ands	r2, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6899      	ldr	r1, [r3, #8]
 8003522:	2384      	movs	r3, #132	; 0x84
 8003524:	021b      	lsls	r3, r3, #8
 8003526:	400b      	ands	r3, r1
 8003528:	431a      	orrs	r2, r3
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68d9      	ldr	r1, [r3, #12]
 800352e:	2380      	movs	r3, #128	; 0x80
 8003530:	011b      	lsls	r3, r3, #4
 8003532:	400b      	ands	r3, r1
 8003534:	431a      	orrs	r2, r3
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	691b      	ldr	r3, [r3, #16]
 800353a:	2102      	movs	r1, #2
 800353c:	400b      	ands	r3, r1
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	2101      	movs	r1, #1
 8003546:	400b      	ands	r3, r1
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6999      	ldr	r1, [r3, #24]
 800354e:	2380      	movs	r3, #128	; 0x80
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	400b      	ands	r3, r1
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69db      	ldr	r3, [r3, #28]
 800355a:	2138      	movs	r1, #56	; 0x38
 800355c:	400b      	ands	r3, r1
 800355e:	431a      	orrs	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a1b      	ldr	r3, [r3, #32]
 8003564:	2180      	movs	r1, #128	; 0x80
 8003566:	400b      	ands	r3, r1
 8003568:	431a      	orrs	r2, r3
 800356a:	0011      	movs	r1, r2
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003570:	2380      	movs	r3, #128	; 0x80
 8003572:	019b      	lsls	r3, r3, #6
 8003574:	401a      	ands	r2, r3
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	430a      	orrs	r2, r1
 800357c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	0c1b      	lsrs	r3, r3, #16
 8003584:	2204      	movs	r2, #4
 8003586:	4013      	ands	r3, r2
 8003588:	0019      	movs	r1, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	2210      	movs	r2, #16
 8003590:	401a      	ands	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	69da      	ldr	r2, [r3, #28]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <HAL_SPI_Init+0x124>)
 80035a6:	400a      	ands	r2, r1
 80035a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2251      	movs	r2, #81	; 0x51
 80035b4:	2101      	movs	r1, #1
 80035b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035b8:	2300      	movs	r3, #0
}
 80035ba:	0018      	movs	r0, r3
 80035bc:	46bd      	mov	sp, r7
 80035be:	b002      	add	sp, #8
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	46c0      	nop			; (mov r8, r8)
 80035c4:	fffff7ff 	.word	0xfffff7ff

080035c8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035e0:	69bb      	ldr	r3, [r7, #24]
 80035e2:	099b      	lsrs	r3, r3, #6
 80035e4:	001a      	movs	r2, r3
 80035e6:	2301      	movs	r3, #1
 80035e8:	4013      	ands	r3, r2
 80035ea:	d10f      	bne.n	800360c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80035ec:	69bb      	ldr	r3, [r7, #24]
 80035ee:	2201      	movs	r2, #1
 80035f0:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80035f2:	d00b      	beq.n	800360c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	099b      	lsrs	r3, r3, #6
 80035f8:	001a      	movs	r2, r3
 80035fa:	2301      	movs	r3, #1
 80035fc:	4013      	ands	r3, r2
 80035fe:	d005      	beq.n	800360c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	0010      	movs	r0, r2
 8003608:	4798      	blx	r3
    return;
 800360a:	e0d5      	b.n	80037b8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	085b      	lsrs	r3, r3, #1
 8003610:	001a      	movs	r2, r3
 8003612:	2301      	movs	r3, #1
 8003614:	4013      	ands	r3, r2
 8003616:	d00b      	beq.n	8003630 <HAL_SPI_IRQHandler+0x68>
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	09db      	lsrs	r3, r3, #7
 800361c:	001a      	movs	r2, r3
 800361e:	2301      	movs	r3, #1
 8003620:	4013      	ands	r3, r2
 8003622:	d005      	beq.n	8003630 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003628:	687a      	ldr	r2, [r7, #4]
 800362a:	0010      	movs	r0, r2
 800362c:	4798      	blx	r3
    return;
 800362e:	e0c3      	b.n	80037b8 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	095b      	lsrs	r3, r3, #5
 8003634:	001a      	movs	r2, r3
 8003636:	2301      	movs	r3, #1
 8003638:	4013      	ands	r3, r2
 800363a:	d10c      	bne.n	8003656 <HAL_SPI_IRQHandler+0x8e>
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	001a      	movs	r2, r3
 8003642:	2301      	movs	r3, #1
 8003644:	4013      	ands	r3, r2
 8003646:	d106      	bne.n	8003656 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003648:	69bb      	ldr	r3, [r7, #24]
 800364a:	0a1b      	lsrs	r3, r3, #8
 800364c:	001a      	movs	r2, r3
 800364e:	2301      	movs	r3, #1
 8003650:	4013      	ands	r3, r2
 8003652:	d100      	bne.n	8003656 <HAL_SPI_IRQHandler+0x8e>
 8003654:	e0b0      	b.n	80037b8 <HAL_SPI_IRQHandler+0x1f0>
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	095b      	lsrs	r3, r3, #5
 800365a:	001a      	movs	r2, r3
 800365c:	2301      	movs	r3, #1
 800365e:	4013      	ands	r3, r2
 8003660:	d100      	bne.n	8003664 <HAL_SPI_IRQHandler+0x9c>
 8003662:	e0a9      	b.n	80037b8 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	099b      	lsrs	r3, r3, #6
 8003668:	001a      	movs	r2, r3
 800366a:	2301      	movs	r3, #1
 800366c:	4013      	ands	r3, r2
 800366e:	d023      	beq.n	80036b8 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2251      	movs	r2, #81	; 0x51
 8003674:	5c9b      	ldrb	r3, [r3, r2]
 8003676:	b2db      	uxtb	r3, r3
 8003678:	2b03      	cmp	r3, #3
 800367a:	d011      	beq.n	80036a0 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003680:	2204      	movs	r2, #4
 8003682:	431a      	orrs	r2, r3
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	617b      	str	r3, [r7, #20]
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	689b      	ldr	r3, [r3, #8]
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	e00b      	b.n	80036b8 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	613b      	str	r3, [r7, #16]
 80036b4:	693b      	ldr	r3, [r7, #16]
        return;
 80036b6:	e07f      	b.n	80037b8 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	095b      	lsrs	r3, r3, #5
 80036bc:	001a      	movs	r2, r3
 80036be:	2301      	movs	r3, #1
 80036c0:	4013      	ands	r3, r2
 80036c2:	d014      	beq.n	80036ee <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c8:	2201      	movs	r2, #1
 80036ca:	431a      	orrs	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	60fb      	str	r3, [r7, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	2140      	movs	r1, #64	; 0x40
 80036e8:	438a      	bics	r2, r1
 80036ea:	601a      	str	r2, [r3, #0]
 80036ec:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	0a1b      	lsrs	r3, r3, #8
 80036f2:	001a      	movs	r2, r3
 80036f4:	2301      	movs	r3, #1
 80036f6:	4013      	ands	r3, r2
 80036f8:	d00c      	beq.n	8003714 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036fe:	2208      	movs	r2, #8
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003706:	2300      	movs	r3, #0
 8003708:	60bb      	str	r3, [r7, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	689b      	ldr	r3, [r3, #8]
 8003710:	60bb      	str	r3, [r7, #8]
 8003712:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003718:	2b00      	cmp	r3, #0
 800371a:	d04c      	beq.n	80037b6 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	685a      	ldr	r2, [r3, #4]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	21e0      	movs	r1, #224	; 0xe0
 8003728:	438a      	bics	r2, r1
 800372a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2251      	movs	r2, #81	; 0x51
 8003730:	2101      	movs	r1, #1
 8003732:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	2202      	movs	r2, #2
 8003738:	4013      	ands	r3, r2
 800373a:	d103      	bne.n	8003744 <HAL_SPI_IRQHandler+0x17c>
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	2201      	movs	r2, #1
 8003740:	4013      	ands	r3, r2
 8003742:	d032      	beq.n	80037aa <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	2103      	movs	r1, #3
 8003750:	438a      	bics	r2, r1
 8003752:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003760:	4a17      	ldr	r2, [pc, #92]	; (80037c0 <HAL_SPI_IRQHandler+0x1f8>)
 8003762:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003768:	0018      	movs	r0, r3
 800376a:	f7fd febb 	bl	80014e4 <HAL_DMA_Abort_IT>
 800376e:	1e03      	subs	r3, r0, #0
 8003770:	d005      	beq.n	800377e <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	2240      	movs	r2, #64	; 0x40
 8003778:	431a      	orrs	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003782:	2b00      	cmp	r3, #0
 8003784:	d016      	beq.n	80037b4 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378a:	4a0d      	ldr	r2, [pc, #52]	; (80037c0 <HAL_SPI_IRQHandler+0x1f8>)
 800378c:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003792:	0018      	movs	r0, r3
 8003794:	f7fd fea6 	bl	80014e4 <HAL_DMA_Abort_IT>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d00b      	beq.n	80037b4 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	2240      	movs	r2, #64	; 0x40
 80037a2:	431a      	orrs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80037a8:	e004      	b.n	80037b4 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	0018      	movs	r0, r3
 80037ae:	f000 f809 	bl	80037c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80037b2:	e000      	b.n	80037b6 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 80037b4:	46c0      	nop			; (mov r8, r8)
    return;
 80037b6:	46c0      	nop			; (mov r8, r8)
  }
}
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b008      	add	sp, #32
 80037bc:	bd80      	pop	{r7, pc}
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	080037d5 	.word	0x080037d5

080037c4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80037cc:	46c0      	nop			; (mov r8, r8)
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b002      	add	sp, #8
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	0018      	movs	r0, r3
 80037f2:	f7ff ffe7 	bl	80037c4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	46bd      	mov	sp, r7
 80037fa:	b004      	add	sp, #16
 80037fc:	bd80      	pop	{r7, pc}
	...

08003800 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e044      	b.n	800389c <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003816:	2b00      	cmp	r3, #0
 8003818:	d107      	bne.n	800382a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2274      	movs	r2, #116	; 0x74
 800381e:	2100      	movs	r1, #0
 8003820:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f7fd fbdd 	bl	8000fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2224      	movs	r2, #36	; 0x24
 800382e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2101      	movs	r1, #1
 800383c:	438a      	bics	r2, r1
 800383e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	0018      	movs	r0, r3
 8003844:	f000 f8d8 	bl	80039f8 <UART_SetConfig>
 8003848:	0003      	movs	r3, r0
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e024      	b.n	800389c <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003856:	2b00      	cmp	r3, #0
 8003858:	d003      	beq.n	8003862 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	0018      	movs	r0, r3
 800385e:	f000 fb6b 	bl	8003f38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	490d      	ldr	r1, [pc, #52]	; (80038a4 <HAL_UART_Init+0xa4>)
 800386e:	400a      	ands	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	212a      	movs	r1, #42	; 0x2a
 800387e:	438a      	bics	r2, r1
 8003880:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	2101      	movs	r1, #1
 800388e:	430a      	orrs	r2, r1
 8003890:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	0018      	movs	r0, r3
 8003896:	f000 fc03 	bl	80040a0 <UART_CheckIdleState>
 800389a:	0003      	movs	r3, r0
}
 800389c:	0018      	movs	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	b002      	add	sp, #8
 80038a2:	bd80      	pop	{r7, pc}
 80038a4:	ffffb7ff 	.word	0xffffb7ff

080038a8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b08a      	sub	sp, #40	; 0x28
 80038ac:	af02      	add	r7, sp, #8
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	603b      	str	r3, [r7, #0]
 80038b4:	1dbb      	adds	r3, r7, #6
 80038b6:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d000      	beq.n	80038c2 <HAL_UART_Transmit+0x1a>
 80038c0:	e095      	b.n	80039ee <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_UART_Transmit+0x28>
 80038c8:	1dbb      	adds	r3, r7, #6
 80038ca:	881b      	ldrh	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e08d      	b.n	80039f0 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	689a      	ldr	r2, [r3, #8]
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	015b      	lsls	r3, r3, #5
 80038dc:	429a      	cmp	r2, r3
 80038de:	d109      	bne.n	80038f4 <HAL_UART_Transmit+0x4c>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d105      	bne.n	80038f4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	2201      	movs	r2, #1
 80038ec:	4013      	ands	r3, r2
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e07d      	b.n	80039f0 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2274      	movs	r2, #116	; 0x74
 80038f8:	5c9b      	ldrb	r3, [r3, r2]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d101      	bne.n	8003902 <HAL_UART_Transmit+0x5a>
 80038fe:	2302      	movs	r3, #2
 8003900:	e076      	b.n	80039f0 <HAL_UART_Transmit+0x148>
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2274      	movs	r2, #116	; 0x74
 8003906:	2101      	movs	r1, #1
 8003908:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2280      	movs	r2, #128	; 0x80
 800390e:	2100      	movs	r1, #0
 8003910:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2221      	movs	r2, #33	; 0x21
 8003916:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003918:	f7fd fcd8 	bl	80012cc <HAL_GetTick>
 800391c:	0003      	movs	r3, r0
 800391e:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	1dba      	adds	r2, r7, #6
 8003924:	2150      	movs	r1, #80	; 0x50
 8003926:	8812      	ldrh	r2, [r2, #0]
 8003928:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	1dba      	adds	r2, r7, #6
 800392e:	2152      	movs	r1, #82	; 0x52
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	2380      	movs	r3, #128	; 0x80
 800393a:	015b      	lsls	r3, r3, #5
 800393c:	429a      	cmp	r2, r3
 800393e:	d108      	bne.n	8003952 <HAL_UART_Transmit+0xaa>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d104      	bne.n	8003952 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	61bb      	str	r3, [r7, #24]
 8003950:	e003      	b.n	800395a <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003956:	2300      	movs	r3, #0
 8003958:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2274      	movs	r2, #116	; 0x74
 800395e:	2100      	movs	r1, #0
 8003960:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8003962:	e02c      	b.n	80039be <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003964:	697a      	ldr	r2, [r7, #20]
 8003966:	68f8      	ldr	r0, [r7, #12]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	9300      	str	r3, [sp, #0]
 800396c:	0013      	movs	r3, r2
 800396e:	2200      	movs	r2, #0
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	f000 fbdd 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8003976:	1e03      	subs	r3, r0, #0
 8003978:	d001      	beq.n	800397e <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e038      	b.n	80039f0 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10b      	bne.n	800399c <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	881b      	ldrh	r3, [r3, #0]
 8003988:	001a      	movs	r2, r3
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	05d2      	lsls	r2, r2, #23
 8003990:	0dd2      	lsrs	r2, r2, #23
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003994:	69bb      	ldr	r3, [r7, #24]
 8003996:	3302      	adds	r3, #2
 8003998:	61bb      	str	r3, [r7, #24]
 800399a:	e007      	b.n	80039ac <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	781a      	ldrb	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039a6:	69fb      	ldr	r3, [r7, #28]
 80039a8:	3301      	adds	r3, #1
 80039aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	2252      	movs	r2, #82	; 0x52
 80039b0:	5a9b      	ldrh	r3, [r3, r2]
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	3b01      	subs	r3, #1
 80039b6:	b299      	uxth	r1, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2252      	movs	r2, #82	; 0x52
 80039bc:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2252      	movs	r2, #82	; 0x52
 80039c2:	5a9b      	ldrh	r3, [r3, r2]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1cc      	bne.n	8003964 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	0013      	movs	r3, r2
 80039d4:	2200      	movs	r2, #0
 80039d6:	2140      	movs	r1, #64	; 0x40
 80039d8:	f000 fbaa 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 80039dc:	1e03      	subs	r3, r0, #0
 80039de:	d001      	beq.n	80039e4 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e005      	b.n	80039f0 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2220      	movs	r2, #32
 80039e8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b008      	add	sp, #32
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039f8:	b5b0      	push	{r4, r5, r7, lr}
 80039fa:	b08e      	sub	sp, #56	; 0x38
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a00:	231a      	movs	r3, #26
 8003a02:	2218      	movs	r2, #24
 8003a04:	189b      	adds	r3, r3, r2
 8003a06:	19db      	adds	r3, r3, r7
 8003a08:	2200      	movs	r2, #0
 8003a0a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	689a      	ldr	r2, [r3, #8]
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	431a      	orrs	r2, r3
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	69db      	ldr	r3, [r3, #28]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a24:	69fb      	ldr	r3, [r7, #28]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4ac3      	ldr	r2, [pc, #780]	; (8003d38 <UART_SetConfig+0x340>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a36:	430a      	orrs	r2, r1
 8003a38:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4abe      	ldr	r2, [pc, #760]	; (8003d3c <UART_SetConfig+0x344>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	0019      	movs	r1, r3
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	68da      	ldr	r2, [r3, #12]
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4ab8      	ldr	r2, [pc, #736]	; (8003d40 <UART_SetConfig+0x348>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	6a1b      	ldr	r3, [r3, #32]
 8003a66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	4ab4      	ldr	r2, [pc, #720]	; (8003d44 <UART_SetConfig+0x34c>)
 8003a74:	4013      	ands	r3, r2
 8003a76:	0019      	movs	r1, r3
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a7e:	430a      	orrs	r2, r1
 8003a80:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4ab0      	ldr	r2, [pc, #704]	; (8003d48 <UART_SetConfig+0x350>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d131      	bne.n	8003af0 <UART_SetConfig+0xf8>
 8003a8c:	4baf      	ldr	r3, [pc, #700]	; (8003d4c <UART_SetConfig+0x354>)
 8003a8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a90:	2203      	movs	r2, #3
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b03      	cmp	r3, #3
 8003a96:	d01d      	beq.n	8003ad4 <UART_SetConfig+0xdc>
 8003a98:	d823      	bhi.n	8003ae2 <UART_SetConfig+0xea>
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d00c      	beq.n	8003ab8 <UART_SetConfig+0xc0>
 8003a9e:	d820      	bhi.n	8003ae2 <UART_SetConfig+0xea>
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <UART_SetConfig+0xb2>
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d00e      	beq.n	8003ac6 <UART_SetConfig+0xce>
 8003aa8:	e01b      	b.n	8003ae2 <UART_SetConfig+0xea>
 8003aaa:	231b      	movs	r3, #27
 8003aac:	2218      	movs	r2, #24
 8003aae:	189b      	adds	r3, r3, r2
 8003ab0:	19db      	adds	r3, r3, r7
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	701a      	strb	r2, [r3, #0]
 8003ab6:	e0b4      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003ab8:	231b      	movs	r3, #27
 8003aba:	2218      	movs	r2, #24
 8003abc:	189b      	adds	r3, r3, r2
 8003abe:	19db      	adds	r3, r3, r7
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	e0ad      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003ac6:	231b      	movs	r3, #27
 8003ac8:	2218      	movs	r2, #24
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	19db      	adds	r3, r3, r7
 8003ace:	2204      	movs	r2, #4
 8003ad0:	701a      	strb	r2, [r3, #0]
 8003ad2:	e0a6      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003ad4:	231b      	movs	r3, #27
 8003ad6:	2218      	movs	r2, #24
 8003ad8:	189b      	adds	r3, r3, r2
 8003ada:	19db      	adds	r3, r3, r7
 8003adc:	2208      	movs	r2, #8
 8003ade:	701a      	strb	r2, [r3, #0]
 8003ae0:	e09f      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003ae2:	231b      	movs	r3, #27
 8003ae4:	2218      	movs	r2, #24
 8003ae6:	189b      	adds	r3, r3, r2
 8003ae8:	19db      	adds	r3, r3, r7
 8003aea:	2210      	movs	r2, #16
 8003aec:	701a      	strb	r2, [r3, #0]
 8003aee:	e098      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a96      	ldr	r2, [pc, #600]	; (8003d50 <UART_SetConfig+0x358>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d131      	bne.n	8003b5e <UART_SetConfig+0x166>
 8003afa:	4b94      	ldr	r3, [pc, #592]	; (8003d4c <UART_SetConfig+0x354>)
 8003afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afe:	220c      	movs	r2, #12
 8003b00:	4013      	ands	r3, r2
 8003b02:	2b0c      	cmp	r3, #12
 8003b04:	d01d      	beq.n	8003b42 <UART_SetConfig+0x14a>
 8003b06:	d823      	bhi.n	8003b50 <UART_SetConfig+0x158>
 8003b08:	2b08      	cmp	r3, #8
 8003b0a:	d00c      	beq.n	8003b26 <UART_SetConfig+0x12e>
 8003b0c:	d820      	bhi.n	8003b50 <UART_SetConfig+0x158>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d002      	beq.n	8003b18 <UART_SetConfig+0x120>
 8003b12:	2b04      	cmp	r3, #4
 8003b14:	d00e      	beq.n	8003b34 <UART_SetConfig+0x13c>
 8003b16:	e01b      	b.n	8003b50 <UART_SetConfig+0x158>
 8003b18:	231b      	movs	r3, #27
 8003b1a:	2218      	movs	r2, #24
 8003b1c:	189b      	adds	r3, r3, r2
 8003b1e:	19db      	adds	r3, r3, r7
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
 8003b24:	e07d      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003b26:	231b      	movs	r3, #27
 8003b28:	2218      	movs	r2, #24
 8003b2a:	189b      	adds	r3, r3, r2
 8003b2c:	19db      	adds	r3, r3, r7
 8003b2e:	2202      	movs	r2, #2
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	e076      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003b34:	231b      	movs	r3, #27
 8003b36:	2218      	movs	r2, #24
 8003b38:	189b      	adds	r3, r3, r2
 8003b3a:	19db      	adds	r3, r3, r7
 8003b3c:	2204      	movs	r2, #4
 8003b3e:	701a      	strb	r2, [r3, #0]
 8003b40:	e06f      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003b42:	231b      	movs	r3, #27
 8003b44:	2218      	movs	r2, #24
 8003b46:	189b      	adds	r3, r3, r2
 8003b48:	19db      	adds	r3, r3, r7
 8003b4a:	2208      	movs	r2, #8
 8003b4c:	701a      	strb	r2, [r3, #0]
 8003b4e:	e068      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003b50:	231b      	movs	r3, #27
 8003b52:	2218      	movs	r2, #24
 8003b54:	189b      	adds	r3, r3, r2
 8003b56:	19db      	adds	r3, r3, r7
 8003b58:	2210      	movs	r2, #16
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	e061      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a7c      	ldr	r2, [pc, #496]	; (8003d54 <UART_SetConfig+0x35c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d106      	bne.n	8003b76 <UART_SetConfig+0x17e>
 8003b68:	231b      	movs	r3, #27
 8003b6a:	2218      	movs	r2, #24
 8003b6c:	189b      	adds	r3, r3, r2
 8003b6e:	19db      	adds	r3, r3, r7
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
 8003b74:	e055      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a77      	ldr	r2, [pc, #476]	; (8003d58 <UART_SetConfig+0x360>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d106      	bne.n	8003b8e <UART_SetConfig+0x196>
 8003b80:	231b      	movs	r3, #27
 8003b82:	2218      	movs	r2, #24
 8003b84:	189b      	adds	r3, r3, r2
 8003b86:	19db      	adds	r3, r3, r7
 8003b88:	2200      	movs	r2, #0
 8003b8a:	701a      	strb	r2, [r3, #0]
 8003b8c:	e049      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a6b      	ldr	r2, [pc, #428]	; (8003d40 <UART_SetConfig+0x348>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d13e      	bne.n	8003c16 <UART_SetConfig+0x21e>
 8003b98:	4b6c      	ldr	r3, [pc, #432]	; (8003d4c <UART_SetConfig+0x354>)
 8003b9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b9c:	23c0      	movs	r3, #192	; 0xc0
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	22c0      	movs	r2, #192	; 0xc0
 8003ba4:	0112      	lsls	r2, r2, #4
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d027      	beq.n	8003bfa <UART_SetConfig+0x202>
 8003baa:	22c0      	movs	r2, #192	; 0xc0
 8003bac:	0112      	lsls	r2, r2, #4
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d82a      	bhi.n	8003c08 <UART_SetConfig+0x210>
 8003bb2:	2280      	movs	r2, #128	; 0x80
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d011      	beq.n	8003bde <UART_SetConfig+0x1e6>
 8003bba:	2280      	movs	r2, #128	; 0x80
 8003bbc:	0112      	lsls	r2, r2, #4
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d822      	bhi.n	8003c08 <UART_SetConfig+0x210>
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d004      	beq.n	8003bd0 <UART_SetConfig+0x1d8>
 8003bc6:	2280      	movs	r2, #128	; 0x80
 8003bc8:	00d2      	lsls	r2, r2, #3
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00e      	beq.n	8003bec <UART_SetConfig+0x1f4>
 8003bce:	e01b      	b.n	8003c08 <UART_SetConfig+0x210>
 8003bd0:	231b      	movs	r3, #27
 8003bd2:	2218      	movs	r2, #24
 8003bd4:	189b      	adds	r3, r3, r2
 8003bd6:	19db      	adds	r3, r3, r7
 8003bd8:	2200      	movs	r2, #0
 8003bda:	701a      	strb	r2, [r3, #0]
 8003bdc:	e021      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003bde:	231b      	movs	r3, #27
 8003be0:	2218      	movs	r2, #24
 8003be2:	189b      	adds	r3, r3, r2
 8003be4:	19db      	adds	r3, r3, r7
 8003be6:	2202      	movs	r2, #2
 8003be8:	701a      	strb	r2, [r3, #0]
 8003bea:	e01a      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003bec:	231b      	movs	r3, #27
 8003bee:	2218      	movs	r2, #24
 8003bf0:	189b      	adds	r3, r3, r2
 8003bf2:	19db      	adds	r3, r3, r7
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	701a      	strb	r2, [r3, #0]
 8003bf8:	e013      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003bfa:	231b      	movs	r3, #27
 8003bfc:	2218      	movs	r2, #24
 8003bfe:	189b      	adds	r3, r3, r2
 8003c00:	19db      	adds	r3, r3, r7
 8003c02:	2208      	movs	r2, #8
 8003c04:	701a      	strb	r2, [r3, #0]
 8003c06:	e00c      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003c08:	231b      	movs	r3, #27
 8003c0a:	2218      	movs	r2, #24
 8003c0c:	189b      	adds	r3, r3, r2
 8003c0e:	19db      	adds	r3, r3, r7
 8003c10:	2210      	movs	r2, #16
 8003c12:	701a      	strb	r2, [r3, #0]
 8003c14:	e005      	b.n	8003c22 <UART_SetConfig+0x22a>
 8003c16:	231b      	movs	r3, #27
 8003c18:	2218      	movs	r2, #24
 8003c1a:	189b      	adds	r3, r3, r2
 8003c1c:	19db      	adds	r3, r3, r7
 8003c1e:	2210      	movs	r2, #16
 8003c20:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a46      	ldr	r2, [pc, #280]	; (8003d40 <UART_SetConfig+0x348>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d000      	beq.n	8003c2e <UART_SetConfig+0x236>
 8003c2c:	e09a      	b.n	8003d64 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c2e:	231b      	movs	r3, #27
 8003c30:	2218      	movs	r2, #24
 8003c32:	189b      	adds	r3, r3, r2
 8003c34:	19db      	adds	r3, r3, r7
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d01d      	beq.n	8003c78 <UART_SetConfig+0x280>
 8003c3c:	dc20      	bgt.n	8003c80 <UART_SetConfig+0x288>
 8003c3e:	2b04      	cmp	r3, #4
 8003c40:	d015      	beq.n	8003c6e <UART_SetConfig+0x276>
 8003c42:	dc1d      	bgt.n	8003c80 <UART_SetConfig+0x288>
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d002      	beq.n	8003c4e <UART_SetConfig+0x256>
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d005      	beq.n	8003c58 <UART_SetConfig+0x260>
 8003c4c:	e018      	b.n	8003c80 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c4e:	f7ff fab5 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8003c52:	0003      	movs	r3, r0
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c56:	e01c      	b.n	8003c92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c58:	4b3c      	ldr	r3, [pc, #240]	; (8003d4c <UART_SetConfig+0x354>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2210      	movs	r2, #16
 8003c5e:	4013      	ands	r3, r2
 8003c60:	d002      	beq.n	8003c68 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003c62:	4b3e      	ldr	r3, [pc, #248]	; (8003d5c <UART_SetConfig+0x364>)
 8003c64:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003c66:	e014      	b.n	8003c92 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8003c68:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <UART_SetConfig+0x368>)
 8003c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c6c:	e011      	b.n	8003c92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c6e:	f7ff f9f7 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8003c72:	0003      	movs	r3, r0
 8003c74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c76:	e00c      	b.n	8003c92 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003c7e:	e008      	b.n	8003c92 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003c84:	231a      	movs	r3, #26
 8003c86:	2218      	movs	r2, #24
 8003c88:	189b      	adds	r3, r3, r2
 8003c8a:	19db      	adds	r3, r3, r7
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	701a      	strb	r2, [r3, #0]
        break;
 8003c90:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d100      	bne.n	8003c9a <UART_SetConfig+0x2a2>
 8003c98:	e134      	b.n	8003f04 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c9a:	69fb      	ldr	r3, [r7, #28]
 8003c9c:	685a      	ldr	r2, [r3, #4]
 8003c9e:	0013      	movs	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	189b      	adds	r3, r3, r2
 8003ca4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d305      	bcc.n	8003cb6 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003cb0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d906      	bls.n	8003cc4 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8003cb6:	231a      	movs	r3, #26
 8003cb8:	2218      	movs	r2, #24
 8003cba:	189b      	adds	r3, r3, r2
 8003cbc:	19db      	adds	r3, r3, r7
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]
 8003cc2:	e11f      	b.n	8003f04 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	6939      	ldr	r1, [r7, #16]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	000b      	movs	r3, r1
 8003cd2:	0e1b      	lsrs	r3, r3, #24
 8003cd4:	0010      	movs	r0, r2
 8003cd6:	0205      	lsls	r5, r0, #8
 8003cd8:	431d      	orrs	r5, r3
 8003cda:	000b      	movs	r3, r1
 8003cdc:	021c      	lsls	r4, r3, #8
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	085b      	lsrs	r3, r3, #1
 8003ce4:	60bb      	str	r3, [r7, #8]
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	60fb      	str	r3, [r7, #12]
 8003cea:	68b8      	ldr	r0, [r7, #8]
 8003cec:	68f9      	ldr	r1, [r7, #12]
 8003cee:	1900      	adds	r0, r0, r4
 8003cf0:	4169      	adcs	r1, r5
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	603b      	str	r3, [r7, #0]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	607b      	str	r3, [r7, #4]
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	f7fc faa0 	bl	8000244 <__aeabi_uldivmod>
 8003d04:	0002      	movs	r2, r0
 8003d06:	000b      	movs	r3, r1
 8003d08:	0013      	movs	r3, r2
 8003d0a:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d0e:	23c0      	movs	r3, #192	; 0xc0
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d309      	bcc.n	8003d2a <UART_SetConfig+0x332>
 8003d16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	035b      	lsls	r3, r3, #13
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d204      	bcs.n	8003d2a <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d26:	60da      	str	r2, [r3, #12]
 8003d28:	e0ec      	b.n	8003f04 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003d2a:	231a      	movs	r3, #26
 8003d2c:	2218      	movs	r2, #24
 8003d2e:	189b      	adds	r3, r3, r2
 8003d30:	19db      	adds	r3, r3, r7
 8003d32:	2201      	movs	r2, #1
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	e0e5      	b.n	8003f04 <UART_SetConfig+0x50c>
 8003d38:	efff69f3 	.word	0xefff69f3
 8003d3c:	ffffcfff 	.word	0xffffcfff
 8003d40:	40004800 	.word	0x40004800
 8003d44:	fffff4ff 	.word	0xfffff4ff
 8003d48:	40013800 	.word	0x40013800
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	40004400 	.word	0x40004400
 8003d54:	40004c00 	.word	0x40004c00
 8003d58:	40005000 	.word	0x40005000
 8003d5c:	003d0900 	.word	0x003d0900
 8003d60:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	69da      	ldr	r2, [r3, #28]
 8003d68:	2380      	movs	r3, #128	; 0x80
 8003d6a:	021b      	lsls	r3, r3, #8
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d000      	beq.n	8003d72 <UART_SetConfig+0x37a>
 8003d70:	e071      	b.n	8003e56 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003d72:	231b      	movs	r3, #27
 8003d74:	2218      	movs	r2, #24
 8003d76:	189b      	adds	r3, r3, r2
 8003d78:	19db      	adds	r3, r3, r7
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d822      	bhi.n	8003dc6 <UART_SetConfig+0x3ce>
 8003d80:	009a      	lsls	r2, r3, #2
 8003d82:	4b68      	ldr	r3, [pc, #416]	; (8003f24 <UART_SetConfig+0x52c>)
 8003d84:	18d3      	adds	r3, r2, r3
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d8a:	f7ff fa17 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8003d8e:	0003      	movs	r3, r0
 8003d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d92:	e021      	b.n	8003dd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d94:	f7ff fa28 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8003d98:	0003      	movs	r3, r0
 8003d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003d9c:	e01c      	b.n	8003dd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d9e:	4b62      	ldr	r3, [pc, #392]	; (8003f28 <UART_SetConfig+0x530>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2210      	movs	r2, #16
 8003da4:	4013      	ands	r3, r2
 8003da6:	d002      	beq.n	8003dae <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003da8:	4b60      	ldr	r3, [pc, #384]	; (8003f2c <UART_SetConfig+0x534>)
 8003daa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003dac:	e014      	b.n	8003dd8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8003dae:	4b60      	ldr	r3, [pc, #384]	; (8003f30 <UART_SetConfig+0x538>)
 8003db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003db2:	e011      	b.n	8003dd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db4:	f7ff f954 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8003db8:	0003      	movs	r3, r0
 8003dba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dbc:	e00c      	b.n	8003dd8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	021b      	lsls	r3, r3, #8
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003dc4:	e008      	b.n	8003dd8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003dca:	231a      	movs	r3, #26
 8003dcc:	2218      	movs	r2, #24
 8003dce:	189b      	adds	r3, r3, r2
 8003dd0:	19db      	adds	r3, r3, r7
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	701a      	strb	r2, [r3, #0]
        break;
 8003dd6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d100      	bne.n	8003de0 <UART_SetConfig+0x3e8>
 8003dde:	e091      	b.n	8003f04 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003de2:	005a      	lsls	r2, r3, #1
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	085b      	lsrs	r3, r3, #1
 8003dea:	18d2      	adds	r2, r2, r3
 8003dec:	69fb      	ldr	r3, [r7, #28]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	0019      	movs	r1, r3
 8003df2:	0010      	movs	r0, r2
 8003df4:	f7fc f99a 	bl	800012c <__udivsi3>
 8003df8:	0003      	movs	r3, r0
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e00:	2b0f      	cmp	r3, #15
 8003e02:	d921      	bls.n	8003e48 <UART_SetConfig+0x450>
 8003e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003e06:	2380      	movs	r3, #128	; 0x80
 8003e08:	025b      	lsls	r3, r3, #9
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d21c      	bcs.n	8003e48 <UART_SetConfig+0x450>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	200e      	movs	r0, #14
 8003e14:	2418      	movs	r4, #24
 8003e16:	1903      	adds	r3, r0, r4
 8003e18:	19db      	adds	r3, r3, r7
 8003e1a:	210f      	movs	r1, #15
 8003e1c:	438a      	bics	r2, r1
 8003e1e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e22:	085b      	lsrs	r3, r3, #1
 8003e24:	b29b      	uxth	r3, r3
 8003e26:	2207      	movs	r2, #7
 8003e28:	4013      	ands	r3, r2
 8003e2a:	b299      	uxth	r1, r3
 8003e2c:	1903      	adds	r3, r0, r4
 8003e2e:	19db      	adds	r3, r3, r7
 8003e30:	1902      	adds	r2, r0, r4
 8003e32:	19d2      	adds	r2, r2, r7
 8003e34:	8812      	ldrh	r2, [r2, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	1902      	adds	r2, r0, r4
 8003e40:	19d2      	adds	r2, r2, r7
 8003e42:	8812      	ldrh	r2, [r2, #0]
 8003e44:	60da      	str	r2, [r3, #12]
 8003e46:	e05d      	b.n	8003f04 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e48:	231a      	movs	r3, #26
 8003e4a:	2218      	movs	r2, #24
 8003e4c:	189b      	adds	r3, r3, r2
 8003e4e:	19db      	adds	r3, r3, r7
 8003e50:	2201      	movs	r2, #1
 8003e52:	701a      	strb	r2, [r3, #0]
 8003e54:	e056      	b.n	8003f04 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e56:	231b      	movs	r3, #27
 8003e58:	2218      	movs	r2, #24
 8003e5a:	189b      	adds	r3, r3, r2
 8003e5c:	19db      	adds	r3, r3, r7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b08      	cmp	r3, #8
 8003e62:	d822      	bhi.n	8003eaa <UART_SetConfig+0x4b2>
 8003e64:	009a      	lsls	r2, r3, #2
 8003e66:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <UART_SetConfig+0x53c>)
 8003e68:	18d3      	adds	r3, r2, r3
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6e:	f7ff f9a5 	bl	80031bc <HAL_RCC_GetPCLK1Freq>
 8003e72:	0003      	movs	r3, r0
 8003e74:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e76:	e021      	b.n	8003ebc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7ff f9b6 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	0003      	movs	r3, r0
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e80:	e01c      	b.n	8003ebc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e82:	4b29      	ldr	r3, [pc, #164]	; (8003f28 <UART_SetConfig+0x530>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2210      	movs	r2, #16
 8003e88:	4013      	ands	r3, r2
 8003e8a:	d002      	beq.n	8003e92 <UART_SetConfig+0x49a>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003e8c:	4b27      	ldr	r3, [pc, #156]	; (8003f2c <UART_SetConfig+0x534>)
 8003e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003e90:	e014      	b.n	8003ebc <UART_SetConfig+0x4c4>
          pclk = (uint32_t) HSI_VALUE;
 8003e92:	4b27      	ldr	r3, [pc, #156]	; (8003f30 <UART_SetConfig+0x538>)
 8003e94:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003e96:	e011      	b.n	8003ebc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e98:	f7ff f8e2 	bl	8003060 <HAL_RCC_GetSysClockFreq>
 8003e9c:	0003      	movs	r3, r0
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ea0:	e00c      	b.n	8003ebc <UART_SetConfig+0x4c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea2:	2380      	movs	r3, #128	; 0x80
 8003ea4:	021b      	lsls	r3, r3, #8
 8003ea6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003ea8:	e008      	b.n	8003ebc <UART_SetConfig+0x4c4>
      default:
        pclk = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003eae:	231a      	movs	r3, #26
 8003eb0:	2218      	movs	r2, #24
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	19db      	adds	r3, r3, r7
 8003eb6:	2201      	movs	r2, #1
 8003eb8:	701a      	strb	r2, [r3, #0]
        break;
 8003eba:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d020      	beq.n	8003f04 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	085a      	lsrs	r2, r3, #1
 8003ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eca:	18d2      	adds	r2, r2, r3
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	0019      	movs	r1, r3
 8003ed2:	0010      	movs	r0, r2
 8003ed4:	f7fc f92a 	bl	800012c <__udivsi3>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee0:	2b0f      	cmp	r3, #15
 8003ee2:	d909      	bls.n	8003ef8 <UART_SetConfig+0x500>
 8003ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ee6:	2380      	movs	r3, #128	; 0x80
 8003ee8:	025b      	lsls	r3, r3, #9
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d204      	bcs.n	8003ef8 <UART_SetConfig+0x500>
      {
        huart->Instance->BRR = usartdiv;
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ef4:	60da      	str	r2, [r3, #12]
 8003ef6:	e005      	b.n	8003f04 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ef8:	231a      	movs	r3, #26
 8003efa:	2218      	movs	r2, #24
 8003efc:	189b      	adds	r3, r3, r2
 8003efe:	19db      	adds	r3, r3, r7
 8003f00:	2201      	movs	r2, #1
 8003f02:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	2200      	movs	r2, #0
 8003f08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f10:	231a      	movs	r3, #26
 8003f12:	2218      	movs	r2, #24
 8003f14:	189b      	adds	r3, r3, r2
 8003f16:	19db      	adds	r3, r3, r7
 8003f18:	781b      	ldrb	r3, [r3, #0]
}
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	b00e      	add	sp, #56	; 0x38
 8003f20:	bdb0      	pop	{r4, r5, r7, pc}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	08004f8c 	.word	0x08004f8c
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	003d0900 	.word	0x003d0900
 8003f30:	00f42400 	.word	0x00f42400
 8003f34:	08004fb0 	.word	0x08004fb0

08003f38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f44:	2201      	movs	r2, #1
 8003f46:	4013      	ands	r3, r2
 8003f48:	d00b      	beq.n	8003f62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	4a4a      	ldr	r2, [pc, #296]	; (800407c <UART_AdvFeatureConfig+0x144>)
 8003f52:	4013      	ands	r3, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	2202      	movs	r2, #2
 8003f68:	4013      	ands	r3, r2
 8003f6a:	d00b      	beq.n	8003f84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4a43      	ldr	r2, [pc, #268]	; (8004080 <UART_AdvFeatureConfig+0x148>)
 8003f74:	4013      	ands	r3, r2
 8003f76:	0019      	movs	r1, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2204      	movs	r2, #4
 8003f8a:	4013      	ands	r3, r2
 8003f8c:	d00b      	beq.n	8003fa6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a3b      	ldr	r2, [pc, #236]	; (8004084 <UART_AdvFeatureConfig+0x14c>)
 8003f96:	4013      	ands	r3, r2
 8003f98:	0019      	movs	r1, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	430a      	orrs	r2, r1
 8003fa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	2208      	movs	r2, #8
 8003fac:	4013      	ands	r3, r2
 8003fae:	d00b      	beq.n	8003fc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	4a34      	ldr	r2, [pc, #208]	; (8004088 <UART_AdvFeatureConfig+0x150>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	0019      	movs	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fcc:	2210      	movs	r2, #16
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d00b      	beq.n	8003fea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a2c      	ldr	r2, [pc, #176]	; (800408c <UART_AdvFeatureConfig+0x154>)
 8003fda:	4013      	ands	r3, r2
 8003fdc:	0019      	movs	r1, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fee:	2220      	movs	r2, #32
 8003ff0:	4013      	ands	r3, r2
 8003ff2:	d00b      	beq.n	800400c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	689b      	ldr	r3, [r3, #8]
 8003ffa:	4a25      	ldr	r2, [pc, #148]	; (8004090 <UART_AdvFeatureConfig+0x158>)
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	0019      	movs	r1, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	2240      	movs	r2, #64	; 0x40
 8004012:	4013      	ands	r3, r2
 8004014:	d01d      	beq.n	8004052 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4a1d      	ldr	r2, [pc, #116]	; (8004094 <UART_AdvFeatureConfig+0x15c>)
 800401e:	4013      	ands	r3, r2
 8004020:	0019      	movs	r1, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	430a      	orrs	r2, r1
 800402c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004032:	2380      	movs	r3, #128	; 0x80
 8004034:	035b      	lsls	r3, r3, #13
 8004036:	429a      	cmp	r2, r3
 8004038:	d10b      	bne.n	8004052 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <UART_AdvFeatureConfig+0x160>)
 8004042:	4013      	ands	r3, r2
 8004044:	0019      	movs	r1, r3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004056:	2280      	movs	r2, #128	; 0x80
 8004058:	4013      	ands	r3, r2
 800405a:	d00b      	beq.n	8004074 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <UART_AdvFeatureConfig+0x164>)
 8004064:	4013      	ands	r3, r2
 8004066:	0019      	movs	r1, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	46bd      	mov	sp, r7
 8004078:	b002      	add	sp, #8
 800407a:	bd80      	pop	{r7, pc}
 800407c:	fffdffff 	.word	0xfffdffff
 8004080:	fffeffff 	.word	0xfffeffff
 8004084:	fffbffff 	.word	0xfffbffff
 8004088:	ffff7fff 	.word	0xffff7fff
 800408c:	ffffefff 	.word	0xffffefff
 8004090:	ffffdfff 	.word	0xffffdfff
 8004094:	ffefffff 	.word	0xffefffff
 8004098:	ff9fffff 	.word	0xff9fffff
 800409c:	fff7ffff 	.word	0xfff7ffff

080040a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af02      	add	r7, sp, #8
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2280      	movs	r2, #128	; 0x80
 80040ac:	2100      	movs	r1, #0
 80040ae:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040b0:	f7fd f90c 	bl	80012cc <HAL_GetTick>
 80040b4:	0003      	movs	r3, r0
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2208      	movs	r2, #8
 80040c0:	4013      	ands	r3, r2
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d10c      	bne.n	80040e0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2280      	movs	r2, #128	; 0x80
 80040ca:	0391      	lsls	r1, r2, #14
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	4a17      	ldr	r2, [pc, #92]	; (800412c <UART_CheckIdleState+0x8c>)
 80040d0:	9200      	str	r2, [sp, #0]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f000 f82c 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d001      	beq.n	80040e0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e021      	b.n	8004124 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2204      	movs	r2, #4
 80040e8:	4013      	ands	r3, r2
 80040ea:	2b04      	cmp	r3, #4
 80040ec:	d10c      	bne.n	8004108 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2280      	movs	r2, #128	; 0x80
 80040f2:	03d1      	lsls	r1, r2, #15
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	4a0d      	ldr	r2, [pc, #52]	; (800412c <UART_CheckIdleState+0x8c>)
 80040f8:	9200      	str	r2, [sp, #0]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f000 f818 	bl	8004130 <UART_WaitOnFlagUntilTimeout>
 8004100:	1e03      	subs	r3, r0, #0
 8004102:	d001      	beq.n	8004108 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	e00d      	b.n	8004124 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2220      	movs	r2, #32
 8004112:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2274      	movs	r2, #116	; 0x74
 800411e:	2100      	movs	r1, #0
 8004120:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b004      	add	sp, #16
 800412a:	bd80      	pop	{r7, pc}
 800412c:	01ffffff 	.word	0x01ffffff

08004130 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b094      	sub	sp, #80	; 0x50
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	603b      	str	r3, [r7, #0]
 800413c:	1dfb      	adds	r3, r7, #7
 800413e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004140:	e0a3      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004142:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004144:	3301      	adds	r3, #1
 8004146:	d100      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004148:	e09f      	b.n	800428a <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800414a:	f7fd f8bf 	bl	80012cc <HAL_GetTick>
 800414e:	0002      	movs	r2, r0
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004156:	429a      	cmp	r2, r3
 8004158:	d302      	bcc.n	8004160 <UART_WaitOnFlagUntilTimeout+0x30>
 800415a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800415c:	2b00      	cmp	r3, #0
 800415e:	d13d      	bne.n	80041dc <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004160:	f3ef 8310 	mrs	r3, PRIMASK
 8004164:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004166:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004168:	647b      	str	r3, [r7, #68]	; 0x44
 800416a:	2301      	movs	r3, #1
 800416c:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004170:	f383 8810 	msr	PRIMASK, r3
}
 8004174:	46c0      	nop			; (mov r8, r8)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	494c      	ldr	r1, [pc, #304]	; (80042b4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004182:	400a      	ands	r2, r1
 8004184:	601a      	str	r2, [r3, #0]
 8004186:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800418a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800418c:	f383 8810 	msr	PRIMASK, r3
}
 8004190:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004192:	f3ef 8310 	mrs	r3, PRIMASK
 8004196:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800419a:	643b      	str	r3, [r7, #64]	; 0x40
 800419c:	2301      	movs	r3, #1
 800419e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689a      	ldr	r2, [r3, #8]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2101      	movs	r1, #1
 80041b4:	438a      	bics	r2, r1
 80041b6:	609a      	str	r2, [r3, #8]
 80041b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041be:	f383 8810 	msr	PRIMASK, r3
}
 80041c2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2220      	movs	r2, #32
 80041c8:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2220      	movs	r2, #32
 80041ce:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	2274      	movs	r2, #116	; 0x74
 80041d4:	2100      	movs	r1, #0
 80041d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	e067      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	2204      	movs	r2, #4
 80041e4:	4013      	ands	r3, r2
 80041e6:	d050      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	2380      	movs	r3, #128	; 0x80
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	401a      	ands	r2, r3
 80041f4:	2380      	movs	r3, #128	; 0x80
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d146      	bne.n	800428a <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2280      	movs	r2, #128	; 0x80
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004206:	f3ef 8310 	mrs	r3, PRIMASK
 800420a:	613b      	str	r3, [r7, #16]
  return(result);
 800420c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800420e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004210:	2301      	movs	r3, #1
 8004212:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f383 8810 	msr	PRIMASK, r3
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4923      	ldr	r1, [pc, #140]	; (80042b4 <UART_WaitOnFlagUntilTimeout+0x184>)
 8004228:	400a      	ands	r2, r1
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800422e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	f383 8810 	msr	PRIMASK, r3
}
 8004236:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004238:	f3ef 8310 	mrs	r3, PRIMASK
 800423c:	61fb      	str	r3, [r7, #28]
  return(result);
 800423e:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004240:	64bb      	str	r3, [r7, #72]	; 0x48
 8004242:	2301      	movs	r3, #1
 8004244:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004246:	6a3b      	ldr	r3, [r7, #32]
 8004248:	f383 8810 	msr	PRIMASK, r3
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	2101      	movs	r1, #1
 800425a:	438a      	bics	r2, r1
 800425c:	609a      	str	r2, [r3, #8]
 800425e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004260:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004264:	f383 8810 	msr	PRIMASK, r3
}
 8004268:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2220      	movs	r2, #32
 800426e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2280      	movs	r2, #128	; 0x80
 800427a:	2120      	movs	r1, #32
 800427c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2274      	movs	r2, #116	; 0x74
 8004282:	2100      	movs	r1, #0
 8004284:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e010      	b.n	80042ac <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	69db      	ldr	r3, [r3, #28]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	4013      	ands	r3, r2
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	1ad3      	subs	r3, r2, r3
 8004298:	425a      	negs	r2, r3
 800429a:	4153      	adcs	r3, r2
 800429c:	b2db      	uxtb	r3, r3
 800429e:	001a      	movs	r2, r3
 80042a0:	1dfb      	adds	r3, r7, #7
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d100      	bne.n	80042aa <UART_WaitOnFlagUntilTimeout+0x17a>
 80042a8:	e74b      	b.n	8004142 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	0018      	movs	r0, r3
 80042ae:	46bd      	mov	sp, r7
 80042b0:	b014      	add	sp, #80	; 0x50
 80042b2:	bd80      	pop	{r7, pc}
 80042b4:	fffffe5f 	.word	0xfffffe5f

080042b8 <__errno>:
 80042b8:	4b01      	ldr	r3, [pc, #4]	; (80042c0 <__errno+0x8>)
 80042ba:	6818      	ldr	r0, [r3, #0]
 80042bc:	4770      	bx	lr
 80042be:	46c0      	nop			; (mov r8, r8)
 80042c0:	2000000c 	.word	0x2000000c

080042c4 <__libc_init_array>:
 80042c4:	b570      	push	{r4, r5, r6, lr}
 80042c6:	2600      	movs	r6, #0
 80042c8:	4d0c      	ldr	r5, [pc, #48]	; (80042fc <__libc_init_array+0x38>)
 80042ca:	4c0d      	ldr	r4, [pc, #52]	; (8004300 <__libc_init_array+0x3c>)
 80042cc:	1b64      	subs	r4, r4, r5
 80042ce:	10a4      	asrs	r4, r4, #2
 80042d0:	42a6      	cmp	r6, r4
 80042d2:	d109      	bne.n	80042e8 <__libc_init_array+0x24>
 80042d4:	2600      	movs	r6, #0
 80042d6:	f000 fc8b 	bl	8004bf0 <_init>
 80042da:	4d0a      	ldr	r5, [pc, #40]	; (8004304 <__libc_init_array+0x40>)
 80042dc:	4c0a      	ldr	r4, [pc, #40]	; (8004308 <__libc_init_array+0x44>)
 80042de:	1b64      	subs	r4, r4, r5
 80042e0:	10a4      	asrs	r4, r4, #2
 80042e2:	42a6      	cmp	r6, r4
 80042e4:	d105      	bne.n	80042f2 <__libc_init_array+0x2e>
 80042e6:	bd70      	pop	{r4, r5, r6, pc}
 80042e8:	00b3      	lsls	r3, r6, #2
 80042ea:	58eb      	ldr	r3, [r5, r3]
 80042ec:	4798      	blx	r3
 80042ee:	3601      	adds	r6, #1
 80042f0:	e7ee      	b.n	80042d0 <__libc_init_array+0xc>
 80042f2:	00b3      	lsls	r3, r6, #2
 80042f4:	58eb      	ldr	r3, [r5, r3]
 80042f6:	4798      	blx	r3
 80042f8:	3601      	adds	r6, #1
 80042fa:	e7f2      	b.n	80042e2 <__libc_init_array+0x1e>
 80042fc:	08005070 	.word	0x08005070
 8004300:	08005070 	.word	0x08005070
 8004304:	08005070 	.word	0x08005070
 8004308:	08005074 	.word	0x08005074

0800430c <memcpy>:
 800430c:	2300      	movs	r3, #0
 800430e:	b510      	push	{r4, lr}
 8004310:	429a      	cmp	r2, r3
 8004312:	d100      	bne.n	8004316 <memcpy+0xa>
 8004314:	bd10      	pop	{r4, pc}
 8004316:	5ccc      	ldrb	r4, [r1, r3]
 8004318:	54c4      	strb	r4, [r0, r3]
 800431a:	3301      	adds	r3, #1
 800431c:	e7f8      	b.n	8004310 <memcpy+0x4>

0800431e <memset>:
 800431e:	0003      	movs	r3, r0
 8004320:	1882      	adds	r2, r0, r2
 8004322:	4293      	cmp	r3, r2
 8004324:	d100      	bne.n	8004328 <memset+0xa>
 8004326:	4770      	bx	lr
 8004328:	7019      	strb	r1, [r3, #0]
 800432a:	3301      	adds	r3, #1
 800432c:	e7f9      	b.n	8004322 <memset+0x4>
	...

08004330 <siprintf>:
 8004330:	b40e      	push	{r1, r2, r3}
 8004332:	b500      	push	{lr}
 8004334:	490b      	ldr	r1, [pc, #44]	; (8004364 <siprintf+0x34>)
 8004336:	b09c      	sub	sp, #112	; 0x70
 8004338:	ab1d      	add	r3, sp, #116	; 0x74
 800433a:	9002      	str	r0, [sp, #8]
 800433c:	9006      	str	r0, [sp, #24]
 800433e:	9107      	str	r1, [sp, #28]
 8004340:	9104      	str	r1, [sp, #16]
 8004342:	4809      	ldr	r0, [pc, #36]	; (8004368 <siprintf+0x38>)
 8004344:	4909      	ldr	r1, [pc, #36]	; (800436c <siprintf+0x3c>)
 8004346:	cb04      	ldmia	r3!, {r2}
 8004348:	9105      	str	r1, [sp, #20]
 800434a:	6800      	ldr	r0, [r0, #0]
 800434c:	a902      	add	r1, sp, #8
 800434e:	9301      	str	r3, [sp, #4]
 8004350:	f000 f870 	bl	8004434 <_svfiprintf_r>
 8004354:	2300      	movs	r3, #0
 8004356:	9a02      	ldr	r2, [sp, #8]
 8004358:	7013      	strb	r3, [r2, #0]
 800435a:	b01c      	add	sp, #112	; 0x70
 800435c:	bc08      	pop	{r3}
 800435e:	b003      	add	sp, #12
 8004360:	4718      	bx	r3
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	7fffffff 	.word	0x7fffffff
 8004368:	2000000c 	.word	0x2000000c
 800436c:	ffff0208 	.word	0xffff0208

08004370 <__ssputs_r>:
 8004370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004372:	688e      	ldr	r6, [r1, #8]
 8004374:	b085      	sub	sp, #20
 8004376:	0007      	movs	r7, r0
 8004378:	000c      	movs	r4, r1
 800437a:	9203      	str	r2, [sp, #12]
 800437c:	9301      	str	r3, [sp, #4]
 800437e:	429e      	cmp	r6, r3
 8004380:	d83c      	bhi.n	80043fc <__ssputs_r+0x8c>
 8004382:	2390      	movs	r3, #144	; 0x90
 8004384:	898a      	ldrh	r2, [r1, #12]
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	421a      	tst	r2, r3
 800438a:	d034      	beq.n	80043f6 <__ssputs_r+0x86>
 800438c:	6909      	ldr	r1, [r1, #16]
 800438e:	6823      	ldr	r3, [r4, #0]
 8004390:	6960      	ldr	r0, [r4, #20]
 8004392:	1a5b      	subs	r3, r3, r1
 8004394:	9302      	str	r3, [sp, #8]
 8004396:	2303      	movs	r3, #3
 8004398:	4343      	muls	r3, r0
 800439a:	0fdd      	lsrs	r5, r3, #31
 800439c:	18ed      	adds	r5, r5, r3
 800439e:	9b01      	ldr	r3, [sp, #4]
 80043a0:	9802      	ldr	r0, [sp, #8]
 80043a2:	3301      	adds	r3, #1
 80043a4:	181b      	adds	r3, r3, r0
 80043a6:	106d      	asrs	r5, r5, #1
 80043a8:	42ab      	cmp	r3, r5
 80043aa:	d900      	bls.n	80043ae <__ssputs_r+0x3e>
 80043ac:	001d      	movs	r5, r3
 80043ae:	0553      	lsls	r3, r2, #21
 80043b0:	d532      	bpl.n	8004418 <__ssputs_r+0xa8>
 80043b2:	0029      	movs	r1, r5
 80043b4:	0038      	movs	r0, r7
 80043b6:	f000 fb4b 	bl	8004a50 <_malloc_r>
 80043ba:	1e06      	subs	r6, r0, #0
 80043bc:	d109      	bne.n	80043d2 <__ssputs_r+0x62>
 80043be:	230c      	movs	r3, #12
 80043c0:	603b      	str	r3, [r7, #0]
 80043c2:	2340      	movs	r3, #64	; 0x40
 80043c4:	2001      	movs	r0, #1
 80043c6:	89a2      	ldrh	r2, [r4, #12]
 80043c8:	4240      	negs	r0, r0
 80043ca:	4313      	orrs	r3, r2
 80043cc:	81a3      	strh	r3, [r4, #12]
 80043ce:	b005      	add	sp, #20
 80043d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043d2:	9a02      	ldr	r2, [sp, #8]
 80043d4:	6921      	ldr	r1, [r4, #16]
 80043d6:	f7ff ff99 	bl	800430c <memcpy>
 80043da:	89a3      	ldrh	r3, [r4, #12]
 80043dc:	4a14      	ldr	r2, [pc, #80]	; (8004430 <__ssputs_r+0xc0>)
 80043de:	401a      	ands	r2, r3
 80043e0:	2380      	movs	r3, #128	; 0x80
 80043e2:	4313      	orrs	r3, r2
 80043e4:	81a3      	strh	r3, [r4, #12]
 80043e6:	9b02      	ldr	r3, [sp, #8]
 80043e8:	6126      	str	r6, [r4, #16]
 80043ea:	18f6      	adds	r6, r6, r3
 80043ec:	6026      	str	r6, [r4, #0]
 80043ee:	6165      	str	r5, [r4, #20]
 80043f0:	9e01      	ldr	r6, [sp, #4]
 80043f2:	1aed      	subs	r5, r5, r3
 80043f4:	60a5      	str	r5, [r4, #8]
 80043f6:	9b01      	ldr	r3, [sp, #4]
 80043f8:	429e      	cmp	r6, r3
 80043fa:	d900      	bls.n	80043fe <__ssputs_r+0x8e>
 80043fc:	9e01      	ldr	r6, [sp, #4]
 80043fe:	0032      	movs	r2, r6
 8004400:	9903      	ldr	r1, [sp, #12]
 8004402:	6820      	ldr	r0, [r4, #0]
 8004404:	f000 faa5 	bl	8004952 <memmove>
 8004408:	68a3      	ldr	r3, [r4, #8]
 800440a:	2000      	movs	r0, #0
 800440c:	1b9b      	subs	r3, r3, r6
 800440e:	60a3      	str	r3, [r4, #8]
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	199e      	adds	r6, r3, r6
 8004414:	6026      	str	r6, [r4, #0]
 8004416:	e7da      	b.n	80043ce <__ssputs_r+0x5e>
 8004418:	002a      	movs	r2, r5
 800441a:	0038      	movs	r0, r7
 800441c:	f000 fb8e 	bl	8004b3c <_realloc_r>
 8004420:	1e06      	subs	r6, r0, #0
 8004422:	d1e0      	bne.n	80043e6 <__ssputs_r+0x76>
 8004424:	0038      	movs	r0, r7
 8004426:	6921      	ldr	r1, [r4, #16]
 8004428:	f000 faa6 	bl	8004978 <_free_r>
 800442c:	e7c7      	b.n	80043be <__ssputs_r+0x4e>
 800442e:	46c0      	nop			; (mov r8, r8)
 8004430:	fffffb7f 	.word	0xfffffb7f

08004434 <_svfiprintf_r>:
 8004434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004436:	b0a1      	sub	sp, #132	; 0x84
 8004438:	9003      	str	r0, [sp, #12]
 800443a:	001d      	movs	r5, r3
 800443c:	898b      	ldrh	r3, [r1, #12]
 800443e:	000f      	movs	r7, r1
 8004440:	0016      	movs	r6, r2
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	d511      	bpl.n	800446a <_svfiprintf_r+0x36>
 8004446:	690b      	ldr	r3, [r1, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10e      	bne.n	800446a <_svfiprintf_r+0x36>
 800444c:	2140      	movs	r1, #64	; 0x40
 800444e:	f000 faff 	bl	8004a50 <_malloc_r>
 8004452:	6038      	str	r0, [r7, #0]
 8004454:	6138      	str	r0, [r7, #16]
 8004456:	2800      	cmp	r0, #0
 8004458:	d105      	bne.n	8004466 <_svfiprintf_r+0x32>
 800445a:	230c      	movs	r3, #12
 800445c:	9a03      	ldr	r2, [sp, #12]
 800445e:	3801      	subs	r0, #1
 8004460:	6013      	str	r3, [r2, #0]
 8004462:	b021      	add	sp, #132	; 0x84
 8004464:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004466:	2340      	movs	r3, #64	; 0x40
 8004468:	617b      	str	r3, [r7, #20]
 800446a:	2300      	movs	r3, #0
 800446c:	ac08      	add	r4, sp, #32
 800446e:	6163      	str	r3, [r4, #20]
 8004470:	3320      	adds	r3, #32
 8004472:	7663      	strb	r3, [r4, #25]
 8004474:	3310      	adds	r3, #16
 8004476:	76a3      	strb	r3, [r4, #26]
 8004478:	9507      	str	r5, [sp, #28]
 800447a:	0035      	movs	r5, r6
 800447c:	782b      	ldrb	r3, [r5, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d001      	beq.n	8004486 <_svfiprintf_r+0x52>
 8004482:	2b25      	cmp	r3, #37	; 0x25
 8004484:	d147      	bne.n	8004516 <_svfiprintf_r+0xe2>
 8004486:	1bab      	subs	r3, r5, r6
 8004488:	9305      	str	r3, [sp, #20]
 800448a:	42b5      	cmp	r5, r6
 800448c:	d00c      	beq.n	80044a8 <_svfiprintf_r+0x74>
 800448e:	0032      	movs	r2, r6
 8004490:	0039      	movs	r1, r7
 8004492:	9803      	ldr	r0, [sp, #12]
 8004494:	f7ff ff6c 	bl	8004370 <__ssputs_r>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d100      	bne.n	800449e <_svfiprintf_r+0x6a>
 800449c:	e0ae      	b.n	80045fc <_svfiprintf_r+0x1c8>
 800449e:	6962      	ldr	r2, [r4, #20]
 80044a0:	9b05      	ldr	r3, [sp, #20]
 80044a2:	4694      	mov	ip, r2
 80044a4:	4463      	add	r3, ip
 80044a6:	6163      	str	r3, [r4, #20]
 80044a8:	782b      	ldrb	r3, [r5, #0]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d100      	bne.n	80044b0 <_svfiprintf_r+0x7c>
 80044ae:	e0a5      	b.n	80045fc <_svfiprintf_r+0x1c8>
 80044b0:	2201      	movs	r2, #1
 80044b2:	2300      	movs	r3, #0
 80044b4:	4252      	negs	r2, r2
 80044b6:	6062      	str	r2, [r4, #4]
 80044b8:	a904      	add	r1, sp, #16
 80044ba:	3254      	adds	r2, #84	; 0x54
 80044bc:	1852      	adds	r2, r2, r1
 80044be:	1c6e      	adds	r6, r5, #1
 80044c0:	6023      	str	r3, [r4, #0]
 80044c2:	60e3      	str	r3, [r4, #12]
 80044c4:	60a3      	str	r3, [r4, #8]
 80044c6:	7013      	strb	r3, [r2, #0]
 80044c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80044ca:	2205      	movs	r2, #5
 80044cc:	7831      	ldrb	r1, [r6, #0]
 80044ce:	4854      	ldr	r0, [pc, #336]	; (8004620 <_svfiprintf_r+0x1ec>)
 80044d0:	f000 fa34 	bl	800493c <memchr>
 80044d4:	1c75      	adds	r5, r6, #1
 80044d6:	2800      	cmp	r0, #0
 80044d8:	d11f      	bne.n	800451a <_svfiprintf_r+0xe6>
 80044da:	6822      	ldr	r2, [r4, #0]
 80044dc:	06d3      	lsls	r3, r2, #27
 80044de:	d504      	bpl.n	80044ea <_svfiprintf_r+0xb6>
 80044e0:	2353      	movs	r3, #83	; 0x53
 80044e2:	a904      	add	r1, sp, #16
 80044e4:	185b      	adds	r3, r3, r1
 80044e6:	2120      	movs	r1, #32
 80044e8:	7019      	strb	r1, [r3, #0]
 80044ea:	0713      	lsls	r3, r2, #28
 80044ec:	d504      	bpl.n	80044f8 <_svfiprintf_r+0xc4>
 80044ee:	2353      	movs	r3, #83	; 0x53
 80044f0:	a904      	add	r1, sp, #16
 80044f2:	185b      	adds	r3, r3, r1
 80044f4:	212b      	movs	r1, #43	; 0x2b
 80044f6:	7019      	strb	r1, [r3, #0]
 80044f8:	7833      	ldrb	r3, [r6, #0]
 80044fa:	2b2a      	cmp	r3, #42	; 0x2a
 80044fc:	d016      	beq.n	800452c <_svfiprintf_r+0xf8>
 80044fe:	0035      	movs	r5, r6
 8004500:	2100      	movs	r1, #0
 8004502:	200a      	movs	r0, #10
 8004504:	68e3      	ldr	r3, [r4, #12]
 8004506:	782a      	ldrb	r2, [r5, #0]
 8004508:	1c6e      	adds	r6, r5, #1
 800450a:	3a30      	subs	r2, #48	; 0x30
 800450c:	2a09      	cmp	r2, #9
 800450e:	d94e      	bls.n	80045ae <_svfiprintf_r+0x17a>
 8004510:	2900      	cmp	r1, #0
 8004512:	d111      	bne.n	8004538 <_svfiprintf_r+0x104>
 8004514:	e017      	b.n	8004546 <_svfiprintf_r+0x112>
 8004516:	3501      	adds	r5, #1
 8004518:	e7b0      	b.n	800447c <_svfiprintf_r+0x48>
 800451a:	4b41      	ldr	r3, [pc, #260]	; (8004620 <_svfiprintf_r+0x1ec>)
 800451c:	6822      	ldr	r2, [r4, #0]
 800451e:	1ac0      	subs	r0, r0, r3
 8004520:	2301      	movs	r3, #1
 8004522:	4083      	lsls	r3, r0
 8004524:	4313      	orrs	r3, r2
 8004526:	002e      	movs	r6, r5
 8004528:	6023      	str	r3, [r4, #0]
 800452a:	e7ce      	b.n	80044ca <_svfiprintf_r+0x96>
 800452c:	9b07      	ldr	r3, [sp, #28]
 800452e:	1d19      	adds	r1, r3, #4
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	9107      	str	r1, [sp, #28]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db01      	blt.n	800453c <_svfiprintf_r+0x108>
 8004538:	930b      	str	r3, [sp, #44]	; 0x2c
 800453a:	e004      	b.n	8004546 <_svfiprintf_r+0x112>
 800453c:	425b      	negs	r3, r3
 800453e:	60e3      	str	r3, [r4, #12]
 8004540:	2302      	movs	r3, #2
 8004542:	4313      	orrs	r3, r2
 8004544:	6023      	str	r3, [r4, #0]
 8004546:	782b      	ldrb	r3, [r5, #0]
 8004548:	2b2e      	cmp	r3, #46	; 0x2e
 800454a:	d10a      	bne.n	8004562 <_svfiprintf_r+0x12e>
 800454c:	786b      	ldrb	r3, [r5, #1]
 800454e:	2b2a      	cmp	r3, #42	; 0x2a
 8004550:	d135      	bne.n	80045be <_svfiprintf_r+0x18a>
 8004552:	9b07      	ldr	r3, [sp, #28]
 8004554:	3502      	adds	r5, #2
 8004556:	1d1a      	adds	r2, r3, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	9207      	str	r2, [sp, #28]
 800455c:	2b00      	cmp	r3, #0
 800455e:	db2b      	blt.n	80045b8 <_svfiprintf_r+0x184>
 8004560:	9309      	str	r3, [sp, #36]	; 0x24
 8004562:	4e30      	ldr	r6, [pc, #192]	; (8004624 <_svfiprintf_r+0x1f0>)
 8004564:	2203      	movs	r2, #3
 8004566:	0030      	movs	r0, r6
 8004568:	7829      	ldrb	r1, [r5, #0]
 800456a:	f000 f9e7 	bl	800493c <memchr>
 800456e:	2800      	cmp	r0, #0
 8004570:	d006      	beq.n	8004580 <_svfiprintf_r+0x14c>
 8004572:	2340      	movs	r3, #64	; 0x40
 8004574:	1b80      	subs	r0, r0, r6
 8004576:	4083      	lsls	r3, r0
 8004578:	6822      	ldr	r2, [r4, #0]
 800457a:	3501      	adds	r5, #1
 800457c:	4313      	orrs	r3, r2
 800457e:	6023      	str	r3, [r4, #0]
 8004580:	7829      	ldrb	r1, [r5, #0]
 8004582:	2206      	movs	r2, #6
 8004584:	4828      	ldr	r0, [pc, #160]	; (8004628 <_svfiprintf_r+0x1f4>)
 8004586:	1c6e      	adds	r6, r5, #1
 8004588:	7621      	strb	r1, [r4, #24]
 800458a:	f000 f9d7 	bl	800493c <memchr>
 800458e:	2800      	cmp	r0, #0
 8004590:	d03c      	beq.n	800460c <_svfiprintf_r+0x1d8>
 8004592:	4b26      	ldr	r3, [pc, #152]	; (800462c <_svfiprintf_r+0x1f8>)
 8004594:	2b00      	cmp	r3, #0
 8004596:	d125      	bne.n	80045e4 <_svfiprintf_r+0x1b0>
 8004598:	2207      	movs	r2, #7
 800459a:	9b07      	ldr	r3, [sp, #28]
 800459c:	3307      	adds	r3, #7
 800459e:	4393      	bics	r3, r2
 80045a0:	3308      	adds	r3, #8
 80045a2:	9307      	str	r3, [sp, #28]
 80045a4:	6963      	ldr	r3, [r4, #20]
 80045a6:	9a04      	ldr	r2, [sp, #16]
 80045a8:	189b      	adds	r3, r3, r2
 80045aa:	6163      	str	r3, [r4, #20]
 80045ac:	e765      	b.n	800447a <_svfiprintf_r+0x46>
 80045ae:	4343      	muls	r3, r0
 80045b0:	0035      	movs	r5, r6
 80045b2:	2101      	movs	r1, #1
 80045b4:	189b      	adds	r3, r3, r2
 80045b6:	e7a6      	b.n	8004506 <_svfiprintf_r+0xd2>
 80045b8:	2301      	movs	r3, #1
 80045ba:	425b      	negs	r3, r3
 80045bc:	e7d0      	b.n	8004560 <_svfiprintf_r+0x12c>
 80045be:	2300      	movs	r3, #0
 80045c0:	200a      	movs	r0, #10
 80045c2:	001a      	movs	r2, r3
 80045c4:	3501      	adds	r5, #1
 80045c6:	6063      	str	r3, [r4, #4]
 80045c8:	7829      	ldrb	r1, [r5, #0]
 80045ca:	1c6e      	adds	r6, r5, #1
 80045cc:	3930      	subs	r1, #48	; 0x30
 80045ce:	2909      	cmp	r1, #9
 80045d0:	d903      	bls.n	80045da <_svfiprintf_r+0x1a6>
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d0c5      	beq.n	8004562 <_svfiprintf_r+0x12e>
 80045d6:	9209      	str	r2, [sp, #36]	; 0x24
 80045d8:	e7c3      	b.n	8004562 <_svfiprintf_r+0x12e>
 80045da:	4342      	muls	r2, r0
 80045dc:	0035      	movs	r5, r6
 80045de:	2301      	movs	r3, #1
 80045e0:	1852      	adds	r2, r2, r1
 80045e2:	e7f1      	b.n	80045c8 <_svfiprintf_r+0x194>
 80045e4:	ab07      	add	r3, sp, #28
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	003a      	movs	r2, r7
 80045ea:	0021      	movs	r1, r4
 80045ec:	4b10      	ldr	r3, [pc, #64]	; (8004630 <_svfiprintf_r+0x1fc>)
 80045ee:	9803      	ldr	r0, [sp, #12]
 80045f0:	e000      	b.n	80045f4 <_svfiprintf_r+0x1c0>
 80045f2:	bf00      	nop
 80045f4:	9004      	str	r0, [sp, #16]
 80045f6:	9b04      	ldr	r3, [sp, #16]
 80045f8:	3301      	adds	r3, #1
 80045fa:	d1d3      	bne.n	80045a4 <_svfiprintf_r+0x170>
 80045fc:	89bb      	ldrh	r3, [r7, #12]
 80045fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004600:	065b      	lsls	r3, r3, #25
 8004602:	d400      	bmi.n	8004606 <_svfiprintf_r+0x1d2>
 8004604:	e72d      	b.n	8004462 <_svfiprintf_r+0x2e>
 8004606:	2001      	movs	r0, #1
 8004608:	4240      	negs	r0, r0
 800460a:	e72a      	b.n	8004462 <_svfiprintf_r+0x2e>
 800460c:	ab07      	add	r3, sp, #28
 800460e:	9300      	str	r3, [sp, #0]
 8004610:	003a      	movs	r2, r7
 8004612:	0021      	movs	r1, r4
 8004614:	4b06      	ldr	r3, [pc, #24]	; (8004630 <_svfiprintf_r+0x1fc>)
 8004616:	9803      	ldr	r0, [sp, #12]
 8004618:	f000 f87c 	bl	8004714 <_printf_i>
 800461c:	e7ea      	b.n	80045f4 <_svfiprintf_r+0x1c0>
 800461e:	46c0      	nop			; (mov r8, r8)
 8004620:	08004fd4 	.word	0x08004fd4
 8004624:	08004fda 	.word	0x08004fda
 8004628:	08004fde 	.word	0x08004fde
 800462c:	00000000 	.word	0x00000000
 8004630:	08004371 	.word	0x08004371

08004634 <_printf_common>:
 8004634:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004636:	0015      	movs	r5, r2
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	688a      	ldr	r2, [r1, #8]
 800463c:	690b      	ldr	r3, [r1, #16]
 800463e:	000c      	movs	r4, r1
 8004640:	9000      	str	r0, [sp, #0]
 8004642:	4293      	cmp	r3, r2
 8004644:	da00      	bge.n	8004648 <_printf_common+0x14>
 8004646:	0013      	movs	r3, r2
 8004648:	0022      	movs	r2, r4
 800464a:	602b      	str	r3, [r5, #0]
 800464c:	3243      	adds	r2, #67	; 0x43
 800464e:	7812      	ldrb	r2, [r2, #0]
 8004650:	2a00      	cmp	r2, #0
 8004652:	d001      	beq.n	8004658 <_printf_common+0x24>
 8004654:	3301      	adds	r3, #1
 8004656:	602b      	str	r3, [r5, #0]
 8004658:	6823      	ldr	r3, [r4, #0]
 800465a:	069b      	lsls	r3, r3, #26
 800465c:	d502      	bpl.n	8004664 <_printf_common+0x30>
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	3302      	adds	r3, #2
 8004662:	602b      	str	r3, [r5, #0]
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	2306      	movs	r3, #6
 8004668:	0017      	movs	r7, r2
 800466a:	401f      	ands	r7, r3
 800466c:	421a      	tst	r2, r3
 800466e:	d027      	beq.n	80046c0 <_printf_common+0x8c>
 8004670:	0023      	movs	r3, r4
 8004672:	3343      	adds	r3, #67	; 0x43
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	1e5a      	subs	r2, r3, #1
 8004678:	4193      	sbcs	r3, r2
 800467a:	6822      	ldr	r2, [r4, #0]
 800467c:	0692      	lsls	r2, r2, #26
 800467e:	d430      	bmi.n	80046e2 <_printf_common+0xae>
 8004680:	0022      	movs	r2, r4
 8004682:	9901      	ldr	r1, [sp, #4]
 8004684:	9800      	ldr	r0, [sp, #0]
 8004686:	9e08      	ldr	r6, [sp, #32]
 8004688:	3243      	adds	r2, #67	; 0x43
 800468a:	47b0      	blx	r6
 800468c:	1c43      	adds	r3, r0, #1
 800468e:	d025      	beq.n	80046dc <_printf_common+0xa8>
 8004690:	2306      	movs	r3, #6
 8004692:	6820      	ldr	r0, [r4, #0]
 8004694:	682a      	ldr	r2, [r5, #0]
 8004696:	68e1      	ldr	r1, [r4, #12]
 8004698:	2500      	movs	r5, #0
 800469a:	4003      	ands	r3, r0
 800469c:	2b04      	cmp	r3, #4
 800469e:	d103      	bne.n	80046a8 <_printf_common+0x74>
 80046a0:	1a8d      	subs	r5, r1, r2
 80046a2:	43eb      	mvns	r3, r5
 80046a4:	17db      	asrs	r3, r3, #31
 80046a6:	401d      	ands	r5, r3
 80046a8:	68a3      	ldr	r3, [r4, #8]
 80046aa:	6922      	ldr	r2, [r4, #16]
 80046ac:	4293      	cmp	r3, r2
 80046ae:	dd01      	ble.n	80046b4 <_printf_common+0x80>
 80046b0:	1a9b      	subs	r3, r3, r2
 80046b2:	18ed      	adds	r5, r5, r3
 80046b4:	2700      	movs	r7, #0
 80046b6:	42bd      	cmp	r5, r7
 80046b8:	d120      	bne.n	80046fc <_printf_common+0xc8>
 80046ba:	2000      	movs	r0, #0
 80046bc:	e010      	b.n	80046e0 <_printf_common+0xac>
 80046be:	3701      	adds	r7, #1
 80046c0:	68e3      	ldr	r3, [r4, #12]
 80046c2:	682a      	ldr	r2, [r5, #0]
 80046c4:	1a9b      	subs	r3, r3, r2
 80046c6:	42bb      	cmp	r3, r7
 80046c8:	ddd2      	ble.n	8004670 <_printf_common+0x3c>
 80046ca:	0022      	movs	r2, r4
 80046cc:	2301      	movs	r3, #1
 80046ce:	9901      	ldr	r1, [sp, #4]
 80046d0:	9800      	ldr	r0, [sp, #0]
 80046d2:	9e08      	ldr	r6, [sp, #32]
 80046d4:	3219      	adds	r2, #25
 80046d6:	47b0      	blx	r6
 80046d8:	1c43      	adds	r3, r0, #1
 80046da:	d1f0      	bne.n	80046be <_printf_common+0x8a>
 80046dc:	2001      	movs	r0, #1
 80046de:	4240      	negs	r0, r0
 80046e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80046e2:	2030      	movs	r0, #48	; 0x30
 80046e4:	18e1      	adds	r1, r4, r3
 80046e6:	3143      	adds	r1, #67	; 0x43
 80046e8:	7008      	strb	r0, [r1, #0]
 80046ea:	0021      	movs	r1, r4
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	3145      	adds	r1, #69	; 0x45
 80046f0:	7809      	ldrb	r1, [r1, #0]
 80046f2:	18a2      	adds	r2, r4, r2
 80046f4:	3243      	adds	r2, #67	; 0x43
 80046f6:	3302      	adds	r3, #2
 80046f8:	7011      	strb	r1, [r2, #0]
 80046fa:	e7c1      	b.n	8004680 <_printf_common+0x4c>
 80046fc:	0022      	movs	r2, r4
 80046fe:	2301      	movs	r3, #1
 8004700:	9901      	ldr	r1, [sp, #4]
 8004702:	9800      	ldr	r0, [sp, #0]
 8004704:	9e08      	ldr	r6, [sp, #32]
 8004706:	321a      	adds	r2, #26
 8004708:	47b0      	blx	r6
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	d0e6      	beq.n	80046dc <_printf_common+0xa8>
 800470e:	3701      	adds	r7, #1
 8004710:	e7d1      	b.n	80046b6 <_printf_common+0x82>
	...

08004714 <_printf_i>:
 8004714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004716:	b08b      	sub	sp, #44	; 0x2c
 8004718:	9206      	str	r2, [sp, #24]
 800471a:	000a      	movs	r2, r1
 800471c:	3243      	adds	r2, #67	; 0x43
 800471e:	9307      	str	r3, [sp, #28]
 8004720:	9005      	str	r0, [sp, #20]
 8004722:	9204      	str	r2, [sp, #16]
 8004724:	7e0a      	ldrb	r2, [r1, #24]
 8004726:	000c      	movs	r4, r1
 8004728:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800472a:	2a78      	cmp	r2, #120	; 0x78
 800472c:	d807      	bhi.n	800473e <_printf_i+0x2a>
 800472e:	2a62      	cmp	r2, #98	; 0x62
 8004730:	d809      	bhi.n	8004746 <_printf_i+0x32>
 8004732:	2a00      	cmp	r2, #0
 8004734:	d100      	bne.n	8004738 <_printf_i+0x24>
 8004736:	e0c1      	b.n	80048bc <_printf_i+0x1a8>
 8004738:	2a58      	cmp	r2, #88	; 0x58
 800473a:	d100      	bne.n	800473e <_printf_i+0x2a>
 800473c:	e08c      	b.n	8004858 <_printf_i+0x144>
 800473e:	0026      	movs	r6, r4
 8004740:	3642      	adds	r6, #66	; 0x42
 8004742:	7032      	strb	r2, [r6, #0]
 8004744:	e022      	b.n	800478c <_printf_i+0x78>
 8004746:	0010      	movs	r0, r2
 8004748:	3863      	subs	r0, #99	; 0x63
 800474a:	2815      	cmp	r0, #21
 800474c:	d8f7      	bhi.n	800473e <_printf_i+0x2a>
 800474e:	f7fb fce3 	bl	8000118 <__gnu_thumb1_case_shi>
 8004752:	0016      	.short	0x0016
 8004754:	fff6001f 	.word	0xfff6001f
 8004758:	fff6fff6 	.word	0xfff6fff6
 800475c:	001ffff6 	.word	0x001ffff6
 8004760:	fff6fff6 	.word	0xfff6fff6
 8004764:	fff6fff6 	.word	0xfff6fff6
 8004768:	003600a8 	.word	0x003600a8
 800476c:	fff6009a 	.word	0xfff6009a
 8004770:	00b9fff6 	.word	0x00b9fff6
 8004774:	0036fff6 	.word	0x0036fff6
 8004778:	fff6fff6 	.word	0xfff6fff6
 800477c:	009e      	.short	0x009e
 800477e:	0026      	movs	r6, r4
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	3642      	adds	r6, #66	; 0x42
 8004784:	1d11      	adds	r1, r2, #4
 8004786:	6019      	str	r1, [r3, #0]
 8004788:	6813      	ldr	r3, [r2, #0]
 800478a:	7033      	strb	r3, [r6, #0]
 800478c:	2301      	movs	r3, #1
 800478e:	e0a7      	b.n	80048e0 <_printf_i+0x1cc>
 8004790:	6808      	ldr	r0, [r1, #0]
 8004792:	6819      	ldr	r1, [r3, #0]
 8004794:	1d0a      	adds	r2, r1, #4
 8004796:	0605      	lsls	r5, r0, #24
 8004798:	d50b      	bpl.n	80047b2 <_printf_i+0x9e>
 800479a:	680d      	ldr	r5, [r1, #0]
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	2d00      	cmp	r5, #0
 80047a0:	da03      	bge.n	80047aa <_printf_i+0x96>
 80047a2:	232d      	movs	r3, #45	; 0x2d
 80047a4:	9a04      	ldr	r2, [sp, #16]
 80047a6:	426d      	negs	r5, r5
 80047a8:	7013      	strb	r3, [r2, #0]
 80047aa:	4b61      	ldr	r3, [pc, #388]	; (8004930 <_printf_i+0x21c>)
 80047ac:	270a      	movs	r7, #10
 80047ae:	9303      	str	r3, [sp, #12]
 80047b0:	e01b      	b.n	80047ea <_printf_i+0xd6>
 80047b2:	680d      	ldr	r5, [r1, #0]
 80047b4:	601a      	str	r2, [r3, #0]
 80047b6:	0641      	lsls	r1, r0, #25
 80047b8:	d5f1      	bpl.n	800479e <_printf_i+0x8a>
 80047ba:	b22d      	sxth	r5, r5
 80047bc:	e7ef      	b.n	800479e <_printf_i+0x8a>
 80047be:	680d      	ldr	r5, [r1, #0]
 80047c0:	6819      	ldr	r1, [r3, #0]
 80047c2:	1d08      	adds	r0, r1, #4
 80047c4:	6018      	str	r0, [r3, #0]
 80047c6:	062e      	lsls	r6, r5, #24
 80047c8:	d501      	bpl.n	80047ce <_printf_i+0xba>
 80047ca:	680d      	ldr	r5, [r1, #0]
 80047cc:	e003      	b.n	80047d6 <_printf_i+0xc2>
 80047ce:	066d      	lsls	r5, r5, #25
 80047d0:	d5fb      	bpl.n	80047ca <_printf_i+0xb6>
 80047d2:	680d      	ldr	r5, [r1, #0]
 80047d4:	b2ad      	uxth	r5, r5
 80047d6:	4b56      	ldr	r3, [pc, #344]	; (8004930 <_printf_i+0x21c>)
 80047d8:	2708      	movs	r7, #8
 80047da:	9303      	str	r3, [sp, #12]
 80047dc:	2a6f      	cmp	r2, #111	; 0x6f
 80047de:	d000      	beq.n	80047e2 <_printf_i+0xce>
 80047e0:	3702      	adds	r7, #2
 80047e2:	0023      	movs	r3, r4
 80047e4:	2200      	movs	r2, #0
 80047e6:	3343      	adds	r3, #67	; 0x43
 80047e8:	701a      	strb	r2, [r3, #0]
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	60a3      	str	r3, [r4, #8]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	db03      	blt.n	80047fa <_printf_i+0xe6>
 80047f2:	2204      	movs	r2, #4
 80047f4:	6821      	ldr	r1, [r4, #0]
 80047f6:	4391      	bics	r1, r2
 80047f8:	6021      	str	r1, [r4, #0]
 80047fa:	2d00      	cmp	r5, #0
 80047fc:	d102      	bne.n	8004804 <_printf_i+0xf0>
 80047fe:	9e04      	ldr	r6, [sp, #16]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00c      	beq.n	800481e <_printf_i+0x10a>
 8004804:	9e04      	ldr	r6, [sp, #16]
 8004806:	0028      	movs	r0, r5
 8004808:	0039      	movs	r1, r7
 800480a:	f7fb fd15 	bl	8000238 <__aeabi_uidivmod>
 800480e:	9b03      	ldr	r3, [sp, #12]
 8004810:	3e01      	subs	r6, #1
 8004812:	5c5b      	ldrb	r3, [r3, r1]
 8004814:	7033      	strb	r3, [r6, #0]
 8004816:	002b      	movs	r3, r5
 8004818:	0005      	movs	r5, r0
 800481a:	429f      	cmp	r7, r3
 800481c:	d9f3      	bls.n	8004806 <_printf_i+0xf2>
 800481e:	2f08      	cmp	r7, #8
 8004820:	d109      	bne.n	8004836 <_printf_i+0x122>
 8004822:	6823      	ldr	r3, [r4, #0]
 8004824:	07db      	lsls	r3, r3, #31
 8004826:	d506      	bpl.n	8004836 <_printf_i+0x122>
 8004828:	6863      	ldr	r3, [r4, #4]
 800482a:	6922      	ldr	r2, [r4, #16]
 800482c:	4293      	cmp	r3, r2
 800482e:	dc02      	bgt.n	8004836 <_printf_i+0x122>
 8004830:	2330      	movs	r3, #48	; 0x30
 8004832:	3e01      	subs	r6, #1
 8004834:	7033      	strb	r3, [r6, #0]
 8004836:	9b04      	ldr	r3, [sp, #16]
 8004838:	1b9b      	subs	r3, r3, r6
 800483a:	6123      	str	r3, [r4, #16]
 800483c:	9b07      	ldr	r3, [sp, #28]
 800483e:	0021      	movs	r1, r4
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	9805      	ldr	r0, [sp, #20]
 8004844:	9b06      	ldr	r3, [sp, #24]
 8004846:	aa09      	add	r2, sp, #36	; 0x24
 8004848:	f7ff fef4 	bl	8004634 <_printf_common>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	d14c      	bne.n	80048ea <_printf_i+0x1d6>
 8004850:	2001      	movs	r0, #1
 8004852:	4240      	negs	r0, r0
 8004854:	b00b      	add	sp, #44	; 0x2c
 8004856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004858:	3145      	adds	r1, #69	; 0x45
 800485a:	700a      	strb	r2, [r1, #0]
 800485c:	4a34      	ldr	r2, [pc, #208]	; (8004930 <_printf_i+0x21c>)
 800485e:	9203      	str	r2, [sp, #12]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	6821      	ldr	r1, [r4, #0]
 8004864:	ca20      	ldmia	r2!, {r5}
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	0608      	lsls	r0, r1, #24
 800486a:	d516      	bpl.n	800489a <_printf_i+0x186>
 800486c:	07cb      	lsls	r3, r1, #31
 800486e:	d502      	bpl.n	8004876 <_printf_i+0x162>
 8004870:	2320      	movs	r3, #32
 8004872:	4319      	orrs	r1, r3
 8004874:	6021      	str	r1, [r4, #0]
 8004876:	2710      	movs	r7, #16
 8004878:	2d00      	cmp	r5, #0
 800487a:	d1b2      	bne.n	80047e2 <_printf_i+0xce>
 800487c:	2320      	movs	r3, #32
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	439a      	bics	r2, r3
 8004882:	6022      	str	r2, [r4, #0]
 8004884:	e7ad      	b.n	80047e2 <_printf_i+0xce>
 8004886:	2220      	movs	r2, #32
 8004888:	6809      	ldr	r1, [r1, #0]
 800488a:	430a      	orrs	r2, r1
 800488c:	6022      	str	r2, [r4, #0]
 800488e:	0022      	movs	r2, r4
 8004890:	2178      	movs	r1, #120	; 0x78
 8004892:	3245      	adds	r2, #69	; 0x45
 8004894:	7011      	strb	r1, [r2, #0]
 8004896:	4a27      	ldr	r2, [pc, #156]	; (8004934 <_printf_i+0x220>)
 8004898:	e7e1      	b.n	800485e <_printf_i+0x14a>
 800489a:	0648      	lsls	r0, r1, #25
 800489c:	d5e6      	bpl.n	800486c <_printf_i+0x158>
 800489e:	b2ad      	uxth	r5, r5
 80048a0:	e7e4      	b.n	800486c <_printf_i+0x158>
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	680d      	ldr	r5, [r1, #0]
 80048a6:	1d10      	adds	r0, r2, #4
 80048a8:	6949      	ldr	r1, [r1, #20]
 80048aa:	6018      	str	r0, [r3, #0]
 80048ac:	6813      	ldr	r3, [r2, #0]
 80048ae:	062e      	lsls	r6, r5, #24
 80048b0:	d501      	bpl.n	80048b6 <_printf_i+0x1a2>
 80048b2:	6019      	str	r1, [r3, #0]
 80048b4:	e002      	b.n	80048bc <_printf_i+0x1a8>
 80048b6:	066d      	lsls	r5, r5, #25
 80048b8:	d5fb      	bpl.n	80048b2 <_printf_i+0x19e>
 80048ba:	8019      	strh	r1, [r3, #0]
 80048bc:	2300      	movs	r3, #0
 80048be:	9e04      	ldr	r6, [sp, #16]
 80048c0:	6123      	str	r3, [r4, #16]
 80048c2:	e7bb      	b.n	800483c <_printf_i+0x128>
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	1d11      	adds	r1, r2, #4
 80048c8:	6019      	str	r1, [r3, #0]
 80048ca:	6816      	ldr	r6, [r2, #0]
 80048cc:	2100      	movs	r1, #0
 80048ce:	0030      	movs	r0, r6
 80048d0:	6862      	ldr	r2, [r4, #4]
 80048d2:	f000 f833 	bl	800493c <memchr>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	d001      	beq.n	80048de <_printf_i+0x1ca>
 80048da:	1b80      	subs	r0, r0, r6
 80048dc:	6060      	str	r0, [r4, #4]
 80048de:	6863      	ldr	r3, [r4, #4]
 80048e0:	6123      	str	r3, [r4, #16]
 80048e2:	2300      	movs	r3, #0
 80048e4:	9a04      	ldr	r2, [sp, #16]
 80048e6:	7013      	strb	r3, [r2, #0]
 80048e8:	e7a8      	b.n	800483c <_printf_i+0x128>
 80048ea:	6923      	ldr	r3, [r4, #16]
 80048ec:	0032      	movs	r2, r6
 80048ee:	9906      	ldr	r1, [sp, #24]
 80048f0:	9805      	ldr	r0, [sp, #20]
 80048f2:	9d07      	ldr	r5, [sp, #28]
 80048f4:	47a8      	blx	r5
 80048f6:	1c43      	adds	r3, r0, #1
 80048f8:	d0aa      	beq.n	8004850 <_printf_i+0x13c>
 80048fa:	6823      	ldr	r3, [r4, #0]
 80048fc:	079b      	lsls	r3, r3, #30
 80048fe:	d415      	bmi.n	800492c <_printf_i+0x218>
 8004900:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004902:	68e0      	ldr	r0, [r4, #12]
 8004904:	4298      	cmp	r0, r3
 8004906:	daa5      	bge.n	8004854 <_printf_i+0x140>
 8004908:	0018      	movs	r0, r3
 800490a:	e7a3      	b.n	8004854 <_printf_i+0x140>
 800490c:	0022      	movs	r2, r4
 800490e:	2301      	movs	r3, #1
 8004910:	9906      	ldr	r1, [sp, #24]
 8004912:	9805      	ldr	r0, [sp, #20]
 8004914:	9e07      	ldr	r6, [sp, #28]
 8004916:	3219      	adds	r2, #25
 8004918:	47b0      	blx	r6
 800491a:	1c43      	adds	r3, r0, #1
 800491c:	d098      	beq.n	8004850 <_printf_i+0x13c>
 800491e:	3501      	adds	r5, #1
 8004920:	68e3      	ldr	r3, [r4, #12]
 8004922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004924:	1a9b      	subs	r3, r3, r2
 8004926:	42ab      	cmp	r3, r5
 8004928:	dcf0      	bgt.n	800490c <_printf_i+0x1f8>
 800492a:	e7e9      	b.n	8004900 <_printf_i+0x1ec>
 800492c:	2500      	movs	r5, #0
 800492e:	e7f7      	b.n	8004920 <_printf_i+0x20c>
 8004930:	08004fe5 	.word	0x08004fe5
 8004934:	08004ff6 	.word	0x08004ff6

08004938 <__retarget_lock_acquire_recursive>:
 8004938:	4770      	bx	lr

0800493a <__retarget_lock_release_recursive>:
 800493a:	4770      	bx	lr

0800493c <memchr>:
 800493c:	b2c9      	uxtb	r1, r1
 800493e:	1882      	adds	r2, r0, r2
 8004940:	4290      	cmp	r0, r2
 8004942:	d101      	bne.n	8004948 <memchr+0xc>
 8004944:	2000      	movs	r0, #0
 8004946:	4770      	bx	lr
 8004948:	7803      	ldrb	r3, [r0, #0]
 800494a:	428b      	cmp	r3, r1
 800494c:	d0fb      	beq.n	8004946 <memchr+0xa>
 800494e:	3001      	adds	r0, #1
 8004950:	e7f6      	b.n	8004940 <memchr+0x4>

08004952 <memmove>:
 8004952:	b510      	push	{r4, lr}
 8004954:	4288      	cmp	r0, r1
 8004956:	d902      	bls.n	800495e <memmove+0xc>
 8004958:	188b      	adds	r3, r1, r2
 800495a:	4298      	cmp	r0, r3
 800495c:	d303      	bcc.n	8004966 <memmove+0x14>
 800495e:	2300      	movs	r3, #0
 8004960:	e007      	b.n	8004972 <memmove+0x20>
 8004962:	5c8b      	ldrb	r3, [r1, r2]
 8004964:	5483      	strb	r3, [r0, r2]
 8004966:	3a01      	subs	r2, #1
 8004968:	d2fb      	bcs.n	8004962 <memmove+0x10>
 800496a:	bd10      	pop	{r4, pc}
 800496c:	5ccc      	ldrb	r4, [r1, r3]
 800496e:	54c4      	strb	r4, [r0, r3]
 8004970:	3301      	adds	r3, #1
 8004972:	429a      	cmp	r2, r3
 8004974:	d1fa      	bne.n	800496c <memmove+0x1a>
 8004976:	e7f8      	b.n	800496a <memmove+0x18>

08004978 <_free_r>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	0005      	movs	r5, r0
 800497c:	2900      	cmp	r1, #0
 800497e:	d010      	beq.n	80049a2 <_free_r+0x2a>
 8004980:	1f0c      	subs	r4, r1, #4
 8004982:	6823      	ldr	r3, [r4, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	da00      	bge.n	800498a <_free_r+0x12>
 8004988:	18e4      	adds	r4, r4, r3
 800498a:	0028      	movs	r0, r5
 800498c:	f000 f918 	bl	8004bc0 <__malloc_lock>
 8004990:	4a1d      	ldr	r2, [pc, #116]	; (8004a08 <_free_r+0x90>)
 8004992:	6813      	ldr	r3, [r2, #0]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d105      	bne.n	80049a4 <_free_r+0x2c>
 8004998:	6063      	str	r3, [r4, #4]
 800499a:	6014      	str	r4, [r2, #0]
 800499c:	0028      	movs	r0, r5
 800499e:	f000 f917 	bl	8004bd0 <__malloc_unlock>
 80049a2:	bd70      	pop	{r4, r5, r6, pc}
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	d908      	bls.n	80049ba <_free_r+0x42>
 80049a8:	6821      	ldr	r1, [r4, #0]
 80049aa:	1860      	adds	r0, r4, r1
 80049ac:	4283      	cmp	r3, r0
 80049ae:	d1f3      	bne.n	8004998 <_free_r+0x20>
 80049b0:	6818      	ldr	r0, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	1841      	adds	r1, r0, r1
 80049b6:	6021      	str	r1, [r4, #0]
 80049b8:	e7ee      	b.n	8004998 <_free_r+0x20>
 80049ba:	001a      	movs	r2, r3
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d001      	beq.n	80049c6 <_free_r+0x4e>
 80049c2:	42a3      	cmp	r3, r4
 80049c4:	d9f9      	bls.n	80049ba <_free_r+0x42>
 80049c6:	6811      	ldr	r1, [r2, #0]
 80049c8:	1850      	adds	r0, r2, r1
 80049ca:	42a0      	cmp	r0, r4
 80049cc:	d10b      	bne.n	80049e6 <_free_r+0x6e>
 80049ce:	6820      	ldr	r0, [r4, #0]
 80049d0:	1809      	adds	r1, r1, r0
 80049d2:	1850      	adds	r0, r2, r1
 80049d4:	6011      	str	r1, [r2, #0]
 80049d6:	4283      	cmp	r3, r0
 80049d8:	d1e0      	bne.n	800499c <_free_r+0x24>
 80049da:	6818      	ldr	r0, [r3, #0]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	1841      	adds	r1, r0, r1
 80049e0:	6011      	str	r1, [r2, #0]
 80049e2:	6053      	str	r3, [r2, #4]
 80049e4:	e7da      	b.n	800499c <_free_r+0x24>
 80049e6:	42a0      	cmp	r0, r4
 80049e8:	d902      	bls.n	80049f0 <_free_r+0x78>
 80049ea:	230c      	movs	r3, #12
 80049ec:	602b      	str	r3, [r5, #0]
 80049ee:	e7d5      	b.n	800499c <_free_r+0x24>
 80049f0:	6821      	ldr	r1, [r4, #0]
 80049f2:	1860      	adds	r0, r4, r1
 80049f4:	4283      	cmp	r3, r0
 80049f6:	d103      	bne.n	8004a00 <_free_r+0x88>
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	1841      	adds	r1, r0, r1
 80049fe:	6021      	str	r1, [r4, #0]
 8004a00:	6063      	str	r3, [r4, #4]
 8004a02:	6054      	str	r4, [r2, #4]
 8004a04:	e7ca      	b.n	800499c <_free_r+0x24>
 8004a06:	46c0      	nop			; (mov r8, r8)
 8004a08:	20000268 	.word	0x20000268

08004a0c <sbrk_aligned>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0f      	ldr	r6, [pc, #60]	; (8004a4c <sbrk_aligned+0x40>)
 8004a10:	000d      	movs	r5, r1
 8004a12:	6831      	ldr	r1, [r6, #0]
 8004a14:	0004      	movs	r4, r0
 8004a16:	2900      	cmp	r1, #0
 8004a18:	d102      	bne.n	8004a20 <sbrk_aligned+0x14>
 8004a1a:	f000 f8bf 	bl	8004b9c <_sbrk_r>
 8004a1e:	6030      	str	r0, [r6, #0]
 8004a20:	0029      	movs	r1, r5
 8004a22:	0020      	movs	r0, r4
 8004a24:	f000 f8ba 	bl	8004b9c <_sbrk_r>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d00a      	beq.n	8004a42 <sbrk_aligned+0x36>
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	1cc5      	adds	r5, r0, #3
 8004a30:	439d      	bics	r5, r3
 8004a32:	42a8      	cmp	r0, r5
 8004a34:	d007      	beq.n	8004a46 <sbrk_aligned+0x3a>
 8004a36:	1a29      	subs	r1, r5, r0
 8004a38:	0020      	movs	r0, r4
 8004a3a:	f000 f8af 	bl	8004b9c <_sbrk_r>
 8004a3e:	1c43      	adds	r3, r0, #1
 8004a40:	d101      	bne.n	8004a46 <sbrk_aligned+0x3a>
 8004a42:	2501      	movs	r5, #1
 8004a44:	426d      	negs	r5, r5
 8004a46:	0028      	movs	r0, r5
 8004a48:	bd70      	pop	{r4, r5, r6, pc}
 8004a4a:	46c0      	nop			; (mov r8, r8)
 8004a4c:	2000026c 	.word	0x2000026c

08004a50 <_malloc_r>:
 8004a50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a52:	2203      	movs	r2, #3
 8004a54:	1ccb      	adds	r3, r1, #3
 8004a56:	4393      	bics	r3, r2
 8004a58:	3308      	adds	r3, #8
 8004a5a:	0006      	movs	r6, r0
 8004a5c:	001f      	movs	r7, r3
 8004a5e:	2b0c      	cmp	r3, #12
 8004a60:	d232      	bcs.n	8004ac8 <_malloc_r+0x78>
 8004a62:	270c      	movs	r7, #12
 8004a64:	42b9      	cmp	r1, r7
 8004a66:	d831      	bhi.n	8004acc <_malloc_r+0x7c>
 8004a68:	0030      	movs	r0, r6
 8004a6a:	f000 f8a9 	bl	8004bc0 <__malloc_lock>
 8004a6e:	4d32      	ldr	r5, [pc, #200]	; (8004b38 <_malloc_r+0xe8>)
 8004a70:	682b      	ldr	r3, [r5, #0]
 8004a72:	001c      	movs	r4, r3
 8004a74:	2c00      	cmp	r4, #0
 8004a76:	d12e      	bne.n	8004ad6 <_malloc_r+0x86>
 8004a78:	0039      	movs	r1, r7
 8004a7a:	0030      	movs	r0, r6
 8004a7c:	f7ff ffc6 	bl	8004a0c <sbrk_aligned>
 8004a80:	0004      	movs	r4, r0
 8004a82:	1c43      	adds	r3, r0, #1
 8004a84:	d11e      	bne.n	8004ac4 <_malloc_r+0x74>
 8004a86:	682c      	ldr	r4, [r5, #0]
 8004a88:	0025      	movs	r5, r4
 8004a8a:	2d00      	cmp	r5, #0
 8004a8c:	d14a      	bne.n	8004b24 <_malloc_r+0xd4>
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	0029      	movs	r1, r5
 8004a92:	18e3      	adds	r3, r4, r3
 8004a94:	0030      	movs	r0, r6
 8004a96:	9301      	str	r3, [sp, #4]
 8004a98:	f000 f880 	bl	8004b9c <_sbrk_r>
 8004a9c:	9b01      	ldr	r3, [sp, #4]
 8004a9e:	4283      	cmp	r3, r0
 8004aa0:	d143      	bne.n	8004b2a <_malloc_r+0xda>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	3703      	adds	r7, #3
 8004aa6:	1aff      	subs	r7, r7, r3
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	439f      	bics	r7, r3
 8004aac:	3708      	adds	r7, #8
 8004aae:	2f0c      	cmp	r7, #12
 8004ab0:	d200      	bcs.n	8004ab4 <_malloc_r+0x64>
 8004ab2:	270c      	movs	r7, #12
 8004ab4:	0039      	movs	r1, r7
 8004ab6:	0030      	movs	r0, r6
 8004ab8:	f7ff ffa8 	bl	8004a0c <sbrk_aligned>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d034      	beq.n	8004b2a <_malloc_r+0xda>
 8004ac0:	6823      	ldr	r3, [r4, #0]
 8004ac2:	19df      	adds	r7, r3, r7
 8004ac4:	6027      	str	r7, [r4, #0]
 8004ac6:	e013      	b.n	8004af0 <_malloc_r+0xa0>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	dacb      	bge.n	8004a64 <_malloc_r+0x14>
 8004acc:	230c      	movs	r3, #12
 8004ace:	2500      	movs	r5, #0
 8004ad0:	6033      	str	r3, [r6, #0]
 8004ad2:	0028      	movs	r0, r5
 8004ad4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004ad6:	6822      	ldr	r2, [r4, #0]
 8004ad8:	1bd1      	subs	r1, r2, r7
 8004ada:	d420      	bmi.n	8004b1e <_malloc_r+0xce>
 8004adc:	290b      	cmp	r1, #11
 8004ade:	d917      	bls.n	8004b10 <_malloc_r+0xc0>
 8004ae0:	19e2      	adds	r2, r4, r7
 8004ae2:	6027      	str	r7, [r4, #0]
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	d111      	bne.n	8004b0c <_malloc_r+0xbc>
 8004ae8:	602a      	str	r2, [r5, #0]
 8004aea:	6863      	ldr	r3, [r4, #4]
 8004aec:	6011      	str	r1, [r2, #0]
 8004aee:	6053      	str	r3, [r2, #4]
 8004af0:	0030      	movs	r0, r6
 8004af2:	0025      	movs	r5, r4
 8004af4:	f000 f86c 	bl	8004bd0 <__malloc_unlock>
 8004af8:	2207      	movs	r2, #7
 8004afa:	350b      	adds	r5, #11
 8004afc:	1d23      	adds	r3, r4, #4
 8004afe:	4395      	bics	r5, r2
 8004b00:	1aea      	subs	r2, r5, r3
 8004b02:	429d      	cmp	r5, r3
 8004b04:	d0e5      	beq.n	8004ad2 <_malloc_r+0x82>
 8004b06:	1b5b      	subs	r3, r3, r5
 8004b08:	50a3      	str	r3, [r4, r2]
 8004b0a:	e7e2      	b.n	8004ad2 <_malloc_r+0x82>
 8004b0c:	605a      	str	r2, [r3, #4]
 8004b0e:	e7ec      	b.n	8004aea <_malloc_r+0x9a>
 8004b10:	6862      	ldr	r2, [r4, #4]
 8004b12:	42a3      	cmp	r3, r4
 8004b14:	d101      	bne.n	8004b1a <_malloc_r+0xca>
 8004b16:	602a      	str	r2, [r5, #0]
 8004b18:	e7ea      	b.n	8004af0 <_malloc_r+0xa0>
 8004b1a:	605a      	str	r2, [r3, #4]
 8004b1c:	e7e8      	b.n	8004af0 <_malloc_r+0xa0>
 8004b1e:	0023      	movs	r3, r4
 8004b20:	6864      	ldr	r4, [r4, #4]
 8004b22:	e7a7      	b.n	8004a74 <_malloc_r+0x24>
 8004b24:	002c      	movs	r4, r5
 8004b26:	686d      	ldr	r5, [r5, #4]
 8004b28:	e7af      	b.n	8004a8a <_malloc_r+0x3a>
 8004b2a:	230c      	movs	r3, #12
 8004b2c:	0030      	movs	r0, r6
 8004b2e:	6033      	str	r3, [r6, #0]
 8004b30:	f000 f84e 	bl	8004bd0 <__malloc_unlock>
 8004b34:	e7cd      	b.n	8004ad2 <_malloc_r+0x82>
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	20000268 	.word	0x20000268

08004b3c <_realloc_r>:
 8004b3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b3e:	0007      	movs	r7, r0
 8004b40:	000e      	movs	r6, r1
 8004b42:	0014      	movs	r4, r2
 8004b44:	2900      	cmp	r1, #0
 8004b46:	d105      	bne.n	8004b54 <_realloc_r+0x18>
 8004b48:	0011      	movs	r1, r2
 8004b4a:	f7ff ff81 	bl	8004a50 <_malloc_r>
 8004b4e:	0005      	movs	r5, r0
 8004b50:	0028      	movs	r0, r5
 8004b52:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	d103      	bne.n	8004b60 <_realloc_r+0x24>
 8004b58:	f7ff ff0e 	bl	8004978 <_free_r>
 8004b5c:	0025      	movs	r5, r4
 8004b5e:	e7f7      	b.n	8004b50 <_realloc_r+0x14>
 8004b60:	f000 f83e 	bl	8004be0 <_malloc_usable_size_r>
 8004b64:	9001      	str	r0, [sp, #4]
 8004b66:	4284      	cmp	r4, r0
 8004b68:	d803      	bhi.n	8004b72 <_realloc_r+0x36>
 8004b6a:	0035      	movs	r5, r6
 8004b6c:	0843      	lsrs	r3, r0, #1
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	d3ee      	bcc.n	8004b50 <_realloc_r+0x14>
 8004b72:	0021      	movs	r1, r4
 8004b74:	0038      	movs	r0, r7
 8004b76:	f7ff ff6b 	bl	8004a50 <_malloc_r>
 8004b7a:	1e05      	subs	r5, r0, #0
 8004b7c:	d0e8      	beq.n	8004b50 <_realloc_r+0x14>
 8004b7e:	9b01      	ldr	r3, [sp, #4]
 8004b80:	0022      	movs	r2, r4
 8004b82:	429c      	cmp	r4, r3
 8004b84:	d900      	bls.n	8004b88 <_realloc_r+0x4c>
 8004b86:	001a      	movs	r2, r3
 8004b88:	0031      	movs	r1, r6
 8004b8a:	0028      	movs	r0, r5
 8004b8c:	f7ff fbbe 	bl	800430c <memcpy>
 8004b90:	0031      	movs	r1, r6
 8004b92:	0038      	movs	r0, r7
 8004b94:	f7ff fef0 	bl	8004978 <_free_r>
 8004b98:	e7da      	b.n	8004b50 <_realloc_r+0x14>
	...

08004b9c <_sbrk_r>:
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	b570      	push	{r4, r5, r6, lr}
 8004ba0:	4d06      	ldr	r5, [pc, #24]	; (8004bbc <_sbrk_r+0x20>)
 8004ba2:	0004      	movs	r4, r0
 8004ba4:	0008      	movs	r0, r1
 8004ba6:	602b      	str	r3, [r5, #0]
 8004ba8:	f7fc fa84 	bl	80010b4 <_sbrk>
 8004bac:	1c43      	adds	r3, r0, #1
 8004bae:	d103      	bne.n	8004bb8 <_sbrk_r+0x1c>
 8004bb0:	682b      	ldr	r3, [r5, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d000      	beq.n	8004bb8 <_sbrk_r+0x1c>
 8004bb6:	6023      	str	r3, [r4, #0]
 8004bb8:	bd70      	pop	{r4, r5, r6, pc}
 8004bba:	46c0      	nop			; (mov r8, r8)
 8004bbc:	20000260 	.word	0x20000260

08004bc0 <__malloc_lock>:
 8004bc0:	b510      	push	{r4, lr}
 8004bc2:	4802      	ldr	r0, [pc, #8]	; (8004bcc <__malloc_lock+0xc>)
 8004bc4:	f7ff feb8 	bl	8004938 <__retarget_lock_acquire_recursive>
 8004bc8:	bd10      	pop	{r4, pc}
 8004bca:	46c0      	nop			; (mov r8, r8)
 8004bcc:	20000264 	.word	0x20000264

08004bd0 <__malloc_unlock>:
 8004bd0:	b510      	push	{r4, lr}
 8004bd2:	4802      	ldr	r0, [pc, #8]	; (8004bdc <__malloc_unlock+0xc>)
 8004bd4:	f7ff feb1 	bl	800493a <__retarget_lock_release_recursive>
 8004bd8:	bd10      	pop	{r4, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	20000264 	.word	0x20000264

08004be0 <_malloc_usable_size_r>:
 8004be0:	1f0b      	subs	r3, r1, #4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	1f18      	subs	r0, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	da01      	bge.n	8004bee <_malloc_usable_size_r+0xe>
 8004bea:	580b      	ldr	r3, [r1, r0]
 8004bec:	18c0      	adds	r0, r0, r3
 8004bee:	4770      	bx	lr

08004bf0 <_init>:
 8004bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bf6:	bc08      	pop	{r3}
 8004bf8:	469e      	mov	lr, r3
 8004bfa:	4770      	bx	lr

08004bfc <_fini>:
 8004bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c02:	bc08      	pop	{r3}
 8004c04:	469e      	mov	lr, r3
 8004c06:	4770      	bx	lr
