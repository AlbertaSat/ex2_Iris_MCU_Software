
IEB_basic_functionality.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079d4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001774  08007a94  08007a94  00017a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009208  08009208  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08009208  08009208  00019208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009210  08009210  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009210  08009210  00019210  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009214  08009214  00019214  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009218  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000078  08009290  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e8  08009290  000201e8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000143f1  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c0a  00000000  00000000  00034491  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  000370a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf8  00000000  00000000  00037ec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00014b4f  00000000  00000000  00038bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f68  00000000  00000000  0004d707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000755df  00000000  00000000  0006066f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d5c4e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a34  00000000  00000000  000d5ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000078 	.word	0x20000078
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007a7c 	.word	0x08007a7c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000007c 	.word	0x2000007c
 8000104:	08007a7c 	.word	0x08007a7c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uldivmod>:
 8000244:	2b00      	cmp	r3, #0
 8000246:	d111      	bne.n	800026c <__aeabi_uldivmod+0x28>
 8000248:	2a00      	cmp	r2, #0
 800024a:	d10f      	bne.n	800026c <__aeabi_uldivmod+0x28>
 800024c:	2900      	cmp	r1, #0
 800024e:	d100      	bne.n	8000252 <__aeabi_uldivmod+0xe>
 8000250:	2800      	cmp	r0, #0
 8000252:	d002      	beq.n	800025a <__aeabi_uldivmod+0x16>
 8000254:	2100      	movs	r1, #0
 8000256:	43c9      	mvns	r1, r1
 8000258:	1c08      	adds	r0, r1, #0
 800025a:	b407      	push	{r0, r1, r2}
 800025c:	4802      	ldr	r0, [pc, #8]	; (8000268 <__aeabi_uldivmod+0x24>)
 800025e:	a102      	add	r1, pc, #8	; (adr r1, 8000268 <__aeabi_uldivmod+0x24>)
 8000260:	1840      	adds	r0, r0, r1
 8000262:	9002      	str	r0, [sp, #8]
 8000264:	bd03      	pop	{r0, r1, pc}
 8000266:	46c0      	nop			; (mov r8, r8)
 8000268:	ffffffd9 	.word	0xffffffd9
 800026c:	b403      	push	{r0, r1}
 800026e:	4668      	mov	r0, sp
 8000270:	b501      	push	{r0, lr}
 8000272:	9802      	ldr	r0, [sp, #8]
 8000274:	f000 f82e 	bl	80002d4 <__udivmoddi4>
 8000278:	9b01      	ldr	r3, [sp, #4]
 800027a:	469e      	mov	lr, r3
 800027c:	b002      	add	sp, #8
 800027e:	bc0c      	pop	{r2, r3}
 8000280:	4770      	bx	lr
 8000282:	46c0      	nop			; (mov r8, r8)

08000284 <__aeabi_lmul>:
 8000284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000286:	0415      	lsls	r5, r2, #16
 8000288:	0c2d      	lsrs	r5, r5, #16
 800028a:	000f      	movs	r7, r1
 800028c:	0001      	movs	r1, r0
 800028e:	002e      	movs	r6, r5
 8000290:	46c6      	mov	lr, r8
 8000292:	4684      	mov	ip, r0
 8000294:	0400      	lsls	r0, r0, #16
 8000296:	0c14      	lsrs	r4, r2, #16
 8000298:	0c00      	lsrs	r0, r0, #16
 800029a:	0c09      	lsrs	r1, r1, #16
 800029c:	4346      	muls	r6, r0
 800029e:	434d      	muls	r5, r1
 80002a0:	4360      	muls	r0, r4
 80002a2:	4361      	muls	r1, r4
 80002a4:	1940      	adds	r0, r0, r5
 80002a6:	0c34      	lsrs	r4, r6, #16
 80002a8:	1824      	adds	r4, r4, r0
 80002aa:	b500      	push	{lr}
 80002ac:	42a5      	cmp	r5, r4
 80002ae:	d903      	bls.n	80002b8 <__aeabi_lmul+0x34>
 80002b0:	2080      	movs	r0, #128	; 0x80
 80002b2:	0240      	lsls	r0, r0, #9
 80002b4:	4680      	mov	r8, r0
 80002b6:	4441      	add	r1, r8
 80002b8:	0c25      	lsrs	r5, r4, #16
 80002ba:	186d      	adds	r5, r5, r1
 80002bc:	4661      	mov	r1, ip
 80002be:	4359      	muls	r1, r3
 80002c0:	437a      	muls	r2, r7
 80002c2:	0430      	lsls	r0, r6, #16
 80002c4:	1949      	adds	r1, r1, r5
 80002c6:	0424      	lsls	r4, r4, #16
 80002c8:	0c00      	lsrs	r0, r0, #16
 80002ca:	1820      	adds	r0, r4, r0
 80002cc:	1889      	adds	r1, r1, r2
 80002ce:	bc80      	pop	{r7}
 80002d0:	46b8      	mov	r8, r7
 80002d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002d4 <__udivmoddi4>:
 80002d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d6:	4657      	mov	r7, sl
 80002d8:	464e      	mov	r6, r9
 80002da:	4645      	mov	r5, r8
 80002dc:	46de      	mov	lr, fp
 80002de:	b5e0      	push	{r5, r6, r7, lr}
 80002e0:	0004      	movs	r4, r0
 80002e2:	000d      	movs	r5, r1
 80002e4:	4692      	mov	sl, r2
 80002e6:	4699      	mov	r9, r3
 80002e8:	b083      	sub	sp, #12
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d830      	bhi.n	8000350 <__udivmoddi4+0x7c>
 80002ee:	d02d      	beq.n	800034c <__udivmoddi4+0x78>
 80002f0:	4649      	mov	r1, r9
 80002f2:	4650      	mov	r0, sl
 80002f4:	f000 f8d8 	bl	80004a8 <__clzdi2>
 80002f8:	0029      	movs	r1, r5
 80002fa:	0006      	movs	r6, r0
 80002fc:	0020      	movs	r0, r4
 80002fe:	f000 f8d3 	bl	80004a8 <__clzdi2>
 8000302:	1a33      	subs	r3, r6, r0
 8000304:	4698      	mov	r8, r3
 8000306:	3b20      	subs	r3, #32
 8000308:	469b      	mov	fp, r3
 800030a:	d433      	bmi.n	8000374 <__udivmoddi4+0xa0>
 800030c:	465a      	mov	r2, fp
 800030e:	4653      	mov	r3, sl
 8000310:	4093      	lsls	r3, r2
 8000312:	4642      	mov	r2, r8
 8000314:	001f      	movs	r7, r3
 8000316:	4653      	mov	r3, sl
 8000318:	4093      	lsls	r3, r2
 800031a:	001e      	movs	r6, r3
 800031c:	42af      	cmp	r7, r5
 800031e:	d83a      	bhi.n	8000396 <__udivmoddi4+0xc2>
 8000320:	42af      	cmp	r7, r5
 8000322:	d100      	bne.n	8000326 <__udivmoddi4+0x52>
 8000324:	e078      	b.n	8000418 <__udivmoddi4+0x144>
 8000326:	465b      	mov	r3, fp
 8000328:	1ba4      	subs	r4, r4, r6
 800032a:	41bd      	sbcs	r5, r7
 800032c:	2b00      	cmp	r3, #0
 800032e:	da00      	bge.n	8000332 <__udivmoddi4+0x5e>
 8000330:	e075      	b.n	800041e <__udivmoddi4+0x14a>
 8000332:	2200      	movs	r2, #0
 8000334:	2300      	movs	r3, #0
 8000336:	9200      	str	r2, [sp, #0]
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2301      	movs	r3, #1
 800033c:	465a      	mov	r2, fp
 800033e:	4093      	lsls	r3, r2
 8000340:	9301      	str	r3, [sp, #4]
 8000342:	2301      	movs	r3, #1
 8000344:	4642      	mov	r2, r8
 8000346:	4093      	lsls	r3, r2
 8000348:	9300      	str	r3, [sp, #0]
 800034a:	e028      	b.n	800039e <__udivmoddi4+0xca>
 800034c:	4282      	cmp	r2, r0
 800034e:	d9cf      	bls.n	80002f0 <__udivmoddi4+0x1c>
 8000350:	2200      	movs	r2, #0
 8000352:	2300      	movs	r3, #0
 8000354:	9200      	str	r2, [sp, #0]
 8000356:	9301      	str	r3, [sp, #4]
 8000358:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800035a:	2b00      	cmp	r3, #0
 800035c:	d001      	beq.n	8000362 <__udivmoddi4+0x8e>
 800035e:	601c      	str	r4, [r3, #0]
 8000360:	605d      	str	r5, [r3, #4]
 8000362:	9800      	ldr	r0, [sp, #0]
 8000364:	9901      	ldr	r1, [sp, #4]
 8000366:	b003      	add	sp, #12
 8000368:	bcf0      	pop	{r4, r5, r6, r7}
 800036a:	46bb      	mov	fp, r7
 800036c:	46b2      	mov	sl, r6
 800036e:	46a9      	mov	r9, r5
 8000370:	46a0      	mov	r8, r4
 8000372:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000374:	4642      	mov	r2, r8
 8000376:	2320      	movs	r3, #32
 8000378:	1a9b      	subs	r3, r3, r2
 800037a:	4652      	mov	r2, sl
 800037c:	40da      	lsrs	r2, r3
 800037e:	4641      	mov	r1, r8
 8000380:	0013      	movs	r3, r2
 8000382:	464a      	mov	r2, r9
 8000384:	408a      	lsls	r2, r1
 8000386:	0017      	movs	r7, r2
 8000388:	4642      	mov	r2, r8
 800038a:	431f      	orrs	r7, r3
 800038c:	4653      	mov	r3, sl
 800038e:	4093      	lsls	r3, r2
 8000390:	001e      	movs	r6, r3
 8000392:	42af      	cmp	r7, r5
 8000394:	d9c4      	bls.n	8000320 <__udivmoddi4+0x4c>
 8000396:	2200      	movs	r2, #0
 8000398:	2300      	movs	r3, #0
 800039a:	9200      	str	r2, [sp, #0]
 800039c:	9301      	str	r3, [sp, #4]
 800039e:	4643      	mov	r3, r8
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d0d9      	beq.n	8000358 <__udivmoddi4+0x84>
 80003a4:	07fb      	lsls	r3, r7, #31
 80003a6:	0872      	lsrs	r2, r6, #1
 80003a8:	431a      	orrs	r2, r3
 80003aa:	4646      	mov	r6, r8
 80003ac:	087b      	lsrs	r3, r7, #1
 80003ae:	e00e      	b.n	80003ce <__udivmoddi4+0xfa>
 80003b0:	42ab      	cmp	r3, r5
 80003b2:	d101      	bne.n	80003b8 <__udivmoddi4+0xe4>
 80003b4:	42a2      	cmp	r2, r4
 80003b6:	d80c      	bhi.n	80003d2 <__udivmoddi4+0xfe>
 80003b8:	1aa4      	subs	r4, r4, r2
 80003ba:	419d      	sbcs	r5, r3
 80003bc:	2001      	movs	r0, #1
 80003be:	1924      	adds	r4, r4, r4
 80003c0:	416d      	adcs	r5, r5
 80003c2:	2100      	movs	r1, #0
 80003c4:	3e01      	subs	r6, #1
 80003c6:	1824      	adds	r4, r4, r0
 80003c8:	414d      	adcs	r5, r1
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d006      	beq.n	80003dc <__udivmoddi4+0x108>
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d9ee      	bls.n	80003b0 <__udivmoddi4+0xdc>
 80003d2:	3e01      	subs	r6, #1
 80003d4:	1924      	adds	r4, r4, r4
 80003d6:	416d      	adcs	r5, r5
 80003d8:	2e00      	cmp	r6, #0
 80003da:	d1f8      	bne.n	80003ce <__udivmoddi4+0xfa>
 80003dc:	9800      	ldr	r0, [sp, #0]
 80003de:	9901      	ldr	r1, [sp, #4]
 80003e0:	465b      	mov	r3, fp
 80003e2:	1900      	adds	r0, r0, r4
 80003e4:	4169      	adcs	r1, r5
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	db24      	blt.n	8000434 <__udivmoddi4+0x160>
 80003ea:	002b      	movs	r3, r5
 80003ec:	465a      	mov	r2, fp
 80003ee:	4644      	mov	r4, r8
 80003f0:	40d3      	lsrs	r3, r2
 80003f2:	002a      	movs	r2, r5
 80003f4:	40e2      	lsrs	r2, r4
 80003f6:	001c      	movs	r4, r3
 80003f8:	465b      	mov	r3, fp
 80003fa:	0015      	movs	r5, r2
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	db2a      	blt.n	8000456 <__udivmoddi4+0x182>
 8000400:	0026      	movs	r6, r4
 8000402:	409e      	lsls	r6, r3
 8000404:	0033      	movs	r3, r6
 8000406:	0026      	movs	r6, r4
 8000408:	4647      	mov	r7, r8
 800040a:	40be      	lsls	r6, r7
 800040c:	0032      	movs	r2, r6
 800040e:	1a80      	subs	r0, r0, r2
 8000410:	4199      	sbcs	r1, r3
 8000412:	9000      	str	r0, [sp, #0]
 8000414:	9101      	str	r1, [sp, #4]
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x84>
 8000418:	42a3      	cmp	r3, r4
 800041a:	d8bc      	bhi.n	8000396 <__udivmoddi4+0xc2>
 800041c:	e783      	b.n	8000326 <__udivmoddi4+0x52>
 800041e:	4642      	mov	r2, r8
 8000420:	2320      	movs	r3, #32
 8000422:	2100      	movs	r1, #0
 8000424:	1a9b      	subs	r3, r3, r2
 8000426:	2200      	movs	r2, #0
 8000428:	9100      	str	r1, [sp, #0]
 800042a:	9201      	str	r2, [sp, #4]
 800042c:	2201      	movs	r2, #1
 800042e:	40da      	lsrs	r2, r3
 8000430:	9201      	str	r2, [sp, #4]
 8000432:	e786      	b.n	8000342 <__udivmoddi4+0x6e>
 8000434:	4642      	mov	r2, r8
 8000436:	2320      	movs	r3, #32
 8000438:	1a9b      	subs	r3, r3, r2
 800043a:	002a      	movs	r2, r5
 800043c:	4646      	mov	r6, r8
 800043e:	409a      	lsls	r2, r3
 8000440:	0023      	movs	r3, r4
 8000442:	40f3      	lsrs	r3, r6
 8000444:	4644      	mov	r4, r8
 8000446:	4313      	orrs	r3, r2
 8000448:	002a      	movs	r2, r5
 800044a:	40e2      	lsrs	r2, r4
 800044c:	001c      	movs	r4, r3
 800044e:	465b      	mov	r3, fp
 8000450:	0015      	movs	r5, r2
 8000452:	2b00      	cmp	r3, #0
 8000454:	dad4      	bge.n	8000400 <__udivmoddi4+0x12c>
 8000456:	4642      	mov	r2, r8
 8000458:	002f      	movs	r7, r5
 800045a:	2320      	movs	r3, #32
 800045c:	0026      	movs	r6, r4
 800045e:	4097      	lsls	r7, r2
 8000460:	1a9b      	subs	r3, r3, r2
 8000462:	40de      	lsrs	r6, r3
 8000464:	003b      	movs	r3, r7
 8000466:	4333      	orrs	r3, r6
 8000468:	e7cd      	b.n	8000406 <__udivmoddi4+0x132>
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <__clzdi2>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d103      	bne.n	80004b6 <__clzdi2+0xe>
 80004ae:	f7ff ffdd 	bl	800046c <__clzsi2>
 80004b2:	3020      	adds	r0, #32
 80004b4:	e002      	b.n	80004bc <__clzdi2+0x14>
 80004b6:	1c08      	adds	r0, r1, #0
 80004b8:	f7ff ffd8 	bl	800046c <__clzsi2>
 80004bc:	bd10      	pop	{r4, pc}
 80004be:	46c0      	nop			; (mov r8, r8)

080004c0 <DBG_PUT>:
#include <stdio.h>
#include <string.h>

extern UART_HandleTypeDef huart1;

static inline void DBG_PUT(char *str) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b082      	sub	sp, #8
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	0018      	movs	r0, r3
 80004cc:	f7ff fe1c 	bl	8000108 <strlen>
 80004d0:	0003      	movs	r3, r0
 80004d2:	b29a      	uxth	r2, r3
 80004d4:	6879      	ldr	r1, [r7, #4]
 80004d6:	4804      	ldr	r0, [pc, #16]	; (80004e8 <DBG_PUT+0x28>)
 80004d8:	2364      	movs	r3, #100	; 0x64
 80004da:	f005 fb67 	bl	8005bac <HAL_UART_Transmit>
}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	46bd      	mov	sp, r7
 80004e2:	b002      	add	sp, #8
 80004e4:	bd80      	pop	{r7, pc}
 80004e6:	46c0      	nop			; (mov r8, r8)
 80004e8:	20000150 	.word	0x20000150

080004ec <arducam_delay_ms>:
#include "ov5642_regs.h"
#include "debug.h"

#define BUFFER_MAX_SIZE 4096

void arducam_delay_ms(int ms) {
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b082      	sub	sp, #8
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
    HAL_Delay(ms);
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	0018      	movs	r0, r3
 80004f8:	f002 fc60 	bl	8002dbc <HAL_Delay>
}
 80004fc:	46c0      	nop			; (mov r8, r8)
 80004fe:	46bd      	mov	sp, r7
 8000500:	b002      	add	sp, #8
 8000502:	bd80      	pop	{r7, pc}

08000504 <Arduino_init>:

void Arduino_init(int m_fmt, int sensor) {
 8000504:	b590      	push	{r4, r7, lr}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
 800050c:	6039      	str	r1, [r7, #0]
    if (m_fmt == RAW){
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d109      	bne.n	8000528 <Arduino_init+0x24>
        arducam_raw_init(1280, 960, sensor);
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	b2da      	uxtb	r2, r3
 8000518:	23f0      	movs	r3, #240	; 0xf0
 800051a:	0099      	lsls	r1, r3, #2
 800051c:	23a0      	movs	r3, #160	; 0xa0
 800051e:	00db      	lsls	r3, r3, #3
 8000520:	0018      	movs	r0, r3
 8000522:	f000 f8bd 	bl	80006a0 <arducam_raw_init>
            wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff, sensor);
            rdSensorReg16_8(0x3621, &reg_val, sensor); // Array Ctl 01 = Horizontal bin
            wrSensorReg16_8(0x3621, reg_val & 0xdf, sensor);
        }
    }
}
 8000526:	e09c      	b.n	8000662 <Arduino_init+0x15e>
        wrSensorReg16_8(REG_SYS_CTL0, 0x82, sensor); // software reset
 8000528:	683b      	ldr	r3, [r7, #0]
 800052a:	b2db      	uxtb	r3, r3
 800052c:	484f      	ldr	r0, [pc, #316]	; (800066c <Arduino_init+0x168>)
 800052e:	001a      	movs	r2, r3
 8000530:	2182      	movs	r1, #130	; 0x82
 8000532:	f002 f815 	bl	8002560 <wrSensorReg16_8>
        wrSensorRegs16_8(OV5642_QVGA_Preview, sensor);
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	b2da      	uxtb	r2, r3
 800053a:	4b4d      	ldr	r3, [pc, #308]	; (8000670 <Arduino_init+0x16c>)
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f002 f86e 	bl	8002620 <wrSensorRegs16_8>
        arducam_delay_ms(100);
 8000544:	2064      	movs	r0, #100	; 0x64
 8000546:	f7ff ffd1 	bl	80004ec <arducam_delay_ms>
        if (m_fmt == JPEG) {
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d13f      	bne.n	80005d0 <Arduino_init+0xcc>
            arducam_delay_ms(100);
 8000550:	2064      	movs	r0, #100	; 0x64
 8000552:	f7ff ffcb 	bl	80004ec <arducam_delay_ms>
            wrSensorRegs16_8(OV5642_JPEG_Capture_QSXGA, sensor);
 8000556:	683b      	ldr	r3, [r7, #0]
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b46      	ldr	r3, [pc, #280]	; (8000674 <Arduino_init+0x170>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f002 f85e 	bl	8002620 <wrSensorRegs16_8>
            wrSensorRegs16_8(ov5642_320x240, sensor);
 8000564:	683b      	ldr	r3, [r7, #0]
 8000566:	b2da      	uxtb	r2, r3
 8000568:	4b43      	ldr	r3, [pc, #268]	; (8000678 <Arduino_init+0x174>)
 800056a:	0011      	movs	r1, r2
 800056c:	0018      	movs	r0, r3
 800056e:	f002 f857 	bl	8002620 <wrSensorRegs16_8>
            arducam_delay_ms(100);
 8000572:	2064      	movs	r0, #100	; 0x64
 8000574:	f7ff ffba 	bl	80004ec <arducam_delay_ms>
            wrSensorReg16_8(0x3818, 0xa8, sensor);
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	b2db      	uxtb	r3, r3
 800057c:	483f      	ldr	r0, [pc, #252]	; (800067c <Arduino_init+0x178>)
 800057e:	001a      	movs	r2, r3
 8000580:	21a8      	movs	r1, #168	; 0xa8
 8000582:	f001 ffed 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x3621, 0x10, sensor);
 8000586:	683b      	ldr	r3, [r7, #0]
 8000588:	b2db      	uxtb	r3, r3
 800058a:	483d      	ldr	r0, [pc, #244]	; (8000680 <Arduino_init+0x17c>)
 800058c:	001a      	movs	r2, r3
 800058e:	2110      	movs	r1, #16
 8000590:	f001 ffe6 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x3801, 0xb0, sensor);
 8000594:	683b      	ldr	r3, [r7, #0]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	483a      	ldr	r0, [pc, #232]	; (8000684 <Arduino_init+0x180>)
 800059a:	001a      	movs	r2, r3
 800059c:	21b0      	movs	r1, #176	; 0xb0
 800059e:	f001 ffdf 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x4407, 0x0C, sensor);
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	4838      	ldr	r0, [pc, #224]	; (8000688 <Arduino_init+0x184>)
 80005a8:	001a      	movs	r2, r3
 80005aa:	210c      	movs	r1, #12
 80005ac:	f001 ffd8 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x5888, 0x00, sensor);
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4835      	ldr	r0, [pc, #212]	; (800068c <Arduino_init+0x188>)
 80005b6:	001a      	movs	r2, r3
 80005b8:	2100      	movs	r1, #0
 80005ba:	f001 ffd1 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x5000, 0xFF, sensor);
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	b2da      	uxtb	r2, r3
 80005c2:	23a0      	movs	r3, #160	; 0xa0
 80005c4:	01db      	lsls	r3, r3, #7
 80005c6:	21ff      	movs	r1, #255	; 0xff
 80005c8:	0018      	movs	r0, r3
 80005ca:	f001 ffc9 	bl	8002560 <wrSensorReg16_8>
}
 80005ce:	e048      	b.n	8000662 <Arduino_init+0x15e>
            wrSensorReg16_8(0x4740, 0x21, sensor);
 80005d0:	683b      	ldr	r3, [r7, #0]
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	482e      	ldr	r0, [pc, #184]	; (8000690 <Arduino_init+0x18c>)
 80005d6:	001a      	movs	r2, r3
 80005d8:	2121      	movs	r1, #33	; 0x21
 80005da:	f001 ffc1 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x501e, 0x2a, sensor); // RGB Dither Ctl = RGB565/555
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	482c      	ldr	r0, [pc, #176]	; (8000694 <Arduino_init+0x190>)
 80005e4:	001a      	movs	r2, r3
 80005e6:	212a      	movs	r1, #42	; 0x2a
 80005e8:	f001 ffba 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x5002, 0xf8, sensor); // ISP Ctl 2 = Dither enable
 80005ec:	683b      	ldr	r3, [r7, #0]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	4829      	ldr	r0, [pc, #164]	; (8000698 <Arduino_init+0x194>)
 80005f2:	001a      	movs	r2, r3
 80005f4:	21f8      	movs	r1, #248	; 0xf8
 80005f6:	f001 ffb3 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x501f, 0x01, sensor); // Format MUX Ctl = ISP RGB
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4827      	ldr	r0, [pc, #156]	; (800069c <Arduino_init+0x198>)
 8000600:	001a      	movs	r2, r3
 8000602:	2101      	movs	r1, #1
 8000604:	f001 ffac 	bl	8002560 <wrSensorReg16_8>
            wrSensorReg16_8(0x4300, 0x61, sensor); // Format Ctl = RGB565
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	b2da      	uxtb	r2, r3
 800060c:	2386      	movs	r3, #134	; 0x86
 800060e:	01db      	lsls	r3, r3, #7
 8000610:	2161      	movs	r1, #97	; 0x61
 8000612:	0018      	movs	r0, r3
 8000614:	f001 ffa4 	bl	8002560 <wrSensorReg16_8>
            rdSensorReg16_8(0x3818, &reg_val, sensor); // Timing Ctl = Mirror/Vertical flip
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	240f      	movs	r4, #15
 800061e:	193b      	adds	r3, r7, r4
 8000620:	4816      	ldr	r0, [pc, #88]	; (800067c <Arduino_init+0x178>)
 8000622:	0019      	movs	r1, r3
 8000624:	f002 f822 	bl	800266c <rdSensorReg16_8>
            wrSensorReg16_8(0x3818, (reg_val | 0x60) & 0xff, sensor);
 8000628:	193b      	adds	r3, r7, r4
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2260      	movs	r2, #96	; 0x60
 800062e:	4313      	orrs	r3, r2
 8000630:	b2db      	uxtb	r3, r3
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	4811      	ldr	r0, [pc, #68]	; (800067c <Arduino_init+0x178>)
 8000638:	0019      	movs	r1, r3
 800063a:	f001 ff91 	bl	8002560 <wrSensorReg16_8>
            rdSensorReg16_8(0x3621, &reg_val, sensor); // Array Ctl 01 = Horizontal bin
 800063e:	683b      	ldr	r3, [r7, #0]
 8000640:	b2da      	uxtb	r2, r3
 8000642:	193b      	adds	r3, r7, r4
 8000644:	480e      	ldr	r0, [pc, #56]	; (8000680 <Arduino_init+0x17c>)
 8000646:	0019      	movs	r1, r3
 8000648:	f002 f810 	bl	800266c <rdSensorReg16_8>
            wrSensorReg16_8(0x3621, reg_val & 0xdf, sensor);
 800064c:	193b      	adds	r3, r7, r4
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2220      	movs	r2, #32
 8000652:	4393      	bics	r3, r2
 8000654:	b2db      	uxtb	r3, r3
 8000656:	683a      	ldr	r2, [r7, #0]
 8000658:	b2d2      	uxtb	r2, r2
 800065a:	4809      	ldr	r0, [pc, #36]	; (8000680 <Arduino_init+0x17c>)
 800065c:	0019      	movs	r1, r3
 800065e:	f001 ff7f 	bl	8002560 <wrSensorReg16_8>
}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	46bd      	mov	sp, r7
 8000666:	b005      	add	sp, #20
 8000668:	bd90      	pop	{r4, r7, pc}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	00003008 	.word	0x00003008
 8000670:	08008568 	.word	0x08008568
 8000674:	08008e88 	.word	0x08008e88
 8000678:	080083c0 	.word	0x080083c0
 800067c:	00003818 	.word	0x00003818
 8000680:	00003621 	.word	0x00003621
 8000684:	00003801 	.word	0x00003801
 8000688:	00004407 	.word	0x00004407
 800068c:	00005888 	.word	0x00005888
 8000690:	00004740 	.word	0x00004740
 8000694:	0000501e 	.word	0x0000501e
 8000698:	00005002 	.word	0x00005002
 800069c:	0000501f 	.word	0x0000501f

080006a0 <arducam_raw_init>:

void arducam_raw_init(int width, int depth, uint8_t sensor) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	1dfb      	adds	r3, r7, #7
 80006ac:	701a      	strb	r2, [r3, #0]
     * you change the resolution, but that's what all the examples do.
     *
     * I also don't know if the order of programming the registers matters, but
     * all the examples set the resolution in exactly the same place.
     */
    wrSensorRegs16_8(OV5642_RAW_Init_start, sensor);
 80006ae:	1dfb      	adds	r3, r7, #7
 80006b0:	781a      	ldrb	r2, [r3, #0]
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <arducam_raw_init+0x78>)
 80006b4:	0011      	movs	r1, r2
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 ffb2 	bl	8002620 <wrSensorRegs16_8>

    wrSensorReg16_8(REG_DVPHO_HI, (uint8_t) (width >> 8), sensor);
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	121b      	asrs	r3, r3, #8
 80006c0:	b2d9      	uxtb	r1, r3
 80006c2:	1dfb      	adds	r3, r7, #7
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	4815      	ldr	r0, [pc, #84]	; (800071c <arducam_raw_init+0x7c>)
 80006c8:	001a      	movs	r2, r3
 80006ca:	f001 ff49 	bl	8002560 <wrSensorReg16_8>
    wrSensorReg16_8(REG_DVPHO_LO, (uint8_t) (width & 0x0ff), sensor);
 80006ce:	68fb      	ldr	r3, [r7, #12]
 80006d0:	b2d9      	uxtb	r1, r3
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4812      	ldr	r0, [pc, #72]	; (8000720 <arducam_raw_init+0x80>)
 80006d8:	001a      	movs	r2, r3
 80006da:	f001 ff41 	bl	8002560 <wrSensorReg16_8>
    wrSensorReg16_8(REG_DVPVO_HI, (uint8_t) (depth >> 8), sensor);
 80006de:	68bb      	ldr	r3, [r7, #8]
 80006e0:	121b      	asrs	r3, r3, #8
 80006e2:	b2d9      	uxtb	r1, r3
 80006e4:	1dfb      	adds	r3, r7, #7
 80006e6:	781b      	ldrb	r3, [r3, #0]
 80006e8:	480e      	ldr	r0, [pc, #56]	; (8000724 <arducam_raw_init+0x84>)
 80006ea:	001a      	movs	r2, r3
 80006ec:	f001 ff38 	bl	8002560 <wrSensorReg16_8>
    wrSensorReg16_8(REG_DVPVO_LO, (uint8_t) (depth & 0x0ff), sensor);
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	b2d9      	uxtb	r1, r3
 80006f4:	1dfb      	adds	r3, r7, #7
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	480b      	ldr	r0, [pc, #44]	; (8000728 <arducam_raw_init+0x88>)
 80006fa:	001a      	movs	r2, r3
 80006fc:	f001 ff30 	bl	8002560 <wrSensorReg16_8>

    wrSensorRegs16_8(OV5642_RAW_Init_finish, sensor);
 8000700:	1dfb      	adds	r3, r7, #7
 8000702:	781a      	ldrb	r2, [r3, #0]
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <arducam_raw_init+0x8c>)
 8000706:	0011      	movs	r1, r2
 8000708:	0018      	movs	r0, r3
 800070a:	f001 ff89 	bl	8002620 <wrSensorRegs16_8>
}
 800070e:	46c0      	nop			; (mov r8, r8)
 8000710:	46bd      	mov	sp, r7
 8000712:	b004      	add	sp, #16
 8000714:	bd80      	pop	{r7, pc}
 8000716:	46c0      	nop			; (mov r8, r8)
 8000718:	08008210 	.word	0x08008210
 800071c:	00003808 	.word	0x00003808
 8000720:	00003809 	.word	0x00003809
 8000724:	0000380a 	.word	0x0000380a
 8000728:	0000380b 	.word	0x0000380b
 800072c:	080082c8 	.word	0x080082c8

08000730 <arducam_get_resolution>:

void arducam_get_resolution(int *width, int *depth, uint8_t sensor) {
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b087      	sub	sp, #28
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	1dfb      	adds	r3, r7, #7
 800073c:	701a      	strb	r2, [r3, #0]
    if (!width || !depth)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d044      	beq.n	80007ce <arducam_get_resolution+0x9e>
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	2b00      	cmp	r3, #0
 8000748:	d041      	beq.n	80007ce <arducam_get_resolution+0x9e>
        return;
    *width = 0;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
    *depth = 0;
 8000750:	68bb      	ldr	r3, [r7, #8]
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]

    uint8_t reg_val;
    rdSensorReg16_8(REG_DVPHO_HI, &reg_val, sensor);
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	2417      	movs	r4, #23
 800075c:	193b      	adds	r3, r7, r4
 800075e:	481e      	ldr	r0, [pc, #120]	; (80007d8 <arducam_get_resolution+0xa8>)
 8000760:	0019      	movs	r1, r3
 8000762:	f001 ff83 	bl	800266c <rdSensorReg16_8>
    *width = reg_val << 8;
 8000766:	0021      	movs	r1, r4
 8000768:	187b      	adds	r3, r7, r1
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	021a      	lsls	r2, r3, #8
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	601a      	str	r2, [r3, #0]
    rdSensorReg16_8(REG_DVPHO_LO, &reg_val, sensor);
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	781a      	ldrb	r2, [r3, #0]
 8000776:	000c      	movs	r4, r1
 8000778:	187b      	adds	r3, r7, r1
 800077a:	4818      	ldr	r0, [pc, #96]	; (80007dc <arducam_get_resolution+0xac>)
 800077c:	0019      	movs	r1, r3
 800077e:	f001 ff75 	bl	800266c <rdSensorReg16_8>
    *width |= reg_val;
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	0021      	movs	r1, r4
 8000788:	187a      	adds	r2, r7, r1
 800078a:	7812      	ldrb	r2, [r2, #0]
 800078c:	431a      	orrs	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	601a      	str	r2, [r3, #0]
    rdSensorReg16_8(REG_DVPVO_HI, &reg_val, sensor);
 8000792:	1dfb      	adds	r3, r7, #7
 8000794:	781a      	ldrb	r2, [r3, #0]
 8000796:	000c      	movs	r4, r1
 8000798:	187b      	adds	r3, r7, r1
 800079a:	4811      	ldr	r0, [pc, #68]	; (80007e0 <arducam_get_resolution+0xb0>)
 800079c:	0019      	movs	r1, r3
 800079e:	f001 ff65 	bl	800266c <rdSensorReg16_8>
    *depth = reg_val << 8;
 80007a2:	0021      	movs	r1, r4
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	021a      	lsls	r2, r3, #8
 80007aa:	68bb      	ldr	r3, [r7, #8]
 80007ac:	601a      	str	r2, [r3, #0]
    rdSensorReg16_8(REG_DVPVO_LO, &reg_val, sensor);
 80007ae:	1dfb      	adds	r3, r7, #7
 80007b0:	781a      	ldrb	r2, [r3, #0]
 80007b2:	000c      	movs	r4, r1
 80007b4:	187b      	adds	r3, r7, r1
 80007b6:	480b      	ldr	r0, [pc, #44]	; (80007e4 <arducam_get_resolution+0xb4>)
 80007b8:	0019      	movs	r1, r3
 80007ba:	f001 ff57 	bl	800266c <rdSensorReg16_8>
    *depth |= reg_val;
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	193a      	adds	r2, r7, r4
 80007c4:	7812      	ldrb	r2, [r2, #0]
 80007c6:	431a      	orrs	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	601a      	str	r2, [r3, #0]
 80007cc:	e000      	b.n	80007d0 <arducam_get_resolution+0xa0>
        return;
 80007ce:	46c0      	nop			; (mov r8, r8)
}
 80007d0:	46bd      	mov	sp, r7
 80007d2:	b007      	add	sp, #28
 80007d4:	bd90      	pop	{r4, r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	00003808 	.word	0x00003808
 80007dc:	00003809 	.word	0x00003809
 80007e0:	0000380a 	.word	0x0000380a
 80007e4:	0000380b 	.word	0x0000380b

080007e8 <arducam_set_resolution>:

int arducam_set_resolution(int format, int width, uint8_t sensor) {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b086      	sub	sp, #24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	60f8      	str	r0, [r7, #12]
 80007f0:	60b9      	str	r1, [r7, #8]
 80007f2:	1dfb      	adds	r3, r7, #7
 80007f4:	701a      	strb	r2, [r3, #0]
    int rc = width;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	617b      	str	r3, [r7, #20]
    switch(width) {
 80007fa:	68ba      	ldr	r2, [r7, #8]
 80007fc:	23a2      	movs	r3, #162	; 0xa2
 80007fe:	011b      	lsls	r3, r3, #4
 8000800:	429a      	cmp	r2, r3
 8000802:	d100      	bne.n	8000806 <arducam_set_resolution+0x1e>
 8000804:	e094      	b.n	8000930 <arducam_set_resolution+0x148>
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	23a2      	movs	r3, #162	; 0xa2
 800080a:	011b      	lsls	r3, r3, #4
 800080c:	429a      	cmp	r2, r3
 800080e:	dd00      	ble.n	8000812 <arducam_set_resolution+0x2a>
 8000810:	e0a2      	b.n	8000958 <arducam_set_resolution+0x170>
 8000812:	68ba      	ldr	r2, [r7, #8]
 8000814:	23f0      	movs	r3, #240	; 0xf0
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	429a      	cmp	r2, r3
 800081a:	d100      	bne.n	800081e <arducam_set_resolution+0x36>
 800081c:	e074      	b.n	8000908 <arducam_set_resolution+0x120>
 800081e:	68ba      	ldr	r2, [r7, #8]
 8000820:	23f0      	movs	r3, #240	; 0xf0
 8000822:	00db      	lsls	r3, r3, #3
 8000824:	429a      	cmp	r2, r3
 8000826:	dd00      	ble.n	800082a <arducam_set_resolution+0x42>
 8000828:	e096      	b.n	8000958 <arducam_set_resolution+0x170>
 800082a:	68ba      	ldr	r2, [r7, #8]
 800082c:	23a0      	movs	r3, #160	; 0xa0
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	429a      	cmp	r2, r3
 8000832:	d054      	beq.n	80008de <arducam_set_resolution+0xf6>
 8000834:	68ba      	ldr	r2, [r7, #8]
 8000836:	23a0      	movs	r3, #160	; 0xa0
 8000838:	00db      	lsls	r3, r3, #3
 800083a:	429a      	cmp	r2, r3
 800083c:	dd00      	ble.n	8000840 <arducam_set_resolution+0x58>
 800083e:	e08b      	b.n	8000958 <arducam_set_resolution+0x170>
 8000840:	68ba      	ldr	r2, [r7, #8]
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	429a      	cmp	r2, r3
 8000848:	d037      	beq.n	80008ba <arducam_set_resolution+0xd2>
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	00db      	lsls	r3, r3, #3
 8000850:	429a      	cmp	r2, r3
 8000852:	dd00      	ble.n	8000856 <arducam_set_resolution+0x6e>
 8000854:	e080      	b.n	8000958 <arducam_set_resolution+0x170>
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	23a0      	movs	r3, #160	; 0xa0
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	429a      	cmp	r2, r3
 800085e:	d005      	beq.n	800086c <arducam_set_resolution+0x84>
 8000860:	68ba      	ldr	r2, [r7, #8]
 8000862:	23a0      	movs	r3, #160	; 0xa0
 8000864:	009b      	lsls	r3, r3, #2
 8000866:	429a      	cmp	r2, r3
 8000868:	d012      	beq.n	8000890 <arducam_set_resolution+0xa8>
 800086a:	e075      	b.n	8000958 <arducam_set_resolution+0x170>
    case 320:
        if (format == RAW) {
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b02      	cmp	r3, #2
 8000870:	d106      	bne.n	8000880 <arducam_set_resolution+0x98>
            DBG_PUT("320x240 not supported for RAW");
 8000872:	4b42      	ldr	r3, [pc, #264]	; (800097c <arducam_set_resolution+0x194>)
 8000874:	0018      	movs	r0, r3
 8000876:	f7ff fe23 	bl	80004c0 <DBG_PUT>
            rc = 0;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
        }
        else
            wrSensorRegs16_8(ov5642_320x240, sensor);
        break;
 800087e:	e072      	b.n	8000966 <arducam_set_resolution+0x17e>
            wrSensorRegs16_8(ov5642_320x240, sensor);
 8000880:	1dfb      	adds	r3, r7, #7
 8000882:	781a      	ldrb	r2, [r3, #0]
 8000884:	4b3e      	ldr	r3, [pc, #248]	; (8000980 <arducam_set_resolution+0x198>)
 8000886:	0011      	movs	r1, r2
 8000888:	0018      	movs	r0, r3
 800088a:	f001 fec9 	bl	8002620 <wrSensorRegs16_8>
        break;
 800088e:	e06a      	b.n	8000966 <arducam_set_resolution+0x17e>
    case 640:
        if (format == RAW)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b02      	cmp	r3, #2
 8000894:	d109      	bne.n	80008aa <arducam_set_resolution+0xc2>
            arducam_raw_init(640, 480, sensor);
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781a      	ldrb	r2, [r3, #0]
 800089a:	23f0      	movs	r3, #240	; 0xf0
 800089c:	0059      	lsls	r1, r3, #1
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	009b      	lsls	r3, r3, #2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f7ff fefc 	bl	80006a0 <arducam_raw_init>
        else
            wrSensorRegs16_8(ov5642_640x480, sensor);
        break;
 80008a8:	e05d      	b.n	8000966 <arducam_set_resolution+0x17e>
            wrSensorRegs16_8(ov5642_640x480, sensor);
 80008aa:	1dfb      	adds	r3, r7, #7
 80008ac:	781a      	ldrb	r2, [r3, #0]
 80008ae:	4b35      	ldr	r3, [pc, #212]	; (8000984 <arducam_set_resolution+0x19c>)
 80008b0:	0011      	movs	r1, r2
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 feb4 	bl	8002620 <wrSensorRegs16_8>
        break;
 80008b8:	e055      	b.n	8000966 <arducam_set_resolution+0x17e>
    case 1024:
        if (format == RAW) {
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d106      	bne.n	80008ce <arducam_set_resolution+0xe6>
            DBG_PUT("1024x768 not supported for RAW");
 80008c0:	4b31      	ldr	r3, [pc, #196]	; (8000988 <arducam_set_resolution+0x1a0>)
 80008c2:	0018      	movs	r0, r3
 80008c4:	f7ff fdfc 	bl	80004c0 <DBG_PUT>
            rc = 0;
 80008c8:	2300      	movs	r3, #0
 80008ca:	617b      	str	r3, [r7, #20]
        }
        else
            wrSensorRegs16_8(ov5642_1024x768, sensor);
        break;
 80008cc:	e04b      	b.n	8000966 <arducam_set_resolution+0x17e>
            wrSensorRegs16_8(ov5642_1024x768, sensor);
 80008ce:	1dfb      	adds	r3, r7, #7
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	4b2e      	ldr	r3, [pc, #184]	; (800098c <arducam_set_resolution+0x1a4>)
 80008d4:	0011      	movs	r1, r2
 80008d6:	0018      	movs	r0, r3
 80008d8:	f001 fea2 	bl	8002620 <wrSensorRegs16_8>
        break;
 80008dc:	e043      	b.n	8000966 <arducam_set_resolution+0x17e>
    case 1280:
        if (format == RAW)
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	2b02      	cmp	r3, #2
 80008e2:	d109      	bne.n	80008f8 <arducam_set_resolution+0x110>
            arducam_raw_init(1280, 960, sensor);
 80008e4:	1dfb      	adds	r3, r7, #7
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	23f0      	movs	r3, #240	; 0xf0
 80008ea:	0099      	lsls	r1, r3, #2
 80008ec:	23a0      	movs	r3, #160	; 0xa0
 80008ee:	00db      	lsls	r3, r3, #3
 80008f0:	0018      	movs	r0, r3
 80008f2:	f7ff fed5 	bl	80006a0 <arducam_raw_init>
        else
            wrSensorRegs16_8(ov5642_1280x960, sensor);
      break;
 80008f6:	e036      	b.n	8000966 <arducam_set_resolution+0x17e>
            wrSensorRegs16_8(ov5642_1280x960, sensor);
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781a      	ldrb	r2, [r3, #0]
 80008fc:	4b24      	ldr	r3, [pc, #144]	; (8000990 <arducam_set_resolution+0x1a8>)
 80008fe:	0011      	movs	r1, r2
 8000900:	0018      	movs	r0, r3
 8000902:	f001 fe8d 	bl	8002620 <wrSensorRegs16_8>
      break;
 8000906:	e02e      	b.n	8000966 <arducam_set_resolution+0x17e>
    case 1600:
      wrSensorRegs16_8(ov5642_1600x1200, sensor);
      break;
#endif
    case 1920:
        if (format == RAW)
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b02      	cmp	r3, #2
 800090c:	d109      	bne.n	8000922 <arducam_set_resolution+0x13a>
            arducam_raw_init(1920, 1080, sensor);
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781a      	ldrb	r2, [r3, #0]
 8000912:	2387      	movs	r3, #135	; 0x87
 8000914:	00d9      	lsls	r1, r3, #3
 8000916:	23f0      	movs	r3, #240	; 0xf0
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff fec0 	bl	80006a0 <arducam_raw_init>
        else {
            DBG_PUT("1920X1080 not supported");
            rc = 0;
        }
        break;
 8000920:	e021      	b.n	8000966 <arducam_set_resolution+0x17e>
            DBG_PUT("1920X1080 not supported");
 8000922:	4b1c      	ldr	r3, [pc, #112]	; (8000994 <arducam_set_resolution+0x1ac>)
 8000924:	0018      	movs	r0, r3
 8000926:	f7ff fdcb 	bl	80004c0 <DBG_PUT>
            rc = 0;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
        break;
 800092e:	e01a      	b.n	8000966 <arducam_set_resolution+0x17e>
    case 2048:
      wrSensorRegs16_8(ov5642_2048x1536, sensor);
      break;
#endif
    case 2592:
        if (format == RAW)
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	2b02      	cmp	r3, #2
 8000934:	d109      	bne.n	800094a <arducam_set_resolution+0x162>
            arducam_raw_init(2592, 1944, sensor);
 8000936:	1dfb      	adds	r3, r7, #7
 8000938:	781a      	ldrb	r2, [r3, #0]
 800093a:	23f3      	movs	r3, #243	; 0xf3
 800093c:	00d9      	lsls	r1, r3, #3
 800093e:	23a2      	movs	r3, #162	; 0xa2
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	0018      	movs	r0, r3
 8000944:	f7ff feac 	bl	80006a0 <arducam_raw_init>
#else
            DBG_PUT("2592x1944 not supported");
            rc = 0;
#endif
        }
      break;
 8000948:	e00d      	b.n	8000966 <arducam_set_resolution+0x17e>
            DBG_PUT("2592x1944 not supported");
 800094a:	4b13      	ldr	r3, [pc, #76]	; (8000998 <arducam_set_resolution+0x1b0>)
 800094c:	0018      	movs	r0, r3
 800094e:	f7ff fdb7 	bl	80004c0 <DBG_PUT>
            rc = 0;
 8000952:	2300      	movs	r3, #0
 8000954:	617b      	str	r3, [r7, #20]
      break;
 8000956:	e006      	b.n	8000966 <arducam_set_resolution+0x17e>
    default:
        DBG_PUT("unsupported width\r\n");
 8000958:	4b10      	ldr	r3, [pc, #64]	; (800099c <arducam_set_resolution+0x1b4>)
 800095a:	0018      	movs	r0, r3
 800095c:	f7ff fdb0 	bl	80004c0 <DBG_PUT>
        rc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	617b      	str	r3, [r7, #20]
        break;
 8000964:	46c0      	nop			; (mov r8, r8)
    }
    HAL_Delay(1000);
 8000966:	23fa      	movs	r3, #250	; 0xfa
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	0018      	movs	r0, r3
 800096c:	f002 fa26 	bl	8002dbc <HAL_Delay>
    return rc;
 8000970:	697b      	ldr	r3, [r7, #20]
}
 8000972:	0018      	movs	r0, r3
 8000974:	46bd      	mov	sp, r7
 8000976:	b006      	add	sp, #24
 8000978:	bd80      	pop	{r7, pc}
 800097a:	46c0      	nop			; (mov r8, r8)
 800097c:	08007a94 	.word	0x08007a94
 8000980:	080083c0 	.word	0x080083c0
 8000984:	0800842c 	.word	0x0800842c
 8000988:	08007ab4 	.word	0x08007ab4
 800098c:	08008500 	.word	0x08008500
 8000990:	08008498 	.word	0x08008498
 8000994:	08007ad4 	.word	0x08007ad4
 8000998:	08007aec 	.word	0x08007aec
 800099c:	08007b04 	.word	0x08007b04

080009a0 <arducam_wait_for_ready>:

#define READY_MAGIC 0x55

bool arducam_wait_for_ready(uint8_t sensor) {
 80009a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	0002      	movs	r2, r0
 80009a8:	1dfb      	adds	r3, r7, #7
 80009aa:	701a      	strb	r2, [r3, #0]
    /* Workaround for the Arducam thinking the first write is a read from 0x40 */
    uint8_t wval;
    uint8_t rval;
    for (int i=0; i<10; i++) {
 80009ac:	2300      	movs	r3, #0
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	e027      	b.n	8000a02 <arducam_wait_for_ready+0x62>
        wval = READY_MAGIC + i;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	250f      	movs	r5, #15
 80009b8:	197b      	adds	r3, r7, r5
 80009ba:	3255      	adds	r2, #85	; 0x55
 80009bc:	701a      	strb	r2, [r3, #0]
        rval = 0;
 80009be:	240e      	movs	r4, #14
 80009c0:	193b      	adds	r3, r7, r4
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
        write_reg(AC_REG_TEST, wval, sensor);
 80009c6:	1dfb      	adds	r3, r7, #7
 80009c8:	781a      	ldrb	r2, [r3, #0]
 80009ca:	197b      	adds	r3, r7, r5
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	0019      	movs	r1, r3
 80009d0:	2000      	movs	r0, #0
 80009d2:	f000 f844 	bl	8000a5e <write_reg>
        rval = read_reg(AC_REG_TEST, sensor);
 80009d6:	0026      	movs	r6, r4
 80009d8:	193c      	adds	r4, r7, r4
 80009da:	1dfb      	adds	r3, r7, #7
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	0019      	movs	r1, r3
 80009e0:	2000      	movs	r0, #0
 80009e2:	f000 f821 	bl	8000a28 <read_reg>
 80009e6:	0003      	movs	r3, r0
 80009e8:	7023      	strb	r3, [r4, #0]
        if (rval == wval)
 80009ea:	19ba      	adds	r2, r7, r6
 80009ec:	197b      	adds	r3, r7, r5
 80009ee:	7812      	ldrb	r2, [r2, #0]
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	429a      	cmp	r2, r3
 80009f4:	d009      	beq.n	8000a0a <arducam_wait_for_ready+0x6a>
            break;

        HAL_Delay(100);
 80009f6:	2064      	movs	r0, #100	; 0x64
 80009f8:	f002 f9e0 	bl	8002dbc <HAL_Delay>
    for (int i=0; i<10; i++) {
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	2b09      	cmp	r3, #9
 8000a06:	ddd4      	ble.n	80009b2 <arducam_wait_for_ready+0x12>
 8000a08:	e000      	b.n	8000a0c <arducam_wait_for_ready+0x6c>
            break;
 8000a0a:	46c0      	nop			; (mov r8, r8)
    }

    return (rval == wval);
 8000a0c:	230e      	movs	r3, #14
 8000a0e:	18fa      	adds	r2, r7, r3
 8000a10:	230f      	movs	r3, #15
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	7812      	ldrb	r2, [r2, #0]
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	1ad3      	subs	r3, r2, r3
 8000a1a:	425a      	negs	r2, r3
 8000a1c:	4153      	adcs	r3, r2
 8000a1e:	b2db      	uxtb	r3, r3
}
 8000a20:	0018      	movs	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	b005      	add	sp, #20
 8000a26:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000a28 <read_reg>:

uint8_t read_reg(uint8_t addr, uint8_t sensor) {
 8000a28:	b5b0      	push	{r4, r5, r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	0002      	movs	r2, r0
 8000a30:	1dfb      	adds	r3, r7, #7
 8000a32:	701a      	strb	r2, [r3, #0]
 8000a34:	1dbb      	adds	r3, r7, #6
 8000a36:	1c0a      	adds	r2, r1, #0
 8000a38:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    data = read_spi_reg(addr, sensor);
 8000a3a:	250f      	movs	r5, #15
 8000a3c:	197c      	adds	r4, r7, r5
 8000a3e:	1dbb      	adds	r3, r7, #6
 8000a40:	781a      	ldrb	r2, [r3, #0]
 8000a42:	1dfb      	adds	r3, r7, #7
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	0011      	movs	r1, r2
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f001 fe61 	bl	8002710 <read_spi_reg>
 8000a4e:	0003      	movs	r3, r0
 8000a50:	7023      	strb	r3, [r4, #0]
    return data;
 8000a52:	197b      	adds	r3, r7, r5
 8000a54:	781b      	ldrb	r3, [r3, #0]
}
 8000a56:	0018      	movs	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	b004      	add	sp, #16
 8000a5c:	bdb0      	pop	{r4, r5, r7, pc}

08000a5e <write_reg>:

void write_reg(uint8_t addr, uint8_t data, uint8_t sensor) {
 8000a5e:	b590      	push	{r4, r7, lr}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	0004      	movs	r4, r0
 8000a66:	0008      	movs	r0, r1
 8000a68:	0011      	movs	r1, r2
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	1c22      	adds	r2, r4, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
 8000a70:	1dbb      	adds	r3, r7, #6
 8000a72:	1c02      	adds	r2, r0, #0
 8000a74:	701a      	strb	r2, [r3, #0]
 8000a76:	1d7b      	adds	r3, r7, #5
 8000a78:	1c0a      	adds	r2, r1, #0
 8000a7a:	701a      	strb	r2, [r3, #0]
    write_spi_reg(addr, data, sensor);
 8000a7c:	1d7b      	adds	r3, r7, #5
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	1dbb      	adds	r3, r7, #6
 8000a82:	7819      	ldrb	r1, [r3, #0]
 8000a84:	1dfb      	adds	r3, r7, #7
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f001 fec0 	bl	800280e <write_spi_reg>
}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	46bd      	mov	sp, r7
 8000a92:	b003      	add	sp, #12
 8000a94:	bd90      	pop	{r4, r7, pc}

08000a96 <read_fifo>:

uint8_t read_fifo(uint8_t sensor)
{
 8000a96:	b5b0      	push	{r4, r5, r7, lr}
 8000a98:	b084      	sub	sp, #16
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	0002      	movs	r2, r0
 8000a9e:	1dfb      	adds	r3, r7, #7
 8000aa0:	701a      	strb	r2, [r3, #0]
    uint8_t data;
    data = read_reg(SINGLE_FIFO_READ, sensor);
 8000aa2:	250f      	movs	r5, #15
 8000aa4:	197c      	adds	r4, r7, r5
 8000aa6:	1dfb      	adds	r3, r7, #7
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	0019      	movs	r1, r3
 8000aac:	203d      	movs	r0, #61	; 0x3d
 8000aae:	f7ff ffbb 	bl	8000a28 <read_reg>
 8000ab2:	0003      	movs	r3, r0
 8000ab4:	7023      	strb	r3, [r4, #0]
    return data;
 8000ab6:	197b      	adds	r3, r7, r5
 8000ab8:	781b      	ldrb	r3, [r3, #0]
}
 8000aba:	0018      	movs	r0, r3
 8000abc:	46bd      	mov	sp, r7
 8000abe:	b004      	add	sp, #16
 8000ac0:	bdb0      	pop	{r4, r5, r7, pc}

08000ac2 <flush_fifo>:

void flush_fifo(uint8_t sensor)
{
 8000ac2:	b580      	push	{r7, lr}
 8000ac4:	b082      	sub	sp, #8
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	0002      	movs	r2, r0
 8000aca:	1dfb      	adds	r3, r7, #7
 8000acc:	701a      	strb	r2, [r3, #0]
    write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK, sensor);
 8000ace:	1dfb      	adds	r3, r7, #7
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	001a      	movs	r2, r3
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	2004      	movs	r0, #4
 8000ad8:	f7ff ffc1 	bl	8000a5e <write_reg>
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <start_capture>:

void start_capture(uint8_t sensor)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	0002      	movs	r2, r0
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	701a      	strb	r2, [r3, #0]
    write_reg(ARDUCHIP_FIFO, FIFO_START_MASK, sensor);
 8000af0:	1dfb      	adds	r3, r7, #7
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	001a      	movs	r2, r3
 8000af6:	2102      	movs	r1, #2
 8000af8:	2004      	movs	r0, #4
 8000afa:	f7ff ffb0 	bl	8000a5e <write_reg>
}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	46bd      	mov	sp, r7
 8000b02:	b002      	add	sp, #8
 8000b04:	bd80      	pop	{r7, pc}

08000b06 <clear_fifo_flag>:

void clear_fifo_flag(uint8_t sensor)
{
 8000b06:	b580      	push	{r7, lr}
 8000b08:	b082      	sub	sp, #8
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	0002      	movs	r2, r0
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	701a      	strb	r2, [r3, #0]
    write_reg(ARDUCHIP_FIFO, FIFO_CLEAR_MASK, sensor);
 8000b12:	1dfb      	adds	r3, r7, #7
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	001a      	movs	r2, r3
 8000b18:	2101      	movs	r1, #1
 8000b1a:	2004      	movs	r0, #4
 8000b1c:	f7ff ff9f 	bl	8000a5e <write_reg>
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <read_fifo_length>:
    write_reg(AC_REG_TEST_MODE, mode, sensor);
    HAL_Delay(1000);
}

uint32_t read_fifo_length(uint8_t sensor)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	0002      	movs	r2, r0
 8000b30:	1dfb      	adds	r3, r7, #7
 8000b32:	701a      	strb	r2, [r3, #0]
    uint32_t len1,len2,len3,len=0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
    len1 = read_reg(FIFO_SIZE1, sensor);
 8000b38:	1dfb      	adds	r3, r7, #7
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	0019      	movs	r1, r3
 8000b3e:	2042      	movs	r0, #66	; 0x42
 8000b40:	f7ff ff72 	bl	8000a28 <read_reg>
 8000b44:	0003      	movs	r3, r0
 8000b46:	613b      	str	r3, [r7, #16]
    len2 = read_reg(FIFO_SIZE2, sensor);
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	0019      	movs	r1, r3
 8000b4e:	2043      	movs	r0, #67	; 0x43
 8000b50:	f7ff ff6a 	bl	8000a28 <read_reg>
 8000b54:	0003      	movs	r3, r0
 8000b56:	60fb      	str	r3, [r7, #12]
    len3 = read_reg(FIFO_SIZE3, sensor) & 0x7f;
 8000b58:	1dfb      	adds	r3, r7, #7
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	0019      	movs	r1, r3
 8000b5e:	2044      	movs	r0, #68	; 0x44
 8000b60:	f7ff ff62 	bl	8000a28 <read_reg>
 8000b64:	0003      	movs	r3, r0
 8000b66:	001a      	movs	r2, r3
 8000b68:	237f      	movs	r3, #127	; 0x7f
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	60bb      	str	r3, [r7, #8]
    len = ((len3 << 16) | (len2 << 8) | len1) & 0x07fffff;
 8000b6e:	68bb      	ldr	r3, [r7, #8]
 8000b70:	041a      	lsls	r2, r3, #16
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	431a      	orrs	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	4313      	orrs	r3, r2
 8000b7c:	025b      	lsls	r3, r3, #9
 8000b7e:	0a5b      	lsrs	r3, r3, #9
 8000b80:	617b      	str	r3, [r7, #20]
    return len;
 8000b82:	697b      	ldr	r3, [r7, #20]
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	b006      	add	sp, #24
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <get_bit>:
    write_reg(addr, temp & (~bit), sensor);
}

//Get corresponding bit status
uint8_t get_bit(uint8_t addr, uint8_t bit, uint8_t sensor)
{
 8000b8c:	b5b0      	push	{r4, r5, r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	0004      	movs	r4, r0
 8000b94:	0008      	movs	r0, r1
 8000b96:	0011      	movs	r1, r2
 8000b98:	1dfb      	adds	r3, r7, #7
 8000b9a:	1c22      	adds	r2, r4, #0
 8000b9c:	701a      	strb	r2, [r3, #0]
 8000b9e:	1dbb      	adds	r3, r7, #6
 8000ba0:	1c02      	adds	r2, r0, #0
 8000ba2:	701a      	strb	r2, [r3, #0]
 8000ba4:	1d7b      	adds	r3, r7, #5
 8000ba6:	1c0a      	adds	r2, r1, #0
 8000ba8:	701a      	strb	r2, [r3, #0]
    uint8_t temp;
    temp = read_reg(addr, sensor);
 8000baa:	250f      	movs	r5, #15
 8000bac:	197c      	adds	r4, r7, r5
 8000bae:	1d7b      	adds	r3, r7, #5
 8000bb0:	781a      	ldrb	r2, [r3, #0]
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f7ff ff35 	bl	8000a28 <read_reg>
 8000bbe:	0003      	movs	r3, r0
 8000bc0:	7023      	strb	r3, [r4, #0]
    temp = temp & bit;
 8000bc2:	0028      	movs	r0, r5
 8000bc4:	183b      	adds	r3, r7, r0
 8000bc6:	183a      	adds	r2, r7, r0
 8000bc8:	1db9      	adds	r1, r7, #6
 8000bca:	7812      	ldrb	r2, [r2, #0]
 8000bcc:	7809      	ldrb	r1, [r1, #0]
 8000bce:	400a      	ands	r2, r1
 8000bd0:	701a      	strb	r2, [r3, #0]
    return temp;
 8000bd2:	183b      	adds	r3, r7, r0
 8000bd4:	781b      	ldrb	r3, [r3, #0]
}
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	b004      	add	sp, #16
 8000bdc:	bdb0      	pop	{r4, r5, r7, pc}

08000bde <hex_2_ascii>:

char hex_2_ascii(uint8_t hex) {
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	0002      	movs	r2, r0
 8000be6:	1dfb      	adds	r3, r7, #7
 8000be8:	701a      	strb	r2, [r3, #0]
    return (hex < 10) ? '0' + hex : 'a' + (hex - 10);
 8000bea:	1dfb      	adds	r3, r7, #7
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b09      	cmp	r3, #9
 8000bf0:	d804      	bhi.n	8000bfc <hex_2_ascii+0x1e>
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	3330      	adds	r3, #48	; 0x30
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	e003      	b.n	8000c04 <hex_2_ascii+0x26>
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	3357      	adds	r3, #87	; 0x57
 8000c02:	b2db      	uxtb	r3, r3
}
 8000c04:	0018      	movs	r0, r3
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <dump_uart_bmp>:
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0xE0, 0x07, 0x00, 0x00, 0x1F, 0x00,
  0x00, 0x00
};


static void dump_uart_bmp(uint8_t sensor) {
 8000c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c0e:	b0ab      	sub	sp, #172	; 0xac
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	0002      	movs	r2, r0
 8000c14:	1dfb      	adds	r3, r7, #7
 8000c16:	701a      	strb	r2, [r3, #0]
    uint32_t width = 320;
 8000c18:	23a0      	movs	r3, #160	; 0xa0
 8000c1a:	005b      	lsls	r3, r3, #1
 8000c1c:	229c      	movs	r2, #156	; 0x9c
 8000c1e:	18b9      	adds	r1, r7, r2
 8000c20:	600b      	str	r3, [r1, #0]
    uint32_t depth = 240;
 8000c22:	23f0      	movs	r3, #240	; 0xf0
 8000c24:	2198      	movs	r1, #152	; 0x98
 8000c26:	1878      	adds	r0, r7, r1
 8000c28:	6003      	str	r3, [r0, #0]
    uint32_t length = width*depth;
 8000c2a:	18bb      	adds	r3, r7, r2
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	187a      	adds	r2, r7, r1
 8000c30:	6812      	ldr	r2, [r2, #0]
 8000c32:	4353      	muls	r3, r2
 8000c34:	2594      	movs	r5, #148	; 0x94
 8000c36:	197a      	adds	r2, r7, r5
 8000c38:	6013      	str	r3, [r2, #0]
    char buf[64];
    buf[2] = ' ';
 8000c3a:	214c      	movs	r1, #76	; 0x4c
 8000c3c:	187b      	adds	r3, r7, r1
 8000c3e:	2220      	movs	r2, #32
 8000c40:	709a      	strb	r2, [r3, #2]
    buf[3] = 0;
 8000c42:	187b      	adds	r3, r7, r1
 8000c44:	2200      	movs	r2, #0
 8000c46:	70da      	strb	r2, [r3, #3]

    char BMP_hdr[BMP_HDR_LEN] = { 0 };
 8000c48:	243c      	movs	r4, #60	; 0x3c
 8000c4a:	193b      	adds	r3, r7, r4
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	220a      	movs	r2, #10
 8000c54:	2100      	movs	r1, #0
 8000c56:	0018      	movs	r0, r3
 8000c58:	f005 fde6 	bl	8006828 <memset>
    char info_hdr[INFO_HDR_LEN] = { 0 };
 8000c5c:	2308      	movs	r3, #8
 8000c5e:	18fb      	adds	r3, r7, r3
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2230      	movs	r2, #48	; 0x30
 8000c68:	2100      	movs	r1, #0
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f005 fddc 	bl	8006828 <memset>
    BMP_hdr[0] = 'B';
 8000c70:	0021      	movs	r1, r4
 8000c72:	187b      	adds	r3, r7, r1
 8000c74:	2242      	movs	r2, #66	; 0x42
 8000c76:	701a      	strb	r2, [r3, #0]
    BMP_hdr[1] = 'M';
 8000c78:	187b      	adds	r3, r7, r1
 8000c7a:	224d      	movs	r2, #77	; 0x4d
 8000c7c:	705a      	strb	r2, [r3, #1]
    uint32_t filesize = length*2 + BMP_HDR_LEN + INFO_HDR_LEN;
 8000c7e:	197b      	adds	r3, r7, r5
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	3321      	adds	r3, #33	; 0x21
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	2090      	movs	r0, #144	; 0x90
 8000c88:	183a      	adds	r2, r7, r0
 8000c8a:	6013      	str	r3, [r2, #0]
    BMP_hdr[2] = filesize;
 8000c8c:	183b      	adds	r3, r7, r0
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	187b      	adds	r3, r7, r1
 8000c94:	709a      	strb	r2, [r3, #2]
    BMP_hdr[3] = filesize >> 8;
 8000c96:	183b      	adds	r3, r7, r0
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	0a1b      	lsrs	r3, r3, #8
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	187b      	adds	r3, r7, r1
 8000ca0:	70da      	strb	r2, [r3, #3]
    BMP_hdr[4] = filesize >> 16;
 8000ca2:	183b      	adds	r3, r7, r0
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	0c1b      	lsrs	r3, r3, #16
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	187b      	adds	r3, r7, r1
 8000cac:	711a      	strb	r2, [r3, #4]
    BMP_hdr[5] = filesize >> 24;
 8000cae:	183b      	adds	r3, r7, r0
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	0e1b      	lsrs	r3, r3, #24
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	187b      	adds	r3, r7, r1
 8000cb8:	715a      	strb	r2, [r3, #5]
    BMP_hdr[10] = BMP_HDR_LEN + INFO_HDR_LEN;
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2242      	movs	r2, #66	; 0x42
 8000cbe:	729a      	strb	r2, [r3, #10]

    // write the header
    int i;
    for (i=0; i<BMP_HDR_LEN; i++) {
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	22a4      	movs	r2, #164	; 0xa4
 8000cc4:	18ba      	adds	r2, r7, r2
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	e028      	b.n	8000d1c <dump_uart_bmp+0x110>
        buf[0] = hex_2_ascii(BMP_hdr[i] >> 4);
 8000cca:	263c      	movs	r6, #60	; 0x3c
 8000ccc:	19ba      	adds	r2, r7, r6
 8000cce:	24a4      	movs	r4, #164	; 0xa4
 8000cd0:	193b      	adds	r3, r7, r4
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	18d3      	adds	r3, r2, r3
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	091b      	lsrs	r3, r3, #4
 8000cda:	b2db      	uxtb	r3, r3
 8000cdc:	0018      	movs	r0, r3
 8000cde:	f7ff ff7e 	bl	8000bde <hex_2_ascii>
 8000ce2:	0003      	movs	r3, r0
 8000ce4:	001a      	movs	r2, r3
 8000ce6:	254c      	movs	r5, #76	; 0x4c
 8000ce8:	197b      	adds	r3, r7, r5
 8000cea:	701a      	strb	r2, [r3, #0]
        buf[1] = hex_2_ascii(BMP_hdr[i] & 0x0f);
 8000cec:	19ba      	adds	r2, r7, r6
 8000cee:	193b      	adds	r3, r7, r4
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	18d3      	adds	r3, r2, r3
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	220f      	movs	r2, #15
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff6e 	bl	8000bde <hex_2_ascii>
 8000d02:	0003      	movs	r3, r0
 8000d04:	001a      	movs	r2, r3
 8000d06:	197b      	adds	r3, r7, r5
 8000d08:	705a      	strb	r2, [r3, #1]
        DBG_PUT(buf);
 8000d0a:	197b      	adds	r3, r7, r5
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f7ff fbd7 	bl	80004c0 <DBG_PUT>
    for (i=0; i<BMP_HDR_LEN; i++) {
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	193a      	adds	r2, r7, r4
 8000d1a:	6013      	str	r3, [r2, #0]
 8000d1c:	24a4      	movs	r4, #164	; 0xa4
 8000d1e:	193b      	adds	r3, r7, r4
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	2b0d      	cmp	r3, #13
 8000d24:	ddd1      	ble.n	8000cca <dump_uart_bmp+0xbe>
    }

    info_hdr[0] = INFO_HDR_LEN;
 8000d26:	2108      	movs	r1, #8
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	2234      	movs	r2, #52	; 0x34
 8000d2c:	701a      	strb	r2, [r3, #0]
    info_hdr[4] = width;
 8000d2e:	209c      	movs	r0, #156	; 0x9c
 8000d30:	183b      	adds	r3, r7, r0
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	711a      	strb	r2, [r3, #4]
    info_hdr[5] = width >> 8;
 8000d3a:	183b      	adds	r3, r7, r0
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	0a1b      	lsrs	r3, r3, #8
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	715a      	strb	r2, [r3, #5]
    info_hdr[6] = width >> 16;
 8000d46:	183b      	adds	r3, r7, r0
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	0c1b      	lsrs	r3, r3, #16
 8000d4c:	b2da      	uxtb	r2, r3
 8000d4e:	187b      	adds	r3, r7, r1
 8000d50:	719a      	strb	r2, [r3, #6]
    info_hdr[7] = width >> 24;
 8000d52:	183b      	adds	r3, r7, r0
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	0e1b      	lsrs	r3, r3, #24
 8000d58:	b2da      	uxtb	r2, r3
 8000d5a:	187b      	adds	r3, r7, r1
 8000d5c:	71da      	strb	r2, [r3, #7]
    info_hdr[8] = depth;
 8000d5e:	2098      	movs	r0, #152	; 0x98
 8000d60:	183b      	adds	r3, r7, r0
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	187b      	adds	r3, r7, r1
 8000d68:	721a      	strb	r2, [r3, #8]
    info_hdr[9] = depth >> 8;
 8000d6a:	183b      	adds	r3, r7, r0
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	0a1b      	lsrs	r3, r3, #8
 8000d70:	b2da      	uxtb	r2, r3
 8000d72:	187b      	adds	r3, r7, r1
 8000d74:	725a      	strb	r2, [r3, #9]
    info_hdr[10] = depth >> 16;
 8000d76:	183b      	adds	r3, r7, r0
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	0c1b      	lsrs	r3, r3, #16
 8000d7c:	b2da      	uxtb	r2, r3
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	729a      	strb	r2, [r3, #10]
    info_hdr[11] = depth >> 24;
 8000d82:	183b      	adds	r3, r7, r0
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	0e1b      	lsrs	r3, r3, #24
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	72da      	strb	r2, [r3, #11]
    info_hdr[12] = 1; // # of color planes
 8000d8e:	187b      	adds	r3, r7, r1
 8000d90:	2201      	movs	r2, #1
 8000d92:	731a      	strb	r2, [r3, #12]
    info_hdr[14] = 16; // # of bits per pixel
 8000d94:	187b      	adds	r3, r7, r1
 8000d96:	2210      	movs	r2, #16
 8000d98:	739a      	strb	r2, [r3, #14]
    info_hdr[16] = 3; // BI_BITFIELDS
 8000d9a:	187b      	adds	r3, r7, r1
 8000d9c:	2203      	movs	r2, #3
 8000d9e:	741a      	strb	r2, [r3, #16]
    info_hdr[20] = (length * 2);
 8000da0:	2094      	movs	r0, #148	; 0x94
 8000da2:	183b      	adds	r3, r7, r0
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	b2db      	uxtb	r3, r3
 8000da8:	18db      	adds	r3, r3, r3
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	187b      	adds	r3, r7, r1
 8000dae:	751a      	strb	r2, [r3, #20]
    info_hdr[21] = (length * 2) >> 8;
 8000db0:	183b      	adds	r3, r7, r0
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	0a1b      	lsrs	r3, r3, #8
 8000db8:	b2da      	uxtb	r2, r3
 8000dba:	187b      	adds	r3, r7, r1
 8000dbc:	755a      	strb	r2, [r3, #21]
    info_hdr[22] = (length * 2) >> 16;
 8000dbe:	183b      	adds	r3, r7, r0
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	0c1b      	lsrs	r3, r3, #16
 8000dc6:	b2da      	uxtb	r2, r3
 8000dc8:	187b      	adds	r3, r7, r1
 8000dca:	759a      	strb	r2, [r3, #22]
    info_hdr[23] = (length * 2) >> 24;
 8000dcc:	183b      	adds	r3, r7, r0
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	005b      	lsls	r3, r3, #1
 8000dd2:	0e1b      	lsrs	r3, r3, #24
 8000dd4:	b2da      	uxtb	r2, r3
 8000dd6:	0008      	movs	r0, r1
 8000dd8:	183b      	adds	r3, r7, r0
 8000dda:	75da      	strb	r2, [r3, #23]
    info_hdr[24] = info_hdr[28] = 0xc4; // print resolution
 8000ddc:	183b      	adds	r3, r7, r0
 8000dde:	22c4      	movs	r2, #196	; 0xc4
 8000de0:	771a      	strb	r2, [r3, #28]
 8000de2:	183b      	adds	r3, r7, r0
 8000de4:	7f1a      	ldrb	r2, [r3, #28]
 8000de6:	183b      	adds	r3, r7, r0
 8000de8:	761a      	strb	r2, [r3, #24]
    info_hdr[25] = info_hdr[29] = 0x0e;
 8000dea:	183b      	adds	r3, r7, r0
 8000dec:	220e      	movs	r2, #14
 8000dee:	775a      	strb	r2, [r3, #29]
 8000df0:	183b      	adds	r3, r7, r0
 8000df2:	7f5a      	ldrb	r2, [r3, #29]
 8000df4:	183b      	adds	r3, r7, r0
 8000df6:	765a      	strb	r2, [r3, #25]
    info_hdr[40] = 0; // Red channel bitmask - in big-endian
 8000df8:	183b      	adds	r3, r7, r0
 8000dfa:	2228      	movs	r2, #40	; 0x28
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	5499      	strb	r1, [r3, r2]
    info_hdr[41] = 0xf8;
 8000e00:	183b      	adds	r3, r7, r0
 8000e02:	2229      	movs	r2, #41	; 0x29
 8000e04:	21f8      	movs	r1, #248	; 0xf8
 8000e06:	5499      	strb	r1, [r3, r2]
    info_hdr[44] = 0xe0; // Green channel bitmask
 8000e08:	183b      	adds	r3, r7, r0
 8000e0a:	222c      	movs	r2, #44	; 0x2c
 8000e0c:	21e0      	movs	r1, #224	; 0xe0
 8000e0e:	5499      	strb	r1, [r3, r2]
    info_hdr[45] = 0x07;
 8000e10:	183b      	adds	r3, r7, r0
 8000e12:	222d      	movs	r2, #45	; 0x2d
 8000e14:	2107      	movs	r1, #7
 8000e16:	5499      	strb	r1, [r3, r2]
    info_hdr[48] = 0x1f; // Blue channel bitmask in big-endian
 8000e18:	183b      	adds	r3, r7, r0
 8000e1a:	2230      	movs	r2, #48	; 0x30
 8000e1c:	211f      	movs	r1, #31
 8000e1e:	5499      	strb	r1, [r3, r2]

    // write the info
    for (i=0; i<INFO_HDR_LEN; i++) {
 8000e20:	2300      	movs	r3, #0
 8000e22:	193a      	adds	r2, r7, r4
 8000e24:	6013      	str	r3, [r2, #0]
 8000e26:	e028      	b.n	8000e7a <dump_uart_bmp+0x26e>
        buf[0] = hex_2_ascii(info_hdr[i] >> 4);
 8000e28:	2608      	movs	r6, #8
 8000e2a:	19ba      	adds	r2, r7, r6
 8000e2c:	24a4      	movs	r4, #164	; 0xa4
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	18d3      	adds	r3, r2, r3
 8000e34:	781b      	ldrb	r3, [r3, #0]
 8000e36:	091b      	lsrs	r3, r3, #4
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff fecf 	bl	8000bde <hex_2_ascii>
 8000e40:	0003      	movs	r3, r0
 8000e42:	001a      	movs	r2, r3
 8000e44:	254c      	movs	r5, #76	; 0x4c
 8000e46:	197b      	adds	r3, r7, r5
 8000e48:	701a      	strb	r2, [r3, #0]
        buf[1] = hex_2_ascii(info_hdr[i] & 0x0f);
 8000e4a:	19ba      	adds	r2, r7, r6
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	18d3      	adds	r3, r2, r3
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	220f      	movs	r2, #15
 8000e56:	4013      	ands	r3, r2
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	0018      	movs	r0, r3
 8000e5c:	f7ff febf 	bl	8000bde <hex_2_ascii>
 8000e60:	0003      	movs	r3, r0
 8000e62:	001a      	movs	r2, r3
 8000e64:	197b      	adds	r3, r7, r5
 8000e66:	705a      	strb	r2, [r3, #1]
        DBG_PUT(buf);
 8000e68:	197b      	adds	r3, r7, r5
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f7ff fb28 	bl	80004c0 <DBG_PUT>
    for (i=0; i<INFO_HDR_LEN; i++) {
 8000e70:	193b      	adds	r3, r7, r4
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3301      	adds	r3, #1
 8000e76:	193a      	adds	r2, r7, r4
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	23a4      	movs	r3, #164	; 0xa4
 8000e7c:	18fb      	adds	r3, r7, r3
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	2b33      	cmp	r3, #51	; 0x33
 8000e82:	ddd1      	ble.n	8000e28 <dump_uart_bmp+0x21c>
    }

    for (int i=0; i<length; i++) {
 8000e84:	2300      	movs	r3, #0
 8000e86:	22a0      	movs	r2, #160	; 0xa0
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	6013      	str	r3, [r2, #0]
 8000e8c:	e024      	b.n	8000ed8 <dump_uart_bmp+0x2cc>
        uint8_t VH = read_fifo(sensor);
 8000e8e:	258f      	movs	r5, #143	; 0x8f
 8000e90:	197c      	adds	r4, r7, r5
 8000e92:	1dfb      	adds	r3, r7, #7
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	0018      	movs	r0, r3
 8000e98:	f7ff fdfd 	bl	8000a96 <read_fifo>
 8000e9c:	0003      	movs	r3, r0
 8000e9e:	7023      	strb	r3, [r4, #0]
        uint8_t VL = read_fifo(sensor);
 8000ea0:	268e      	movs	r6, #142	; 0x8e
 8000ea2:	19bc      	adds	r4, r7, r6
 8000ea4:	1dfb      	adds	r3, r7, #7
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f7ff fdf4 	bl	8000a96 <read_fifo>
 8000eae:	0003      	movs	r3, r0
 8000eb0:	7023      	strb	r3, [r4, #0]
        sprintf(buf, "%02x %02x ", VH, VL);
 8000eb2:	197b      	adds	r3, r7, r5
 8000eb4:	781a      	ldrb	r2, [r3, #0]
 8000eb6:	19bb      	adds	r3, r7, r6
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <dump_uart_bmp+0x2e8>)
 8000ebc:	244c      	movs	r4, #76	; 0x4c
 8000ebe:	1938      	adds	r0, r7, r4
 8000ec0:	f005 fcba 	bl	8006838 <siprintf>
        DBG_PUT(buf);
 8000ec4:	193b      	adds	r3, r7, r4
 8000ec6:	0018      	movs	r0, r3
 8000ec8:	f7ff fafa 	bl	80004c0 <DBG_PUT>
    for (int i=0; i<length; i++) {
 8000ecc:	22a0      	movs	r2, #160	; 0xa0
 8000ece:	18bb      	adds	r3, r7, r2
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	18ba      	adds	r2, r7, r2
 8000ed6:	6013      	str	r3, [r2, #0]
 8000ed8:	23a0      	movs	r3, #160	; 0xa0
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2294      	movs	r2, #148	; 0x94
 8000ee0:	18ba      	adds	r2, r7, r2
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	d8d2      	bhi.n	8000e8e <dump_uart_bmp+0x282>
    }
}
 8000ee8:	46c0      	nop			; (mov r8, r8)
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b02b      	add	sp, #172	; 0xac
 8000ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ef2:	46c0      	nop			; (mov r8, r8)
 8000ef4:	08007b18 	.word	0x08007b18

08000ef8 <dump_uart_jpg>:

static void dump_uart_jpg(uint32_t length, uint8_t sensor) {
 8000ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000efa:	b097      	sub	sp, #92	; 0x5c
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	000a      	movs	r2, r1
 8000f02:	1cfb      	adds	r3, r7, #3
 8000f04:	701a      	strb	r2, [r3, #0]
    uint8_t prev = 0, curr = 0;
 8000f06:	234f      	movs	r3, #79	; 0x4f
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	701a      	strb	r2, [r3, #0]
 8000f0e:	2357      	movs	r3, #87	; 0x57
 8000f10:	18fb      	adds	r3, r7, r3
 8000f12:	2200      	movs	r2, #0
 8000f14:	701a      	strb	r2, [r3, #0]
    bool found_header = false;
 8000f16:	2356      	movs	r3, #86	; 0x56
 8000f18:	18fb      	adds	r3, r7, r3
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	701a      	strb	r2, [r3, #0]
    uint32_t i;
    char buf[64];

    for (i=0; i<length; i++) {
 8000f1e:	2300      	movs	r3, #0
 8000f20:	653b      	str	r3, [r7, #80]	; 0x50
 8000f22:	e057      	b.n	8000fd4 <dump_uart_jpg+0xdc>
        prev = curr;
 8000f24:	264f      	movs	r6, #79	; 0x4f
 8000f26:	19bb      	adds	r3, r7, r6
 8000f28:	2557      	movs	r5, #87	; 0x57
 8000f2a:	197a      	adds	r2, r7, r5
 8000f2c:	7812      	ldrb	r2, [r2, #0]
 8000f2e:	701a      	strb	r2, [r3, #0]
        curr = read_fifo(sensor);
 8000f30:	197c      	adds	r4, r7, r5
 8000f32:	1cfb      	adds	r3, r7, #3
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	0018      	movs	r0, r3
 8000f38:	f7ff fdad 	bl	8000a96 <read_fifo>
 8000f3c:	0003      	movs	r3, r0
 8000f3e:	7023      	strb	r3, [r4, #0]
        if ((curr == 0xd9) && (prev == 0xff)) {
 8000f40:	002a      	movs	r2, r5
 8000f42:	18bb      	adds	r3, r7, r2
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2bd9      	cmp	r3, #217	; 0xd9
 8000f48:	d114      	bne.n	8000f74 <dump_uart_jpg+0x7c>
 8000f4a:	19bb      	adds	r3, r7, r6
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	2bff      	cmp	r3, #255	; 0xff
 8000f50:	d110      	bne.n	8000f74 <dump_uart_jpg+0x7c>
            // found the footer - break
            sprintf(buf, "%02x ", curr);
 8000f52:	18bb      	adds	r3, r7, r2
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	492b      	ldr	r1, [pc, #172]	; (8001004 <dump_uart_jpg+0x10c>)
 8000f58:	240c      	movs	r4, #12
 8000f5a:	193b      	adds	r3, r7, r4
 8000f5c:	0018      	movs	r0, r3
 8000f5e:	f005 fc6b 	bl	8006838 <siprintf>
            DBG_PUT(buf);
 8000f62:	193b      	adds	r3, r7, r4
 8000f64:	0018      	movs	r0, r3
 8000f66:	f7ff faab 	bl	80004c0 <DBG_PUT>
            found_header = false;
 8000f6a:	2356      	movs	r3, #86	; 0x56
 8000f6c:	18fb      	adds	r3, r7, r3
 8000f6e:	2200      	movs	r2, #0
 8000f70:	701a      	strb	r2, [r3, #0]
            break;
 8000f72:	e033      	b.n	8000fdc <dump_uart_jpg+0xe4>
        }

        if (found_header) {
 8000f74:	2356      	movs	r3, #86	; 0x56
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d00d      	beq.n	8000f9a <dump_uart_jpg+0xa2>
            sprintf(buf, "%02x ", curr);
 8000f7e:	2357      	movs	r3, #87	; 0x57
 8000f80:	18fb      	adds	r3, r7, r3
 8000f82:	781a      	ldrb	r2, [r3, #0]
 8000f84:	491f      	ldr	r1, [pc, #124]	; (8001004 <dump_uart_jpg+0x10c>)
 8000f86:	240c      	movs	r4, #12
 8000f88:	193b      	adds	r3, r7, r4
 8000f8a:	0018      	movs	r0, r3
 8000f8c:	f005 fc54 	bl	8006838 <siprintf>
            DBG_PUT(buf);
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	0018      	movs	r0, r3
 8000f94:	f7ff fa94 	bl	80004c0 <DBG_PUT>
 8000f98:	e019      	b.n	8000fce <dump_uart_jpg+0xd6>
        }
        else if ((curr == 0xd8) && (prev = 0xff)) {
 8000f9a:	2157      	movs	r1, #87	; 0x57
 8000f9c:	187b      	adds	r3, r7, r1
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2bd8      	cmp	r3, #216	; 0xd8
 8000fa2:	d114      	bne.n	8000fce <dump_uart_jpg+0xd6>
 8000fa4:	204f      	movs	r0, #79	; 0x4f
 8000fa6:	183b      	adds	r3, r7, r0
 8000fa8:	22ff      	movs	r2, #255	; 0xff
 8000faa:	701a      	strb	r2, [r3, #0]
            found_header = true;
 8000fac:	2356      	movs	r3, #86	; 0x56
 8000fae:	18fb      	adds	r3, r7, r3
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	701a      	strb	r2, [r3, #0]
            sprintf(buf, "%02x %02x ", prev, curr);
 8000fb4:	183b      	adds	r3, r7, r0
 8000fb6:	781a      	ldrb	r2, [r3, #0]
 8000fb8:	187b      	adds	r3, r7, r1
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	4912      	ldr	r1, [pc, #72]	; (8001008 <dump_uart_jpg+0x110>)
 8000fbe:	240c      	movs	r4, #12
 8000fc0:	1938      	adds	r0, r7, r4
 8000fc2:	f005 fc39 	bl	8006838 <siprintf>
            DBG_PUT(buf);
 8000fc6:	193b      	adds	r3, r7, r4
 8000fc8:	0018      	movs	r0, r3
 8000fca:	f7ff fa79 	bl	80004c0 <DBG_PUT>
    for (i=0; i<length; i++) {
 8000fce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8000fd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d3a3      	bcc.n	8000f24 <dump_uart_jpg+0x2c>
        }
    }

    if (found_header) {
 8000fdc:	2356      	movs	r3, #86	; 0x56
 8000fde:	18fb      	adds	r3, r7, r3
 8000fe0:	781b      	ldrb	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d00a      	beq.n	8000ffc <dump_uart_jpg+0x104>
        // We found the header but not the footer :-(
        sprintf(buf, "ff d9 ");
 8000fe6:	4a09      	ldr	r2, [pc, #36]	; (800100c <dump_uart_jpg+0x114>)
 8000fe8:	240c      	movs	r4, #12
 8000fea:	193b      	adds	r3, r7, r4
 8000fec:	0011      	movs	r1, r2
 8000fee:	0018      	movs	r0, r3
 8000ff0:	f005 fc22 	bl	8006838 <siprintf>
        DBG_PUT(buf);
 8000ff4:	193b      	adds	r3, r7, r4
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	f7ff fa62 	bl	80004c0 <DBG_PUT>
    }
}
 8000ffc:	46c0      	nop			; (mov r8, r8)
 8000ffe:	46bd      	mov	sp, r7
 8001000:	b017      	add	sp, #92	; 0x5c
 8001002:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001004:	08007b24 	.word	0x08007b24
 8001008:	08007b18 	.word	0x08007b18
 800100c:	08007b2c 	.word	0x08007b2c

08001010 <dump_uart_raw>:

static void dump_uart_raw(uint32_t length, uint8_t sensor) {
 8001010:	b5b0      	push	{r4, r5, r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	000a      	movs	r2, r1
 800101a:	1cfb      	adds	r3, r7, #3
 800101c:	701a      	strb	r2, [r3, #0]
    char buf[4];
    buf[2] = ' ';
 800101e:	210c      	movs	r1, #12
 8001020:	187b      	adds	r3, r7, r1
 8001022:	2220      	movs	r2, #32
 8001024:	709a      	strb	r2, [r3, #2]
    buf[3] = '\0';
 8001026:	187b      	adds	r3, r7, r1
 8001028:	2200      	movs	r2, #0
 800102a:	70da      	strb	r2, [r3, #3]

    for (int i=0; i<length/2; i++) {
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]
 8001030:	e028      	b.n	8001084 <dump_uart_raw+0x74>
        uint8_t rgb = read_fifo(sensor);
 8001032:	2513      	movs	r5, #19
 8001034:	197c      	adds	r4, r7, r5
 8001036:	1cfb      	adds	r3, r7, #3
 8001038:	781b      	ldrb	r3, [r3, #0]
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff fd2b 	bl	8000a96 <read_fifo>
 8001040:	0003      	movs	r3, r0
 8001042:	7023      	strb	r3, [r4, #0]
        buf[0] = hex_2_ascii(rgb >> 4);
 8001044:	002c      	movs	r4, r5
 8001046:	193b      	adds	r3, r7, r4
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	091b      	lsrs	r3, r3, #4
 800104c:	b2db      	uxtb	r3, r3
 800104e:	0018      	movs	r0, r3
 8001050:	f7ff fdc5 	bl	8000bde <hex_2_ascii>
 8001054:	0003      	movs	r3, r0
 8001056:	001a      	movs	r2, r3
 8001058:	250c      	movs	r5, #12
 800105a:	197b      	adds	r3, r7, r5
 800105c:	701a      	strb	r2, [r3, #0]
        buf[1] = hex_2_ascii(rgb & 0x0f);
 800105e:	193b      	adds	r3, r7, r4
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	220f      	movs	r2, #15
 8001064:	4013      	ands	r3, r2
 8001066:	b2db      	uxtb	r3, r3
 8001068:	0018      	movs	r0, r3
 800106a:	f7ff fdb8 	bl	8000bde <hex_2_ascii>
 800106e:	0003      	movs	r3, r0
 8001070:	001a      	movs	r2, r3
 8001072:	197b      	adds	r3, r7, r5
 8001074:	705a      	strb	r2, [r3, #1]
        DBG_PUT(buf);
 8001076:	197b      	adds	r3, r7, r5
 8001078:	0018      	movs	r0, r3
 800107a:	f7ff fa21 	bl	80004c0 <DBG_PUT>
    for (int i=0; i<length/2; i++) {
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	3301      	adds	r3, #1
 8001082:	617b      	str	r3, [r7, #20]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	085a      	lsrs	r2, r3, #1
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	429a      	cmp	r2, r3
 800108c:	d8d1      	bhi.n	8001032 <dump_uart_raw+0x22>
    }
}
 800108e:	46c0      	nop			; (mov r8, r8)
 8001090:	46c0      	nop			; (mov r8, r8)
 8001092:	46bd      	mov	sp, r7
 8001094:	b006      	add	sp, #24
 8001096:	bdb0      	pop	{r4, r5, r7, pc}

08001098 <SingleCapTransfer>:

void SingleCapTransfer(int format, uint8_t sensor) {
 8001098:	b5b0      	push	{r4, r5, r7, lr}
 800109a:	b094      	sub	sp, #80	; 0x50
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	000a      	movs	r2, r1
 80010a2:	1cfb      	adds	r3, r7, #3
 80010a4:	701a      	strb	r2, [r3, #0]
    char buf[64];

    write_reg(ARDUCHIP_TIM, VSYNC_LEVEL_MASK, sensor);   //VSYNC is active HIGH
 80010a6:	1cfb      	adds	r3, r7, #3
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	001a      	movs	r2, r3
 80010ac:	2102      	movs	r1, #2
 80010ae:	2003      	movs	r0, #3
 80010b0:	f7ff fcd5 	bl	8000a5e <write_reg>

    sprintf(buf, "Single Capture Transfer type %x\r\n", format);
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	493d      	ldr	r1, [pc, #244]	; (80011ac <SingleCapTransfer+0x114>)
 80010b8:	240c      	movs	r4, #12
 80010ba:	193b      	adds	r3, r7, r4
 80010bc:	0018      	movs	r0, r3
 80010be:	f005 fbbb 	bl	8006838 <siprintf>
    DBG_PUT(buf);
 80010c2:	193b      	adds	r3, r7, r4
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff f9fb 	bl	80004c0 <DBG_PUT>

    uint8_t val;
    rdSensorReg16_8(REG_FORMAT_CTL, &val, sensor);
 80010ca:	1cfb      	adds	r3, r7, #3
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	250b      	movs	r5, #11
 80010d0:	1979      	adds	r1, r7, r5
 80010d2:	2386      	movs	r3, #134	; 0x86
 80010d4:	01db      	lsls	r3, r3, #7
 80010d6:	0018      	movs	r0, r3
 80010d8:	f001 fac8 	bl	800266c <rdSensorReg16_8>
    sprintf(buf, "format reg: 0x%02x\r\n", val);
 80010dc:	197b      	adds	r3, r7, r5
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	001a      	movs	r2, r3
 80010e2:	4933      	ldr	r1, [pc, #204]	; (80011b0 <SingleCapTransfer+0x118>)
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	0018      	movs	r0, r3
 80010e8:	f005 fba6 	bl	8006838 <siprintf>
    DBG_PUT(buf);
 80010ec:	193b      	adds	r3, r7, r4
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff f9e6 	bl	80004c0 <DBG_PUT>

    flush_fifo(sensor);
 80010f4:	1cfb      	adds	r3, r7, #3
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	0018      	movs	r0, r3
 80010fa:	f7ff fce2 	bl	8000ac2 <flush_fifo>
    clear_fifo_flag(sensor);
 80010fe:	1cfb      	adds	r3, r7, #3
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	0018      	movs	r0, r3
 8001104:	f7ff fcff 	bl	8000b06 <clear_fifo_flag>
    start_capture(sensor);
 8001108:	1cfb      	adds	r3, r7, #3
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	0018      	movs	r0, r3
 800110e:	f7ff fce9 	bl	8000ae4 <start_capture>
    while(!get_bit(ARDUCHIP_TRIG , CAP_DONE_MASK, sensor)){}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	1cfb      	adds	r3, r7, #3
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	001a      	movs	r2, r3
 800111a:	2108      	movs	r1, #8
 800111c:	2041      	movs	r0, #65	; 0x41
 800111e:	f7ff fd35 	bl	8000b8c <get_bit>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d0f6      	beq.n	8001114 <SingleCapTransfer+0x7c>

    uint32_t length = read_fifo_length(sensor);
 8001126:	1cfb      	adds	r3, r7, #3
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	0018      	movs	r0, r3
 800112c:	f7ff fcfc 	bl	8000b28 <read_fifo_length>
 8001130:	0003      	movs	r3, r0
 8001132:	64fb      	str	r3, [r7, #76]	; 0x4c
    sprintf(buf, "Capture complete! FIFO len 0x%lx\r\n", length);
 8001134:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001136:	491f      	ldr	r1, [pc, #124]	; (80011b4 <SingleCapTransfer+0x11c>)
 8001138:	240c      	movs	r4, #12
 800113a:	193b      	adds	r3, r7, r4
 800113c:	0018      	movs	r0, r3
 800113e:	f005 fb7b 	bl	8006838 <siprintf>
    DBG_PUT(buf);
 8001142:	193b      	adds	r3, r7, r4
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff f9bb 	bl	80004c0 <DBG_PUT>
    DBG_PUT("JPG");
 800114a:	4b1b      	ldr	r3, [pc, #108]	; (80011b8 <SingleCapTransfer+0x120>)
 800114c:	0018      	movs	r0, r3
 800114e:	f7ff f9b7 	bl	80004c0 <DBG_PUT>

    switch(format) {
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2b02      	cmp	r3, #2
 8001156:	d017      	beq.n	8001188 <SingleCapTransfer+0xf0>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b02      	cmp	r3, #2
 800115c:	dc1d      	bgt.n	800119a <SingleCapTransfer+0x102>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d003      	beq.n	800116c <SingleCapTransfer+0xd4>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d006      	beq.n	8001178 <SingleCapTransfer+0xe0>
        break;
    case RAW:
        dump_uart_raw(length*2, sensor);
        break;
    default:
        break;
 800116a:	e016      	b.n	800119a <SingleCapTransfer+0x102>
        dump_uart_bmp(sensor);
 800116c:	1cfb      	adds	r3, r7, #3
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	0018      	movs	r0, r3
 8001172:	f7ff fd4b 	bl	8000c0c <dump_uart_bmp>
        break;
 8001176:	e011      	b.n	800119c <SingleCapTransfer+0x104>
        dump_uart_jpg(length, sensor);
 8001178:	1cfb      	adds	r3, r7, #3
 800117a:	781a      	ldrb	r2, [r3, #0]
 800117c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800117e:	0011      	movs	r1, r2
 8001180:	0018      	movs	r0, r3
 8001182:	f7ff feb9 	bl	8000ef8 <dump_uart_jpg>
        break;
 8001186:	e009      	b.n	800119c <SingleCapTransfer+0x104>
        dump_uart_raw(length*2, sensor);
 8001188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800118a:	005a      	lsls	r2, r3, #1
 800118c:	1cfb      	adds	r3, r7, #3
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	0019      	movs	r1, r3
 8001192:	0010      	movs	r0, r2
 8001194:	f7ff ff3c 	bl	8001010 <dump_uart_raw>
        break;
 8001198:	e000      	b.n	800119c <SingleCapTransfer+0x104>
        break;
 800119a:	46c0      	nop			; (mov r8, r8)
    }

    DBG_PUT("\04");
 800119c:	4b07      	ldr	r3, [pc, #28]	; (80011bc <SingleCapTransfer+0x124>)
 800119e:	0018      	movs	r0, r3
 80011a0:	f7ff f98e 	bl	80004c0 <DBG_PUT>
}
 80011a4:	46c0      	nop			; (mov r8, r8)
 80011a6:	46bd      	mov	sp, r7
 80011a8:	b014      	add	sp, #80	; 0x50
 80011aa:	bdb0      	pop	{r4, r5, r7, pc}
 80011ac:	08007b34 	.word	0x08007b34
 80011b0:	08007b58 	.word	0x08007b58
 80011b4:	08007b70 	.word	0x08007b70
 80011b8:	08007b94 	.word	0x08007b94
 80011bc:	08007b98 	.word	0x08007b98

080011c0 <DBG_PUT>:
static inline void DBG_PUT(char *str) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	0018      	movs	r0, r3
 80011cc:	f7fe ff9c 	bl	8000108 <strlen>
 80011d0:	0003      	movs	r3, r0
 80011d2:	b29a      	uxth	r2, r3
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	4804      	ldr	r0, [pc, #16]	; (80011e8 <DBG_PUT+0x28>)
 80011d8:	2364      	movs	r3, #100	; 0x64
 80011da:	f004 fce7 	bl	8005bac <HAL_UART_Transmit>
}
 80011de:	46c0      	nop			; (mov r8, r8)
 80011e0:	46bd      	mov	sp, r7
 80011e2:	b002      	add	sp, #8
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	46c0      	nop			; (mov r8, r8)
 80011e8:	20000150 	.word	0x20000150

080011ec <next_token>:
extern I2C_HandleTypeDef hi2c2;


int VIS_DETECTED = 0;
int NIR_DETECTED = 0;
static inline const char* next_token(const char *ptr) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
    /* move to the next space */
    while(*ptr && *ptr != ' ') ptr++;
 80011f4:	e002      	b.n	80011fc <next_token+0x10>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	3301      	adds	r3, #1
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <next_token+0x28>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b20      	cmp	r3, #32
 800120a:	d1f4      	bne.n	80011f6 <next_token+0xa>
    /* move past any whitespace */
    while(*ptr && isspace(*ptr)) ptr++;
 800120c:	e002      	b.n	8001214 <next_token+0x28>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	3301      	adds	r3, #1
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d009      	beq.n	8001230 <next_token+0x44>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	1c5a      	adds	r2, r3, #1
 8001222:	4b09      	ldr	r3, [pc, #36]	; (8001248 <next_token+0x5c>)
 8001224:	18d3      	adds	r3, r2, r3
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	001a      	movs	r2, r3
 800122a:	2308      	movs	r3, #8
 800122c:	4013      	ands	r3, r2
 800122e:	d1ee      	bne.n	800120e <next_token+0x22>

    return (*ptr) ? ptr : NULL;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <next_token+0x50>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	e000      	b.n	800123e <next_token+0x52>
 800123c:	2300      	movs	r3, #0
}
 800123e:	0018      	movs	r0, r3
 8001240:	46bd      	mov	sp, r7
 8001242:	b002      	add	sp, #8
 8001244:	bd80      	pop	{r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	08009058 	.word	0x08009058

0800124c <help>:

static void help() {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
    DBG_PUT("Commands:\r\n");
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <help+0x4c>)
 8001252:	0018      	movs	r0, r3
 8001254:	f7ff ffb4 	bl	80011c0 <DBG_PUT>
    DBG_PUT("\tcapture <vis/nir>\r\n");
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <help+0x50>)
 800125a:	0018      	movs	r0, r3
 800125c:	f7ff ffb0 	bl	80011c0 <DBG_PUT>
    DBG_PUT("\tformat<vis/nir> [JPEG|BMP|RAW]\r\n");
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <help+0x54>)
 8001262:	0018      	movs	r0, r3
 8001264:	f7ff ffac 	bl	80011c0 <DBG_PUT>
    DBG_PUT("\treg <vis/nir> read <regnum>\r\n\treg write <regnum> <val>\r\n");
 8001268:	4b0e      	ldr	r3, [pc, #56]	; (80012a4 <help+0x58>)
 800126a:	0018      	movs	r0, r3
 800126c:	f7ff ffa8 	bl	80011c0 <DBG_PUT>
    DBG_PUT("\twidth  <vis/nir> [<pixels>]\r\n");
 8001270:	4b0d      	ldr	r3, [pc, #52]	; (80012a8 <help+0x5c>)
 8001272:	0018      	movs	r0, r3
 8001274:	f7ff ffa4 	bl	80011c0 <DBG_PUT>
    DBG_PUT("\tinit sensor Resets arducam modules to default\r\n");
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <help+0x60>)
 800127a:	0018      	movs	r0, r3
 800127c:	f7ff ffa0 	bl	80011c0 <DBG_PUT>
    DBG_PUT("\tinit nand Initialize NAND Flash");
 8001280:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <help+0x64>)
 8001282:	0018      	movs	r0, r3
 8001284:	f7ff ff9c 	bl	80011c0 <DBG_PUT>
    DBG_PUT("\tscan Scan I2C bus 2\r\n");
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <help+0x68>)
 800128a:	0018      	movs	r0, r3
 800128c:	f7ff ff98 	bl	80011c0 <DBG_PUT>
}
 8001290:	46c0      	nop			; (mov r8, r8)
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	08007bac 	.word	0x08007bac
 800129c:	08007bb8 	.word	0x08007bb8
 80012a0:	08007bd0 	.word	0x08007bd0
 80012a4:	08007bf4 	.word	0x08007bf4
 80012a8:	08007c30 	.word	0x08007c30
 80012ac:	08007c50 	.word	0x08007c50
 80012b0:	08007c84 	.word	0x08007c84
 80012b4:	08007ca8 	.word	0x08007ca8

080012b8 <handle_format_cmd>:

static void handle_format_cmd(const char *cmd) {
 80012b8:	b590      	push	{r4, r7, lr}
 80012ba:	b09b      	sub	sp, #108	; 0x6c
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
	// TODO: Needs to handle sensor input
    const char* format_names[3] = { "BMP", "JPEG", "RAW" };
 80012c0:	234c      	movs	r3, #76	; 0x4c
 80012c2:	18fb      	adds	r3, r7, r3
 80012c4:	4a3d      	ldr	r2, [pc, #244]	; (80013bc <handle_format_cmd+0x104>)
 80012c6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80012c8:	c313      	stmia	r3!, {r0, r1, r4}
    char buf[64];

    const char *wptr = next_token(cmd);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	0018      	movs	r0, r3
 80012ce:	f7ff ff8d 	bl	80011ec <next_token>
 80012d2:	0003      	movs	r3, r0
 80012d4:	663b      	str	r3, [r7, #96]	; 0x60

    int target_sensor;
    switch(*wptr){
 80012d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	2b6e      	cmp	r3, #110	; 0x6e
 80012dc:	d00d      	beq.n	80012fa <handle_format_cmd+0x42>
 80012de:	2b76      	cmp	r3, #118	; 0x76
 80012e0:	d117      	bne.n	8001312 <handle_format_cmd+0x5a>
    case 'v':
    	if (VIS_DETECTED == 0){
 80012e2:	4b37      	ldr	r3, [pc, #220]	; (80013c0 <handle_format_cmd+0x108>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d104      	bne.n	80012f4 <handle_format_cmd+0x3c>
    		DBG_PUT("VIS Unavailable.\r\n");
 80012ea:	4b36      	ldr	r3, [pc, #216]	; (80013c4 <handle_format_cmd+0x10c>)
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff ff67 	bl	80011c0 <DBG_PUT>
    		return;
 80012f2:	e05f      	b.n	80013b4 <handle_format_cmd+0xfc>
    	}
    	target_sensor = VIS_SENSOR; // vis = 0
 80012f4:	2300      	movs	r3, #0
 80012f6:	667b      	str	r3, [r7, #100]	; 0x64
		break;
 80012f8:	e010      	b.n	800131c <handle_format_cmd+0x64>

    case 'n':
    	if (NIR_DETECTED == 0){
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <handle_format_cmd+0x110>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d104      	bne.n	800130c <handle_format_cmd+0x54>
    		DBG_PUT("NIR Unavailable.\r\n");
 8001302:	4b32      	ldr	r3, [pc, #200]	; (80013cc <handle_format_cmd+0x114>)
 8001304:	0018      	movs	r0, r3
 8001306:	f7ff ff5b 	bl	80011c0 <DBG_PUT>
    		return;
 800130a:	e053      	b.n	80013b4 <handle_format_cmd+0xfc>
    	}
    	target_sensor = NIR_SENSOR;
 800130c:	2301      	movs	r3, #1
 800130e:	667b      	str	r3, [r7, #100]	; 0x64
    	break;
 8001310:	e004      	b.n	800131c <handle_format_cmd+0x64>
    default:
    	DBG_PUT("Target Error.\r\n");
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <handle_format_cmd+0x118>)
 8001314:	0018      	movs	r0, r3
 8001316:	f7ff ff53 	bl	80011c0 <DBG_PUT>
    	return;
 800131a:	e04b      	b.n	80013b4 <handle_format_cmd+0xfc>
    }

    const char *fmtarg = next_token(wptr);
 800131c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800131e:	0018      	movs	r0, r3
 8001320:	f7ff ff64 	bl	80011ec <next_token>
 8001324:	0003      	movs	r3, r0
 8001326:	65fb      	str	r3, [r7, #92]	; 0x5c
    int old_format = format;
 8001328:	4b2a      	ldr	r3, [pc, #168]	; (80013d4 <handle_format_cmd+0x11c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	65bb      	str	r3, [r7, #88]	; 0x58

    if (fmtarg) {
 800132e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001330:	2b00      	cmp	r3, #0
 8001332:	d021      	beq.n	8001378 <handle_format_cmd+0xc0>
        switch(*fmtarg) {
 8001334:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b52      	cmp	r3, #82	; 0x52
 800133a:	d00d      	beq.n	8001358 <handle_format_cmd+0xa0>
 800133c:	dc10      	bgt.n	8001360 <handle_format_cmd+0xa8>
 800133e:	2b42      	cmp	r3, #66	; 0x42
 8001340:	d002      	beq.n	8001348 <handle_format_cmd+0x90>
 8001342:	2b4a      	cmp	r3, #74	; 0x4a
 8001344:	d004      	beq.n	8001350 <handle_format_cmd+0x98>
 8001346:	e00b      	b.n	8001360 <handle_format_cmd+0xa8>
        case 'B':
            format = BMP;
 8001348:	4b22      	ldr	r3, [pc, #136]	; (80013d4 <handle_format_cmd+0x11c>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
            break;
 800134e:	e014      	b.n	800137a <handle_format_cmd+0xc2>
        case 'J':
            format = JPEG;
 8001350:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <handle_format_cmd+0x11c>)
 8001352:	2201      	movs	r2, #1
 8001354:	601a      	str	r2, [r3, #0]
            break;
 8001356:	e010      	b.n	800137a <handle_format_cmd+0xc2>
        case 'R':
            format = RAW;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <handle_format_cmd+0x11c>)
 800135a:	2202      	movs	r2, #2
 800135c:	601a      	str	r2, [r3, #0]
            break;
 800135e:	e00c      	b.n	800137a <handle_format_cmd+0xc2>
        default:
            sprintf(buf, "unknown format: <%s>\r\n", fmtarg);
 8001360:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001362:	491d      	ldr	r1, [pc, #116]	; (80013d8 <handle_format_cmd+0x120>)
 8001364:	240c      	movs	r4, #12
 8001366:	193b      	adds	r3, r7, r4
 8001368:	0018      	movs	r0, r3
 800136a:	f005 fa65 	bl	8006838 <siprintf>
            DBG_PUT(buf);
 800136e:	193b      	adds	r3, r7, r4
 8001370:	0018      	movs	r0, r3
 8001372:	f7ff ff25 	bl	80011c0 <DBG_PUT>
            return;
 8001376:	e01d      	b.n	80013b4 <handle_format_cmd+0xfc>
        }
    }
 8001378:	46c0      	nop			; (mov r8, r8)

    if (format != old_format) {
 800137a:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <handle_format_cmd+0x11c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001380:	429a      	cmp	r2, r3
 8001382:	d006      	beq.n	8001392 <handle_format_cmd+0xda>
        Arduino_init(format, target_sensor);
 8001384:	4b13      	ldr	r3, [pc, #76]	; (80013d4 <handle_format_cmd+0x11c>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800138a:	0011      	movs	r1, r2
 800138c:	0018      	movs	r0, r3
 800138e:	f7ff f8b9 	bl	8000504 <Arduino_init>
    }
    DBG_PUT("current format: ");
 8001392:	4b12      	ldr	r3, [pc, #72]	; (80013dc <handle_format_cmd+0x124>)
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff ff13 	bl	80011c0 <DBG_PUT>
    DBG_PUT(format_names[format]);
 800139a:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <handle_format_cmd+0x11c>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	234c      	movs	r3, #76	; 0x4c
 80013a0:	18fb      	adds	r3, r7, r3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	58d3      	ldr	r3, [r2, r3]
 80013a6:	0018      	movs	r0, r3
 80013a8:	f7ff ff0a 	bl	80011c0 <DBG_PUT>
    DBG_PUT("\r\n");
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <handle_format_cmd+0x128>)
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff ff06 	bl	80011c0 <DBG_PUT>
}
 80013b4:	46bd      	mov	sp, r7
 80013b6:	b01b      	add	sp, #108	; 0x6c
 80013b8:	bd90      	pop	{r4, r7, pc}
 80013ba:	46c0      	nop			; (mov r8, r8)
 80013bc:	08007d28 	.word	0x08007d28
 80013c0:	20000094 	.word	0x20000094
 80013c4:	08007cc0 	.word	0x08007cc0
 80013c8:	20000098 	.word	0x20000098
 80013cc:	08007cd4 	.word	0x08007cd4
 80013d0:	08007ce8 	.word	0x08007ce8
 80013d4:	20000000 	.word	0x20000000
 80013d8:	08007cf8 	.word	0x08007cf8
 80013dc:	08007d10 	.word	0x08007d10
 80013e0:	08007d24 	.word	0x08007d24

080013e4 <handle_reg_cmd>:

static void handle_reg_cmd(const char *cmd) {
 80013e4:	b590      	push	{r4, r7, lr}
 80013e6:	b09b      	sub	sp, #108	; 0x6c
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
    char buf[64];
    const char *wptr = next_token(cmd);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	0018      	movs	r0, r3
 80013f0:	f7ff fefc 	bl	80011ec <next_token>
 80013f4:	0003      	movs	r3, r0
 80013f6:	663b      	str	r3, [r7, #96]	; 0x60

    int target_sensor;
    switch(*wptr){
 80013f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b6e      	cmp	r3, #110	; 0x6e
 80013fe:	d00d      	beq.n	800141c <handle_reg_cmd+0x38>
 8001400:	2b76      	cmp	r3, #118	; 0x76
 8001402:	d117      	bne.n	8001434 <handle_reg_cmd+0x50>
    case 'v':
    	if (VIS_DETECTED == 0){
 8001404:	4b4f      	ldr	r3, [pc, #316]	; (8001544 <handle_reg_cmd+0x160>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d104      	bne.n	8001416 <handle_reg_cmd+0x32>
    		DBG_PUT("VIS Unavailable.\r\n");
 800140c:	4b4e      	ldr	r3, [pc, #312]	; (8001548 <handle_reg_cmd+0x164>)
 800140e:	0018      	movs	r0, r3
 8001410:	f7ff fed6 	bl	80011c0 <DBG_PUT>
    		return;
 8001414:	e092      	b.n	800153c <handle_reg_cmd+0x158>
    	}
    	target_sensor = VIS_SENSOR; // vis = 0
 8001416:	2300      	movs	r3, #0
 8001418:	667b      	str	r3, [r7, #100]	; 0x64
		break;
 800141a:	e010      	b.n	800143e <handle_reg_cmd+0x5a>

    case 'n':
    	if (NIR_DETECTED == 0){
 800141c:	4b4b      	ldr	r3, [pc, #300]	; (800154c <handle_reg_cmd+0x168>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <handle_reg_cmd+0x4a>
    		DBG_PUT("NIR Unavailable.\r\n");
 8001424:	4b4a      	ldr	r3, [pc, #296]	; (8001550 <handle_reg_cmd+0x16c>)
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff feca 	bl	80011c0 <DBG_PUT>
    		return;
 800142c:	e086      	b.n	800153c <handle_reg_cmd+0x158>
    	}
    	target_sensor = NIR_SENSOR;
 800142e:	2301      	movs	r3, #1
 8001430:	667b      	str	r3, [r7, #100]	; 0x64
    	break;
 8001432:	e004      	b.n	800143e <handle_reg_cmd+0x5a>
    default:
    	DBG_PUT("Target Error.\r\n");
 8001434:	4b47      	ldr	r3, [pc, #284]	; (8001554 <handle_reg_cmd+0x170>)
 8001436:	0018      	movs	r0, r3
 8001438:	f7ff fec2 	bl	80011c0 <DBG_PUT>
    	return;
 800143c:	e07e      	b.n	800153c <handle_reg_cmd+0x158>
    }

    const char *rwarg = next_token(wptr);
 800143e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001440:	0018      	movs	r0, r3
 8001442:	f7ff fed3 	bl	80011ec <next_token>
 8001446:	0003      	movs	r3, r0
 8001448:	65fb      	str	r3, [r7, #92]	; 0x5c

    if (!rwarg) {
 800144a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d102      	bne.n	8001456 <handle_reg_cmd+0x72>
        help();
 8001450:	f7ff fefc 	bl	800124c <help>
        return;
 8001454:	e072      	b.n	800153c <handle_reg_cmd+0x158>
    }

    const char *regptr = next_token(rwarg);
 8001456:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001458:	0018      	movs	r0, r3
 800145a:	f7ff fec7 	bl	80011ec <next_token>
 800145e:	0003      	movs	r3, r0
 8001460:	65bb      	str	r3, [r7, #88]	; 0x58
    if (!regptr) {
 8001462:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <handle_reg_cmd+0x8a>
        help();
 8001468:	f7ff fef0 	bl	800124c <help>
        return;
 800146c:	e066      	b.n	800153c <handle_reg_cmd+0x158>
    }

    uint32_t reg;
    if (sscanf(regptr, "%lx", &reg) != 1) {
 800146e:	2310      	movs	r3, #16
 8001470:	18fa      	adds	r2, r7, r3
 8001472:	4939      	ldr	r1, [pc, #228]	; (8001558 <handle_reg_cmd+0x174>)
 8001474:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001476:	0018      	movs	r0, r3
 8001478:	f005 f9fe 	bl	8006878 <siscanf>
 800147c:	0003      	movs	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d002      	beq.n	8001488 <handle_reg_cmd+0xa4>
        help();
 8001482:	f7ff fee3 	bl	800124c <help>
        return;
 8001486:	e059      	b.n	800153c <handle_reg_cmd+0x158>
    }

    switch(*rwarg) {
 8001488:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	2b72      	cmp	r3, #114	; 0x72
 800148e:	d002      	beq.n	8001496 <handle_reg_cmd+0xb2>
 8001490:	2b77      	cmp	r3, #119	; 0x77
 8001492:	d012      	beq.n	80014ba <handle_reg_cmd+0xd6>
 8001494:	e045      	b.n	8001522 <handle_reg_cmd+0x13e>
    case 'r':
        {
            uint8_t val;
            rdSensorReg16_8(reg, &val, target_sensor);
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	b29b      	uxth	r3, r3
 800149a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800149c:	b2d2      	uxtb	r2, r2
 800149e:	240f      	movs	r4, #15
 80014a0:	1939      	adds	r1, r7, r4
 80014a2:	0018      	movs	r0, r3
 80014a4:	f001 f8e2 	bl	800266c <rdSensorReg16_8>
            sprintf(buf, "register 0x%lx = 0x%02x\r\n", reg, val);
 80014a8:	693a      	ldr	r2, [r7, #16]
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	492b      	ldr	r1, [pc, #172]	; (800155c <handle_reg_cmd+0x178>)
 80014b0:	2014      	movs	r0, #20
 80014b2:	1838      	adds	r0, r7, r0
 80014b4:	f005 f9c0 	bl	8006838 <siprintf>
        }
        break;
 80014b8:	e03b      	b.n	8001532 <handle_reg_cmd+0x14e>

    case 'w':
        {
            const char *valptr = next_token(regptr);
 80014ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014bc:	0018      	movs	r0, r3
 80014be:	f7ff fe95 	bl	80011ec <next_token>
 80014c2:	0003      	movs	r3, r0
 80014c4:	657b      	str	r3, [r7, #84]	; 0x54
            if (!valptr) {
 80014c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d107      	bne.n	80014dc <handle_reg_cmd+0xf8>
                sprintf(buf, "reg write 0x%lx: missing reg value\r\n", reg);
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4924      	ldr	r1, [pc, #144]	; (8001560 <handle_reg_cmd+0x17c>)
 80014d0:	2314      	movs	r3, #20
 80014d2:	18fb      	adds	r3, r7, r3
 80014d4:	0018      	movs	r0, r3
 80014d6:	f005 f9af 	bl	8006838 <siprintf>
                break;
 80014da:	e02a      	b.n	8001532 <handle_reg_cmd+0x14e>
            }
            uint32_t val;
            if (sscanf(valptr, "%lx", &val) != 1) {
 80014dc:	2308      	movs	r3, #8
 80014de:	18fa      	adds	r2, r7, r3
 80014e0:	491d      	ldr	r1, [pc, #116]	; (8001558 <handle_reg_cmd+0x174>)
 80014e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014e4:	0018      	movs	r0, r3
 80014e6:	f005 f9c7 	bl	8006878 <siscanf>
 80014ea:	0003      	movs	r3, r0
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d007      	beq.n	8001500 <handle_reg_cmd+0x11c>
                sprintf(buf, "reg write 0x%lx: bad val '%s'\r\n", reg, valptr);
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80014f4:	491b      	ldr	r1, [pc, #108]	; (8001564 <handle_reg_cmd+0x180>)
 80014f6:	2014      	movs	r0, #20
 80014f8:	1838      	adds	r0, r7, r0
 80014fa:	f005 f99d 	bl	8006838 <siprintf>
                break;
 80014fe:	e018      	b.n	8001532 <handle_reg_cmd+0x14e>
            }
            wrSensorReg16_8(reg, val, target_sensor);
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	b29b      	uxth	r3, r3
 8001504:	68ba      	ldr	r2, [r7, #8]
 8001506:	b2d1      	uxtb	r1, r2
 8001508:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800150a:	b2d2      	uxtb	r2, r2
 800150c:	0018      	movs	r0, r3
 800150e:	f001 f827 	bl	8002560 <wrSensorReg16_8>
            sprintf(buf, "register 0x%lx wrote 0x%02lx\r\n", reg, val);
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	4914      	ldr	r1, [pc, #80]	; (8001568 <handle_reg_cmd+0x184>)
 8001518:	2014      	movs	r0, #20
 800151a:	1838      	adds	r0, r7, r0
 800151c:	f005 f98c 	bl	8006838 <siprintf>
        }
        break;
 8001520:	e007      	b.n	8001532 <handle_reg_cmd+0x14e>
    default:
        sprintf(buf, "reg op must be read or write, '%s' not supported\r\n", rwarg);
 8001522:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001524:	4911      	ldr	r1, [pc, #68]	; (800156c <handle_reg_cmd+0x188>)
 8001526:	2314      	movs	r3, #20
 8001528:	18fb      	adds	r3, r7, r3
 800152a:	0018      	movs	r0, r3
 800152c:	f005 f984 	bl	8006838 <siprintf>
        break;
 8001530:	46c0      	nop			; (mov r8, r8)
    }
    DBG_PUT(buf);
 8001532:	2314      	movs	r3, #20
 8001534:	18fb      	adds	r3, r7, r3
 8001536:	0018      	movs	r0, r3
 8001538:	f7ff fe42 	bl	80011c0 <DBG_PUT>
}
 800153c:	46bd      	mov	sp, r7
 800153e:	b01b      	add	sp, #108	; 0x6c
 8001540:	bd90      	pop	{r4, r7, pc}
 8001542:	46c0      	nop			; (mov r8, r8)
 8001544:	20000094 	.word	0x20000094
 8001548:	08007cc0 	.word	0x08007cc0
 800154c:	20000098 	.word	0x20000098
 8001550:	08007cd4 	.word	0x08007cd4
 8001554:	08007ce8 	.word	0x08007ce8
 8001558:	08007d34 	.word	0x08007d34
 800155c:	08007d38 	.word	0x08007d38
 8001560:	08007d54 	.word	0x08007d54
 8001564:	08007d7c 	.word	0x08007d7c
 8001568:	08007d9c 	.word	0x08007d9c
 800156c:	08007dbc 	.word	0x08007dbc

08001570 <handle_width_cmd>:

static void handle_width_cmd(const char *cmd) {
 8001570:	b590      	push	{r4, r7, lr}
 8001572:	b099      	sub	sp, #100	; 0x64
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
    char buf[64];
    const char *wptr = next_token(cmd);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	0018      	movs	r0, r3
 800157c:	f7ff fe36 	bl	80011ec <next_token>
 8001580:	0003      	movs	r3, r0
 8001582:	65bb      	str	r3, [r7, #88]	; 0x58
    if (!wptr) {
 8001584:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001586:	2b00      	cmp	r3, #0
 8001588:	d12f      	bne.n	80015ea <handle_width_cmd+0x7a>
        int width, depth;
        if (VIS_DETECTED){
 800158a:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <handle_width_cmd+0x218>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d012      	beq.n	80015b8 <handle_width_cmd+0x48>
            arducam_get_resolution(&width, &depth, VIS_SENSOR);
 8001592:	230c      	movs	r3, #12
 8001594:	18f9      	adds	r1, r7, r3
 8001596:	2310      	movs	r3, #16
 8001598:	18fb      	adds	r3, r7, r3
 800159a:	2200      	movs	r2, #0
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff f8c7 	bl	8000730 <arducam_get_resolution>
            sprintf(buf, "VIS Camera Resolution: %d by %d\r\n", width, depth);
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4979      	ldr	r1, [pc, #484]	; (800178c <handle_width_cmd+0x21c>)
 80015a8:	2414      	movs	r4, #20
 80015aa:	1938      	adds	r0, r7, r4
 80015ac:	f005 f944 	bl	8006838 <siprintf>
            DBG_PUT(buf);
 80015b0:	193b      	adds	r3, r7, r4
 80015b2:	0018      	movs	r0, r3
 80015b4:	f7ff fe04 	bl	80011c0 <DBG_PUT>
        }
        if (NIR_DETECTED){
 80015b8:	4b75      	ldr	r3, [pc, #468]	; (8001790 <handle_width_cmd+0x220>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d100      	bne.n	80015c2 <handle_width_cmd+0x52>
 80015c0:	e0df      	b.n	8001782 <handle_width_cmd+0x212>
            arducam_get_resolution(&width, &depth, NIR_SENSOR);
 80015c2:	230c      	movs	r3, #12
 80015c4:	18f9      	adds	r1, r7, r3
 80015c6:	2310      	movs	r3, #16
 80015c8:	18fb      	adds	r3, r7, r3
 80015ca:	2201      	movs	r2, #1
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff f8af 	bl	8000730 <arducam_get_resolution>
            sprintf(buf, "NIR Camera Resolution: %d by %d\r\n", width, depth);
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	496f      	ldr	r1, [pc, #444]	; (8001794 <handle_width_cmd+0x224>)
 80015d8:	2414      	movs	r4, #20
 80015da:	1938      	adds	r0, r7, r4
 80015dc:	f005 f92c 	bl	8006838 <siprintf>
            DBG_PUT(buf);
 80015e0:	193b      	adds	r3, r7, r4
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7ff fdec 	bl	80011c0 <DBG_PUT>
 80015e8:	e0cb      	b.n	8001782 <handle_width_cmd+0x212>
        }
        return;
    }
    buf[0] = 0;
 80015ea:	2314      	movs	r3, #20
 80015ec:	18fb      	adds	r3, r7, r3
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
    int target_sensor;
    switch(*wptr){
 80015f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b6e      	cmp	r3, #110	; 0x6e
 80015f8:	d00d      	beq.n	8001616 <handle_width_cmd+0xa6>
 80015fa:	2b76      	cmp	r3, #118	; 0x76
 80015fc:	d117      	bne.n	800162e <handle_width_cmd+0xbe>
    case 'v':
    	if (VIS_DETECTED == 0){
 80015fe:	4b62      	ldr	r3, [pc, #392]	; (8001788 <handle_width_cmd+0x218>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d104      	bne.n	8001610 <handle_width_cmd+0xa0>
    		DBG_PUT("VIS Unavailable.\r\n");
 8001606:	4b64      	ldr	r3, [pc, #400]	; (8001798 <handle_width_cmd+0x228>)
 8001608:	0018      	movs	r0, r3
 800160a:	f7ff fdd9 	bl	80011c0 <DBG_PUT>
    		return;
 800160e:	e0b8      	b.n	8001782 <handle_width_cmd+0x212>
    	}
    	target_sensor = VIS_SENSOR; // vis = 0
 8001610:	2300      	movs	r3, #0
 8001612:	65fb      	str	r3, [r7, #92]	; 0x5c
		break;
 8001614:	e010      	b.n	8001638 <handle_width_cmd+0xc8>
    case 'n':
    	if (NIR_DETECTED == 0){
 8001616:	4b5e      	ldr	r3, [pc, #376]	; (8001790 <handle_width_cmd+0x220>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d104      	bne.n	8001628 <handle_width_cmd+0xb8>
    		DBG_PUT("NIR Unavailable.\r\n");
 800161e:	4b5f      	ldr	r3, [pc, #380]	; (800179c <handle_width_cmd+0x22c>)
 8001620:	0018      	movs	r0, r3
 8001622:	f7ff fdcd 	bl	80011c0 <DBG_PUT>
    		return;
 8001626:	e0ac      	b.n	8001782 <handle_width_cmd+0x212>
    	}
    	target_sensor = NIR_SENSOR;
 8001628:	2301      	movs	r3, #1
 800162a:	65fb      	str	r3, [r7, #92]	; 0x5c
    	break;
 800162c:	e004      	b.n	8001638 <handle_width_cmd+0xc8>
    default:
    	DBG_PUT("Target Error.\r\n");
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <handle_width_cmd+0x230>)
 8001630:	0018      	movs	r0, r3
 8001632:	f7ff fdc5 	bl	80011c0 <DBG_PUT>
    	return;
 8001636:	e0a4      	b.n	8001782 <handle_width_cmd+0x212>
    }
    const char *res = next_token(wptr);
 8001638:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800163a:	0018      	movs	r0, r3
 800163c:	f7ff fdd6 	bl	80011ec <next_token>
 8001640:	0003      	movs	r3, r0
 8001642:	657b      	str	r3, [r7, #84]	; 0x54

    switch(*res) {
 8001644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b36      	cmp	r3, #54	; 0x36
 800164a:	d007      	beq.n	800165c <handle_width_cmd+0xec>
 800164c:	dd00      	ble.n	8001650 <handle_width_cmd+0xe0>
 800164e:	e086      	b.n	800175e <handle_width_cmd+0x1ee>
 8001650:	2b31      	cmp	r3, #49	; 0x31
 8001652:	d017      	beq.n	8001684 <handle_width_cmd+0x114>
 8001654:	2b33      	cmp	r3, #51	; 0x33
 8001656:	d100      	bne.n	800165a <handle_width_cmd+0xea>
 8001658:	e06c      	b.n	8001734 <handle_width_cmd+0x1c4>
 800165a:	e080      	b.n	800175e <handle_width_cmd+0x1ee>
    case '6':
        if (arducam_set_resolution(format, 640, target_sensor))
 800165c:	4b51      	ldr	r3, [pc, #324]	; (80017a4 <handle_width_cmd+0x234>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	21a0      	movs	r1, #160	; 0xa0
 8001666:	0089      	lsls	r1, r1, #2
 8001668:	0018      	movs	r0, r3
 800166a:	f7ff f8bd 	bl	80007e8 <arducam_set_resolution>
 800166e:	1e03      	subs	r3, r0, #0
 8001670:	d008      	beq.n	8001684 <handle_width_cmd+0x114>
            strcpy(buf, "resolution is now 640x480\r\n");
 8001672:	2314      	movs	r3, #20
 8001674:	18fb      	adds	r3, r7, r3
 8001676:	4a4c      	ldr	r2, [pc, #304]	; (80017a8 <handle_width_cmd+0x238>)
 8001678:	ca13      	ldmia	r2!, {r0, r1, r4}
 800167a:	c313      	stmia	r3!, {r0, r1, r4}
 800167c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800167e:	c313      	stmia	r3!, {r0, r1, r4}
 8001680:	6812      	ldr	r2, [r2, #0]
 8001682:	601a      	str	r2, [r3, #0]
    case '1':
        switch(*(res + 1)) {
 8001684:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001686:	3301      	adds	r3, #1
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b39      	cmp	r3, #57	; 0x39
 800168c:	d033      	beq.n	80016f6 <handle_width_cmd+0x186>
 800168e:	dc49      	bgt.n	8001724 <handle_width_cmd+0x1b4>
 8001690:	2b30      	cmp	r3, #48	; 0x30
 8001692:	d002      	beq.n	800169a <handle_width_cmd+0x12a>
 8001694:	2b32      	cmp	r3, #50	; 0x32
 8001696:	d017      	beq.n	80016c8 <handle_width_cmd+0x158>
        case '9':
            if (arducam_set_resolution(format, 1920, target_sensor))
                strcpy(buf, "resolution is now 1920x1080\r\n");
            break;
        default:
            break;
 8001698:	e044      	b.n	8001724 <handle_width_cmd+0x1b4>
            if (arducam_set_resolution(format, 1024, target_sensor))
 800169a:	4b42      	ldr	r3, [pc, #264]	; (80017a4 <handle_width_cmd+0x234>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	2180      	movs	r1, #128	; 0x80
 80016a4:	00c9      	lsls	r1, r1, #3
 80016a6:	0018      	movs	r0, r3
 80016a8:	f7ff f89e 	bl	80007e8 <arducam_set_resolution>
 80016ac:	1e03      	subs	r3, r0, #0
 80016ae:	d03b      	beq.n	8001728 <handle_width_cmd+0x1b8>
                strcpy(buf, "resolution is now 1024x768\r\n");
 80016b0:	2314      	movs	r3, #20
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	4a3d      	ldr	r2, [pc, #244]	; (80017ac <handle_width_cmd+0x23c>)
 80016b6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016b8:	c313      	stmia	r3!, {r0, r1, r4}
 80016ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016bc:	c313      	stmia	r3!, {r0, r1, r4}
 80016be:	6811      	ldr	r1, [r2, #0]
 80016c0:	6019      	str	r1, [r3, #0]
 80016c2:	7912      	ldrb	r2, [r2, #4]
 80016c4:	711a      	strb	r2, [r3, #4]
            break;
 80016c6:	e02f      	b.n	8001728 <handle_width_cmd+0x1b8>
            if (arducam_set_resolution(format, 1280, target_sensor))
 80016c8:	4b36      	ldr	r3, [pc, #216]	; (80017a4 <handle_width_cmd+0x234>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	21a0      	movs	r1, #160	; 0xa0
 80016d2:	00c9      	lsls	r1, r1, #3
 80016d4:	0018      	movs	r0, r3
 80016d6:	f7ff f887 	bl	80007e8 <arducam_set_resolution>
 80016da:	1e03      	subs	r3, r0, #0
 80016dc:	d026      	beq.n	800172c <handle_width_cmd+0x1bc>
                strcpy(buf, "resolution is now 1280x960\r\n");
 80016de:	2314      	movs	r3, #20
 80016e0:	18fb      	adds	r3, r7, r3
 80016e2:	4a33      	ldr	r2, [pc, #204]	; (80017b0 <handle_width_cmd+0x240>)
 80016e4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016e6:	c313      	stmia	r3!, {r0, r1, r4}
 80016e8:	ca13      	ldmia	r2!, {r0, r1, r4}
 80016ea:	c313      	stmia	r3!, {r0, r1, r4}
 80016ec:	6811      	ldr	r1, [r2, #0]
 80016ee:	6019      	str	r1, [r3, #0]
 80016f0:	7912      	ldrb	r2, [r2, #4]
 80016f2:	711a      	strb	r2, [r3, #4]
            break;
 80016f4:	e01a      	b.n	800172c <handle_width_cmd+0x1bc>
            if (arducam_set_resolution(format, 1920, target_sensor))
 80016f6:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <handle_width_cmd+0x234>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80016fc:	b2d2      	uxtb	r2, r2
 80016fe:	21f0      	movs	r1, #240	; 0xf0
 8001700:	00c9      	lsls	r1, r1, #3
 8001702:	0018      	movs	r0, r3
 8001704:	f7ff f870 	bl	80007e8 <arducam_set_resolution>
 8001708:	1e03      	subs	r3, r0, #0
 800170a:	d011      	beq.n	8001730 <handle_width_cmd+0x1c0>
                strcpy(buf, "resolution is now 1920x1080\r\n");
 800170c:	2314      	movs	r3, #20
 800170e:	18fb      	adds	r3, r7, r3
 8001710:	4a28      	ldr	r2, [pc, #160]	; (80017b4 <handle_width_cmd+0x244>)
 8001712:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001714:	c313      	stmia	r3!, {r0, r1, r4}
 8001716:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001718:	c313      	stmia	r3!, {r0, r1, r4}
 800171a:	6811      	ldr	r1, [r2, #0]
 800171c:	6019      	str	r1, [r3, #0]
 800171e:	8892      	ldrh	r2, [r2, #4]
 8001720:	809a      	strh	r2, [r3, #4]
            break;
 8001722:	e005      	b.n	8001730 <handle_width_cmd+0x1c0>
            break;
 8001724:	46c0      	nop			; (mov r8, r8)
 8001726:	e023      	b.n	8001770 <handle_width_cmd+0x200>
            break;
 8001728:	46c0      	nop			; (mov r8, r8)
 800172a:	e021      	b.n	8001770 <handle_width_cmd+0x200>
            break;
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	e01f      	b.n	8001770 <handle_width_cmd+0x200>
            break;
 8001730:	46c0      	nop			; (mov r8, r8)
        }
        break;
 8001732:	e01d      	b.n	8001770 <handle_width_cmd+0x200>
    case '3':
        if (arducam_set_resolution(format, 320, target_sensor))
 8001734:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <handle_width_cmd+0x234>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	21a0      	movs	r1, #160	; 0xa0
 800173e:	0049      	lsls	r1, r1, #1
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff f851 	bl	80007e8 <arducam_set_resolution>
 8001746:	1e03      	subs	r3, r0, #0
 8001748:	d011      	beq.n	800176e <handle_width_cmd+0x1fe>
            strcpy(buf, "resolution is now 320x240\r\n");
 800174a:	2314      	movs	r3, #20
 800174c:	18fb      	adds	r3, r7, r3
 800174e:	4a1a      	ldr	r2, [pc, #104]	; (80017b8 <handle_width_cmd+0x248>)
 8001750:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001752:	c313      	stmia	r3!, {r0, r1, r4}
 8001754:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001756:	c313      	stmia	r3!, {r0, r1, r4}
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	601a      	str	r2, [r3, #0]
        break;
 800175c:	e007      	b.n	800176e <handle_width_cmd+0x1fe>
    default:
        sprintf(buf, "unsupported width: <%s>\r\n", res);
 800175e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001760:	4916      	ldr	r1, [pc, #88]	; (80017bc <handle_width_cmd+0x24c>)
 8001762:	2314      	movs	r3, #20
 8001764:	18fb      	adds	r3, r7, r3
 8001766:	0018      	movs	r0, r3
 8001768:	f005 f866 	bl	8006838 <siprintf>
        break;
 800176c:	e000      	b.n	8001770 <handle_width_cmd+0x200>
        break;
 800176e:	46c0      	nop			; (mov r8, r8)
    }

    if (buf[0])
 8001770:	2214      	movs	r2, #20
 8001772:	18bb      	adds	r3, r7, r2
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d003      	beq.n	8001782 <handle_width_cmd+0x212>
        DBG_PUT(buf);
 800177a:	18bb      	adds	r3, r7, r2
 800177c:	0018      	movs	r0, r3
 800177e:	f7ff fd1f 	bl	80011c0 <DBG_PUT>
}
 8001782:	46bd      	mov	sp, r7
 8001784:	b019      	add	sp, #100	; 0x64
 8001786:	bd90      	pop	{r4, r7, pc}
 8001788:	20000094 	.word	0x20000094
 800178c:	08007df0 	.word	0x08007df0
 8001790:	20000098 	.word	0x20000098
 8001794:	08007e14 	.word	0x08007e14
 8001798:	08007cc0 	.word	0x08007cc0
 800179c:	08007cd4 	.word	0x08007cd4
 80017a0:	08007ce8 	.word	0x08007ce8
 80017a4:	20000000 	.word	0x20000000
 80017a8:	08007e38 	.word	0x08007e38
 80017ac:	08007e54 	.word	0x08007e54
 80017b0:	08007e74 	.word	0x08007e74
 80017b4:	08007e94 	.word	0x08007e94
 80017b8:	08007eb4 	.word	0x08007eb4
 80017bc:	08007ed0 	.word	0x08007ed0

080017c0 <handle_capture_cmd>:

static void handle_capture_cmd(const char *cmd) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
    const char *wptr = next_token(cmd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	0018      	movs	r0, r3
 80017cc:	f7ff fd0e 	bl	80011ec <next_token>
 80017d0:	0003      	movs	r3, r0
 80017d2:	60bb      	str	r3, [r7, #8]

    int target_sensor;
    switch(*wptr){
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b6e      	cmp	r3, #110	; 0x6e
 80017da:	d00d      	beq.n	80017f8 <handle_capture_cmd+0x38>
 80017dc:	2b76      	cmp	r3, #118	; 0x76
 80017de:	d117      	bne.n	8001810 <handle_capture_cmd+0x50>
    case 'v':
    	if (VIS_DETECTED == 0){
 80017e0:	4b13      	ldr	r3, [pc, #76]	; (8001830 <handle_capture_cmd+0x70>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d104      	bne.n	80017f2 <handle_capture_cmd+0x32>
    		DBG_PUT("VIS Unavailable.\r\n");
 80017e8:	4b12      	ldr	r3, [pc, #72]	; (8001834 <handle_capture_cmd+0x74>)
 80017ea:	0018      	movs	r0, r3
 80017ec:	f7ff fce8 	bl	80011c0 <DBG_PUT>
    		return;
 80017f0:	e01b      	b.n	800182a <handle_capture_cmd+0x6a>
    	}
    	target_sensor = VIS_SENSOR; // vis = 0
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
		break;
 80017f6:	e010      	b.n	800181a <handle_capture_cmd+0x5a>

    case 'n':
    	if (NIR_DETECTED == 0){
 80017f8:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <handle_capture_cmd+0x78>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d104      	bne.n	800180a <handle_capture_cmd+0x4a>
    		DBG_PUT("NIR Unavailable.\r\n");
 8001800:	4b0e      	ldr	r3, [pc, #56]	; (800183c <handle_capture_cmd+0x7c>)
 8001802:	0018      	movs	r0, r3
 8001804:	f7ff fcdc 	bl	80011c0 <DBG_PUT>
    		return;
 8001808:	e00f      	b.n	800182a <handle_capture_cmd+0x6a>
    	}
    	target_sensor = NIR_SENSOR;
 800180a:	2301      	movs	r3, #1
 800180c:	60fb      	str	r3, [r7, #12]
    	break;
 800180e:	e004      	b.n	800181a <handle_capture_cmd+0x5a>
    default:
    	DBG_PUT("Target Error.\r\n");
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <handle_capture_cmd+0x80>)
 8001812:	0018      	movs	r0, r3
 8001814:	f7ff fcd4 	bl	80011c0 <DBG_PUT>
    	return;
 8001818:	e007      	b.n	800182a <handle_capture_cmd+0x6a>
    }

    SingleCapTransfer(format, target_sensor); // also needs to be changed to handle sensor cmd
 800181a:	4b0a      	ldr	r3, [pc, #40]	; (8001844 <handle_capture_cmd+0x84>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	b2d2      	uxtb	r2, r2
 8001822:	0011      	movs	r1, r2
 8001824:	0018      	movs	r0, r3
 8001826:	f7ff fc37 	bl	8001098 <SingleCapTransfer>

}
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20000094 	.word	0x20000094
 8001834:	08007cc0 	.word	0x08007cc0
 8001838:	20000098 	.word	0x20000098
 800183c:	08007cd4 	.word	0x08007cd4
 8001840:	08007ce8 	.word	0x08007ce8
 8001844:	20000000 	.word	0x20000000

08001848 <reset_sensors>:

void reset_sensors(void){
 8001848:	b590      	push	{r4, r7, lr}
 800184a:	b093      	sub	sp, #76	; 0x4c
 800184c:	af00      	add	r7, sp, #0
	char buf[64];
	  // Reset the CPLD
	  arducam_wait_for_ready(VIS_SENSOR);
 800184e:	2000      	movs	r0, #0
 8001850:	f7ff f8a6 	bl	80009a0 <arducam_wait_for_ready>
	  write_reg(AC_REG_RESET, 1, VIS_SENSOR);
 8001854:	2200      	movs	r2, #0
 8001856:	2101      	movs	r1, #1
 8001858:	2007      	movs	r0, #7
 800185a:	f7ff f900 	bl	8000a5e <write_reg>
	  HAL_Delay(100);
 800185e:	2064      	movs	r0, #100	; 0x64
 8001860:	f001 faac 	bl	8002dbc <HAL_Delay>
	  write_reg(AC_REG_RESET, 0, VIS_SENSOR);
 8001864:	2200      	movs	r2, #0
 8001866:	2100      	movs	r1, #0
 8001868:	2007      	movs	r0, #7
 800186a:	f7ff f8f8 	bl	8000a5e <write_reg>
	  HAL_Delay(100);
 800186e:	2064      	movs	r0, #100	; 0x64
 8001870:	f001 faa4 	bl	8002dbc <HAL_Delay>

	  if (!arducam_wait_for_ready(VIS_SENSOR)) {
 8001874:	2000      	movs	r0, #0
 8001876:	f7ff f893 	bl	80009a0 <arducam_wait_for_ready>
 800187a:	0003      	movs	r3, r0
 800187c:	001a      	movs	r2, r3
 800187e:	2301      	movs	r3, #1
 8001880:	4053      	eors	r3, r2
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d004      	beq.n	8001892 <reset_sensors+0x4a>
	      DBG_PUT("VIS Camera: SPI Unavailable\r\n");
 8001888:	4b6d      	ldr	r3, [pc, #436]	; (8001a40 <reset_sensors+0x1f8>)
 800188a:	0018      	movs	r0, r3
 800188c:	f7ff fc98 	bl	80011c0 <DBG_PUT>
 8001890:	e003      	b.n	800189a <reset_sensors+0x52>
	  }
	  else{
		  DBG_PUT("VIS Camera: SPI Initialized\r\n");
 8001892:	4b6c      	ldr	r3, [pc, #432]	; (8001a44 <reset_sensors+0x1fc>)
 8001894:	0018      	movs	r0, r3
 8001896:	f7ff fc93 	bl	80011c0 <DBG_PUT>

	  }

	  // Change MCU mode
	    write_reg(ARDUCHIP_MODE, 0x0, VIS_SENSOR);
 800189a:	2200      	movs	r2, #0
 800189c:	2100      	movs	r1, #0
 800189e:	2002      	movs	r0, #2
 80018a0:	f7ff f8dd 	bl	8000a5e <write_reg>
	    wrSensorReg16_8(0xff, 0x01, VIS_SENSOR);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2101      	movs	r1, #1
 80018a8:	20ff      	movs	r0, #255	; 0xff
 80018aa:	f000 fe59 	bl	8002560 <wrSensorReg16_8>

	    uint8_t vid = 0, pid = 0;
 80018ae:	1dfb      	adds	r3, r7, #7
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	1dbb      	adds	r3, r7, #6
 80018b6:	2200      	movs	r2, #0
 80018b8:	701a      	strb	r2, [r3, #0]
	    rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid, VIS_SENSOR);
 80018ba:	1dfb      	adds	r3, r7, #7
 80018bc:	4862      	ldr	r0, [pc, #392]	; (8001a48 <reset_sensors+0x200>)
 80018be:	2200      	movs	r2, #0
 80018c0:	0019      	movs	r1, r3
 80018c2:	f000 fed3 	bl	800266c <rdSensorReg16_8>
	    rdSensorReg16_8(OV5642_CHIPID_LOW, &pid, VIS_SENSOR);
 80018c6:	1dbb      	adds	r3, r7, #6
 80018c8:	4860      	ldr	r0, [pc, #384]	; (8001a4c <reset_sensors+0x204>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	0019      	movs	r1, r3
 80018ce:	f000 fecd 	bl	800266c <rdSensorReg16_8>

	    if (vid != 0x56 || pid != 0x42) {
 80018d2:	1dfb      	adds	r3, r7, #7
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b56      	cmp	r3, #86	; 0x56
 80018d8:	d103      	bne.n	80018e2 <reset_sensors+0x9a>
 80018da:	1dbb      	adds	r3, r7, #6
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2b42      	cmp	r3, #66	; 0x42
 80018e0:	d00e      	beq.n	8001900 <reset_sensors+0xb8>
	        sprintf(buf, "VIS Camera I2C Address: Unknown\r\nVIS not available\r\n\n");
 80018e2:	4a5b      	ldr	r2, [pc, #364]	; (8001a50 <reset_sensors+0x208>)
 80018e4:	2408      	movs	r4, #8
 80018e6:	193b      	adds	r3, r7, r4
 80018e8:	0011      	movs	r1, r2
 80018ea:	0018      	movs	r0, r3
 80018ec:	f004 ffa4 	bl	8006838 <siprintf>
	        DBG_PUT(buf);
 80018f0:	193b      	adds	r3, r7, r4
 80018f2:	0018      	movs	r0, r3
 80018f4:	f7ff fc64 	bl	80011c0 <DBG_PUT>
	    	VIS_DETECTED = 0;
 80018f8:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <reset_sensors+0x20c>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	e006      	b.n	800190e <reset_sensors+0xc6>

	    }
	    else{
	    	DBG_PUT("VIS Camera I2C Address: 0x3C\r\n");
 8001900:	4b55      	ldr	r3, [pc, #340]	; (8001a58 <reset_sensors+0x210>)
 8001902:	0018      	movs	r0, r3
 8001904:	f7ff fc5c 	bl	80011c0 <DBG_PUT>
	    	VIS_DETECTED = 1;
 8001908:	4b52      	ldr	r3, [pc, #328]	; (8001a54 <reset_sensors+0x20c>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]
	    }
	    if (VIS_DETECTED==1){
 800190e:	4b51      	ldr	r3, [pc, #324]	; (8001a54 <reset_sensors+0x20c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d113      	bne.n	800193e <reset_sensors+0xf6>
			format = JPEG;
 8001916:	4b51      	ldr	r3, [pc, #324]	; (8001a5c <reset_sensors+0x214>)
 8001918:	2201      	movs	r2, #1
 800191a:	601a      	str	r2, [r3, #0]
			Arduino_init(format, VIS_SENSOR);
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <reset_sensors+0x214>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	2100      	movs	r1, #0
 8001922:	0018      	movs	r0, r3
 8001924:	f7fe fdee 	bl	8000504 <Arduino_init>
			sprintf(buf, "VIS Camera Mode: JPEG\r\n\n");
 8001928:	4a4d      	ldr	r2, [pc, #308]	; (8001a60 <reset_sensors+0x218>)
 800192a:	2408      	movs	r4, #8
 800192c:	193b      	adds	r3, r7, r4
 800192e:	0011      	movs	r1, r2
 8001930:	0018      	movs	r0, r3
 8001932:	f004 ff81 	bl	8006838 <siprintf>
			DBG_PUT(buf);
 8001936:	193b      	adds	r3, r7, r4
 8001938:	0018      	movs	r0, r3
 800193a:	f7ff fc41 	bl	80011c0 <DBG_PUT>
	    }
	    // Test NIR Sensor
		  arducam_wait_for_ready(NIR_SENSOR);
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff f82e 	bl	80009a0 <arducam_wait_for_ready>

		  // Reset the CPLD
		  write_reg(AC_REG_RESET, 1, NIR_SENSOR);
 8001944:	2201      	movs	r2, #1
 8001946:	2101      	movs	r1, #1
 8001948:	2007      	movs	r0, #7
 800194a:	f7ff f888 	bl	8000a5e <write_reg>
		  HAL_Delay(100);
 800194e:	2064      	movs	r0, #100	; 0x64
 8001950:	f001 fa34 	bl	8002dbc <HAL_Delay>
		  write_reg(AC_REG_RESET, 0, NIR_SENSOR);
 8001954:	2201      	movs	r2, #1
 8001956:	2100      	movs	r1, #0
 8001958:	2007      	movs	r0, #7
 800195a:	f7ff f880 	bl	8000a5e <write_reg>
		  HAL_Delay(100);
 800195e:	2064      	movs	r0, #100	; 0x64
 8001960:	f001 fa2c 	bl	8002dbc <HAL_Delay>

		  if (!arducam_wait_for_ready(NIR_SENSOR)) {
 8001964:	2001      	movs	r0, #1
 8001966:	f7ff f81b 	bl	80009a0 <arducam_wait_for_ready>
 800196a:	0003      	movs	r3, r0
 800196c:	001a      	movs	r2, r3
 800196e:	2301      	movs	r3, #1
 8001970:	4053      	eors	r3, r2
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b00      	cmp	r3, #0
 8001976:	d004      	beq.n	8001982 <reset_sensors+0x13a>
		      DBG_PUT("NIR Camera: SPI Unavailable\r\n");
 8001978:	4b3a      	ldr	r3, [pc, #232]	; (8001a64 <reset_sensors+0x21c>)
 800197a:	0018      	movs	r0, r3
 800197c:	f7ff fc20 	bl	80011c0 <DBG_PUT>
 8001980:	e003      	b.n	800198a <reset_sensors+0x142>
		  }
		  else{
			  DBG_PUT("NIR Camera: SPI available\r\n");
 8001982:	4b39      	ldr	r3, [pc, #228]	; (8001a68 <reset_sensors+0x220>)
 8001984:	0018      	movs	r0, r3
 8001986:	f7ff fc1b 	bl	80011c0 <DBG_PUT>
		  }

		  // Change MCU mode
		    write_reg(ARDUCHIP_MODE, 0x0, NIR_SENSOR);
 800198a:	2201      	movs	r2, #1
 800198c:	2100      	movs	r1, #0
 800198e:	2002      	movs	r0, #2
 8001990:	f7ff f865 	bl	8000a5e <write_reg>
		    wrSensorReg16_8(0xff, 0x01, NIR_SENSOR);
 8001994:	2201      	movs	r2, #1
 8001996:	2101      	movs	r1, #1
 8001998:	20ff      	movs	r0, #255	; 0xff
 800199a:	f000 fde1 	bl	8002560 <wrSensorReg16_8>

		    vid = 0;
 800199e:	1dfb      	adds	r3, r7, #7
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
		    pid = 0;
 80019a4:	1dbb      	adds	r3, r7, #6
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
		    rdSensorReg16_8(OV5642_CHIPID_HIGH, &vid, NIR_SENSOR);
 80019aa:	1dfb      	adds	r3, r7, #7
 80019ac:	4826      	ldr	r0, [pc, #152]	; (8001a48 <reset_sensors+0x200>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	0019      	movs	r1, r3
 80019b2:	f000 fe5b 	bl	800266c <rdSensorReg16_8>
		    rdSensorReg16_8(OV5642_CHIPID_LOW, &pid, NIR_SENSOR);
 80019b6:	1dbb      	adds	r3, r7, #6
 80019b8:	4824      	ldr	r0, [pc, #144]	; (8001a4c <reset_sensors+0x204>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	0019      	movs	r1, r3
 80019be:	f000 fe55 	bl	800266c <rdSensorReg16_8>

		    if (vid != 0x56 || pid != 0x42) {
 80019c2:	1dfb      	adds	r3, r7, #7
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b56      	cmp	r3, #86	; 0x56
 80019c8:	d103      	bne.n	80019d2 <reset_sensors+0x18a>
 80019ca:	1dbb      	adds	r3, r7, #6
 80019cc:	781b      	ldrb	r3, [r3, #0]
 80019ce:	2b42      	cmp	r3, #66	; 0x42
 80019d0:	d00e      	beq.n	80019f0 <reset_sensors+0x1a8>
		        sprintf(buf, "NIR Camera I2C Address: Unknown\r\nCamera not available\r\n\n");
 80019d2:	4a26      	ldr	r2, [pc, #152]	; (8001a6c <reset_sensors+0x224>)
 80019d4:	2408      	movs	r4, #8
 80019d6:	193b      	adds	r3, r7, r4
 80019d8:	0011      	movs	r1, r2
 80019da:	0018      	movs	r0, r3
 80019dc:	f004 ff2c 	bl	8006838 <siprintf>
		        DBG_PUT(buf);
 80019e0:	193b      	adds	r3, r7, r4
 80019e2:	0018      	movs	r0, r3
 80019e4:	f7ff fbec 	bl	80011c0 <DBG_PUT>
		    	NIR_DETECTED = 0;
 80019e8:	4b21      	ldr	r3, [pc, #132]	; (8001a70 <reset_sensors+0x228>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	e006      	b.n	80019fe <reset_sensors+0x1b6>

		    }
		    else{
		    	DBG_PUT("NIR Camera I2C Address: 0x3E\r\n");
 80019f0:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <reset_sensors+0x22c>)
 80019f2:	0018      	movs	r0, r3
 80019f4:	f7ff fbe4 	bl	80011c0 <DBG_PUT>
		    	NIR_DETECTED = 1;
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <reset_sensors+0x228>)
 80019fa:	2201      	movs	r2, #1
 80019fc:	601a      	str	r2, [r3, #0]
		    }
		    if (NIR_DETECTED == 1){
 80019fe:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <reset_sensors+0x228>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d113      	bne.n	8001a2e <reset_sensors+0x1e6>
				format = JPEG;
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <reset_sensors+0x214>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
				Arduino_init(format, NIR_SENSOR);
 8001a0c:	4b13      	ldr	r3, [pc, #76]	; (8001a5c <reset_sensors+0x214>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2101      	movs	r1, #1
 8001a12:	0018      	movs	r0, r3
 8001a14:	f7fe fd76 	bl	8000504 <Arduino_init>
				sprintf(buf, "NIR Camera Mode: JPEG\r\n\n");
 8001a18:	4a17      	ldr	r2, [pc, #92]	; (8001a78 <reset_sensors+0x230>)
 8001a1a:	2408      	movs	r4, #8
 8001a1c:	193b      	adds	r3, r7, r4
 8001a1e:	0011      	movs	r1, r2
 8001a20:	0018      	movs	r0, r3
 8001a22:	f004 ff09 	bl	8006838 <siprintf>
				DBG_PUT(buf);
 8001a26:	193b      	adds	r3, r7, r4
 8001a28:	0018      	movs	r0, r3
 8001a2a:	f7ff fbc9 	bl	80011c0 <DBG_PUT>
		    }
		    HAL_Delay(1000);
 8001a2e:	23fa      	movs	r3, #250	; 0xfa
 8001a30:	009b      	lsls	r3, r3, #2
 8001a32:	0018      	movs	r0, r3
 8001a34:	f001 f9c2 	bl	8002dbc <HAL_Delay>
}
 8001a38:	46c0      	nop			; (mov r8, r8)
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	b013      	add	sp, #76	; 0x4c
 8001a3e:	bd90      	pop	{r4, r7, pc}
 8001a40:	08007eec 	.word	0x08007eec
 8001a44:	08007f0c 	.word	0x08007f0c
 8001a48:	0000300a 	.word	0x0000300a
 8001a4c:	0000300b 	.word	0x0000300b
 8001a50:	08007f2c 	.word	0x08007f2c
 8001a54:	20000094 	.word	0x20000094
 8001a58:	08007f64 	.word	0x08007f64
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	08007f84 	.word	0x08007f84
 8001a64:	08007fa0 	.word	0x08007fa0
 8001a68:	08007fc0 	.word	0x08007fc0
 8001a6c:	08007fdc 	.word	0x08007fdc
 8001a70:	20000098 	.word	0x20000098
 8001a74:	08008018 	.word	0x08008018
 8001a78:	08008038 	.word	0x08008038

08001a7c <scan_i2c>:

void scan_i2c(){
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	b093      	sub	sp, #76	; 0x4c
 8001a80:	af00      	add	r7, sp, #0
	 HAL_StatusTypeDef result;
	 uint8_t i;
	 char buf[64];
	 DBG_PUT("Scanning I2C bus 2...\r\n");
 8001a82:	4b1d      	ldr	r3, [pc, #116]	; (8001af8 <scan_i2c+0x7c>)
 8001a84:	0018      	movs	r0, r3
 8001a86:	f7ff fb9b 	bl	80011c0 <DBG_PUT>
	 for (i=1; i<128; i++){
 8001a8a:	2347      	movs	r3, #71	; 0x47
 8001a8c:	18fb      	adds	r3, r7, r3
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
 8001a92:	e023      	b.n	8001adc <scan_i2c+0x60>
		 result = HAL_I2C_IsDeviceReady(&hi2c2, (uint16_t)(i<<1), 2, 2);
 8001a94:	2547      	movs	r5, #71	; 0x47
 8001a96:	197b      	adds	r3, r7, r5
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	18db      	adds	r3, r3, r3
 8001a9e:	b299      	uxth	r1, r3
 8001aa0:	2646      	movs	r6, #70	; 0x46
 8001aa2:	19bc      	adds	r4, r7, r6
 8001aa4:	4815      	ldr	r0, [pc, #84]	; (8001afc <scan_i2c+0x80>)
 8001aa6:	2302      	movs	r3, #2
 8001aa8:	2202      	movs	r2, #2
 8001aaa:	f001 ff0f 	bl	80038cc <HAL_I2C_IsDeviceReady>
 8001aae:	0003      	movs	r3, r0
 8001ab0:	7023      	strb	r3, [r4, #0]
		 if (result == HAL_OK){
 8001ab2:	19bb      	adds	r3, r7, r6
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d10a      	bne.n	8001ad0 <scan_i2c+0x54>
			 sprintf(buf,"I2C address found: 0x%X\r\n", (uint16_t)(i));
 8001aba:	197b      	adds	r3, r7, r5
 8001abc:	781a      	ldrb	r2, [r3, #0]
 8001abe:	4910      	ldr	r1, [pc, #64]	; (8001b00 <scan_i2c+0x84>)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	0018      	movs	r0, r3
 8001ac4:	f004 feb8 	bl	8006838 <siprintf>
			 DBG_PUT(buf);
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	0018      	movs	r0, r3
 8001acc:	f7ff fb78 	bl	80011c0 <DBG_PUT>
	 for (i=1; i<128; i++){
 8001ad0:	2147      	movs	r1, #71	; 0x47
 8001ad2:	187b      	adds	r3, r7, r1
 8001ad4:	781a      	ldrb	r2, [r3, #0]
 8001ad6:	187b      	adds	r3, r7, r1
 8001ad8:	3201      	adds	r2, #1
 8001ada:	701a      	strb	r2, [r3, #0]
 8001adc:	2347      	movs	r3, #71	; 0x47
 8001ade:	18fb      	adds	r3, r7, r3
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	b25b      	sxtb	r3, r3
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	dad5      	bge.n	8001a94 <scan_i2c+0x18>
		 	 }
	  	}
	 DBG_PUT("Scan Complete.\r\n");
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <scan_i2c+0x88>)
 8001aea:	0018      	movs	r0, r3
 8001aec:	f7ff fb68 	bl	80011c0 <DBG_PUT>
}
 8001af0:	46c0      	nop			; (mov r8, r8)
 8001af2:	46bd      	mov	sp, r7
 8001af4:	b013      	add	sp, #76	; 0x4c
 8001af6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001af8:	08008054 	.word	0x08008054
 8001afc:	20000104 	.word	0x20000104
 8001b00:	0800806c 	.word	0x0800806c
 8001b04:	08008088 	.word	0x08008088

08001b08 <sensor_togglepower>:

static void sensor_togglepower(int i){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
	if (i == 1){
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d10b      	bne.n	8001b2e <sensor_togglepower+0x26>
		HAL_GPIO_WritePin(CAM_EN_GPIO_Port, CAM_EN_Pin, GPIO_PIN_SET);
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	480c      	ldr	r0, [pc, #48]	; (8001b4c <sensor_togglepower+0x44>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	0019      	movs	r1, r3
 8001b20:	f001 fbbf 	bl	80032a2 <HAL_GPIO_WritePin>
		DBG_PUT("Sensor Power Enabled.\r\n");
 8001b24:	4b0a      	ldr	r3, [pc, #40]	; (8001b50 <sensor_togglepower+0x48>)
 8001b26:	0018      	movs	r0, r3
 8001b28:	f7ff fb4a 	bl	80011c0 <DBG_PUT>
		return;
 8001b2c:	e00a      	b.n	8001b44 <sensor_togglepower+0x3c>
	}
	HAL_GPIO_WritePin(CAM_EN_GPIO_Port, CAM_EN_Pin, GPIO_PIN_RESET);
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	005b      	lsls	r3, r3, #1
 8001b32:	4806      	ldr	r0, [pc, #24]	; (8001b4c <sensor_togglepower+0x44>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	0019      	movs	r1, r3
 8001b38:	f001 fbb3 	bl	80032a2 <HAL_GPIO_WritePin>
	DBG_PUT("Sensor Power Disabled.\r\n");
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <sensor_togglepower+0x4c>)
 8001b3e:	0018      	movs	r0, r3
 8001b40:	f7ff fb3e 	bl	80011c0 <DBG_PUT>


}
 8001b44:	46bd      	mov	sp, r7
 8001b46:	b002      	add	sp, #8
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	46c0      	nop			; (mov r8, r8)
 8001b4c:	50000400 	.word	0x50000400
 8001b50:	0800809c 	.word	0x0800809c
 8001b54:	080080b4 	.word	0x080080b4

08001b58 <init_nand_flash>:

void init_nand_flash(){
 8001b58:	b590      	push	{r4, r7, lr}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0
		NAND_ReturnType res = NAND_Init();
 8001b5e:	1dfc      	adds	r4, r7, #7
 8001b60:	f000 fb4b 	bl	80021fa <NAND_Init>
 8001b64:	0003      	movs	r3, r0
 8001b66:	7023      	strb	r3, [r4, #0]
		if (res == Ret_Success){
 8001b68:	1dfb      	adds	r3, r7, #7
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d104      	bne.n	8001b7a <init_nand_flash+0x22>
			DBG_PUT("NAND Flash Initialized Successfully\r\n");
 8001b70:	4b0f      	ldr	r3, [pc, #60]	; (8001bb0 <init_nand_flash+0x58>)
 8001b72:	0018      	movs	r0, r3
 8001b74:	f7ff fb24 	bl	80011c0 <DBG_PUT>
		else{
			DBG_PUT("Something else is wrong wit the NAND Flash\r\n");
		}


}
 8001b78:	e015      	b.n	8001ba6 <init_nand_flash+0x4e>
		else if(res == Ret_ResetFailed){
 8001b7a:	1dfb      	adds	r3, r7, #7
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d104      	bne.n	8001b8c <init_nand_flash+0x34>
			DBG_PUT("NAND Reset Failed\r\n");
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <init_nand_flash+0x5c>)
 8001b84:	0018      	movs	r0, r3
 8001b86:	f7ff fb1b 	bl	80011c0 <DBG_PUT>
}
 8001b8a:	e00c      	b.n	8001ba6 <init_nand_flash+0x4e>
		else if(res == Ret_WrongID){
 8001b8c:	1dfb      	adds	r3, r7, #7
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b03      	cmp	r3, #3
 8001b92:	d104      	bne.n	8001b9e <init_nand_flash+0x46>
			DBG_PUT("NAND ID is wrong\r\n");
 8001b94:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <init_nand_flash+0x60>)
 8001b96:	0018      	movs	r0, r3
 8001b98:	f7ff fb12 	bl	80011c0 <DBG_PUT>
}
 8001b9c:	e003      	b.n	8001ba6 <init_nand_flash+0x4e>
			DBG_PUT("Something else is wrong wit the NAND Flash\r\n");
 8001b9e:	4b07      	ldr	r3, [pc, #28]	; (8001bbc <init_nand_flash+0x64>)
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	f7ff fb0d 	bl	80011c0 <DBG_PUT>
}
 8001ba6:	46c0      	nop			; (mov r8, r8)
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	b003      	add	sp, #12
 8001bac:	bd90      	pop	{r4, r7, pc}
 8001bae:	46c0      	nop			; (mov r8, r8)
 8001bb0:	080080d0 	.word	0x080080d0
 8001bb4:	080080f8 	.word	0x080080f8
 8001bb8:	0800810c 	.word	0x0800810c
 8001bbc:	08008120 	.word	0x08008120

08001bc0 <handle_command>:

void handle_command(char *cmd) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
    switch(*cmd) {
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	3b63      	subs	r3, #99	; 0x63
 8001bce:	2b14      	cmp	r3, #20
 8001bd0:	d84a      	bhi.n	8001c68 <handle_command+0xa8>
 8001bd2:	009a      	lsls	r2, r3, #2
 8001bd4:	4b28      	ldr	r3, [pc, #160]	; (8001c78 <handle_command+0xb8>)
 8001bd6:	18d3      	adds	r3, r2, r3
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	469f      	mov	pc, r3
    case 'c':
    	handle_capture_cmd(cmd);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	0018      	movs	r0, r3
 8001be0:	f7ff fdee 	bl	80017c0 <handle_capture_cmd>
    	break;
 8001be4:	e043      	b.n	8001c6e <handle_command+0xae>
    case 'f':
        handle_format_cmd(cmd);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	0018      	movs	r0, r3
 8001bea:	f7ff fb65 	bl	80012b8 <handle_format_cmd>
        break;
 8001bee:	e03e      	b.n	8001c6e <handle_command+0xae>

    case 'r':
        handle_reg_cmd(cmd);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f7ff fbf6 	bl	80013e4 <handle_reg_cmd>
        break;
 8001bf8:	e039      	b.n	8001c6e <handle_command+0xae>

    case 'w':
        handle_width_cmd(cmd);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f7ff fcb7 	bl	8001570 <handle_width_cmd>
        break;
 8001c02:	e034      	b.n	8001c6e <handle_command+0xae>

    case 's':
    	scan_i2c();
 8001c04:	f7ff ff3a 	bl	8001a7c <scan_i2c>
    	break;
 8001c08:	e031      	b.n	8001c6e <handle_command+0xae>

    case 'p':	; //janky use of semicolon??
    	const char *c = next_token(cmd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	0018      	movs	r0, r3
 8001c0e:	f7ff faed 	bl	80011ec <next_token>
 8001c12:	0003      	movs	r3, r0
 8001c14:	60fb      	str	r3, [r7, #12]
    	switch(*(c+1)){
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b66      	cmp	r3, #102	; 0x66
 8001c1e:	d005      	beq.n	8001c2c <handle_command+0x6c>
 8001c20:	2b6e      	cmp	r3, #110	; 0x6e
 8001c22:	d107      	bne.n	8001c34 <handle_command+0x74>
    		case 'n':
    			sensor_togglepower(1);
 8001c24:	2001      	movs	r0, #1
 8001c26:	f7ff ff6f 	bl	8001b08 <sensor_togglepower>
    			break;
 8001c2a:	e008      	b.n	8001c3e <handle_command+0x7e>
    		case 'f':
    			sensor_togglepower(0);
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff ff6b 	bl	8001b08 <sensor_togglepower>
    			break;
 8001c32:	e004      	b.n	8001c3e <handle_command+0x7e>
    		default:
    			DBG_PUT("Use either on or off\r\n");
 8001c34:	4b11      	ldr	r3, [pc, #68]	; (8001c7c <handle_command+0xbc>)
 8001c36:	0018      	movs	r0, r3
 8001c38:	f7ff fac2 	bl	80011c0 <DBG_PUT>
    			break;
 8001c3c:	46c0      	nop			; (mov r8, r8)
    	}
    	break;
 8001c3e:	e016      	b.n	8001c6e <handle_command+0xae>
	case 'i':;
		const char *d = next_token(cmd);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	0018      	movs	r0, r3
 8001c44:	f7ff fad2 	bl	80011ec <next_token>
 8001c48:	0003      	movs	r3, r0
 8001c4a:	60bb      	str	r3, [r7, #8]
		switch(*d){
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b6e      	cmp	r3, #110	; 0x6e
 8001c52:	d002      	beq.n	8001c5a <handle_command+0x9a>
 8001c54:	2b73      	cmp	r3, #115	; 0x73
 8001c56:	d003      	beq.n	8001c60 <handle_command+0xa0>
				break;
			case 's':
				reset_sensors();
				break;
		}
		break;
 8001c58:	e009      	b.n	8001c6e <handle_command+0xae>
				init_nand_flash();
 8001c5a:	f7ff ff7d 	bl	8001b58 <init_nand_flash>
				break;
 8001c5e:	e002      	b.n	8001c66 <handle_command+0xa6>
				reset_sensors();
 8001c60:	f7ff fdf2 	bl	8001848 <reset_sensors>
				break;
 8001c64:	46c0      	nop			; (mov r8, r8)
		break;
 8001c66:	e002      	b.n	8001c6e <handle_command+0xae>

    case 'h':
    default:
        help();
 8001c68:	f7ff faf0 	bl	800124c <help>
        break;
 8001c6c:	46c0      	nop			; (mov r8, r8)
    }
}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	46bd      	mov	sp, r7
 8001c72:	b004      	add	sp, #16
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	46c0      	nop			; (mov r8, r8)
 8001c78:	08008f98 	.word	0x08008f98
 8001c7c:	08008150 	.word	0x08008150

08001c80 <DBG_PUT>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static inline void DBG_PUT(char *str) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *) str, strlen(str), 100);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0018      	movs	r0, r3
 8001c8c:	f7fe fa3c 	bl	8000108 <strlen>
 8001c90:	0003      	movs	r3, r0
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	6879      	ldr	r1, [r7, #4]
 8001c96:	4804      	ldr	r0, [pc, #16]	; (8001ca8 <DBG_PUT+0x28>)
 8001c98:	2364      	movs	r3, #100	; 0x64
 8001c9a:	f003 ff87 	bl	8005bac <HAL_UART_Transmit>
}
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	b002      	add	sp, #8
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	20000150 	.word	0x20000150

08001cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	b0a2      	sub	sp, #136	; 0x88
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cb2:	f001 f813 	bl	8002cdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cb6:	f000 f885 	bl	8001dc4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cba:	f000 f99f 	bl	8001ffc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001cbe:	f000 f96d 	bl	8001f9c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8001cc2:	f000 f8f3 	bl	8001eac <MX_I2C2_Init>
  MX_SPI2_Init();
 8001cc6:	f000 f931 	bl	8001f2c <MX_SPI2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
   char cmd[64];
   char *ptr = cmd;
 8001cca:	003b      	movs	r3, r7
 8001ccc:	2284      	movs	r2, #132	; 0x84
 8001cce:	18ba      	adds	r2, r7, r2
 8001cd0:	6013      	str	r3, [r2, #0]
   DBG_PUT("----------------------\r\nBooting...\r\n");
 8001cd2:	4b36      	ldr	r3, [pc, #216]	; (8001dac <main+0x100>)
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff ffd3 	bl	8001c80 <DBG_PUT>
   DBG_PUT("Ready!\r\n");
 8001cda:	4b35      	ldr	r3, [pc, #212]	; (8001db0 <main+0x104>)
 8001cdc:	0018      	movs	r0, r3
 8001cde:	f7ff ffcf 	bl	8001c80 <DBG_PUT>
   while (1)
   {
       HAL_StatusTypeDef rc = HAL_UART_Receive(&huart1, (uint8_t *) ptr, 1, 20000);
 8001ce2:	2583      	movs	r5, #131	; 0x83
 8001ce4:	197c      	adds	r4, r7, r5
 8001ce6:	4b33      	ldr	r3, [pc, #204]	; (8001db4 <main+0x108>)
 8001ce8:	2284      	movs	r2, #132	; 0x84
 8001cea:	18ba      	adds	r2, r7, r2
 8001cec:	6811      	ldr	r1, [r2, #0]
 8001cee:	4832      	ldr	r0, [pc, #200]	; (8001db8 <main+0x10c>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f004 f803 	bl	8005cfc <HAL_UART_Receive>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	7023      	strb	r3, [r4, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
       /* Build up the command one byte at a time */
       if (rc != HAL_OK) {
 8001cfa:	197b      	adds	r3, r7, r5
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d010      	beq.n	8001d24 <main+0x78>
           if (rc != HAL_TIMEOUT) {
 8001d02:	197b      	adds	r3, r7, r5
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	2b03      	cmp	r3, #3
 8001d08:	d04e      	beq.n	8001da8 <main+0xfc>
               sprintf(buf, "UART read error: %x\r\n", rc);
 8001d0a:	197b      	adds	r3, r7, r5
 8001d0c:	781a      	ldrb	r2, [r3, #0]
 8001d0e:	492b      	ldr	r1, [pc, #172]	; (8001dbc <main+0x110>)
 8001d10:	2440      	movs	r4, #64	; 0x40
 8001d12:	193b      	adds	r3, r7, r4
 8001d14:	0018      	movs	r0, r3
 8001d16:	f004 fd8f 	bl	8006838 <siprintf>
               DBG_PUT(buf);
 8001d1a:	193b      	adds	r3, r7, r4
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff ffaf 	bl	8001c80 <DBG_PUT>
           }
           continue;
 8001d22:	e041      	b.n	8001da8 <main+0xfc>
       }
       /* Command is complete when we get EOL of some sort */
       if (*ptr == '\n' || *ptr == '\r') {
 8001d24:	2284      	movs	r2, #132	; 0x84
 8001d26:	18bb      	adds	r3, r7, r2
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b0a      	cmp	r3, #10
 8001d2e:	d004      	beq.n	8001d3a <main+0x8e>
 8001d30:	18bb      	adds	r3, r7, r2
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	781b      	ldrb	r3, [r3, #0]
 8001d36:	2b0d      	cmp	r3, #13
 8001d38:	d110      	bne.n	8001d5c <main+0xb0>
           *ptr = 0;
 8001d3a:	2484      	movs	r4, #132	; 0x84
 8001d3c:	193b      	adds	r3, r7, r4
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
           DBG_PUT("\r\n");
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <main+0x114>)
 8001d46:	0018      	movs	r0, r3
 8001d48:	f7ff ff9a 	bl	8001c80 <DBG_PUT>
           handle_command(cmd);
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	0018      	movs	r0, r3
 8001d50:	f7ff ff36 	bl	8001bc0 <handle_command>
           ptr = cmd;
 8001d54:	003b      	movs	r3, r7
 8001d56:	193a      	adds	r2, r7, r4
 8001d58:	6013      	str	r3, [r2, #0]
 8001d5a:	e026      	b.n	8001daa <main+0xfe>
       }
       else {
           *(ptr + 1) = 0;
 8001d5c:	2184      	movs	r1, #132	; 0x84
 8001d5e:	187b      	adds	r3, r7, r1
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	3301      	adds	r3, #1
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
           DBG_PUT(ptr);
 8001d68:	000c      	movs	r4, r1
 8001d6a:	187b      	adds	r3, r7, r1
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f7ff ff86 	bl	8001c80 <DBG_PUT>

           if (*ptr == 0x7f) { // handle backspace
 8001d74:	0022      	movs	r2, r4
 8001d76:	18bb      	adds	r3, r7, r2
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	2b7f      	cmp	r3, #127	; 0x7f
 8001d7e:	d10c      	bne.n	8001d9a <main+0xee>
               if (ptr > cmd)
 8001d80:	003b      	movs	r3, r7
 8001d82:	0011      	movs	r1, r2
 8001d84:	18ba      	adds	r2, r7, r2
 8001d86:	6812      	ldr	r2, [r2, #0]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d9aa      	bls.n	8001ce2 <main+0x36>
                   --ptr;
 8001d8c:	000a      	movs	r2, r1
 8001d8e:	18bb      	adds	r3, r7, r2
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	18ba      	adds	r2, r7, r2
 8001d96:	6013      	str	r3, [r2, #0]
 8001d98:	e7a3      	b.n	8001ce2 <main+0x36>
           }
           else
               ++ptr;
 8001d9a:	2284      	movs	r2, #132	; 0x84
 8001d9c:	18bb      	adds	r3, r7, r2
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	3301      	adds	r3, #1
 8001da2:	18ba      	adds	r2, r7, r2
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e79c      	b.n	8001ce2 <main+0x36>
           continue;
 8001da8:	46c0      	nop			; (mov r8, r8)
   {
 8001daa:	e79a      	b.n	8001ce2 <main+0x36>
 8001dac:	08008168 	.word	0x08008168
 8001db0:	08008190 	.word	0x08008190
 8001db4:	00004e20 	.word	0x00004e20
 8001db8:	20000150 	.word	0x20000150
 8001dbc:	0800819c 	.word	0x0800819c
 8001dc0:	080081b4 	.word	0x080081b4

08001dc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001dc4:	b590      	push	{r4, r7, lr}
 8001dc6:	b09b      	sub	sp, #108	; 0x6c
 8001dc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dca:	2434      	movs	r4, #52	; 0x34
 8001dcc:	193b      	adds	r3, r7, r4
 8001dce:	0018      	movs	r0, r3
 8001dd0:	2334      	movs	r3, #52	; 0x34
 8001dd2:	001a      	movs	r2, r3
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	f004 fd27 	bl	8006828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dda:	2320      	movs	r3, #32
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	0018      	movs	r0, r3
 8001de0:	2314      	movs	r3, #20
 8001de2:	001a      	movs	r2, r3
 8001de4:	2100      	movs	r1, #0
 8001de6:	f004 fd1f 	bl	8006828 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dea:	003b      	movs	r3, r7
 8001dec:	0018      	movs	r0, r3
 8001dee:	2320      	movs	r3, #32
 8001df0:	001a      	movs	r2, r3
 8001df2:	2100      	movs	r1, #0
 8001df4:	f004 fd18 	bl	8006828 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df8:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <SystemClock_Config+0xe0>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a2a      	ldr	r2, [pc, #168]	; (8001ea8 <SystemClock_Config+0xe4>)
 8001dfe:	401a      	ands	r2, r3
 8001e00:	4b28      	ldr	r3, [pc, #160]	; (8001ea4 <SystemClock_Config+0xe0>)
 8001e02:	2180      	movs	r1, #128	; 0x80
 8001e04:	0109      	lsls	r1, r1, #4
 8001e06:	430a      	orrs	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e0a:	0021      	movs	r1, r4
 8001e0c:	187b      	adds	r3, r7, r1
 8001e0e:	2201      	movs	r2, #1
 8001e10:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e12:	187b      	adds	r3, r7, r1
 8001e14:	22a0      	movs	r2, #160	; 0xa0
 8001e16:	02d2      	lsls	r2, r2, #11
 8001e18:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e1a:	187b      	adds	r3, r7, r1
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e20:	187b      	adds	r3, r7, r1
 8001e22:	2280      	movs	r2, #128	; 0x80
 8001e24:	0252      	lsls	r2, r2, #9
 8001e26:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8001e28:	187b      	adds	r3, r7, r1
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	02d2      	lsls	r2, r2, #11
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_4;
 8001e30:	187b      	adds	r3, r7, r1
 8001e32:	22c0      	movs	r2, #192	; 0xc0
 8001e34:	0412      	lsls	r2, r2, #16
 8001e36:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e38:	187b      	adds	r3, r7, r1
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f002 f94a 	bl	80040d4 <HAL_RCC_OscConfig>
 8001e40:	1e03      	subs	r3, r0, #0
 8001e42:	d001      	beq.n	8001e48 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001e44:	f000 f9d4 	bl	80021f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e48:	2120      	movs	r1, #32
 8001e4a:	187b      	adds	r3, r7, r1
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e50:	187b      	adds	r3, r7, r1
 8001e52:	2203      	movs	r2, #3
 8001e54:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e56:	187b      	adds	r3, r7, r1
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e5c:	187b      	adds	r3, r7, r1
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e62:	187b      	adds	r3, r7, r1
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e68:	187b      	adds	r3, r7, r1
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f002 fcad 	bl	80047cc <HAL_RCC_ClockConfig>
 8001e72:	1e03      	subs	r3, r0, #0
 8001e74:	d001      	beq.n	8001e7a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8001e76:	f000 f9bb 	bl	80021f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001e7a:	003b      	movs	r3, r7
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_SYSCLK;
 8001e80:	003b      	movs	r3, r7
 8001e82:	2201      	movs	r2, #1
 8001e84:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e86:	003b      	movs	r3, r7
 8001e88:	0018      	movs	r0, r3
 8001e8a:	f002 feeb 	bl	8004c64 <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	1e03      	subs	r3, r0, #0
 8001e90:	d001      	beq.n	8001e96 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001e92:	f000 f9ad 	bl	80021f0 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001e96:	f002 fde1 	bl	8004a5c <HAL_RCC_EnableCSS>
}
 8001e9a:	46c0      	nop			; (mov r8, r8)
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	b01b      	add	sp, #108	; 0x6c
 8001ea0:	bd90      	pop	{r4, r7, pc}
 8001ea2:	46c0      	nop			; (mov r8, r8)
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	ffffe7ff 	.word	0xffffe7ff

08001eac <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001eb0:	4b1b      	ldr	r3, [pc, #108]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001eb2:	4a1c      	ldr	r2, [pc, #112]	; (8001f24 <MX_I2C2_Init+0x78>)
 8001eb4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8001eb6:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001eb8:	4a1b      	ldr	r2, [pc, #108]	; (8001f28 <MX_I2C2_Init+0x7c>)
 8001eba:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ebc:	4b18      	ldr	r3, [pc, #96]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ec2:	4b17      	ldr	r3, [pc, #92]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ec8:	4b15      	ldr	r3, [pc, #84]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8001ece:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001eda:	4b11      	ldr	r3, [pc, #68]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ee6:	4b0e      	ldr	r3, [pc, #56]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f001 f9f7 	bl	80032dc <HAL_I2C_Init>
 8001eee:	1e03      	subs	r3, r0, #0
 8001ef0:	d001      	beq.n	8001ef6 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8001ef2:	f000 f97d 	bl	80021f0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ef6:	4b0a      	ldr	r3, [pc, #40]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001ef8:	2100      	movs	r1, #0
 8001efa:	0018      	movs	r0, r3
 8001efc:	f002 f852 	bl	8003fa4 <HAL_I2CEx_ConfigAnalogFilter>
 8001f00:	1e03      	subs	r3, r0, #0
 8001f02:	d001      	beq.n	8001f08 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8001f04:	f000 f974 	bl	80021f0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8001f08:	4b05      	ldr	r3, [pc, #20]	; (8001f20 <MX_I2C2_Init+0x74>)
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f002 f895 	bl	800403c <HAL_I2CEx_ConfigDigitalFilter>
 8001f12:	1e03      	subs	r3, r0, #0
 8001f14:	d001      	beq.n	8001f1a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8001f16:	f000 f96b 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001f1a:	46c0      	nop			; (mov r8, r8)
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	20000104 	.word	0x20000104
 8001f24:	40005800 	.word	0x40005800
 8001f28:	00303d5b 	.word	0x00303d5b

08001f2c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f32:	4a19      	ldr	r2, [pc, #100]	; (8001f98 <MX_SPI2_Init+0x6c>)
 8001f34:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f38:	2282      	movs	r2, #130	; 0x82
 8001f3a:	0052      	lsls	r2, r2, #1
 8001f3c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f3e:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f44:	4b13      	ldr	r3, [pc, #76]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f4a:	4b12      	ldr	r3, [pc, #72]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f56:	4b0f      	ldr	r3, [pc, #60]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f58:	2280      	movs	r2, #128	; 0x80
 8001f5a:	0092      	lsls	r2, r2, #2
 8001f5c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f5e:	4b0d      	ldr	r3, [pc, #52]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f64:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001f76:	4b07      	ldr	r3, [pc, #28]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f78:	2207      	movs	r2, #7
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f7c:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <MX_SPI2_Init+0x68>)
 8001f7e:	0018      	movs	r0, r3
 8001f80:	f002 ffb6 	bl	8004ef0 <HAL_SPI_Init>
 8001f84:	1e03      	subs	r3, r0, #0
 8001f86:	d001      	beq.n	8001f8c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001f88:	f000 f932 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001f8c:	46c0      	nop			; (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	200000ac 	.word	0x200000ac
 8001f98:	40003800 	.word	0x40003800

08001f9c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fa0:	4b14      	ldr	r3, [pc, #80]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fa2:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <MX_USART1_UART_Init+0x5c>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fa6:	4b13      	ldr	r3, [pc, #76]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fa8:	22e1      	movs	r2, #225	; 0xe1
 8001faa:	0252      	lsls	r2, r2, #9
 8001fac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b11      	ldr	r3, [pc, #68]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0f      	ldr	r3, [pc, #60]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0e      	ldr	r3, [pc, #56]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b0c      	ldr	r3, [pc, #48]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b09      	ldr	r3, [pc, #36]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fd2:	4b08      	ldr	r3, [pc, #32]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fd8:	4b06      	ldr	r3, [pc, #24]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fde:	4b05      	ldr	r3, [pc, #20]	; (8001ff4 <MX_USART1_UART_Init+0x58>)
 8001fe0:	0018      	movs	r0, r3
 8001fe2:	f003 fd8f 	bl	8005b04 <HAL_UART_Init>
 8001fe6:	1e03      	subs	r3, r0, #0
 8001fe8:	d001      	beq.n	8001fee <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fea:	f000 f901 	bl	80021f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20000150 	.word	0x20000150
 8001ff8:	40013800 	.word	0x40013800

08001ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ffc:	b590      	push	{r4, r7, lr}
 8001ffe:	b08b      	sub	sp, #44	; 0x2c
 8002000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	2414      	movs	r4, #20
 8002004:	193b      	adds	r3, r7, r4
 8002006:	0018      	movs	r0, r3
 8002008:	2314      	movs	r3, #20
 800200a:	001a      	movs	r2, r3
 800200c:	2100      	movs	r1, #0
 800200e:	f004 fc0b 	bl	8006828 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002012:	4b72      	ldr	r3, [pc, #456]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002016:	4b71      	ldr	r3, [pc, #452]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002018:	2104      	movs	r1, #4
 800201a:	430a      	orrs	r2, r1
 800201c:	62da      	str	r2, [r3, #44]	; 0x2c
 800201e:	4b6f      	ldr	r3, [pc, #444]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002022:	2204      	movs	r2, #4
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
 8002028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800202a:	4b6c      	ldr	r3, [pc, #432]	; (80021dc <MX_GPIO_Init+0x1e0>)
 800202c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800202e:	4b6b      	ldr	r3, [pc, #428]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002030:	2180      	movs	r1, #128	; 0x80
 8002032:	430a      	orrs	r2, r1
 8002034:	62da      	str	r2, [r3, #44]	; 0x2c
 8002036:	4b69      	ldr	r3, [pc, #420]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800203a:	2280      	movs	r2, #128	; 0x80
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
 8002040:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002042:	4b66      	ldr	r3, [pc, #408]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002046:	4b65      	ldr	r3, [pc, #404]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002048:	2101      	movs	r1, #1
 800204a:	430a      	orrs	r2, r1
 800204c:	62da      	str	r2, [r3, #44]	; 0x2c
 800204e:	4b63      	ldr	r3, [pc, #396]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002052:	2201      	movs	r2, #1
 8002054:	4013      	ands	r3, r2
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	4b60      	ldr	r3, [pc, #384]	; (80021dc <MX_GPIO_Init+0x1e0>)
 800205c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205e:	4b5f      	ldr	r3, [pc, #380]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002060:	2102      	movs	r1, #2
 8002062:	430a      	orrs	r2, r1
 8002064:	62da      	str	r2, [r3, #44]	; 0x2c
 8002066:	4b5d      	ldr	r3, [pc, #372]	; (80021dc <MX_GPIO_Init+0x1e0>)
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	2202      	movs	r2, #2
 800206c:	4013      	ands	r3, r2
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, USART2_CS1_Pin|USART2_CS2_Pin|USART2_MOSI_Pin|USART2_CLK_Pin
 8002072:	495b      	ldr	r1, [pc, #364]	; (80021e0 <MX_GPIO_Init+0x1e4>)
 8002074:	23a0      	movs	r3, #160	; 0xa0
 8002076:	05db      	lsls	r3, r3, #23
 8002078:	2200      	movs	r2, #0
 800207a:	0018      	movs	r0, r3
 800207c:	f001 f911 	bl	80032a2 <HAL_GPIO_WritePin>
                          |NAND_NWP_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TEST_OUT1_Pin|NAND_NCS_Pin|CAM_EN_Pin, GPIO_PIN_RESET);
 8002080:	4958      	ldr	r1, [pc, #352]	; (80021e4 <MX_GPIO_Init+0x1e8>)
 8002082:	4b59      	ldr	r3, [pc, #356]	; (80021e8 <MX_GPIO_Init+0x1ec>)
 8002084:	2200      	movs	r2, #0
 8002086:	0018      	movs	r0, r3
 8002088:	f001 f90b 	bl	80032a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_IN2_Pin */
  GPIO_InitStruct.Pin = TEST_IN2_Pin;
 800208c:	193b      	adds	r3, r7, r4
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	0192      	lsls	r2, r2, #6
 8002092:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002094:	193b      	adds	r3, r7, r4
 8002096:	2200      	movs	r2, #0
 8002098:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209a:	193b      	adds	r3, r7, r4
 800209c:	2200      	movs	r2, #0
 800209e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_IN2_GPIO_Port, &GPIO_InitStruct);
 80020a0:	193b      	adds	r3, r7, r4
 80020a2:	4a52      	ldr	r2, [pc, #328]	; (80021ec <MX_GPIO_Init+0x1f0>)
 80020a4:	0019      	movs	r1, r3
 80020a6:	0010      	movs	r0, r2
 80020a8:	f000 ff60 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_CS1_Pin USART2_CS2_Pin */
  GPIO_InitStruct.Pin = USART2_CS1_Pin|USART2_CS2_Pin;
 80020ac:	193b      	adds	r3, r7, r4
 80020ae:	2203      	movs	r2, #3
 80020b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020b2:	193b      	adds	r3, r7, r4
 80020b4:	2201      	movs	r2, #1
 80020b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020b8:	193b      	adds	r3, r7, r4
 80020ba:	2201      	movs	r2, #1
 80020bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020be:	193b      	adds	r3, r7, r4
 80020c0:	2203      	movs	r2, #3
 80020c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c4:	193a      	adds	r2, r7, r4
 80020c6:	23a0      	movs	r3, #160	; 0xa0
 80020c8:	05db      	lsls	r3, r3, #23
 80020ca:	0011      	movs	r1, r2
 80020cc:	0018      	movs	r0, r3
 80020ce:	f000 ff4d 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : USART2_MISO_Pin */
  GPIO_InitStruct.Pin = USART2_MISO_Pin;
 80020d2:	193b      	adds	r3, r7, r4
 80020d4:	2204      	movs	r2, #4
 80020d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020d8:	193b      	adds	r3, r7, r4
 80020da:	2200      	movs	r2, #0
 80020dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	193b      	adds	r3, r7, r4
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USART2_MISO_GPIO_Port, &GPIO_InitStruct);
 80020e4:	193a      	adds	r2, r7, r4
 80020e6:	23a0      	movs	r3, #160	; 0xa0
 80020e8:	05db      	lsls	r3, r3, #23
 80020ea:	0011      	movs	r1, r2
 80020ec:	0018      	movs	r0, r3
 80020ee:	f000 ff3d 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART2_MOSI_Pin USART2_CLK_Pin */
  GPIO_InitStruct.Pin = USART2_MOSI_Pin|USART2_CLK_Pin;
 80020f2:	193b      	adds	r3, r7, r4
 80020f4:	2218      	movs	r2, #24
 80020f6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020f8:	193b      	adds	r3, r7, r4
 80020fa:	2201      	movs	r2, #1
 80020fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80020fe:	193b      	adds	r3, r7, r4
 8002100:	2202      	movs	r2, #2
 8002102:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002104:	193b      	adds	r3, r7, r4
 8002106:	2203      	movs	r2, #3
 8002108:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	193a      	adds	r2, r7, r4
 800210c:	23a0      	movs	r3, #160	; 0xa0
 800210e:	05db      	lsls	r3, r3, #23
 8002110:	0011      	movs	r1, r2
 8002112:	0018      	movs	r0, r3
 8002114:	f000 ff2a 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : TEST_OUT1_Pin CAM_EN_Pin */
  GPIO_InitStruct.Pin = TEST_OUT1_Pin|CAM_EN_Pin;
 8002118:	0021      	movs	r1, r4
 800211a:	187b      	adds	r3, r7, r1
 800211c:	2202      	movs	r2, #2
 800211e:	32ff      	adds	r2, #255	; 0xff
 8002120:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002122:	000c      	movs	r4, r1
 8002124:	193b      	adds	r3, r7, r4
 8002126:	2201      	movs	r2, #1
 8002128:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	193b      	adds	r3, r7, r4
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002130:	193b      	adds	r3, r7, r4
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002136:	193b      	adds	r3, r7, r4
 8002138:	4a2b      	ldr	r2, [pc, #172]	; (80021e8 <MX_GPIO_Init+0x1ec>)
 800213a:	0019      	movs	r1, r3
 800213c:	0010      	movs	r0, r2
 800213e:	f000 ff15 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_OUT2_Pin */
  GPIO_InitStruct.Pin = TEST_OUT2_Pin;
 8002142:	193b      	adds	r3, r7, r4
 8002144:	2202      	movs	r2, #2
 8002146:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002148:	193b      	adds	r3, r7, r4
 800214a:	2203      	movs	r2, #3
 800214c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	193b      	adds	r3, r7, r4
 8002150:	2200      	movs	r2, #0
 8002152:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_OUT2_GPIO_Port, &GPIO_InitStruct);
 8002154:	193b      	adds	r3, r7, r4
 8002156:	4a24      	ldr	r2, [pc, #144]	; (80021e8 <MX_GPIO_Init+0x1ec>)
 8002158:	0019      	movs	r1, r3
 800215a:	0010      	movs	r0, r2
 800215c:	f000 ff06 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : TEST_IN1_Pin */
  GPIO_InitStruct.Pin = TEST_IN1_Pin;
 8002160:	193b      	adds	r3, r7, r4
 8002162:	2204      	movs	r2, #4
 8002164:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002166:	193b      	adds	r3, r7, r4
 8002168:	2200      	movs	r2, #0
 800216a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	193b      	adds	r3, r7, r4
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(TEST_IN1_GPIO_Port, &GPIO_InitStruct);
 8002172:	193b      	adds	r3, r7, r4
 8002174:	4a1c      	ldr	r2, [pc, #112]	; (80021e8 <MX_GPIO_Init+0x1ec>)
 8002176:	0019      	movs	r1, r3
 8002178:	0010      	movs	r0, r2
 800217a:	f000 fef7 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : NAND_NCS_Pin */
  GPIO_InitStruct.Pin = NAND_NCS_Pin;
 800217e:	0021      	movs	r1, r4
 8002180:	187b      	adds	r3, r7, r1
 8002182:	2280      	movs	r2, #128	; 0x80
 8002184:	0152      	lsls	r2, r2, #5
 8002186:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	000c      	movs	r4, r1
 800218a:	193b      	adds	r3, r7, r4
 800218c:	2201      	movs	r2, #1
 800218e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002190:	193b      	adds	r3, r7, r4
 8002192:	2201      	movs	r2, #1
 8002194:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	193b      	adds	r3, r7, r4
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NAND_NCS_GPIO_Port, &GPIO_InitStruct);
 800219c:	193b      	adds	r3, r7, r4
 800219e:	4a12      	ldr	r2, [pc, #72]	; (80021e8 <MX_GPIO_Init+0x1ec>)
 80021a0:	0019      	movs	r1, r3
 80021a2:	0010      	movs	r0, r2
 80021a4:	f000 fee2 	bl	8002f6c <HAL_GPIO_Init>

  /*Configure GPIO pin : NAND_NWP_Pin */
  GPIO_InitStruct.Pin = NAND_NWP_Pin;
 80021a8:	0021      	movs	r1, r4
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2280      	movs	r2, #128	; 0x80
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	187b      	adds	r3, r7, r1
 80021b4:	2201      	movs	r2, #1
 80021b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2201      	movs	r2, #1
 80021bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NAND_NWP_GPIO_Port, &GPIO_InitStruct);
 80021c4:	187a      	adds	r2, r7, r1
 80021c6:	23a0      	movs	r3, #160	; 0xa0
 80021c8:	05db      	lsls	r3, r3, #23
 80021ca:	0011      	movs	r1, r2
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 fecd 	bl	8002f6c <HAL_GPIO_Init>

}
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	46bd      	mov	sp, r7
 80021d6:	b00b      	add	sp, #44	; 0x2c
 80021d8:	bd90      	pop	{r4, r7, pc}
 80021da:	46c0      	nop			; (mov r8, r8)
 80021dc:	40021000 	.word	0x40021000
 80021e0:	0000081b 	.word	0x0000081b
 80021e4:	00001101 	.word	0x00001101
 80021e8:	50000400 	.word	0x50000400
 80021ec:	50000800 	.word	0x50000800

080021f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f4:	b672      	cpsid	i
}
 80021f6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <Error_Handler+0x8>

080021fa <NAND_Init>:
 * @note  This function must be called first when powered on.
 * 
 * @param[in] None
 * @return NAND_ReturnType
 */
NAND_ReturnType NAND_Init(void) {
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b082      	sub	sp, #8
 80021fe:	af00      	add	r7, sp, #0
    NAND_ID dev_ID;

    NAND_Wait(T_POR);       /* Wait for T_POR = 1.25ms after power on */
 8002200:	2002      	movs	r0, #2
 8002202:	f000 f912 	bl	800242a <NAND_Wait>
    NAND_Send_Dummy_Byte(); /* Initializes SPI clock settings */
 8002206:	f000 f87e 	bl	8002306 <NAND_Send_Dummy_Byte>

    /* Reset NAND flash after power on. May not be necessary though (page 50) */
    if (NAND_Reset() != Ret_Success) {
 800220a:	f000 f817 	bl	800223c <NAND_Reset>
 800220e:	1e03      	subs	r3, r0, #0
 8002210:	d001      	beq.n	8002216 <NAND_Init+0x1c>
        return Ret_ResetFailed;
 8002212:	2302      	movs	r3, #2
 8002214:	e00e      	b.n	8002234 <NAND_Init+0x3a>
    } 

    /* check if device ID is same as expected */
    NAND_Read_ID(&dev_ID);
 8002216:	1d3b      	adds	r3, r7, #4
 8002218:	0018      	movs	r0, r3
 800221a:	f000 f894 	bl	8002346 <NAND_Read_ID>
    if (dev_ID.manufacturer_ID != NAND_ID_MANUFACTURER || dev_ID.device_ID != NAND_ID_DEVICE) {
 800221e:	1d3b      	adds	r3, r7, #4
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b2c      	cmp	r3, #44	; 0x2c
 8002224:	d103      	bne.n	800222e <NAND_Init+0x34>
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	785b      	ldrb	r3, [r3, #1]
 800222a:	2b24      	cmp	r3, #36	; 0x24
 800222c:	d001      	beq.n	8002232 <NAND_Init+0x38>
        return Ret_WrongID;
 800222e:	2303      	movs	r3, #3
 8002230:	e000      	b.n	8002234 <NAND_Init+0x3a>

    // TODO:
    // run power on self test (POST)
    // build bad block table

    return Ret_Success;
 8002232:	2300      	movs	r3, #0

}
 8002234:	0018      	movs	r0, r3
 8002236:	46bd      	mov	sp, r7
 8002238:	b002      	add	sp, #8
 800223a:	bd80      	pop	{r7, pc}

0800223c <NAND_Reset>:
 * @note Transaction length: 1 byte; Returns success when Flash is ready for further instructions.
 * 
 * @param[in] None
 * @return NAND_ReturnType
 */
NAND_ReturnType NAND_Reset(void) {
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0

    uint8_t command = SPI_NAND_RESET;
 8002242:	210e      	movs	r1, #14
 8002244:	187b      	adds	r3, r7, r1
 8002246:	22ff      	movs	r2, #255	; 0xff
 8002248:	701a      	strb	r2, [r3, #0]
    SPI_Params transmit = { .buffer = &command, .length = 1 };
 800224a:	1d3b      	adds	r3, r7, #4
 800224c:	187a      	adds	r2, r7, r1
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	1d3b      	adds	r3, r7, #4
 8002252:	2201      	movs	r2, #1
 8002254:	809a      	strh	r2, [r3, #4]

    NAND_SPI_ReturnType SPI_Status = NAND_SPI_Send(&transmit);
 8002256:	250f      	movs	r5, #15
 8002258:	197c      	adds	r4, r7, r5
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	0018      	movs	r0, r3
 800225e:	f000 f8f3 	bl	8002448 <NAND_SPI_Send>
 8002262:	0003      	movs	r3, r0
 8002264:	7023      	strb	r3, [r4, #0]
    NAND_Wait(T_POR);	// wait for T_POR = 1.25 ms after reset
 8002266:	2002      	movs	r0, #2
 8002268:	f000 f8df 	bl	800242a <NAND_Wait>

    if (SPI_Status != SPI_OK) {
 800226c:	197b      	adds	r3, r7, r5
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <NAND_Reset+0x3c>
        return Ret_ResetFailed;
 8002274:	2302      	movs	r3, #2
 8002276:	e002      	b.n	800227e <NAND_Reset+0x42>
    } else {
        // wait until OIP bit resets again (Flash is ready for further instructions)
        return NAND_Wait_Until_Ready();
 8002278:	f000 f805 	bl	8002286 <NAND_Wait_Until_Ready>
 800227c:	0003      	movs	r3, r0
    }
}
 800227e:	0018      	movs	r0, r3
 8002280:	46bd      	mov	sp, r7
 8002282:	b004      	add	sp, #16
 8002284:	bdb0      	pop	{r4, r5, r7, pc}

08002286 <NAND_Wait_Until_Ready>:
 *  TODO: confirm with an oscilloscope.
 * 
 * @param[in] None
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Wait_Until_Ready(void) {
 8002286:	b5b0      	push	{r4, r5, r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
    uint8_t timeout_counter = 0;
 800228c:	230f      	movs	r3, #15
 800228e:	18fb      	adds	r3, r7, r3
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
    uint8_t max_attempts = 2;
 8002294:	230e      	movs	r3, #14
 8002296:	18fb      	adds	r3, r7, r3
 8002298:	2202      	movs	r2, #2
 800229a:	701a      	strb	r2, [r3, #0]

    /* SPI Transaction set up */
    uint8_t data_rx;
    SPI_Params rx = { .buffer = &data_rx, .length = 1 };
 800229c:	1d3b      	adds	r3, r7, #4
 800229e:	220c      	movs	r2, #12
 80022a0:	18ba      	adds	r2, r7, r2
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	1d3b      	adds	r3, r7, #4
 80022a6:	2201      	movs	r2, #1
 80022a8:	809a      	strh	r2, [r3, #4]

    /* check once if any operations in progress */
    NAND_ReturnType status = NAND_Check_Busy();
 80022aa:	250d      	movs	r5, #13
 80022ac:	197c      	adds	r4, r7, r5
 80022ae:	f000 f874 	bl	800239a <NAND_Check_Busy>
 80022b2:	0003      	movs	r3, r0
 80022b4:	7023      	strb	r3, [r4, #0]

    /* if busy, keep polling for until reaching max_attempts. if still busy, return busy */
    if (status == Ret_NANDBusy) {
 80022b6:	197b      	adds	r3, r7, r5
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d11e      	bne.n	80022fc <NAND_Wait_Until_Ready+0x76>
        while (CHECK_OIP(data_rx)) {
 80022be:	e016      	b.n	80022ee <NAND_Wait_Until_Ready+0x68>
            if (timeout_counter < max_attempts) {
 80022c0:	240f      	movs	r4, #15
 80022c2:	193a      	adds	r2, r7, r4
 80022c4:	230e      	movs	r3, #14
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	7812      	ldrb	r2, [r2, #0]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d20c      	bcs.n	80022ea <NAND_Wait_Until_Ready+0x64>
                NAND_SPI_Receive(&rx);
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	0018      	movs	r0, r3
 80022d4:	f000 f906 	bl	80024e4 <NAND_SPI_Receive>
                NAND_Wait(1);
 80022d8:	2001      	movs	r0, #1
 80022da:	f000 f8a6 	bl	800242a <NAND_Wait>
                timeout_counter += 1;
 80022de:	193b      	adds	r3, r7, r4
 80022e0:	193a      	adds	r2, r7, r4
 80022e2:	7812      	ldrb	r2, [r2, #0]
 80022e4:	3201      	adds	r2, #1
 80022e6:	701a      	strb	r2, [r3, #0]
 80022e8:	e001      	b.n	80022ee <NAND_Wait_Until_Ready+0x68>
            } else {
                return Ret_NANDBusy;
 80022ea:	2304      	movs	r3, #4
 80022ec:	e007      	b.n	80022fe <NAND_Wait_Until_Ready+0x78>
        while (CHECK_OIP(data_rx)) {
 80022ee:	230c      	movs	r3, #12
 80022f0:	18fb      	adds	r3, r7, r3
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	001a      	movs	r2, r3
 80022f6:	2301      	movs	r3, #1
 80022f8:	4013      	ands	r3, r2
 80022fa:	d1e1      	bne.n	80022c0 <NAND_Wait_Until_Ready+0x3a>
            }
        }
    }
    return Ret_Success;
 80022fc:	2300      	movs	r3, #0
}
 80022fe:	0018      	movs	r0, r3
 8002300:	46bd      	mov	sp, r7
 8002302:	b004      	add	sp, #16
 8002304:	bdb0      	pop	{r4, r5, r7, pc}

08002306 <NAND_Send_Dummy_Byte>:
/**
 * @brief Send a dummy byte to NAND via SPI
 * 
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Send_Dummy_Byte(void) {
 8002306:	b5b0      	push	{r4, r5, r7, lr}
 8002308:	b084      	sub	sp, #16
 800230a:	af00      	add	r7, sp, #0
    uint8_t dummy = DUMMY_BYTE;
 800230c:	210e      	movs	r1, #14
 800230e:	187b      	adds	r3, r7, r1
 8002310:	2200      	movs	r2, #0
 8002312:	701a      	strb	r2, [r3, #0]
    
    SPI_Params tx = { .buffer = &dummy, .length = 1 };
 8002314:	1d3b      	adds	r3, r7, #4
 8002316:	187a      	adds	r2, r7, r1
 8002318:	601a      	str	r2, [r3, #0]
 800231a:	1d3b      	adds	r3, r7, #4
 800231c:	2201      	movs	r2, #1
 800231e:	809a      	strh	r2, [r3, #4]
    NAND_SPI_ReturnType status = NAND_SPI_Send(&tx);
 8002320:	250f      	movs	r5, #15
 8002322:	197c      	adds	r4, r7, r5
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	0018      	movs	r0, r3
 8002328:	f000 f88e 	bl	8002448 <NAND_SPI_Send>
 800232c:	0003      	movs	r3, r0
 800232e:	7023      	strb	r3, [r4, #0]

    if (status != HAL_OK) {
 8002330:	197b      	adds	r3, r7, r5
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d001      	beq.n	800233c <NAND_Send_Dummy_Byte+0x36>
        return Ret_Failed;
 8002338:	2301      	movs	r3, #1
 800233a:	e000      	b.n	800233e <NAND_Send_Dummy_Byte+0x38>
    } else {
        return Ret_Success;
 800233c:	2300      	movs	r3, #0
    }
}
 800233e:	0018      	movs	r0, r3
 8002340:	46bd      	mov	sp, r7
 8002342:	b004      	add	sp, #16
 8002344:	bdb0      	pop	{r4, r5, r7, pc}

08002346 <NAND_Read_ID>:
 * @note Transaction length: 4 bytes (2 each way)
 * 
 * @param nand_ID[out]  Pointer to ID structure
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Read_ID(NAND_ID *nand_ID) {
 8002346:	b590      	push	{r4, r7, lr}
 8002348:	b089      	sub	sp, #36	; 0x24
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]

    uint8_t data_tx[] = {SPI_NAND_READ_ID, 0}; // second byte is dummy byte
 800234e:	201c      	movs	r0, #28
 8002350:	183b      	adds	r3, r7, r0
 8002352:	229f      	movs	r2, #159	; 0x9f
 8002354:	801a      	strh	r2, [r3, #0]
    uint8_t data_rx[2]; // data buffer for received data

    SPI_Params tx = { .buffer = data_tx, .length = 2 };
 8002356:	2110      	movs	r1, #16
 8002358:	187b      	adds	r3, r7, r1
 800235a:	183a      	adds	r2, r7, r0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	187b      	adds	r3, r7, r1
 8002360:	2202      	movs	r2, #2
 8002362:	809a      	strh	r2, [r3, #4]
    SPI_Params rx = { .buffer = data_rx, .length = 2 };
 8002364:	2008      	movs	r0, #8
 8002366:	183b      	adds	r3, r7, r0
 8002368:	2418      	movs	r4, #24
 800236a:	193a      	adds	r2, r7, r4
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	183b      	adds	r3, r7, r0
 8002370:	2202      	movs	r2, #2
 8002372:	809a      	strh	r2, [r3, #4]

    NAND_SPI_SendReceive(&tx, &rx);
 8002374:	183a      	adds	r2, r7, r0
 8002376:	187b      	adds	r3, r7, r1
 8002378:	0011      	movs	r1, r2
 800237a:	0018      	movs	r0, r3
 800237c:	f000 f886 	bl	800248c <NAND_SPI_SendReceive>

    nand_ID -> manufacturer_ID = data_rx[0]; // second last byte from transmission
 8002380:	193b      	adds	r3, r7, r4
 8002382:	781a      	ldrb	r2, [r3, #0]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	701a      	strb	r2, [r3, #0]
    nand_ID -> device_ID       = data_rx[1]; // last byte
 8002388:	193b      	adds	r3, r7, r4
 800238a:	785a      	ldrb	r2, [r3, #1]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	705a      	strb	r2, [r3, #1]

    return Ret_Success;
 8002390:	2300      	movs	r3, #0
}
 8002392:	0018      	movs	r0, r3
 8002394:	46bd      	mov	sp, r7
 8002396:	b009      	add	sp, #36	; 0x24
 8002398:	bd90      	pop	{r4, r7, pc}

0800239a <NAND_Check_Busy>:
 *      Transaction length: 3 bytes (2 to transmit, 1 to receive)
 * 
 * @param[in] None
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Check_Busy(void) {
 800239a:	b580      	push	{r7, lr}
 800239c:	b082      	sub	sp, #8
 800239e:	af00      	add	r7, sp, #0
    uint8_t status_reg;
    
    NAND_Get_Features(SPI_NAND_STATUS_REG_ADDR, &status_reg);
 80023a0:	1dfb      	adds	r3, r7, #7
 80023a2:	0019      	movs	r1, r3
 80023a4:	20c0      	movs	r0, #192	; 0xc0
 80023a6:	f000 f80d 	bl	80023c4 <NAND_Get_Features>
    if (CHECK_OIP(status_reg)) { // if OIP bit is set
 80023aa:	1dfb      	adds	r3, r7, #7
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	001a      	movs	r2, r3
 80023b0:	2301      	movs	r3, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d001      	beq.n	80023ba <NAND_Check_Busy+0x20>
        return Ret_NANDBusy;
 80023b6:	2304      	movs	r3, #4
 80023b8:	e000      	b.n	80023bc <NAND_Check_Busy+0x22>
    } else {
        return Ret_Success;
 80023ba:	2300      	movs	r3, #0
    }
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	b002      	add	sp, #8
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <NAND_Get_Features>:
 *
 * @param reg_addr[in]  Address of type RegisterAddr
 * @param reg[out]      Pointer to register contents
 * @return NAND_ReturnType 
 */
NAND_ReturnType NAND_Get_Features(RegisterAddr reg_addr, uint8_t *reg) {
 80023c4:	b5b0      	push	{r4, r5, r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	0002      	movs	r2, r0
 80023cc:	6039      	str	r1, [r7, #0]
 80023ce:	1dfb      	adds	r3, r7, #7
 80023d0:	701a      	strb	r2, [r3, #0]
    uint8_t command[] = {SPI_NAND_GET_FEATURES, reg_addr};
 80023d2:	211c      	movs	r1, #28
 80023d4:	187b      	adds	r3, r7, r1
 80023d6:	220f      	movs	r2, #15
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	187b      	adds	r3, r7, r1
 80023dc:	1dfa      	adds	r2, r7, #7
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	705a      	strb	r2, [r3, #1]
    SPI_Params tx = { .buffer = command, .length = 2 };
 80023e2:	2014      	movs	r0, #20
 80023e4:	183b      	adds	r3, r7, r0
 80023e6:	187a      	adds	r2, r7, r1
 80023e8:	601a      	str	r2, [r3, #0]
 80023ea:	0001      	movs	r1, r0
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	2202      	movs	r2, #2
 80023f0:	809a      	strh	r2, [r3, #4]
    SPI_Params rx = { .buffer = reg,     .length = 1 };
 80023f2:	200c      	movs	r0, #12
 80023f4:	183b      	adds	r3, r7, r0
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	601a      	str	r2, [r3, #0]
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	2201      	movs	r2, #1
 80023fe:	809a      	strh	r2, [r3, #4]

    NAND_SPI_ReturnType status = NAND_SPI_SendReceive(&tx, &rx);
 8002400:	251f      	movs	r5, #31
 8002402:	197c      	adds	r4, r7, r5
 8002404:	183a      	adds	r2, r7, r0
 8002406:	187b      	adds	r3, r7, r1
 8002408:	0011      	movs	r1, r2
 800240a:	0018      	movs	r0, r3
 800240c:	f000 f83e 	bl	800248c <NAND_SPI_SendReceive>
 8002410:	0003      	movs	r3, r0
 8002412:	7023      	strb	r3, [r4, #0]

    if (status == SPI_OK) {
 8002414:	197b      	adds	r3, r7, r5
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <NAND_Get_Features+0x5c>
        return Ret_Success;
 800241c:	2300      	movs	r3, #0
 800241e:	e000      	b.n	8002422 <NAND_Get_Features+0x5e>
    } else {
        return Ret_Failed;
 8002420:	2301      	movs	r3, #1
    }
}
 8002422:	0018      	movs	r0, r3
 8002424:	46bd      	mov	sp, r7
 8002426:	b008      	add	sp, #32
 8002428:	bdb0      	pop	{r4, r5, r7, pc}

0800242a <NAND_Wait>:
/**
 * @brief Calls HAL_Delay() for stated number of milliseconds
 * 
 * @param[in] milliseconds Number of milliseconds to delay
 */
void NAND_Wait(uint8_t milliseconds){
 800242a:	b580      	push	{r7, lr}
 800242c:	b082      	sub	sp, #8
 800242e:	af00      	add	r7, sp, #0
 8002430:	0002      	movs	r2, r0
 8002432:	1dfb      	adds	r3, r7, #7
 8002434:	701a      	strb	r2, [r3, #0]
    HAL_Delay(milliseconds);
 8002436:	1dfb      	adds	r3, r7, #7
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	0018      	movs	r0, r3
 800243c:	f000 fcbe 	bl	8002dbc <HAL_Delay>
};
 8002440:	46c0      	nop			; (mov r8, r8)
 8002442:	46bd      	mov	sp, r7
 8002444:	b002      	add	sp, #8
 8002446:	bd80      	pop	{r7, pc}

08002448 <NAND_SPI_Send>:
 * @brief Write data to NAND.
 * 
 * @param data_send[in]    Pointer to struct with data and length
 * @return NAND_SPI_ReturnType 
 */
NAND_SPI_ReturnType NAND_SPI_Send(SPI_Params *data_send) {
 8002448:	b5b0      	push	{r4, r5, r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef send_status;

    __nand_spi_cs_low();
 8002450:	f000 f86a 	bl	8002528 <__nand_spi_cs_low>
    send_status = HAL_SPI_Transmit(hspi_nand, data_send->buffer, data_send->length, NAND_SPI_TIMEOUT);
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <NAND_SPI_Send+0x40>)
 8002456:	6818      	ldr	r0, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	889a      	ldrh	r2, [r3, #4]
 8002460:	250f      	movs	r5, #15
 8002462:	197c      	adds	r4, r7, r5
 8002464:	2364      	movs	r3, #100	; 0x64
 8002466:	f002 fdd7 	bl	8005018 <HAL_SPI_Transmit>
 800246a:	0003      	movs	r3, r0
 800246c:	7023      	strb	r3, [r4, #0]
    __nand_spi_cs_high();
 800246e:	f000 f869 	bl	8002544 <__nand_spi_cs_high>

    if (send_status != HAL_OK) {
 8002472:	197b      	adds	r3, r7, r5
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <NAND_SPI_Send+0x36>
        return SPI_Fail; 
 800247a:	2301      	movs	r3, #1
 800247c:	e000      	b.n	8002480 <NAND_SPI_Send+0x38>
    } else {
        return SPI_OK;
 800247e:	2300      	movs	r3, #0
    }

};
 8002480:	0018      	movs	r0, r3
 8002482:	46bd      	mov	sp, r7
 8002484:	b004      	add	sp, #16
 8002486:	bdb0      	pop	{r4, r5, r7, pc}
 8002488:	2000009c 	.word	0x2000009c

0800248c <NAND_SPI_SendReceive>:
 * 
 * @param data_send[in]    Pointer to struct with sending data buffer and length of buffer
 * @param data_recv[out]    Pointer to struct with receive data buffer and length of buffer
 * @return NAND_SPI_ReturnType 
 */
NAND_SPI_ReturnType NAND_SPI_SendReceive(SPI_Params *data_send, SPI_Params *data_recv) {
 800248c:	b5b0      	push	{r4, r5, r7, lr}
 800248e:	b084      	sub	sp, #16
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
 8002494:	6039      	str	r1, [r7, #0]
    HAL_StatusTypeDef recv_status;

    __nand_spi_cs_low();
 8002496:	f000 f847 	bl	8002528 <__nand_spi_cs_low>
    HAL_SPI_Transmit(hspi_nand, data_send->buffer, data_send->length, NAND_SPI_TIMEOUT);
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <NAND_SPI_SendReceive+0x54>)
 800249c:	6818      	ldr	r0, [r3, #0]
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6819      	ldr	r1, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	889a      	ldrh	r2, [r3, #4]
 80024a6:	2364      	movs	r3, #100	; 0x64
 80024a8:	f002 fdb6 	bl	8005018 <HAL_SPI_Transmit>
    recv_status = HAL_SPI_Receive(hspi_nand, data_recv->buffer, data_recv->length, NAND_SPI_TIMEOUT);
 80024ac:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <NAND_SPI_SendReceive+0x54>)
 80024ae:	6818      	ldr	r0, [r3, #0]
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	6819      	ldr	r1, [r3, #0]
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	889a      	ldrh	r2, [r3, #4]
 80024b8:	250f      	movs	r5, #15
 80024ba:	197c      	adds	r4, r7, r5
 80024bc:	2364      	movs	r3, #100	; 0x64
 80024be:	f002 ff01 	bl	80052c4 <HAL_SPI_Receive>
 80024c2:	0003      	movs	r3, r0
 80024c4:	7023      	strb	r3, [r4, #0]
    __nand_spi_cs_high();
 80024c6:	f000 f83d 	bl	8002544 <__nand_spi_cs_high>

    if (recv_status != HAL_OK) {
 80024ca:	197b      	adds	r3, r7, r5
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <NAND_SPI_SendReceive+0x4a>
        return SPI_Fail; 
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <NAND_SPI_SendReceive+0x4c>
    } else {
        return SPI_OK;
 80024d6:	2300      	movs	r3, #0
    }
};
 80024d8:	0018      	movs	r0, r3
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bdb0      	pop	{r4, r5, r7, pc}
 80024e0:	2000009c 	.word	0x2000009c

080024e4 <NAND_SPI_Receive>:
 * @brief Read data from NAND.
 * 
 * @param data_recv[in]    Pointer to struct with read data buffer and length of receive data
 * @return NAND_SPI_ReturnType 
 */
NAND_SPI_ReturnType NAND_SPI_Receive(SPI_Params *data_recv) {
 80024e4:	b5b0      	push	{r4, r5, r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef receive_status;

    __nand_spi_cs_low();
 80024ec:	f000 f81c 	bl	8002528 <__nand_spi_cs_low>
    receive_status = HAL_SPI_Receive(hspi_nand, data_recv->buffer, data_recv->length, NAND_SPI_TIMEOUT);
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <NAND_SPI_Receive+0x40>)
 80024f2:	6818      	ldr	r0, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6819      	ldr	r1, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	889a      	ldrh	r2, [r3, #4]
 80024fc:	250f      	movs	r5, #15
 80024fe:	197c      	adds	r4, r7, r5
 8002500:	2364      	movs	r3, #100	; 0x64
 8002502:	f002 fedf 	bl	80052c4 <HAL_SPI_Receive>
 8002506:	0003      	movs	r3, r0
 8002508:	7023      	strb	r3, [r4, #0]
    __nand_spi_cs_high();
 800250a:	f000 f81b 	bl	8002544 <__nand_spi_cs_high>

    if (receive_status != HAL_OK) {
 800250e:	197b      	adds	r3, r7, r5
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <NAND_SPI_Receive+0x36>
        return SPI_Fail; 
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <NAND_SPI_Receive+0x38>
    } else {
        return SPI_OK;
 800251a:	2300      	movs	r3, #0
    }
};
 800251c:	0018      	movs	r0, r3
 800251e:	46bd      	mov	sp, r7
 8002520:	b004      	add	sp, #16
 8002522:	bdb0      	pop	{r4, r5, r7, pc}
 8002524:	2000009c 	.word	0x2000009c

08002528 <__nand_spi_cs_low>:

/**
 * @brief Enable SPI communication to NAND by pulling chip select pin low.
 * @note Must be called prior to every SPI transmission
 */
void __nand_spi_cs_low(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NAND_NCS_PORT, NAND_NCS_PIN, GPIO_PIN_RESET);
 800252c:	2380      	movs	r3, #128	; 0x80
 800252e:	015b      	lsls	r3, r3, #5
 8002530:	4803      	ldr	r0, [pc, #12]	; (8002540 <__nand_spi_cs_low+0x18>)
 8002532:	2200      	movs	r2, #0
 8002534:	0019      	movs	r1, r3
 8002536:	f000 feb4 	bl	80032a2 <HAL_GPIO_WritePin>
};
 800253a:	46c0      	nop			; (mov r8, r8)
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	50000400 	.word	0x50000400

08002544 <__nand_spi_cs_high>:

/**
 * @brief Close SPI communication to NAND by pulling chip select pin high.
 * @note Must be called after every SPI transmission
 */
void __nand_spi_cs_high(void) {
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(NAND_NCS_PORT, NAND_NCS_PIN, GPIO_PIN_SET);
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	015b      	lsls	r3, r3, #5
 800254c:	4803      	ldr	r0, [pc, #12]	; (800255c <__nand_spi_cs_high+0x18>)
 800254e:	2201      	movs	r2, #1
 8002550:	0019      	movs	r1, r3
 8002552:	f000 fea6 	bl	80032a2 <HAL_GPIO_WritePin>
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	50000400 	.word	0x50000400

08002560 <wrSensorReg16_8>:
#define SCCB_READ 1

static uint16_t VIS_ADDRESS = 0x78;
static uint16_t NIR_ADDRESS = 0x7C;

int wrSensorReg16_8(uint16_t regID, uint8_t regDat, uint8_t sensor) {
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b098      	sub	sp, #96	; 0x60
 8002564:	af04      	add	r7, sp, #16
 8002566:	0004      	movs	r4, r0
 8002568:	0008      	movs	r0, r1
 800256a:	0011      	movs	r1, r2
 800256c:	1dbb      	adds	r3, r7, #6
 800256e:	1c22      	adds	r2, r4, #0
 8002570:	801a      	strh	r2, [r3, #0]
 8002572:	1d7b      	adds	r3, r7, #5
 8002574:	1c02      	adds	r2, r0, #0
 8002576:	701a      	strb	r2, [r3, #0]
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	1c0a      	adds	r2, r1, #0
 800257c:	701a      	strb	r2, [r3, #0]
    uint8_t data = regDat;
 800257e:	254e      	movs	r5, #78	; 0x4e
 8002580:	197b      	adds	r3, r7, r5
 8002582:	1d7a      	adds	r2, r7, #5
 8002584:	7812      	ldrb	r2, [r2, #0]
 8002586:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef rc;
    if (sensor == VIS_SENSOR){
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d112      	bne.n	80025b6 <wrSensorReg16_8+0x56>
        rc = HAL_I2C_Mem_Write(&hi2c2, VIS_ADDRESS, regID, I2C_MEMADD_SIZE_16BIT, &data, 1, 100);
 8002590:	4b1f      	ldr	r3, [pc, #124]	; (8002610 <wrSensorReg16_8+0xb0>)
 8002592:	8819      	ldrh	r1, [r3, #0]
 8002594:	234f      	movs	r3, #79	; 0x4f
 8002596:	18fc      	adds	r4, r7, r3
 8002598:	1dbb      	adds	r3, r7, #6
 800259a:	881a      	ldrh	r2, [r3, #0]
 800259c:	481d      	ldr	r0, [pc, #116]	; (8002614 <wrSensorReg16_8+0xb4>)
 800259e:	2364      	movs	r3, #100	; 0x64
 80025a0:	9302      	str	r3, [sp, #8]
 80025a2:	2301      	movs	r3, #1
 80025a4:	9301      	str	r3, [sp, #4]
 80025a6:	197b      	adds	r3, r7, r5
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	2302      	movs	r3, #2
 80025ac:	f000 ff2c 	bl	8003408 <HAL_I2C_Mem_Write>
 80025b0:	0003      	movs	r3, r0
 80025b2:	7023      	strb	r3, [r4, #0]
 80025b4:	e012      	b.n	80025dc <wrSensorReg16_8+0x7c>
    }
    else{
        rc = HAL_I2C_Mem_Write(&hi2c2, NIR_ADDRESS, regID, I2C_MEMADD_SIZE_16BIT, &data, 1, 100);
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <wrSensorReg16_8+0xb8>)
 80025b8:	8819      	ldrh	r1, [r3, #0]
 80025ba:	234f      	movs	r3, #79	; 0x4f
 80025bc:	18fc      	adds	r4, r7, r3
 80025be:	1dbb      	adds	r3, r7, #6
 80025c0:	881a      	ldrh	r2, [r3, #0]
 80025c2:	4814      	ldr	r0, [pc, #80]	; (8002614 <wrSensorReg16_8+0xb4>)
 80025c4:	2364      	movs	r3, #100	; 0x64
 80025c6:	9302      	str	r3, [sp, #8]
 80025c8:	2301      	movs	r3, #1
 80025ca:	9301      	str	r3, [sp, #4]
 80025cc:	234e      	movs	r3, #78	; 0x4e
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2302      	movs	r3, #2
 80025d4:	f000 ff18 	bl	8003408 <HAL_I2C_Mem_Write>
 80025d8:	0003      	movs	r3, r0
 80025da:	7023      	strb	r3, [r4, #0]

    }
    if (rc != HAL_OK) {
 80025dc:	214f      	movs	r1, #79	; 0x4f
 80025de:	187b      	adds	r3, r7, r1
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d009      	beq.n	80025fa <wrSensorReg16_8+0x9a>
        char buf[64];
        sprintf(buf, "I2C write to 0x%x failed: 0x%x\r\n", regID, rc);
 80025e6:	1dbb      	adds	r3, r7, #6
 80025e8:	881a      	ldrh	r2, [r3, #0]
 80025ea:	187b      	adds	r3, r7, r1
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	490b      	ldr	r1, [pc, #44]	; (800261c <wrSensorReg16_8+0xbc>)
 80025f0:	200c      	movs	r0, #12
 80025f2:	1838      	adds	r0, r7, r0
 80025f4:	f004 f920 	bl	8006838 <siprintf>
 80025f8:	e002      	b.n	8002600 <wrSensorReg16_8+0xa0>
    }
    else
        HAL_Delay(1);
 80025fa:	2001      	movs	r0, #1
 80025fc:	f000 fbde 	bl	8002dbc <HAL_Delay>
    return (int) rc;
 8002600:	234f      	movs	r3, #79	; 0x4f
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	781b      	ldrb	r3, [r3, #0]
}
 8002606:	0018      	movs	r0, r3
 8002608:	46bd      	mov	sp, r7
 800260a:	b014      	add	sp, #80	; 0x50
 800260c:	bdb0      	pop	{r4, r5, r7, pc}
 800260e:	46c0      	nop			; (mov r8, r8)
 8002610:	20000004 	.word	0x20000004
 8002614:	20000104 	.word	0x20000104
 8002618:	20000006 	.word	0x20000006
 800261c:	080081b8 	.word	0x080081b8

08002620 <wrSensorRegs16_8>:

int wrSensorRegs16_8(const struct sensor_reg reglist[], uint8_t sensor) {
 8002620:	b580      	push	{r7, lr}
 8002622:	b084      	sub	sp, #16
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	000a      	movs	r2, r1
 800262a:	1cfb      	adds	r3, r7, #3
 800262c:	701a      	strb	r2, [r3, #0]
    const struct sensor_reg *curr = reglist;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	60fb      	str	r3, [r7, #12]
    for (curr=reglist; curr->reg != 0xffff; curr++) {
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	e00c      	b.n	8002652 <wrSensorRegs16_8+0x32>
        wrSensorReg16_8(curr->reg, curr->val, sensor);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	8818      	ldrh	r0, [r3, #0]
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	885b      	ldrh	r3, [r3, #2]
 8002640:	b2d9      	uxtb	r1, r3
 8002642:	1cfb      	adds	r3, r7, #3
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	001a      	movs	r2, r3
 8002648:	f7ff ff8a 	bl	8002560 <wrSensorReg16_8>
    for (curr=reglist; curr->reg != 0xffff; curr++) {
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	3304      	adds	r3, #4
 8002650:	60fb      	str	r3, [r7, #12]
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	881b      	ldrh	r3, [r3, #0]
 8002656:	4a04      	ldr	r2, [pc, #16]	; (8002668 <wrSensorRegs16_8+0x48>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d1ed      	bne.n	8002638 <wrSensorRegs16_8+0x18>
    }
    return 0;
 800265c:	2300      	movs	r3, #0
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b004      	add	sp, #16
 8002664:	bd80      	pop	{r7, pc}
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	0000ffff 	.word	0x0000ffff

0800266c <rdSensorReg16_8>:

int rdSensorReg16_8(uint16_t regID, uint8_t *regDat, uint8_t sensor) {
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b099      	sub	sp, #100	; 0x64
 8002670:	af04      	add	r7, sp, #16
 8002672:	6039      	str	r1, [r7, #0]
 8002674:	0011      	movs	r1, r2
 8002676:	1dbb      	adds	r3, r7, #6
 8002678:	1c02      	adds	r2, r0, #0
 800267a:	801a      	strh	r2, [r3, #0]
 800267c:	1d7b      	adds	r3, r7, #5
 800267e:	1c0a      	adds	r2, r1, #0
 8002680:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef rc;
    if (sensor == VIS_SENSOR){
 8002682:	1d7b      	adds	r3, r7, #5
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d112      	bne.n	80026b0 <rdSensorReg16_8+0x44>
        rc = HAL_I2C_Mem_Read(&hi2c2, VIS_ADDRESS, regID, I2C_MEMADD_SIZE_16BIT, regDat, 1, 100);
 800268a:	4b1d      	ldr	r3, [pc, #116]	; (8002700 <rdSensorReg16_8+0x94>)
 800268c:	8819      	ldrh	r1, [r3, #0]
 800268e:	234f      	movs	r3, #79	; 0x4f
 8002690:	18fc      	adds	r4, r7, r3
 8002692:	1dbb      	adds	r3, r7, #6
 8002694:	881a      	ldrh	r2, [r3, #0]
 8002696:	481b      	ldr	r0, [pc, #108]	; (8002704 <rdSensorReg16_8+0x98>)
 8002698:	2364      	movs	r3, #100	; 0x64
 800269a:	9302      	str	r3, [sp, #8]
 800269c:	2301      	movs	r3, #1
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2302      	movs	r3, #2
 80026a6:	f000 ffdd 	bl	8003664 <HAL_I2C_Mem_Read>
 80026aa:	0003      	movs	r3, r0
 80026ac:	7023      	strb	r3, [r4, #0]
 80026ae:	e011      	b.n	80026d4 <rdSensorReg16_8+0x68>

    }
    else{
        rc = HAL_I2C_Mem_Read(&hi2c2, NIR_ADDRESS, regID, I2C_MEMADD_SIZE_16BIT, regDat, 1, 100);
 80026b0:	4b15      	ldr	r3, [pc, #84]	; (8002708 <rdSensorReg16_8+0x9c>)
 80026b2:	8819      	ldrh	r1, [r3, #0]
 80026b4:	234f      	movs	r3, #79	; 0x4f
 80026b6:	18fc      	adds	r4, r7, r3
 80026b8:	1dbb      	adds	r3, r7, #6
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	4811      	ldr	r0, [pc, #68]	; (8002704 <rdSensorReg16_8+0x98>)
 80026be:	2364      	movs	r3, #100	; 0x64
 80026c0:	9302      	str	r3, [sp, #8]
 80026c2:	2301      	movs	r3, #1
 80026c4:	9301      	str	r3, [sp, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	9300      	str	r3, [sp, #0]
 80026ca:	2302      	movs	r3, #2
 80026cc:	f000 ffca 	bl	8003664 <HAL_I2C_Mem_Read>
 80026d0:	0003      	movs	r3, r0
 80026d2:	7023      	strb	r3, [r4, #0]

    }
    if (rc != HAL_OK) {
 80026d4:	214f      	movs	r1, #79	; 0x4f
 80026d6:	187b      	adds	r3, r7, r1
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d008      	beq.n	80026f0 <rdSensorReg16_8+0x84>
        char buf[64];
        sprintf(buf, "I2C read xmit to 0x%x failed: 0x%x\r\n", regID, rc);
 80026de:	1dbb      	adds	r3, r7, #6
 80026e0:	881a      	ldrh	r2, [r3, #0]
 80026e2:	187b      	adds	r3, r7, r1
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4909      	ldr	r1, [pc, #36]	; (800270c <rdSensorReg16_8+0xa0>)
 80026e8:	200c      	movs	r0, #12
 80026ea:	1838      	adds	r0, r7, r0
 80026ec:	f004 f8a4 	bl	8006838 <siprintf>
    }
    return (int) rc;
 80026f0:	234f      	movs	r3, #79	; 0x4f
 80026f2:	18fb      	adds	r3, r7, r3
 80026f4:	781b      	ldrb	r3, [r3, #0]
}
 80026f6:	0018      	movs	r0, r3
 80026f8:	46bd      	mov	sp, r7
 80026fa:	b015      	add	sp, #84	; 0x54
 80026fc:	bd90      	pop	{r4, r7, pc}
 80026fe:	46c0      	nop			; (mov r8, r8)
 8002700:	20000004 	.word	0x20000004
 8002704:	20000104 	.word	0x20000104
 8002708:	20000006 	.word	0x20000006
 800270c:	080081dc 	.word	0x080081dc

08002710 <read_spi_reg>:
//  HAL_GPIO_WritePin(GPIOA, SPI2_CS_Pin, GPIO_PIN_RESET);
//
//  /*Configure GPIO pin Output Level */
//  HAL_GPIO_WritePin(GPIOB, SPI_B_MOSI_Pin|SPI_B_NSS_Pin|SPI_B_CLK_Pin, GPIO_PIN_RESET);

uint8_t read_spi_reg(uint8_t addr, uint8_t sensor){
 8002710:	b580      	push	{r7, lr}
 8002712:	b086      	sub	sp, #24
 8002714:	af00      	add	r7, sp, #0
 8002716:	0002      	movs	r2, r0
 8002718:	1dfb      	adds	r3, r7, #7
 800271a:	701a      	strb	r2, [r3, #0]
 800271c:	1dbb      	adds	r3, r7, #6
 800271e:	1c0a      	adds	r2, r1, #0
 8002720:	701a      	strb	r2, [r3, #0]
	uint8_t rec;
	// CS Low
	if (sensor == 0){
 8002722:	1dbb      	adds	r3, r7, #6
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d102      	bne.n	8002730 <read_spi_reg+0x20>
		_CS1_LOW(); // VIS sensor is CS1
 800272a:	f000 f8fe 	bl	800292a <_CS1_LOW>
 800272e:	e001      	b.n	8002734 <read_spi_reg+0x24>
	}
	else{
		_CS2_LOW(); // NIR sensor is CS2
 8002730:	f000 f913 	bl	800295a <_CS2_LOW>
	}
	// Send Phase
	for (int i=0; i<8; i++){
 8002734:	2300      	movs	r3, #0
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e01b      	b.n	8002772 <read_spi_reg+0x62>
		HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, bit_read(addr, i));
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	1dfb      	adds	r3, r7, #7
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	0011      	movs	r1, r2
 8002742:	0018      	movs	r0, r3
 8002744:	f000 f8d8 	bl	80028f8 <bit_read>
 8002748:	0003      	movs	r3, r0
 800274a:	001a      	movs	r2, r3
 800274c:	23a0      	movs	r3, #160	; 0xa0
 800274e:	05db      	lsls	r3, r3, #23
 8002750:	2108      	movs	r1, #8
 8002752:	0018      	movs	r0, r3
 8002754:	f000 fda5 	bl	80032a2 <HAL_GPIO_WritePin>
		_CLK_HIGH();
 8002758:	f000 f923 	bl	80029a2 <_CLK_HIGH>
		HAL_GPIO_ReadPin(MISO_Port, MISO_Pin);
 800275c:	23a0      	movs	r3, #160	; 0xa0
 800275e:	05db      	lsls	r3, r3, #23
 8002760:	2104      	movs	r1, #4
 8002762:	0018      	movs	r0, r3
 8002764:	f000 fd80 	bl	8003268 <HAL_GPIO_ReadPin>
		_CLK_LOW();
 8002768:	f000 f90f 	bl	800298a <_CLK_LOW>
	for (int i=0; i<8; i++){
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	3301      	adds	r3, #1
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	2b07      	cmp	r3, #7
 8002776:	dde0      	ble.n	800273a <read_spi_reg+0x2a>
	}

	// Recieve phase
	for (int i=0; i<8; i++){
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	e02d      	b.n	80027da <read_spi_reg+0xca>
		HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, bit_read(0x00, i));
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	0019      	movs	r1, r3
 8002782:	2000      	movs	r0, #0
 8002784:	f000 f8b8 	bl	80028f8 <bit_read>
 8002788:	0003      	movs	r3, r0
 800278a:	001a      	movs	r2, r3
 800278c:	23a0      	movs	r3, #160	; 0xa0
 800278e:	05db      	lsls	r3, r3, #23
 8002790:	2108      	movs	r1, #8
 8002792:	0018      	movs	r0, r3
 8002794:	f000 fd85 	bl	80032a2 <HAL_GPIO_WritePin>
		_CLK_HIGH();
 8002798:	f000 f903 	bl	80029a2 <_CLK_HIGH>
		if (HAL_GPIO_ReadPin(MISO_Port, MISO_Pin) == GPIO_PIN_SET){
 800279c:	23a0      	movs	r3, #160	; 0xa0
 800279e:	05db      	lsls	r3, r3, #23
 80027a0:	2104      	movs	r1, #4
 80027a2:	0018      	movs	r0, r3
 80027a4:	f000 fd60 	bl	8003268 <HAL_GPIO_ReadPin>
 80027a8:	0003      	movs	r3, r0
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d10a      	bne.n	80027c4 <read_spi_reg+0xb4>
			rec = rec << 1 | 0b1;
 80027ae:	2117      	movs	r1, #23
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	2201      	movs	r2, #1
 80027ba:	4313      	orrs	r3, r2
 80027bc:	b25a      	sxtb	r2, r3
 80027be:	187b      	adds	r3, r7, r1
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e005      	b.n	80027d0 <read_spi_reg+0xc0>
		}
		else{
			rec = rec << 1 | 0b0;
 80027c4:	2317      	movs	r3, #23
 80027c6:	18fa      	adds	r2, r7, r3
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	18db      	adds	r3, r3, r3
 80027ce:	7013      	strb	r3, [r2, #0]
		}
		_CLK_LOW();
 80027d0:	f000 f8db 	bl	800298a <_CLK_LOW>
	for (int i=0; i<8; i++){
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	3301      	adds	r3, #1
 80027d8:	60fb      	str	r3, [r7, #12]
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2b07      	cmp	r3, #7
 80027de:	ddce      	ble.n	800277e <read_spi_reg+0x6e>
	}

	if (sensor == 0){
 80027e0:	1dbb      	adds	r3, r7, #6
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d102      	bne.n	80027ee <read_spi_reg+0xde>
		_CS1_HIGH();
 80027e8:	f000 f8ab 	bl	8002942 <_CS1_HIGH>
 80027ec:	e001      	b.n	80027f2 <read_spi_reg+0xe2>
	}
	else{
		_CS2_HIGH();
 80027ee:	f000 f8c0 	bl	8002972 <_CS2_HIGH>
	}
	HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, GPIO_PIN_RESET);
 80027f2:	23a0      	movs	r3, #160	; 0xa0
 80027f4:	05db      	lsls	r3, r3, #23
 80027f6:	2200      	movs	r2, #0
 80027f8:	2108      	movs	r1, #8
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 fd51 	bl	80032a2 <HAL_GPIO_WritePin>
	return rec;
 8002800:	2317      	movs	r3, #23
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	781b      	ldrb	r3, [r3, #0]
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b006      	add	sp, #24
 800280c:	bd80      	pop	{r7, pc}

0800280e <write_spi_reg>:

bool write_spi_reg(uint8_t addr, uint8_t packet, uint8_t sensor){
 800280e:	b590      	push	{r4, r7, lr}
 8002810:	b085      	sub	sp, #20
 8002812:	af00      	add	r7, sp, #0
 8002814:	0004      	movs	r4, r0
 8002816:	0008      	movs	r0, r1
 8002818:	0011      	movs	r1, r2
 800281a:	1dfb      	adds	r3, r7, #7
 800281c:	1c22      	adds	r2, r4, #0
 800281e:	701a      	strb	r2, [r3, #0]
 8002820:	1dbb      	adds	r3, r7, #6
 8002822:	1c02      	adds	r2, r0, #0
 8002824:	701a      	strb	r2, [r3, #0]
 8002826:	1d7b      	adds	r3, r7, #5
 8002828:	1c0a      	adds	r2, r1, #0
 800282a:	701a      	strb	r2, [r3, #0]
	// CS Low
	if (sensor == 0){
 800282c:	1d7b      	adds	r3, r7, #5
 800282e:	781b      	ldrb	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <write_spi_reg+0x2c>
		_CS1_LOW(); // VIS sensor is CS1
 8002834:	f000 f879 	bl	800292a <_CS1_LOW>
 8002838:	e001      	b.n	800283e <write_spi_reg+0x30>
	}
	else{
		_CS2_LOW(); // NIR sensor is CS2
 800283a:	f000 f88e 	bl	800295a <_CS2_LOW>
	}
	// Send Phase
	for (int i=0; i<8; i++){
 800283e:	2300      	movs	r3, #0
 8002840:	60fb      	str	r3, [r7, #12]
 8002842:	e01f      	b.n	8002884 <write_spi_reg+0x76>
		HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, bit_read((addr | 0x80), i));
 8002844:	1dfb      	adds	r3, r7, #7
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2280      	movs	r2, #128	; 0x80
 800284a:	4252      	negs	r2, r2
 800284c:	4313      	orrs	r3, r2
 800284e:	b2db      	uxtb	r3, r3
 8002850:	68fa      	ldr	r2, [r7, #12]
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f000 f84f 	bl	80028f8 <bit_read>
 800285a:	0003      	movs	r3, r0
 800285c:	001a      	movs	r2, r3
 800285e:	23a0      	movs	r3, #160	; 0xa0
 8002860:	05db      	lsls	r3, r3, #23
 8002862:	2108      	movs	r1, #8
 8002864:	0018      	movs	r0, r3
 8002866:	f000 fd1c 	bl	80032a2 <HAL_GPIO_WritePin>
		_CLK_HIGH();
 800286a:	f000 f89a 	bl	80029a2 <_CLK_HIGH>
		HAL_GPIO_ReadPin(MISO_Port, MISO_Pin);
 800286e:	23a0      	movs	r3, #160	; 0xa0
 8002870:	05db      	lsls	r3, r3, #23
 8002872:	2104      	movs	r1, #4
 8002874:	0018      	movs	r0, r3
 8002876:	f000 fcf7 	bl	8003268 <HAL_GPIO_ReadPin>
		_CLK_LOW();
 800287a:	f000 f886 	bl	800298a <_CLK_LOW>
	for (int i=0; i<8; i++){
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3301      	adds	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b07      	cmp	r3, #7
 8002888:	dddc      	ble.n	8002844 <write_spi_reg+0x36>
	}

	// Write phase
	for (int i=0; i<8; i++){
 800288a:	2300      	movs	r3, #0
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	e01b      	b.n	80028c8 <write_spi_reg+0xba>
		HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, bit_read(packet, i));
 8002890:	68ba      	ldr	r2, [r7, #8]
 8002892:	1dbb      	adds	r3, r7, #6
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	0011      	movs	r1, r2
 8002898:	0018      	movs	r0, r3
 800289a:	f000 f82d 	bl	80028f8 <bit_read>
 800289e:	0003      	movs	r3, r0
 80028a0:	001a      	movs	r2, r3
 80028a2:	23a0      	movs	r3, #160	; 0xa0
 80028a4:	05db      	lsls	r3, r3, #23
 80028a6:	2108      	movs	r1, #8
 80028a8:	0018      	movs	r0, r3
 80028aa:	f000 fcfa 	bl	80032a2 <HAL_GPIO_WritePin>
		_CLK_HIGH();
 80028ae:	f000 f878 	bl	80029a2 <_CLK_HIGH>
		HAL_GPIO_ReadPin(MISO_Port, MISO_Pin);
 80028b2:	23a0      	movs	r3, #160	; 0xa0
 80028b4:	05db      	lsls	r3, r3, #23
 80028b6:	2104      	movs	r1, #4
 80028b8:	0018      	movs	r0, r3
 80028ba:	f000 fcd5 	bl	8003268 <HAL_GPIO_ReadPin>
		_CLK_LOW();
 80028be:	f000 f864 	bl	800298a <_CLK_LOW>
	for (int i=0; i<8; i++){
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	2b07      	cmp	r3, #7
 80028cc:	dde0      	ble.n	8002890 <write_spi_reg+0x82>
	}

	if (sensor == 0){
 80028ce:	1d7b      	adds	r3, r7, #5
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d102      	bne.n	80028dc <write_spi_reg+0xce>
		_CS1_HIGH();
 80028d6:	f000 f834 	bl	8002942 <_CS1_HIGH>
 80028da:	e001      	b.n	80028e0 <write_spi_reg+0xd2>
	}
	else{
		_CS2_HIGH();
 80028dc:	f000 f849 	bl	8002972 <_CS2_HIGH>
	}
	HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, GPIO_PIN_RESET);
 80028e0:	23a0      	movs	r3, #160	; 0xa0
 80028e2:	05db      	lsls	r3, r3, #23
 80028e4:	2200      	movs	r2, #0
 80028e6:	2108      	movs	r1, #8
 80028e8:	0018      	movs	r0, r3
 80028ea:	f000 fcda 	bl	80032a2 <HAL_GPIO_WritePin>

	return true;
 80028ee:	2301      	movs	r3, #1
}
 80028f0:	0018      	movs	r0, r3
 80028f2:	46bd      	mov	sp, r7
 80028f4:	b005      	add	sp, #20
 80028f6:	bd90      	pop	{r4, r7, pc}

080028f8 <bit_read>:
	}
	HAL_GPIO_WritePin(MOSI_Port, MOSI_Pin, GPIO_PIN_RESET);

}

GPIO_PinState bit_read(uint8_t byte, int j){
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	0002      	movs	r2, r0
 8002900:	6039      	str	r1, [r7, #0]
 8002902:	1dfb      	adds	r3, r7, #7
 8002904:	701a      	strb	r2, [r3, #0]
	byte = byte << j;
 8002906:	1dfb      	adds	r3, r7, #7
 8002908:	781a      	ldrb	r2, [r3, #0]
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	409a      	lsls	r2, r3
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	701a      	strb	r2, [r3, #0]
	if (byte & 0x80){
 8002912:	1dfb      	adds	r3, r7, #7
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	b25b      	sxtb	r3, r3
 8002918:	2b00      	cmp	r3, #0
 800291a:	da01      	bge.n	8002920 <bit_read+0x28>
		return GPIO_PIN_SET;
 800291c:	2301      	movs	r3, #1
 800291e:	e000      	b.n	8002922 <bit_read+0x2a>
	}
	return GPIO_PIN_RESET;
 8002920:	2300      	movs	r3, #0
}
 8002922:	0018      	movs	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	b002      	add	sp, #8
 8002928:	bd80      	pop	{r7, pc}

0800292a <_CS1_LOW>:

void _CS1_LOW(){
 800292a:	b580      	push	{r7, lr}
 800292c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS1_Port, NSS1_Pin, GPIO_PIN_RESET);
 800292e:	23a0      	movs	r3, #160	; 0xa0
 8002930:	05db      	lsls	r3, r3, #23
 8002932:	2200      	movs	r2, #0
 8002934:	2101      	movs	r1, #1
 8002936:	0018      	movs	r0, r3
 8002938:	f000 fcb3 	bl	80032a2 <HAL_GPIO_WritePin>
}
 800293c:	46c0      	nop			; (mov r8, r8)
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <_CS1_HIGH>:
void _CS1_HIGH(){
 8002942:	b580      	push	{r7, lr}
 8002944:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS1_Port, NSS1_Pin, GPIO_PIN_SET);
 8002946:	23a0      	movs	r3, #160	; 0xa0
 8002948:	05db      	lsls	r3, r3, #23
 800294a:	2201      	movs	r2, #1
 800294c:	2101      	movs	r1, #1
 800294e:	0018      	movs	r0, r3
 8002950:	f000 fca7 	bl	80032a2 <HAL_GPIO_WritePin>
}
 8002954:	46c0      	nop			; (mov r8, r8)
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <_CS2_LOW>:

void _CS2_LOW(){
 800295a:	b580      	push	{r7, lr}
 800295c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS2_Port, NSS2_Pin, GPIO_PIN_RESET);
 800295e:	23a0      	movs	r3, #160	; 0xa0
 8002960:	05db      	lsls	r3, r3, #23
 8002962:	2200      	movs	r2, #0
 8002964:	2102      	movs	r1, #2
 8002966:	0018      	movs	r0, r3
 8002968:	f000 fc9b 	bl	80032a2 <HAL_GPIO_WritePin>
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}

08002972 <_CS2_HIGH>:
void _CS2_HIGH(){
 8002972:	b580      	push	{r7, lr}
 8002974:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSS2_Port, NSS2_Pin, GPIO_PIN_SET);
 8002976:	23a0      	movs	r3, #160	; 0xa0
 8002978:	05db      	lsls	r3, r3, #23
 800297a:	2201      	movs	r2, #1
 800297c:	2102      	movs	r1, #2
 800297e:	0018      	movs	r0, r3
 8002980:	f000 fc8f 	bl	80032a2 <HAL_GPIO_WritePin>
}
 8002984:	46c0      	nop			; (mov r8, r8)
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}

0800298a <_CLK_LOW>:

void _CLK_LOW(){
 800298a:	b580      	push	{r7, lr}
 800298c:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_RESET);
 800298e:	23a0      	movs	r3, #160	; 0xa0
 8002990:	05db      	lsls	r3, r3, #23
 8002992:	2200      	movs	r2, #0
 8002994:	2110      	movs	r1, #16
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fc83 	bl	80032a2 <HAL_GPIO_WritePin>
}
 800299c:	46c0      	nop			; (mov r8, r8)
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_CLK_HIGH>:
void _CLK_HIGH(){
 80029a2:	b580      	push	{r7, lr}
 80029a4:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CLK_Port, CLK_Pin, GPIO_PIN_SET);
 80029a6:	23a0      	movs	r3, #160	; 0xa0
 80029a8:	05db      	lsls	r3, r3, #23
 80029aa:	2201      	movs	r2, #1
 80029ac:	2110      	movs	r1, #16
 80029ae:	0018      	movs	r0, r3
 80029b0:	f000 fc77 	bl	80032a2 <HAL_GPIO_WritePin>
}
 80029b4:	46c0      	nop			; (mov r8, r8)
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029c0:	4b07      	ldr	r3, [pc, #28]	; (80029e0 <HAL_MspInit+0x24>)
 80029c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80029c4:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_MspInit+0x24>)
 80029c6:	2101      	movs	r1, #1
 80029c8:	430a      	orrs	r2, r1
 80029ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80029cc:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <HAL_MspInit+0x24>)
 80029ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_MspInit+0x24>)
 80029d2:	2180      	movs	r1, #128	; 0x80
 80029d4:	0549      	lsls	r1, r1, #21
 80029d6:	430a      	orrs	r2, r1
 80029d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}
 80029e0:	40021000 	.word	0x40021000

080029e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029e4:	b590      	push	{r4, r7, lr}
 80029e6:	b089      	sub	sp, #36	; 0x24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029ec:	240c      	movs	r4, #12
 80029ee:	193b      	adds	r3, r7, r4
 80029f0:	0018      	movs	r0, r3
 80029f2:	2314      	movs	r3, #20
 80029f4:	001a      	movs	r2, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	f003 ff16 	bl	8006828 <memset>
  if(hi2c->Instance==I2C2)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a23      	ldr	r2, [pc, #140]	; (8002a90 <HAL_I2C_MspInit+0xac>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d13f      	bne.n	8002a86 <HAL_I2C_MspInit+0xa2>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_I2C_MspInit+0xb0>)
 8002a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0a:	4b22      	ldr	r3, [pc, #136]	; (8002a94 <HAL_I2C_MspInit+0xb0>)
 8002a0c:	2102      	movs	r1, #2
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	62da      	str	r2, [r3, #44]	; 0x2c
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_I2C_MspInit+0xb0>)
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	2202      	movs	r2, #2
 8002a18:	4013      	ands	r3, r2
 8002a1a:	60bb      	str	r3, [r7, #8]
 8002a1c:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB13     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002a1e:	193b      	adds	r3, r7, r4
 8002a20:	2280      	movs	r2, #128	; 0x80
 8002a22:	0112      	lsls	r2, r2, #4
 8002a24:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a26:	193b      	adds	r3, r7, r4
 8002a28:	2212      	movs	r2, #18
 8002a2a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a2c:	193b      	adds	r3, r7, r4
 8002a2e:	2201      	movs	r2, #1
 8002a30:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	193b      	adds	r3, r7, r4
 8002a34:	2203      	movs	r2, #3
 8002a36:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8002a38:	193b      	adds	r3, r7, r4
 8002a3a:	2206      	movs	r2, #6
 8002a3c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3e:	193b      	adds	r3, r7, r4
 8002a40:	4a15      	ldr	r2, [pc, #84]	; (8002a98 <HAL_I2C_MspInit+0xb4>)
 8002a42:	0019      	movs	r1, r3
 8002a44:	0010      	movs	r0, r2
 8002a46:	f000 fa91 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002a4a:	0021      	movs	r1, r4
 8002a4c:	187b      	adds	r3, r7, r1
 8002a4e:	2280      	movs	r2, #128	; 0x80
 8002a50:	0192      	lsls	r2, r2, #6
 8002a52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a54:	187b      	adds	r3, r7, r1
 8002a56:	2212      	movs	r2, #18
 8002a58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a5a:	187b      	adds	r3, r7, r1
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a60:	187b      	adds	r3, r7, r1
 8002a62:	2203      	movs	r2, #3
 8002a64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8002a66:	187b      	adds	r3, r7, r1
 8002a68:	2205      	movs	r2, #5
 8002a6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6c:	187b      	adds	r3, r7, r1
 8002a6e:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_I2C_MspInit+0xb4>)
 8002a70:	0019      	movs	r1, r3
 8002a72:	0010      	movs	r0, r2
 8002a74:	f000 fa7a 	bl	8002f6c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a78:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_I2C_MspInit+0xb0>)
 8002a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a7c:	4b05      	ldr	r3, [pc, #20]	; (8002a94 <HAL_I2C_MspInit+0xb0>)
 8002a7e:	2180      	movs	r1, #128	; 0x80
 8002a80:	03c9      	lsls	r1, r1, #15
 8002a82:	430a      	orrs	r2, r1
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	b009      	add	sp, #36	; 0x24
 8002a8c:	bd90      	pop	{r4, r7, pc}
 8002a8e:	46c0      	nop			; (mov r8, r8)
 8002a90:	40005800 	.word	0x40005800
 8002a94:	40021000 	.word	0x40021000
 8002a98:	50000400 	.word	0x50000400

08002a9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a9c:	b590      	push	{r4, r7, lr}
 8002a9e:	b089      	sub	sp, #36	; 0x24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	240c      	movs	r4, #12
 8002aa6:	193b      	adds	r3, r7, r4
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	2314      	movs	r3, #20
 8002aac:	001a      	movs	r2, r3
 8002aae:	2100      	movs	r1, #0
 8002ab0:	f003 feba 	bl	8006828 <memset>
  if(hspi->Instance==SPI2)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a23      	ldr	r2, [pc, #140]	; (8002b48 <HAL_SPI_MspInit+0xac>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d13f      	bne.n	8002b3e <HAL_SPI_MspInit+0xa2>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002abe:	4b23      	ldr	r3, [pc, #140]	; (8002b4c <HAL_SPI_MspInit+0xb0>)
 8002ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac2:	4b22      	ldr	r3, [pc, #136]	; (8002b4c <HAL_SPI_MspInit+0xb0>)
 8002ac4:	2180      	movs	r1, #128	; 0x80
 8002ac6:	01c9      	lsls	r1, r1, #7
 8002ac8:	430a      	orrs	r2, r1
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002acc:	4b1f      	ldr	r3, [pc, #124]	; (8002b4c <HAL_SPI_MspInit+0xb0>)
 8002ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_SPI_MspInit+0xb0>)
 8002ad2:	2102      	movs	r1, #2
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ad8:	4b1c      	ldr	r3, [pc, #112]	; (8002b4c <HAL_SPI_MspInit+0xb0>)
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	2202      	movs	r2, #2
 8002ade:	4013      	ands	r3, r2
 8002ae0:	60bb      	str	r3, [r7, #8]
 8002ae2:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002ae4:	193b      	adds	r3, r7, r4
 8002ae6:	2280      	movs	r2, #128	; 0x80
 8002ae8:	00d2      	lsls	r2, r2, #3
 8002aea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aec:	193b      	adds	r3, r7, r4
 8002aee:	2202      	movs	r2, #2
 8002af0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af2:	193b      	adds	r3, r7, r4
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af8:	193b      	adds	r3, r7, r4
 8002afa:	2203      	movs	r2, #3
 8002afc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002afe:	193b      	adds	r3, r7, r4
 8002b00:	2205      	movs	r2, #5
 8002b02:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b04:	193b      	adds	r3, r7, r4
 8002b06:	4a12      	ldr	r2, [pc, #72]	; (8002b50 <HAL_SPI_MspInit+0xb4>)
 8002b08:	0019      	movs	r1, r3
 8002b0a:	0010      	movs	r0, r2
 8002b0c:	f000 fa2e 	bl	8002f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002b10:	0021      	movs	r1, r4
 8002b12:	187b      	adds	r3, r7, r1
 8002b14:	22c0      	movs	r2, #192	; 0xc0
 8002b16:	0212      	lsls	r2, r2, #8
 8002b18:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b1a:	187b      	adds	r3, r7, r1
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b20:	187b      	adds	r3, r7, r1
 8002b22:	2200      	movs	r2, #0
 8002b24:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b26:	187b      	adds	r3, r7, r1
 8002b28:	2203      	movs	r2, #3
 8002b2a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8002b2c:	187b      	adds	r3, r7, r1
 8002b2e:	2200      	movs	r2, #0
 8002b30:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b32:	187b      	adds	r3, r7, r1
 8002b34:	4a06      	ldr	r2, [pc, #24]	; (8002b50 <HAL_SPI_MspInit+0xb4>)
 8002b36:	0019      	movs	r1, r3
 8002b38:	0010      	movs	r0, r2
 8002b3a:	f000 fa17 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b009      	add	sp, #36	; 0x24
 8002b44:	bd90      	pop	{r4, r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	40003800 	.word	0x40003800
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	50000400 	.word	0x50000400

08002b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b089      	sub	sp, #36	; 0x24
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	240c      	movs	r4, #12
 8002b5e:	193b      	adds	r3, r7, r4
 8002b60:	0018      	movs	r0, r3
 8002b62:	2314      	movs	r3, #20
 8002b64:	001a      	movs	r2, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	f003 fe5e 	bl	8006828 <memset>
  if(huart->Instance==USART1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a18      	ldr	r2, [pc, #96]	; (8002bd4 <HAL_UART_MspInit+0x80>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d12a      	bne.n	8002bcc <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b76:	4b18      	ldr	r3, [pc, #96]	; (8002bd8 <HAL_UART_MspInit+0x84>)
 8002b78:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b7a:	4b17      	ldr	r3, [pc, #92]	; (8002bd8 <HAL_UART_MspInit+0x84>)
 8002b7c:	2180      	movs	r1, #128	; 0x80
 8002b7e:	01c9      	lsls	r1, r1, #7
 8002b80:	430a      	orrs	r2, r1
 8002b82:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	4b14      	ldr	r3, [pc, #80]	; (8002bd8 <HAL_UART_MspInit+0x84>)
 8002b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b88:	4b13      	ldr	r3, [pc, #76]	; (8002bd8 <HAL_UART_MspInit+0x84>)
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	430a      	orrs	r2, r1
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002b90:	4b11      	ldr	r3, [pc, #68]	; (8002bd8 <HAL_UART_MspInit+0x84>)
 8002b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b94:	2201      	movs	r2, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	60bb      	str	r3, [r7, #8]
 8002b9a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002b9c:	193b      	adds	r3, r7, r4
 8002b9e:	22c0      	movs	r2, #192	; 0xc0
 8002ba0:	00d2      	lsls	r2, r2, #3
 8002ba2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	0021      	movs	r1, r4
 8002ba6:	187b      	adds	r3, r7, r1
 8002ba8:	2202      	movs	r2, #2
 8002baa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bac:	187b      	adds	r3, r7, r1
 8002bae:	2200      	movs	r2, #0
 8002bb0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb2:	187b      	adds	r3, r7, r1
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8002bb8:	187b      	adds	r3, r7, r1
 8002bba:	2204      	movs	r2, #4
 8002bbc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bbe:	187a      	adds	r2, r7, r1
 8002bc0:	23a0      	movs	r3, #160	; 0xa0
 8002bc2:	05db      	lsls	r3, r3, #23
 8002bc4:	0011      	movs	r1, r2
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 f9d0 	bl	8002f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002bcc:	46c0      	nop			; (mov r8, r8)
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	b009      	add	sp, #36	; 0x24
 8002bd2:	bd90      	pop	{r4, r7, pc}
 8002bd4:	40013800 	.word	0x40013800
 8002bd8:	40021000 	.word	0x40021000

08002bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002be0:	f002 f824 	bl	8004c2c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002be4:	e7fe      	b.n	8002be4 <NMI_Handler+0x8>

08002be6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bea:	e7fe      	b.n	8002bea <HardFault_Handler+0x4>

08002bec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002bf0:	46c0      	nop			; (mov r8, r8)
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002bfa:	46c0      	nop			; (mov r8, r8)
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd80      	pop	{r7, pc}

08002c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c04:	f000 f8be 	bl	8002d84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c08:	46c0      	nop			; (mov r8, r8)
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
	...

08002c10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c18:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <_sbrk+0x5c>)
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <_sbrk+0x60>)
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c24:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <_sbrk+0x64>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c2c:	4b11      	ldr	r3, [pc, #68]	; (8002c74 <_sbrk+0x64>)
 8002c2e:	4a12      	ldr	r2, [pc, #72]	; (8002c78 <_sbrk+0x68>)
 8002c30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c32:	4b10      	ldr	r3, [pc, #64]	; (8002c74 <_sbrk+0x64>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	18d3      	adds	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d207      	bcs.n	8002c50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c40:	f003 fdc8 	bl	80067d4 <__errno>
 8002c44:	0003      	movs	r3, r0
 8002c46:	220c      	movs	r2, #12
 8002c48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	425b      	negs	r3, r3
 8002c4e:	e009      	b.n	8002c64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c50:	4b08      	ldr	r3, [pc, #32]	; (8002c74 <_sbrk+0x64>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c56:	4b07      	ldr	r3, [pc, #28]	; (8002c74 <_sbrk+0x64>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	18d2      	adds	r2, r2, r3
 8002c5e:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <_sbrk+0x64>)
 8002c60:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8002c62:	68fb      	ldr	r3, [r7, #12]
}
 8002c64:	0018      	movs	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	b006      	add	sp, #24
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	20005000 	.word	0x20005000
 8002c70:	00000400 	.word	0x00000400
 8002c74:	200000a0 	.word	0x200000a0
 8002c78:	200001e8 	.word	0x200001e8

08002c7c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c80:	46c0      	nop			; (mov r8, r8)
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
	...

08002c88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8002c88:	480d      	ldr	r0, [pc, #52]	; (8002cc0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8002c8a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c8c:	480d      	ldr	r0, [pc, #52]	; (8002cc4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002c8e:	490e      	ldr	r1, [pc, #56]	; (8002cc8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002c90:	4a0e      	ldr	r2, [pc, #56]	; (8002ccc <LoopForever+0xe>)
  movs r3, #0
 8002c92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c94:	e002      	b.n	8002c9c <LoopCopyDataInit>

08002c96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c9a:	3304      	adds	r3, #4

08002c9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ca0:	d3f9      	bcc.n	8002c96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ca2:	4a0b      	ldr	r2, [pc, #44]	; (8002cd0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ca4:	4c0b      	ldr	r4, [pc, #44]	; (8002cd4 <LoopForever+0x16>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca8:	e001      	b.n	8002cae <LoopFillZerobss>

08002caa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002caa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cac:	3204      	adds	r2, #4

08002cae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cb0:	d3fb      	bcc.n	8002caa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8002cb2:	f7ff ffe3 	bl	8002c7c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cb6:	f003 fd93 	bl	80067e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cba:	f7fe fff7 	bl	8001cac <main>

08002cbe <LoopForever>:

LoopForever:
    b LoopForever
 8002cbe:	e7fe      	b.n	8002cbe <LoopForever>
   ldr   r0, =_estack
 8002cc0:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8002cc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cc8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002ccc:	08009218 	.word	0x08009218
  ldr r2, =_sbss
 8002cd0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002cd4:	200001e8 	.word	0x200001e8

08002cd8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd8:	e7fe      	b.n	8002cd8 <ADC1_COMP_IRQHandler>
	...

08002cdc <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b082      	sub	sp, #8
 8002ce0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ce2:	1dfb      	adds	r3, r7, #7
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_Init+0x3c>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <HAL_Init+0x3c>)
 8002cee:	2140      	movs	r1, #64	; 0x40
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	f000 f811 	bl	8002d1c <HAL_InitTick>
 8002cfa:	1e03      	subs	r3, r0, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8002cfe:	1dfb      	adds	r3, r7, #7
 8002d00:	2201      	movs	r2, #1
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e001      	b.n	8002d0a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002d06:	f7ff fe59 	bl	80029bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002d0a:	1dfb      	adds	r3, r7, #7
 8002d0c:	781b      	ldrb	r3, [r3, #0]
}
 8002d0e:	0018      	movs	r0, r3
 8002d10:	46bd      	mov	sp, r7
 8002d12:	b002      	add	sp, #8
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	46c0      	nop			; (mov r8, r8)
 8002d18:	40022000 	.word	0x40022000

08002d1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d1c:	b590      	push	{r4, r7, lr}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d24:	4b14      	ldr	r3, [pc, #80]	; (8002d78 <HAL_InitTick+0x5c>)
 8002d26:	681c      	ldr	r4, [r3, #0]
 8002d28:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <HAL_InitTick+0x60>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	23fa      	movs	r3, #250	; 0xfa
 8002d30:	0098      	lsls	r0, r3, #2
 8002d32:	f7fd f9fb 	bl	800012c <__udivsi3>
 8002d36:	0003      	movs	r3, r0
 8002d38:	0019      	movs	r1, r3
 8002d3a:	0020      	movs	r0, r4
 8002d3c:	f7fd f9f6 	bl	800012c <__udivsi3>
 8002d40:	0003      	movs	r3, r0
 8002d42:	0018      	movs	r0, r3
 8002d44:	f000 f905 	bl	8002f52 <HAL_SYSTICK_Config>
 8002d48:	1e03      	subs	r3, r0, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e00f      	b.n	8002d70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d80b      	bhi.n	8002d6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	2301      	movs	r3, #1
 8002d5a:	425b      	negs	r3, r3
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	0018      	movs	r0, r3
 8002d60:	f000 f8e2 	bl	8002f28 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d64:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_InitTick+0x64>)
 8002d66:	687a      	ldr	r2, [r7, #4]
 8002d68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	e000      	b.n	8002d70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
}
 8002d70:	0018      	movs	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	b003      	add	sp, #12
 8002d76:	bd90      	pop	{r4, r7, pc}
 8002d78:	20000008 	.word	0x20000008
 8002d7c:	20000010 	.word	0x20000010
 8002d80:	2000000c 	.word	0x2000000c

08002d84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d88:	4b05      	ldr	r3, [pc, #20]	; (8002da0 <HAL_IncTick+0x1c>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	001a      	movs	r2, r3
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_IncTick+0x20>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	18d2      	adds	r2, r2, r3
 8002d94:	4b03      	ldr	r3, [pc, #12]	; (8002da4 <HAL_IncTick+0x20>)
 8002d96:	601a      	str	r2, [r3, #0]
}
 8002d98:	46c0      	nop			; (mov r8, r8)
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	46c0      	nop			; (mov r8, r8)
 8002da0:	20000010 	.word	0x20000010
 8002da4:	200001d4 	.word	0x200001d4

08002da8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  return uwTick;
 8002dac:	4b02      	ldr	r3, [pc, #8]	; (8002db8 <HAL_GetTick+0x10>)
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	0018      	movs	r0, r3
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	200001d4 	.word	0x200001d4

08002dbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dc4:	f7ff fff0 	bl	8002da8 <HAL_GetTick>
 8002dc8:	0003      	movs	r3, r0
 8002dca:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	d005      	beq.n	8002de2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	; (8002e00 <HAL_Delay+0x44>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	001a      	movs	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	189b      	adds	r3, r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002de2:	46c0      	nop			; (mov r8, r8)
 8002de4:	f7ff ffe0 	bl	8002da8 <HAL_GetTick>
 8002de8:	0002      	movs	r2, r0
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d8f7      	bhi.n	8002de4 <HAL_Delay+0x28>
  {
  }
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46c0      	nop			; (mov r8, r8)
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	b004      	add	sp, #16
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	46c0      	nop			; (mov r8, r8)
 8002e00:	20000010 	.word	0x20000010

08002e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b083      	sub	sp, #12
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	0002      	movs	r2, r0
 8002e0c:	6039      	str	r1, [r7, #0]
 8002e0e:	1dfb      	adds	r3, r7, #7
 8002e10:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002e12:	1dfb      	adds	r3, r7, #7
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b7f      	cmp	r3, #127	; 0x7f
 8002e18:	d828      	bhi.n	8002e6c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e1a:	4a2f      	ldr	r2, [pc, #188]	; (8002ed8 <__NVIC_SetPriority+0xd4>)
 8002e1c:	1dfb      	adds	r3, r7, #7
 8002e1e:	781b      	ldrb	r3, [r3, #0]
 8002e20:	b25b      	sxtb	r3, r3
 8002e22:	089b      	lsrs	r3, r3, #2
 8002e24:	33c0      	adds	r3, #192	; 0xc0
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	589b      	ldr	r3, [r3, r2]
 8002e2a:	1dfa      	adds	r2, r7, #7
 8002e2c:	7812      	ldrb	r2, [r2, #0]
 8002e2e:	0011      	movs	r1, r2
 8002e30:	2203      	movs	r2, #3
 8002e32:	400a      	ands	r2, r1
 8002e34:	00d2      	lsls	r2, r2, #3
 8002e36:	21ff      	movs	r1, #255	; 0xff
 8002e38:	4091      	lsls	r1, r2
 8002e3a:	000a      	movs	r2, r1
 8002e3c:	43d2      	mvns	r2, r2
 8002e3e:	401a      	ands	r2, r3
 8002e40:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	019b      	lsls	r3, r3, #6
 8002e46:	22ff      	movs	r2, #255	; 0xff
 8002e48:	401a      	ands	r2, r3
 8002e4a:	1dfb      	adds	r3, r7, #7
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	0018      	movs	r0, r3
 8002e50:	2303      	movs	r3, #3
 8002e52:	4003      	ands	r3, r0
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e58:	481f      	ldr	r0, [pc, #124]	; (8002ed8 <__NVIC_SetPriority+0xd4>)
 8002e5a:	1dfb      	adds	r3, r7, #7
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	b25b      	sxtb	r3, r3
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	430a      	orrs	r2, r1
 8002e64:	33c0      	adds	r3, #192	; 0xc0
 8002e66:	009b      	lsls	r3, r3, #2
 8002e68:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002e6a:	e031      	b.n	8002ed0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e6c:	4a1b      	ldr	r2, [pc, #108]	; (8002edc <__NVIC_SetPriority+0xd8>)
 8002e6e:	1dfb      	adds	r3, r7, #7
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	0019      	movs	r1, r3
 8002e74:	230f      	movs	r3, #15
 8002e76:	400b      	ands	r3, r1
 8002e78:	3b08      	subs	r3, #8
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3306      	adds	r3, #6
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	18d3      	adds	r3, r2, r3
 8002e82:	3304      	adds	r3, #4
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	1dfa      	adds	r2, r7, #7
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	0011      	movs	r1, r2
 8002e8c:	2203      	movs	r2, #3
 8002e8e:	400a      	ands	r2, r1
 8002e90:	00d2      	lsls	r2, r2, #3
 8002e92:	21ff      	movs	r1, #255	; 0xff
 8002e94:	4091      	lsls	r1, r2
 8002e96:	000a      	movs	r2, r1
 8002e98:	43d2      	mvns	r2, r2
 8002e9a:	401a      	ands	r2, r3
 8002e9c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	019b      	lsls	r3, r3, #6
 8002ea2:	22ff      	movs	r2, #255	; 0xff
 8002ea4:	401a      	ands	r2, r3
 8002ea6:	1dfb      	adds	r3, r7, #7
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	0018      	movs	r0, r3
 8002eac:	2303      	movs	r3, #3
 8002eae:	4003      	ands	r3, r0
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002eb4:	4809      	ldr	r0, [pc, #36]	; (8002edc <__NVIC_SetPriority+0xd8>)
 8002eb6:	1dfb      	adds	r3, r7, #7
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	001c      	movs	r4, r3
 8002ebc:	230f      	movs	r3, #15
 8002ebe:	4023      	ands	r3, r4
 8002ec0:	3b08      	subs	r3, #8
 8002ec2:	089b      	lsrs	r3, r3, #2
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	3306      	adds	r3, #6
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	18c3      	adds	r3, r0, r3
 8002ecc:	3304      	adds	r3, #4
 8002ece:	601a      	str	r2, [r3, #0]
}
 8002ed0:	46c0      	nop			; (mov r8, r8)
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	b003      	add	sp, #12
 8002ed6:	bd90      	pop	{r4, r7, pc}
 8002ed8:	e000e100 	.word	0xe000e100
 8002edc:	e000ed00 	.word	0xe000ed00

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	1e5a      	subs	r2, r3, #1
 8002eec:	2380      	movs	r3, #128	; 0x80
 8002eee:	045b      	lsls	r3, r3, #17
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d301      	bcc.n	8002ef8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e010      	b.n	8002f1a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef8:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <SysTick_Config+0x44>)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	3a01      	subs	r2, #1
 8002efe:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f00:	2301      	movs	r3, #1
 8002f02:	425b      	negs	r3, r3
 8002f04:	2103      	movs	r1, #3
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff ff7c 	bl	8002e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f0c:	4b05      	ldr	r3, [pc, #20]	; (8002f24 <SysTick_Config+0x44>)
 8002f0e:	2200      	movs	r2, #0
 8002f10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f12:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <SysTick_Config+0x44>)
 8002f14:	2207      	movs	r2, #7
 8002f16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b002      	add	sp, #8
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	e000e010 	.word	0xe000e010

08002f28 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	607a      	str	r2, [r7, #4]
 8002f32:	210f      	movs	r1, #15
 8002f34:	187b      	adds	r3, r7, r1
 8002f36:	1c02      	adds	r2, r0, #0
 8002f38:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	187b      	adds	r3, r7, r1
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	b25b      	sxtb	r3, r3
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff ff5d 	bl	8002e04 <__NVIC_SetPriority>
}
 8002f4a:	46c0      	nop			; (mov r8, r8)
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f52:	b580      	push	{r7, lr}
 8002f54:	b082      	sub	sp, #8
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f7ff ffbf 	bl	8002ee0 <SysTick_Config>
 8002f62:	0003      	movs	r3, r0
}
 8002f64:	0018      	movs	r0, r3
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f82:	e155      	b.n	8003230 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2101      	movs	r1, #1
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	4091      	lsls	r1, r2
 8002f8e:	000a      	movs	r2, r1
 8002f90:	4013      	ands	r3, r2
 8002f92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d100      	bne.n	8002f9c <HAL_GPIO_Init+0x30>
 8002f9a:	e146      	b.n	800322a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	2203      	movs	r2, #3
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	2b01      	cmp	r3, #1
 8002fa6:	d005      	beq.n	8002fb4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2203      	movs	r2, #3
 8002fae:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d130      	bne.n	8003016 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	0013      	movs	r3, r2
 8002fc4:	43da      	mvns	r2, r3
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4013      	ands	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	409a      	lsls	r2, r3
 8002fd6:	0013      	movs	r3, r2
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fea:	2201      	movs	r2, #1
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	409a      	lsls	r2, r3
 8002ff0:	0013      	movs	r3, r2
 8002ff2:	43da      	mvns	r2, r3
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	091b      	lsrs	r3, r3, #4
 8003000:	2201      	movs	r2, #1
 8003002:	401a      	ands	r2, r3
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	409a      	lsls	r2, r3
 8003008:	0013      	movs	r3, r2
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	693a      	ldr	r2, [r7, #16]
 8003014:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2203      	movs	r2, #3
 800301c:	4013      	ands	r3, r2
 800301e:	2b03      	cmp	r3, #3
 8003020:	d017      	beq.n	8003052 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	2203      	movs	r2, #3
 800302e:	409a      	lsls	r2, r3
 8003030:	0013      	movs	r3, r2
 8003032:	43da      	mvns	r2, r3
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	4013      	ands	r3, r2
 8003038:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689a      	ldr	r2, [r3, #8]
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	005b      	lsls	r3, r3, #1
 8003042:	409a      	lsls	r2, r3
 8003044:	0013      	movs	r3, r2
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4313      	orrs	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2203      	movs	r2, #3
 8003058:	4013      	ands	r3, r2
 800305a:	2b02      	cmp	r3, #2
 800305c:	d123      	bne.n	80030a6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	08da      	lsrs	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	3208      	adds	r2, #8
 8003066:	0092      	lsls	r2, r2, #2
 8003068:	58d3      	ldr	r3, [r2, r3]
 800306a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	2207      	movs	r2, #7
 8003070:	4013      	ands	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	220f      	movs	r2, #15
 8003076:	409a      	lsls	r2, r3
 8003078:	0013      	movs	r3, r2
 800307a:	43da      	mvns	r2, r3
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	4013      	ands	r3, r2
 8003080:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	691a      	ldr	r2, [r3, #16]
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	2107      	movs	r1, #7
 800308a:	400b      	ands	r3, r1
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	409a      	lsls	r2, r3
 8003090:	0013      	movs	r3, r2
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	4313      	orrs	r3, r2
 8003096:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	08da      	lsrs	r2, r3, #3
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3208      	adds	r2, #8
 80030a0:	0092      	lsls	r2, r2, #2
 80030a2:	6939      	ldr	r1, [r7, #16]
 80030a4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	2203      	movs	r2, #3
 80030b2:	409a      	lsls	r2, r3
 80030b4:	0013      	movs	r3, r2
 80030b6:	43da      	mvns	r2, r3
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4013      	ands	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	2203      	movs	r2, #3
 80030c4:	401a      	ands	r2, r3
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	409a      	lsls	r2, r3
 80030cc:	0013      	movs	r3, r2
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	23c0      	movs	r3, #192	; 0xc0
 80030e0:	029b      	lsls	r3, r3, #10
 80030e2:	4013      	ands	r3, r2
 80030e4:	d100      	bne.n	80030e8 <HAL_GPIO_Init+0x17c>
 80030e6:	e0a0      	b.n	800322a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e8:	4b57      	ldr	r3, [pc, #348]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 80030ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80030ec:	4b56      	ldr	r3, [pc, #344]	; (8003248 <HAL_GPIO_Init+0x2dc>)
 80030ee:	2101      	movs	r1, #1
 80030f0:	430a      	orrs	r2, r1
 80030f2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80030f4:	4a55      	ldr	r2, [pc, #340]	; (800324c <HAL_GPIO_Init+0x2e0>)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	089b      	lsrs	r3, r3, #2
 80030fa:	3302      	adds	r3, #2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	589b      	ldr	r3, [r3, r2]
 8003100:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2203      	movs	r2, #3
 8003106:	4013      	ands	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	220f      	movs	r2, #15
 800310c:	409a      	lsls	r2, r3
 800310e:	0013      	movs	r3, r2
 8003110:	43da      	mvns	r2, r3
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	23a0      	movs	r3, #160	; 0xa0
 800311c:	05db      	lsls	r3, r3, #23
 800311e:	429a      	cmp	r2, r3
 8003120:	d01f      	beq.n	8003162 <HAL_GPIO_Init+0x1f6>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a4a      	ldr	r2, [pc, #296]	; (8003250 <HAL_GPIO_Init+0x2e4>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d019      	beq.n	800315e <HAL_GPIO_Init+0x1f2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a49      	ldr	r2, [pc, #292]	; (8003254 <HAL_GPIO_Init+0x2e8>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_GPIO_Init+0x1ee>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a48      	ldr	r2, [pc, #288]	; (8003258 <HAL_GPIO_Init+0x2ec>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00d      	beq.n	8003156 <HAL_GPIO_Init+0x1ea>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a47      	ldr	r2, [pc, #284]	; (800325c <HAL_GPIO_Init+0x2f0>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <HAL_GPIO_Init+0x1e6>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a46      	ldr	r2, [pc, #280]	; (8003260 <HAL_GPIO_Init+0x2f4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d101      	bne.n	800314e <HAL_GPIO_Init+0x1e2>
 800314a:	2305      	movs	r3, #5
 800314c:	e00a      	b.n	8003164 <HAL_GPIO_Init+0x1f8>
 800314e:	2306      	movs	r3, #6
 8003150:	e008      	b.n	8003164 <HAL_GPIO_Init+0x1f8>
 8003152:	2304      	movs	r3, #4
 8003154:	e006      	b.n	8003164 <HAL_GPIO_Init+0x1f8>
 8003156:	2303      	movs	r3, #3
 8003158:	e004      	b.n	8003164 <HAL_GPIO_Init+0x1f8>
 800315a:	2302      	movs	r3, #2
 800315c:	e002      	b.n	8003164 <HAL_GPIO_Init+0x1f8>
 800315e:	2301      	movs	r3, #1
 8003160:	e000      	b.n	8003164 <HAL_GPIO_Init+0x1f8>
 8003162:	2300      	movs	r3, #0
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	2103      	movs	r1, #3
 8003168:	400a      	ands	r2, r1
 800316a:	0092      	lsls	r2, r2, #2
 800316c:	4093      	lsls	r3, r2
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003174:	4935      	ldr	r1, [pc, #212]	; (800324c <HAL_GPIO_Init+0x2e0>)
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	089b      	lsrs	r3, r3, #2
 800317a:	3302      	adds	r3, #2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003182:	4b38      	ldr	r3, [pc, #224]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	43da      	mvns	r2, r3
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4013      	ands	r3, r2
 8003190:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	2380      	movs	r3, #128	; 0x80
 8003198:	025b      	lsls	r3, r3, #9
 800319a:	4013      	ands	r3, r2
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800319e:	693a      	ldr	r2, [r7, #16]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80031a6:	4b2f      	ldr	r3, [pc, #188]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 80031a8:	693a      	ldr	r2, [r7, #16]
 80031aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80031ac:	4b2d      	ldr	r3, [pc, #180]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	43da      	mvns	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4013      	ands	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	2380      	movs	r3, #128	; 0x80
 80031c2:	029b      	lsls	r3, r3, #10
 80031c4:	4013      	ands	r3, r2
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80031d0:	4b24      	ldr	r3, [pc, #144]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 80031d2:	693a      	ldr	r2, [r7, #16]
 80031d4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031d6:	4b23      	ldr	r3, [pc, #140]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	43da      	mvns	r2, r3
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4013      	ands	r3, r2
 80031e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	2380      	movs	r3, #128	; 0x80
 80031ec:	035b      	lsls	r3, r3, #13
 80031ee:	4013      	ands	r3, r2
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80031fa:	4b1a      	ldr	r3, [pc, #104]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003200:	4b18      	ldr	r3, [pc, #96]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	43da      	mvns	r2, r3
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4013      	ands	r3, r2
 800320e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	2380      	movs	r3, #128	; 0x80
 8003216:	039b      	lsls	r3, r3, #14
 8003218:	4013      	ands	r3, r2
 800321a:	d003      	beq.n	8003224 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003224:	4b0f      	ldr	r3, [pc, #60]	; (8003264 <HAL_GPIO_Init+0x2f8>)
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	3301      	adds	r3, #1
 800322e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	40da      	lsrs	r2, r3
 8003238:	1e13      	subs	r3, r2, #0
 800323a:	d000      	beq.n	800323e <HAL_GPIO_Init+0x2d2>
 800323c:	e6a2      	b.n	8002f84 <HAL_GPIO_Init+0x18>
  }
}
 800323e:	46c0      	nop			; (mov r8, r8)
 8003240:	46c0      	nop			; (mov r8, r8)
 8003242:	46bd      	mov	sp, r7
 8003244:	b006      	add	sp, #24
 8003246:	bd80      	pop	{r7, pc}
 8003248:	40021000 	.word	0x40021000
 800324c:	40010000 	.word	0x40010000
 8003250:	50000400 	.word	0x50000400
 8003254:	50000800 	.word	0x50000800
 8003258:	50000c00 	.word	0x50000c00
 800325c:	50001000 	.word	0x50001000
 8003260:	50001c00 	.word	0x50001c00
 8003264:	40010400 	.word	0x40010400

08003268 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	000a      	movs	r2, r1
 8003272:	1cbb      	adds	r3, r7, #2
 8003274:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	1cba      	adds	r2, r7, #2
 800327c:	8812      	ldrh	r2, [r2, #0]
 800327e:	4013      	ands	r3, r2
 8003280:	d004      	beq.n	800328c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003282:	230f      	movs	r3, #15
 8003284:	18fb      	adds	r3, r7, r3
 8003286:	2201      	movs	r2, #1
 8003288:	701a      	strb	r2, [r3, #0]
 800328a:	e003      	b.n	8003294 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800328c:	230f      	movs	r3, #15
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	2200      	movs	r2, #0
 8003292:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003294:	230f      	movs	r3, #15
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	781b      	ldrb	r3, [r3, #0]
}
 800329a:	0018      	movs	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	b004      	add	sp, #16
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b082      	sub	sp, #8
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
 80032aa:	0008      	movs	r0, r1
 80032ac:	0011      	movs	r1, r2
 80032ae:	1cbb      	adds	r3, r7, #2
 80032b0:	1c02      	adds	r2, r0, #0
 80032b2:	801a      	strh	r2, [r3, #0]
 80032b4:	1c7b      	adds	r3, r7, #1
 80032b6:	1c0a      	adds	r2, r1, #0
 80032b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ba:	1c7b      	adds	r3, r7, #1
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d004      	beq.n	80032cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032c2:	1cbb      	adds	r3, r7, #2
 80032c4:	881a      	ldrh	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80032ca:	e003      	b.n	80032d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80032cc:	1cbb      	adds	r3, r7, #2
 80032ce:	881a      	ldrh	r2, [r3, #0]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80032d4:	46c0      	nop			; (mov r8, r8)
 80032d6:	46bd      	mov	sp, r7
 80032d8:	b002      	add	sp, #8
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d101      	bne.n	80032ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e082      	b.n	80033f4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2241      	movs	r2, #65	; 0x41
 80032f2:	5c9b      	ldrb	r3, [r3, r2]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d107      	bne.n	800330a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2240      	movs	r2, #64	; 0x40
 80032fe:	2100      	movs	r1, #0
 8003300:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	0018      	movs	r0, r3
 8003306:	f7ff fb6d 	bl	80029e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2241      	movs	r2, #65	; 0x41
 800330e:	2124      	movs	r1, #36	; 0x24
 8003310:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2101      	movs	r1, #1
 800331e:	438a      	bics	r2, r1
 8003320:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4934      	ldr	r1, [pc, #208]	; (80033fc <HAL_I2C_Init+0x120>)
 800332c:	400a      	ands	r2, r1
 800332e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689a      	ldr	r2, [r3, #8]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4931      	ldr	r1, [pc, #196]	; (8003400 <HAL_I2C_Init+0x124>)
 800333c:	400a      	ands	r2, r1
 800333e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d108      	bne.n	800335a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2180      	movs	r1, #128	; 0x80
 8003352:	0209      	lsls	r1, r1, #8
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e007      	b.n	800336a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2184      	movs	r1, #132	; 0x84
 8003364:	0209      	lsls	r1, r1, #8
 8003366:	430a      	orrs	r2, r1
 8003368:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	2b02      	cmp	r3, #2
 8003370:	d104      	bne.n	800337c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2280      	movs	r2, #128	; 0x80
 8003378:	0112      	lsls	r2, r2, #4
 800337a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	491f      	ldr	r1, [pc, #124]	; (8003404 <HAL_I2C_Init+0x128>)
 8003388:	430a      	orrs	r2, r1
 800338a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	491a      	ldr	r1, [pc, #104]	; (8003400 <HAL_I2C_Init+0x124>)
 8003398:	400a      	ands	r2, r1
 800339a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691a      	ldr	r2, [r3, #16]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	431a      	orrs	r2, r3
 80033a6:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69d9      	ldr	r1, [r3, #28]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1a      	ldr	r2, [r3, #32]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2241      	movs	r2, #65	; 0x41
 80033e0:	2120      	movs	r1, #32
 80033e2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2242      	movs	r2, #66	; 0x42
 80033ee:	2100      	movs	r1, #0
 80033f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	0018      	movs	r0, r3
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b002      	add	sp, #8
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	f0ffffff 	.word	0xf0ffffff
 8003400:	ffff7fff 	.word	0xffff7fff
 8003404:	02008000 	.word	0x02008000

08003408 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003408:	b590      	push	{r4, r7, lr}
 800340a:	b089      	sub	sp, #36	; 0x24
 800340c:	af02      	add	r7, sp, #8
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	000c      	movs	r4, r1
 8003412:	0010      	movs	r0, r2
 8003414:	0019      	movs	r1, r3
 8003416:	230a      	movs	r3, #10
 8003418:	18fb      	adds	r3, r7, r3
 800341a:	1c22      	adds	r2, r4, #0
 800341c:	801a      	strh	r2, [r3, #0]
 800341e:	2308      	movs	r3, #8
 8003420:	18fb      	adds	r3, r7, r3
 8003422:	1c02      	adds	r2, r0, #0
 8003424:	801a      	strh	r2, [r3, #0]
 8003426:	1dbb      	adds	r3, r7, #6
 8003428:	1c0a      	adds	r2, r1, #0
 800342a:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2241      	movs	r2, #65	; 0x41
 8003430:	5c9b      	ldrb	r3, [r3, r2]
 8003432:	b2db      	uxtb	r3, r3
 8003434:	2b20      	cmp	r3, #32
 8003436:	d000      	beq.n	800343a <HAL_I2C_Mem_Write+0x32>
 8003438:	e10c      	b.n	8003654 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 800343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <HAL_I2C_Mem_Write+0x42>
 8003440:	232c      	movs	r3, #44	; 0x2c
 8003442:	18fb      	adds	r3, r7, r3
 8003444:	881b      	ldrh	r3, [r3, #0]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d105      	bne.n	8003456 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	0092      	lsls	r2, r2, #2
 8003450:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e0ff      	b.n	8003656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2240      	movs	r2, #64	; 0x40
 800345a:	5c9b      	ldrb	r3, [r3, r2]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_I2C_Mem_Write+0x5c>
 8003460:	2302      	movs	r3, #2
 8003462:	e0f8      	b.n	8003656 <HAL_I2C_Mem_Write+0x24e>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2240      	movs	r2, #64	; 0x40
 8003468:	2101      	movs	r1, #1
 800346a:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800346c:	f7ff fc9c 	bl	8002da8 <HAL_GetTick>
 8003470:	0003      	movs	r3, r0
 8003472:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003474:	2380      	movs	r3, #128	; 0x80
 8003476:	0219      	lsls	r1, r3, #8
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	9300      	str	r3, [sp, #0]
 800347e:	2319      	movs	r3, #25
 8003480:	2201      	movs	r2, #1
 8003482:	f000 fc25 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003486:	1e03      	subs	r3, r0, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e0e3      	b.n	8003656 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	2241      	movs	r2, #65	; 0x41
 8003492:	2121      	movs	r1, #33	; 0x21
 8003494:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2242      	movs	r2, #66	; 0x42
 800349a:	2140      	movs	r1, #64	; 0x40
 800349c:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	222c      	movs	r2, #44	; 0x2c
 80034ae:	18ba      	adds	r2, r7, r2
 80034b0:	8812      	ldrh	r2, [r2, #0]
 80034b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80034ba:	1dbb      	adds	r3, r7, #6
 80034bc:	881c      	ldrh	r4, [r3, #0]
 80034be:	2308      	movs	r3, #8
 80034c0:	18fb      	adds	r3, r7, r3
 80034c2:	881a      	ldrh	r2, [r3, #0]
 80034c4:	230a      	movs	r3, #10
 80034c6:	18fb      	adds	r3, r7, r3
 80034c8:	8819      	ldrh	r1, [r3, #0]
 80034ca:	68f8      	ldr	r0, [r7, #12]
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	9301      	str	r3, [sp, #4]
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	9300      	str	r3, [sp, #0]
 80034d4:	0023      	movs	r3, r4
 80034d6:	f000 fb13 	bl	8003b00 <I2C_RequestMemoryWrite>
 80034da:	1e03      	subs	r3, r0, #0
 80034dc:	d005      	beq.n	80034ea <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2240      	movs	r2, #64	; 0x40
 80034e2:	2100      	movs	r1, #0
 80034e4:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e0b5      	b.n	8003656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	2bff      	cmp	r3, #255	; 0xff
 80034f2:	d911      	bls.n	8003518 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	22ff      	movs	r2, #255	; 0xff
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034fe:	b2da      	uxtb	r2, r3
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	045c      	lsls	r4, r3, #17
 8003504:	230a      	movs	r3, #10
 8003506:	18fb      	adds	r3, r7, r3
 8003508:	8819      	ldrh	r1, [r3, #0]
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	2300      	movs	r3, #0
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	0023      	movs	r3, r4
 8003512:	f000 fd11 	bl	8003f38 <I2C_TransferConfig>
 8003516:	e012      	b.n	800353e <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351c:	b29a      	uxth	r2, r3
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003526:	b2da      	uxtb	r2, r3
 8003528:	2380      	movs	r3, #128	; 0x80
 800352a:	049c      	lsls	r4, r3, #18
 800352c:	230a      	movs	r3, #10
 800352e:	18fb      	adds	r3, r7, r3
 8003530:	8819      	ldrh	r1, [r3, #0]
 8003532:	68f8      	ldr	r0, [r7, #12]
 8003534:	2300      	movs	r3, #0
 8003536:	9300      	str	r3, [sp, #0]
 8003538:	0023      	movs	r3, r4
 800353a:	f000 fcfd 	bl	8003f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800353e:	697a      	ldr	r2, [r7, #20]
 8003540:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	0018      	movs	r0, r3
 8003546:	f000 fc02 	bl	8003d4e <I2C_WaitOnTXISFlagUntilTimeout>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e081      	b.n	8003656 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	781a      	ldrb	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	1c5a      	adds	r2, r3, #1
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800356c:	b29b      	uxth	r3, r3
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800357a:	3b01      	subs	r3, #1
 800357c:	b29a      	uxth	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29b      	uxth	r3, r3
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03a      	beq.n	8003602 <HAL_I2C_Mem_Write+0x1fa>
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	2b00      	cmp	r3, #0
 8003592:	d136      	bne.n	8003602 <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	0013      	movs	r3, r2
 800359e:	2200      	movs	r2, #0
 80035a0:	2180      	movs	r1, #128	; 0x80
 80035a2:	f000 fb95 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 80035a6:	1e03      	subs	r3, r0, #0
 80035a8:	d001      	beq.n	80035ae <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e053      	b.n	8003656 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035b2:	b29b      	uxth	r3, r3
 80035b4:	2bff      	cmp	r3, #255	; 0xff
 80035b6:	d911      	bls.n	80035dc <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	22ff      	movs	r2, #255	; 0xff
 80035bc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	2380      	movs	r3, #128	; 0x80
 80035c6:	045c      	lsls	r4, r3, #17
 80035c8:	230a      	movs	r3, #10
 80035ca:	18fb      	adds	r3, r7, r3
 80035cc:	8819      	ldrh	r1, [r3, #0]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	2300      	movs	r3, #0
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	0023      	movs	r3, r4
 80035d6:	f000 fcaf 	bl	8003f38 <I2C_TransferConfig>
 80035da:	e012      	b.n	8003602 <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035ea:	b2da      	uxtb	r2, r3
 80035ec:	2380      	movs	r3, #128	; 0x80
 80035ee:	049c      	lsls	r4, r3, #18
 80035f0:	230a      	movs	r3, #10
 80035f2:	18fb      	adds	r3, r7, r3
 80035f4:	8819      	ldrh	r1, [r3, #0]
 80035f6:	68f8      	ldr	r0, [r7, #12]
 80035f8:	2300      	movs	r3, #0
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	0023      	movs	r3, r4
 80035fe:	f000 fc9b 	bl	8003f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003606:	b29b      	uxth	r3, r3
 8003608:	2b00      	cmp	r3, #0
 800360a:	d198      	bne.n	800353e <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360c:	697a      	ldr	r2, [r7, #20]
 800360e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	0018      	movs	r0, r3
 8003614:	f000 fbda 	bl	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout>
 8003618:	1e03      	subs	r3, r0, #0
 800361a:	d001      	beq.n	8003620 <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e01a      	b.n	8003656 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2220      	movs	r2, #32
 8003626:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	685a      	ldr	r2, [r3, #4]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	490b      	ldr	r1, [pc, #44]	; (8003660 <HAL_I2C_Mem_Write+0x258>)
 8003634:	400a      	ands	r2, r1
 8003636:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2241      	movs	r2, #65	; 0x41
 800363c:	2120      	movs	r1, #32
 800363e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2242      	movs	r2, #66	; 0x42
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2240      	movs	r2, #64	; 0x40
 800364c:	2100      	movs	r1, #0
 800364e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	0018      	movs	r0, r3
 8003658:	46bd      	mov	sp, r7
 800365a:	b007      	add	sp, #28
 800365c:	bd90      	pop	{r4, r7, pc}
 800365e:	46c0      	nop			; (mov r8, r8)
 8003660:	fe00e800 	.word	0xfe00e800

08003664 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003664:	b590      	push	{r4, r7, lr}
 8003666:	b089      	sub	sp, #36	; 0x24
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	000c      	movs	r4, r1
 800366e:	0010      	movs	r0, r2
 8003670:	0019      	movs	r1, r3
 8003672:	230a      	movs	r3, #10
 8003674:	18fb      	adds	r3, r7, r3
 8003676:	1c22      	adds	r2, r4, #0
 8003678:	801a      	strh	r2, [r3, #0]
 800367a:	2308      	movs	r3, #8
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	1c02      	adds	r2, r0, #0
 8003680:	801a      	strh	r2, [r3, #0]
 8003682:	1dbb      	adds	r3, r7, #6
 8003684:	1c0a      	adds	r2, r1, #0
 8003686:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2241      	movs	r2, #65	; 0x41
 800368c:	5c9b      	ldrb	r3, [r3, r2]
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b20      	cmp	r3, #32
 8003692:	d000      	beq.n	8003696 <HAL_I2C_Mem_Read+0x32>
 8003694:	e110      	b.n	80038b8 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8003696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003698:	2b00      	cmp	r3, #0
 800369a:	d004      	beq.n	80036a6 <HAL_I2C_Mem_Read+0x42>
 800369c:	232c      	movs	r3, #44	; 0x2c
 800369e:	18fb      	adds	r3, r7, r3
 80036a0:	881b      	ldrh	r3, [r3, #0]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d105      	bne.n	80036b2 <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	0092      	lsls	r2, r2, #2
 80036ac:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e103      	b.n	80038ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	5c9b      	ldrb	r3, [r3, r2]
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	d101      	bne.n	80036c0 <HAL_I2C_Mem_Read+0x5c>
 80036bc:	2302      	movs	r3, #2
 80036be:	e0fc      	b.n	80038ba <HAL_I2C_Mem_Read+0x256>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	2240      	movs	r2, #64	; 0x40
 80036c4:	2101      	movs	r1, #1
 80036c6:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80036c8:	f7ff fb6e 	bl	8002da8 <HAL_GetTick>
 80036cc:	0003      	movs	r3, r0
 80036ce:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80036d0:	2380      	movs	r3, #128	; 0x80
 80036d2:	0219      	lsls	r1, r3, #8
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	9300      	str	r3, [sp, #0]
 80036da:	2319      	movs	r3, #25
 80036dc:	2201      	movs	r2, #1
 80036de:	f000 faf7 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 80036e2:	1e03      	subs	r3, r0, #0
 80036e4:	d001      	beq.n	80036ea <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e0e7      	b.n	80038ba <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2241      	movs	r2, #65	; 0x41
 80036ee:	2122      	movs	r1, #34	; 0x22
 80036f0:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2242      	movs	r2, #66	; 0x42
 80036f6:	2140      	movs	r1, #64	; 0x40
 80036f8:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	222c      	movs	r2, #44	; 0x2c
 800370a:	18ba      	adds	r2, r7, r2
 800370c:	8812      	ldrh	r2, [r2, #0]
 800370e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003716:	1dbb      	adds	r3, r7, #6
 8003718:	881c      	ldrh	r4, [r3, #0]
 800371a:	2308      	movs	r3, #8
 800371c:	18fb      	adds	r3, r7, r3
 800371e:	881a      	ldrh	r2, [r3, #0]
 8003720:	230a      	movs	r3, #10
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	8819      	ldrh	r1, [r3, #0]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	0023      	movs	r3, r4
 8003732:	f000 fa49 	bl	8003bc8 <I2C_RequestMemoryRead>
 8003736:	1e03      	subs	r3, r0, #0
 8003738:	d005      	beq.n	8003746 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	2240      	movs	r2, #64	; 0x40
 800373e:	2100      	movs	r1, #0
 8003740:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e0b9      	b.n	80038ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374a:	b29b      	uxth	r3, r3
 800374c:	2bff      	cmp	r3, #255	; 0xff
 800374e:	d911      	bls.n	8003774 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	22ff      	movs	r2, #255	; 0xff
 8003754:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800375a:	b2da      	uxtb	r2, r3
 800375c:	2380      	movs	r3, #128	; 0x80
 800375e:	045c      	lsls	r4, r3, #17
 8003760:	230a      	movs	r3, #10
 8003762:	18fb      	adds	r3, r7, r3
 8003764:	8819      	ldrh	r1, [r3, #0]
 8003766:	68f8      	ldr	r0, [r7, #12]
 8003768:	4b56      	ldr	r3, [pc, #344]	; (80038c4 <HAL_I2C_Mem_Read+0x260>)
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	0023      	movs	r3, r4
 800376e:	f000 fbe3 	bl	8003f38 <I2C_TransferConfig>
 8003772:	e012      	b.n	800379a <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003782:	b2da      	uxtb	r2, r3
 8003784:	2380      	movs	r3, #128	; 0x80
 8003786:	049c      	lsls	r4, r3, #18
 8003788:	230a      	movs	r3, #10
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	8819      	ldrh	r1, [r3, #0]
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	4b4c      	ldr	r3, [pc, #304]	; (80038c4 <HAL_I2C_Mem_Read+0x260>)
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	0023      	movs	r3, r4
 8003796:	f000 fbcf 	bl	8003f38 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800379a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	0013      	movs	r3, r2
 80037a4:	2200      	movs	r2, #0
 80037a6:	2104      	movs	r1, #4
 80037a8:	f000 fa92 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 80037ac:	1e03      	subs	r3, r0, #0
 80037ae:	d001      	beq.n	80037b4 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	e082      	b.n	80038ba <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d03a      	beq.n	8003866 <HAL_I2C_Mem_Read+0x202>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d136      	bne.n	8003866 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80037f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9300      	str	r3, [sp, #0]
 8003800:	0013      	movs	r3, r2
 8003802:	2200      	movs	r2, #0
 8003804:	2180      	movs	r1, #128	; 0x80
 8003806:	f000 fa63 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 800380a:	1e03      	subs	r3, r0, #0
 800380c:	d001      	beq.n	8003812 <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e053      	b.n	80038ba <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003816:	b29b      	uxth	r3, r3
 8003818:	2bff      	cmp	r3, #255	; 0xff
 800381a:	d911      	bls.n	8003840 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	22ff      	movs	r2, #255	; 0xff
 8003820:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003826:	b2da      	uxtb	r2, r3
 8003828:	2380      	movs	r3, #128	; 0x80
 800382a:	045c      	lsls	r4, r3, #17
 800382c:	230a      	movs	r3, #10
 800382e:	18fb      	adds	r3, r7, r3
 8003830:	8819      	ldrh	r1, [r3, #0]
 8003832:	68f8      	ldr	r0, [r7, #12]
 8003834:	2300      	movs	r3, #0
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	0023      	movs	r3, r4
 800383a:	f000 fb7d 	bl	8003f38 <I2C_TransferConfig>
 800383e:	e012      	b.n	8003866 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800384e:	b2da      	uxtb	r2, r3
 8003850:	2380      	movs	r3, #128	; 0x80
 8003852:	049c      	lsls	r4, r3, #18
 8003854:	230a      	movs	r3, #10
 8003856:	18fb      	adds	r3, r7, r3
 8003858:	8819      	ldrh	r1, [r3, #0]
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	2300      	movs	r3, #0
 800385e:	9300      	str	r3, [sp, #0]
 8003860:	0023      	movs	r3, r4
 8003862:	f000 fb69 	bl	8003f38 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d194      	bne.n	800379a <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	0018      	movs	r0, r3
 8003878:	f000 faa8 	bl	8003dcc <I2C_WaitOnSTOPFlagUntilTimeout>
 800387c:	1e03      	subs	r3, r0, #0
 800387e:	d001      	beq.n	8003884 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e01a      	b.n	80038ba <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2220      	movs	r2, #32
 800388a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	490c      	ldr	r1, [pc, #48]	; (80038c8 <HAL_I2C_Mem_Read+0x264>)
 8003898:	400a      	ands	r2, r1
 800389a:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2241      	movs	r2, #65	; 0x41
 80038a0:	2120      	movs	r1, #32
 80038a2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2242      	movs	r2, #66	; 0x42
 80038a8:	2100      	movs	r1, #0
 80038aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2240      	movs	r2, #64	; 0x40
 80038b0:	2100      	movs	r1, #0
 80038b2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	0018      	movs	r0, r3
 80038bc:	46bd      	mov	sp, r7
 80038be:	b007      	add	sp, #28
 80038c0:	bd90      	pop	{r4, r7, pc}
 80038c2:	46c0      	nop			; (mov r8, r8)
 80038c4:	80002400 	.word	0x80002400
 80038c8:	fe00e800 	.word	0xfe00e800

080038cc <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	; 0x28
 80038d0:	af02      	add	r7, sp, #8
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	607a      	str	r2, [r7, #4]
 80038d6:	603b      	str	r3, [r7, #0]
 80038d8:	230a      	movs	r3, #10
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	1c0a      	adds	r2, r1, #0
 80038de:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80038e0:	2300      	movs	r3, #0
 80038e2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2241      	movs	r2, #65	; 0x41
 80038e8:	5c9b      	ldrb	r3, [r3, r2]
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b20      	cmp	r3, #32
 80038ee:	d000      	beq.n	80038f2 <HAL_I2C_IsDeviceReady+0x26>
 80038f0:	e0fe      	b.n	8003af0 <HAL_I2C_IsDeviceReady+0x224>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	699a      	ldr	r2, [r3, #24]
 80038f8:	2380      	movs	r3, #128	; 0x80
 80038fa:	021b      	lsls	r3, r3, #8
 80038fc:	401a      	ands	r2, r3
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	429a      	cmp	r2, r3
 8003904:	d101      	bne.n	800390a <HAL_I2C_IsDeviceReady+0x3e>
    {
      return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
 8003908:	e0f3      	b.n	8003af2 <HAL_I2C_IsDeviceReady+0x226>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2240      	movs	r2, #64	; 0x40
 800390e:	5c9b      	ldrb	r3, [r3, r2]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d101      	bne.n	8003918 <HAL_I2C_IsDeviceReady+0x4c>
 8003914:	2302      	movs	r3, #2
 8003916:	e0ec      	b.n	8003af2 <HAL_I2C_IsDeviceReady+0x226>
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	2240      	movs	r2, #64	; 0x40
 800391c:	2101      	movs	r1, #1
 800391e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2241      	movs	r2, #65	; 0x41
 8003924:	2124      	movs	r1, #36	; 0x24
 8003926:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	2b01      	cmp	r3, #1
 8003934:	d107      	bne.n	8003946 <HAL_I2C_IsDeviceReady+0x7a>
 8003936:	230a      	movs	r3, #10
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	881b      	ldrh	r3, [r3, #0]
 800393c:	059b      	lsls	r3, r3, #22
 800393e:	0d9b      	lsrs	r3, r3, #22
 8003940:	4a6e      	ldr	r2, [pc, #440]	; (8003afc <HAL_I2C_IsDeviceReady+0x230>)
 8003942:	431a      	orrs	r2, r3
 8003944:	e007      	b.n	8003956 <HAL_I2C_IsDeviceReady+0x8a>
 8003946:	230a      	movs	r3, #10
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	881b      	ldrh	r3, [r3, #0]
 800394c:	059b      	lsls	r3, r3, #22
 800394e:	0d9b      	lsrs	r3, r3, #22
 8003950:	22a0      	movs	r2, #160	; 0xa0
 8003952:	0192      	lsls	r2, r2, #6
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800395c:	f7ff fa24 	bl	8002da8 <HAL_GetTick>
 8003960:	0003      	movs	r3, r0
 8003962:	61bb      	str	r3, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2220      	movs	r2, #32
 800396c:	4013      	ands	r3, r2
 800396e:	3b20      	subs	r3, #32
 8003970:	425a      	negs	r2, r3
 8003972:	4153      	adcs	r3, r2
 8003974:	b2da      	uxtb	r2, r3
 8003976:	231f      	movs	r3, #31
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	701a      	strb	r2, [r3, #0]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2210      	movs	r2, #16
 8003984:	4013      	ands	r3, r2
 8003986:	3b10      	subs	r3, #16
 8003988:	425a      	negs	r2, r3
 800398a:	4153      	adcs	r3, r2
 800398c:	b2da      	uxtb	r2, r3
 800398e:	231e      	movs	r3, #30
 8003990:	18fb      	adds	r3, r7, r3
 8003992:	701a      	strb	r2, [r3, #0]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003994:	e035      	b.n	8003a02 <HAL_I2C_IsDeviceReady+0x136>
      {
        if (Timeout != HAL_MAX_DELAY)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	3301      	adds	r3, #1
 800399a:	d01a      	beq.n	80039d2 <HAL_I2C_IsDeviceReady+0x106>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800399c:	f7ff fa04 	bl	8002da8 <HAL_GetTick>
 80039a0:	0002      	movs	r2, r0
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d302      	bcc.n	80039b2 <HAL_I2C_IsDeviceReady+0xe6>
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10f      	bne.n	80039d2 <HAL_I2C_IsDeviceReady+0x106>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2241      	movs	r2, #65	; 0x41
 80039b6:	2120      	movs	r1, #32
 80039b8:	5499      	strb	r1, [r3, r2]

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039be:	2220      	movs	r2, #32
 80039c0:	431a      	orrs	r2, r3
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2240      	movs	r2, #64	; 0x40
 80039ca:	2100      	movs	r1, #0
 80039cc:	5499      	strb	r1, [r3, r2]

            return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e08f      	b.n	8003af2 <HAL_I2C_IsDeviceReady+0x226>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	699b      	ldr	r3, [r3, #24]
 80039d8:	2220      	movs	r2, #32
 80039da:	4013      	ands	r3, r2
 80039dc:	3b20      	subs	r3, #32
 80039de:	425a      	negs	r2, r3
 80039e0:	4153      	adcs	r3, r2
 80039e2:	b2da      	uxtb	r2, r3
 80039e4:	231f      	movs	r3, #31
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	701a      	strb	r2, [r3, #0]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	699b      	ldr	r3, [r3, #24]
 80039f0:	2210      	movs	r2, #16
 80039f2:	4013      	ands	r3, r2
 80039f4:	3b10      	subs	r3, #16
 80039f6:	425a      	negs	r2, r3
 80039f8:	4153      	adcs	r3, r2
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	231e      	movs	r3, #30
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	701a      	strb	r2, [r3, #0]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8003a02:	231f      	movs	r3, #31
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d104      	bne.n	8003a16 <HAL_I2C_IsDeviceReady+0x14a>
 8003a0c:	231e      	movs	r3, #30
 8003a0e:	18fb      	adds	r3, r7, r3
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d0bf      	beq.n	8003996 <HAL_I2C_IsDeviceReady+0xca>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	2210      	movs	r2, #16
 8003a1e:	4013      	ands	r3, r2
 8003a20:	2b10      	cmp	r3, #16
 8003a22:	d01a      	beq.n	8003a5a <HAL_I2C_IsDeviceReady+0x18e>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a24:	683a      	ldr	r2, [r7, #0]
 8003a26:	68f8      	ldr	r0, [r7, #12]
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	9300      	str	r3, [sp, #0]
 8003a2c:	0013      	movs	r3, r2
 8003a2e:	2200      	movs	r2, #0
 8003a30:	2120      	movs	r1, #32
 8003a32:	f000 f94d 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003a36:	1e03      	subs	r3, r0, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_IsDeviceReady+0x172>
        {
          return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e059      	b.n	8003af2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2220      	movs	r2, #32
 8003a44:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	2241      	movs	r2, #65	; 0x41
 8003a4a:	2120      	movs	r1, #32
 8003a4c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	2240      	movs	r2, #64	; 0x40
 8003a52:	2100      	movs	r1, #0
 8003a54:	5499      	strb	r1, [r3, r2]

        return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e04b      	b.n	8003af2 <HAL_I2C_IsDeviceReady+0x226>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a5a:	683a      	ldr	r2, [r7, #0]
 8003a5c:	68f8      	ldr	r0, [r7, #12]
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	0013      	movs	r3, r2
 8003a64:	2200      	movs	r2, #0
 8003a66:	2120      	movs	r1, #32
 8003a68:	f000 f932 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d001      	beq.n	8003a74 <HAL_I2C_IsDeviceReady+0x1a8>
        {
          return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e03e      	b.n	8003af2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2210      	movs	r2, #16
 8003a7a:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	2220      	movs	r2, #32
 8003a82:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d119      	bne.n	8003ac0 <HAL_I2C_IsDeviceReady+0x1f4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685a      	ldr	r2, [r3, #4]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	2180      	movs	r1, #128	; 0x80
 8003a98:	01c9      	lsls	r1, r1, #7
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	9300      	str	r3, [sp, #0]
 8003aa6:	0013      	movs	r3, r2
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2120      	movs	r1, #32
 8003aac:	f000 f910 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003ab0:	1e03      	subs	r3, r0, #0
 8003ab2:	d001      	beq.n	8003ab8 <HAL_I2C_IsDeviceReady+0x1ec>
        {
          return HAL_ERROR;
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e01c      	b.n	8003af2 <HAL_I2C_IsDeviceReady+0x226>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2220      	movs	r2, #32
 8003abe:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	3301      	adds	r3, #1
 8003ac4:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d900      	bls.n	8003ad0 <HAL_I2C_IsDeviceReady+0x204>
 8003ace:	e72e      	b.n	800392e <HAL_I2C_IsDeviceReady+0x62>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2241      	movs	r2, #65	; 0x41
 8003ad4:	2120      	movs	r1, #32
 8003ad6:	5499      	strb	r1, [r3, r2]

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003adc:	2220      	movs	r2, #32
 8003ade:	431a      	orrs	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2240      	movs	r2, #64	; 0x40
 8003ae8:	2100      	movs	r1, #0
 8003aea:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e000      	b.n	8003af2 <HAL_I2C_IsDeviceReady+0x226>
  }
  else
  {
    return HAL_BUSY;
 8003af0:	2302      	movs	r3, #2
  }
}
 8003af2:	0018      	movs	r0, r3
 8003af4:	46bd      	mov	sp, r7
 8003af6:	b008      	add	sp, #32
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	46c0      	nop			; (mov r8, r8)
 8003afc:	02002000 	.word	0x02002000

08003b00 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003b00:	b5b0      	push	{r4, r5, r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af02      	add	r7, sp, #8
 8003b06:	60f8      	str	r0, [r7, #12]
 8003b08:	000c      	movs	r4, r1
 8003b0a:	0010      	movs	r0, r2
 8003b0c:	0019      	movs	r1, r3
 8003b0e:	250a      	movs	r5, #10
 8003b10:	197b      	adds	r3, r7, r5
 8003b12:	1c22      	adds	r2, r4, #0
 8003b14:	801a      	strh	r2, [r3, #0]
 8003b16:	2308      	movs	r3, #8
 8003b18:	18fb      	adds	r3, r7, r3
 8003b1a:	1c02      	adds	r2, r0, #0
 8003b1c:	801a      	strh	r2, [r3, #0]
 8003b1e:	1dbb      	adds	r3, r7, #6
 8003b20:	1c0a      	adds	r2, r1, #0
 8003b22:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003b24:	1dbb      	adds	r3, r7, #6
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	b2da      	uxtb	r2, r3
 8003b2a:	2380      	movs	r3, #128	; 0x80
 8003b2c:	045c      	lsls	r4, r3, #17
 8003b2e:	197b      	adds	r3, r7, r5
 8003b30:	8819      	ldrh	r1, [r3, #0]
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	4b23      	ldr	r3, [pc, #140]	; (8003bc4 <I2C_RequestMemoryWrite+0xc4>)
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	0023      	movs	r3, r4
 8003b3a:	f000 f9fd 	bl	8003f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b40:	6a39      	ldr	r1, [r7, #32]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	0018      	movs	r0, r3
 8003b46:	f000 f902 	bl	8003d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b4a:	1e03      	subs	r3, r0, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e033      	b.n	8003bba <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b52:	1dbb      	adds	r3, r7, #6
 8003b54:	881b      	ldrh	r3, [r3, #0]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b5a:	2308      	movs	r3, #8
 8003b5c:	18fb      	adds	r3, r7, r3
 8003b5e:	881b      	ldrh	r3, [r3, #0]
 8003b60:	b2da      	uxtb	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	629a      	str	r2, [r3, #40]	; 0x28
 8003b68:	e019      	b.n	8003b9e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003b6a:	2308      	movs	r3, #8
 8003b6c:	18fb      	adds	r3, r7, r3
 8003b6e:	881b      	ldrh	r3, [r3, #0]
 8003b70:	0a1b      	lsrs	r3, r3, #8
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	b2da      	uxtb	r2, r3
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b7e:	6a39      	ldr	r1, [r7, #32]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	0018      	movs	r0, r3
 8003b84:	f000 f8e3 	bl	8003d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8003b88:	1e03      	subs	r3, r0, #0
 8003b8a:	d001      	beq.n	8003b90 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e014      	b.n	8003bba <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003b90:	2308      	movs	r3, #8
 8003b92:	18fb      	adds	r3, r7, r3
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003b9e:	6a3a      	ldr	r2, [r7, #32]
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	0013      	movs	r3, r2
 8003ba8:	2200      	movs	r2, #0
 8003baa:	2180      	movs	r1, #128	; 0x80
 8003bac:	f000 f890 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003bb0:	1e03      	subs	r3, r0, #0
 8003bb2:	d001      	beq.n	8003bb8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e000      	b.n	8003bba <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	0018      	movs	r0, r3
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	b004      	add	sp, #16
 8003bc0:	bdb0      	pop	{r4, r5, r7, pc}
 8003bc2:	46c0      	nop			; (mov r8, r8)
 8003bc4:	80002000 	.word	0x80002000

08003bc8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003bc8:	b5b0      	push	{r4, r5, r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	000c      	movs	r4, r1
 8003bd2:	0010      	movs	r0, r2
 8003bd4:	0019      	movs	r1, r3
 8003bd6:	250a      	movs	r5, #10
 8003bd8:	197b      	adds	r3, r7, r5
 8003bda:	1c22      	adds	r2, r4, #0
 8003bdc:	801a      	strh	r2, [r3, #0]
 8003bde:	2308      	movs	r3, #8
 8003be0:	18fb      	adds	r3, r7, r3
 8003be2:	1c02      	adds	r2, r0, #0
 8003be4:	801a      	strh	r2, [r3, #0]
 8003be6:	1dbb      	adds	r3, r7, #6
 8003be8:	1c0a      	adds	r2, r1, #0
 8003bea:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003bec:	1dbb      	adds	r3, r7, #6
 8003bee:	881b      	ldrh	r3, [r3, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	197b      	adds	r3, r7, r5
 8003bf4:	8819      	ldrh	r1, [r3, #0]
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	4b23      	ldr	r3, [pc, #140]	; (8003c88 <I2C_RequestMemoryRead+0xc0>)
 8003bfa:	9300      	str	r3, [sp, #0]
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	f000 f99b 	bl	8003f38 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c04:	6a39      	ldr	r1, [r7, #32]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	0018      	movs	r0, r3
 8003c0a:	f000 f8a0 	bl	8003d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c0e:	1e03      	subs	r3, r0, #0
 8003c10:	d001      	beq.n	8003c16 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e033      	b.n	8003c7e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c16:	1dbb      	adds	r3, r7, #6
 8003c18:	881b      	ldrh	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d107      	bne.n	8003c2e <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c1e:	2308      	movs	r3, #8
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b2da      	uxtb	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8003c2c:	e019      	b.n	8003c62 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003c2e:	2308      	movs	r3, #8
 8003c30:	18fb      	adds	r3, r7, r3
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	0a1b      	lsrs	r3, r3, #8
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	b2da      	uxtb	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c42:	6a39      	ldr	r1, [r7, #32]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 f881 	bl	8003d4e <I2C_WaitOnTXISFlagUntilTimeout>
 8003c4c:	1e03      	subs	r3, r0, #0
 8003c4e:	d001      	beq.n	8003c54 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	e014      	b.n	8003c7e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003c54:	2308      	movs	r3, #8
 8003c56:	18fb      	adds	r3, r7, r3
 8003c58:	881b      	ldrh	r3, [r3, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003c62:	6a3a      	ldr	r2, [r7, #32]
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	0013      	movs	r3, r2
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2140      	movs	r1, #64	; 0x40
 8003c70:	f000 f82e 	bl	8003cd0 <I2C_WaitOnFlagUntilTimeout>
 8003c74:	1e03      	subs	r3, r0, #0
 8003c76:	d001      	beq.n	8003c7c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e000      	b.n	8003c7e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	0018      	movs	r0, r3
 8003c80:	46bd      	mov	sp, r7
 8003c82:	b004      	add	sp, #16
 8003c84:	bdb0      	pop	{r4, r5, r7, pc}
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	80002000 	.word	0x80002000

08003c8c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2202      	movs	r2, #2
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d103      	bne.n	8003caa <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d007      	beq.n	8003cc8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699a      	ldr	r2, [r3, #24]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2101      	movs	r1, #1
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	619a      	str	r2, [r3, #24]
  }
}
 8003cc8:	46c0      	nop			; (mov r8, r8)
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	b002      	add	sp, #8
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	1dfb      	adds	r3, r7, #7
 8003cde:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ce0:	e021      	b.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	d01e      	beq.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce8:	f7ff f85e 	bl	8002da8 <HAL_GetTick>
 8003cec:	0002      	movs	r2, r0
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	1ad3      	subs	r3, r2, r3
 8003cf2:	683a      	ldr	r2, [r7, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d302      	bcc.n	8003cfe <I2C_WaitOnFlagUntilTimeout+0x2e>
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d113      	bne.n	8003d26 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d02:	2220      	movs	r2, #32
 8003d04:	431a      	orrs	r2, r3
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2241      	movs	r2, #65	; 0x41
 8003d0e:	2120      	movs	r1, #32
 8003d10:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2242      	movs	r2, #66	; 0x42
 8003d16:	2100      	movs	r1, #0
 8003d18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2240      	movs	r2, #64	; 0x40
 8003d1e:	2100      	movs	r1, #0
 8003d20:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e00f      	b.n	8003d46 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	4013      	ands	r3, r2
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	425a      	negs	r2, r3
 8003d36:	4153      	adcs	r3, r2
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	001a      	movs	r2, r3
 8003d3c:	1dfb      	adds	r3, r7, #7
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d0ce      	beq.n	8003ce2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	0018      	movs	r0, r3
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	b004      	add	sp, #16
 8003d4c:	bd80      	pop	{r7, pc}

08003d4e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d4e:	b580      	push	{r7, lr}
 8003d50:	b084      	sub	sp, #16
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	60f8      	str	r0, [r7, #12]
 8003d56:	60b9      	str	r1, [r7, #8]
 8003d58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003d5a:	e02b      	b.n	8003db4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68b9      	ldr	r1, [r7, #8]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	0018      	movs	r0, r3
 8003d64:	f000 f86e 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003d68:	1e03      	subs	r3, r0, #0
 8003d6a:	d001      	beq.n	8003d70 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e029      	b.n	8003dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	3301      	adds	r3, #1
 8003d74:	d01e      	beq.n	8003db4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d76:	f7ff f817 	bl	8002da8 <HAL_GetTick>
 8003d7a:	0002      	movs	r2, r0
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	1ad3      	subs	r3, r2, r3
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d302      	bcc.n	8003d8c <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d113      	bne.n	8003db4 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d90:	2220      	movs	r2, #32
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2241      	movs	r2, #65	; 0x41
 8003d9c:	2120      	movs	r1, #32
 8003d9e:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	2242      	movs	r2, #66	; 0x42
 8003da4:	2100      	movs	r1, #0
 8003da6:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2240      	movs	r2, #64	; 0x40
 8003dac:	2100      	movs	r1, #0
 8003dae:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e007      	b.n	8003dc4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2202      	movs	r2, #2
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d1cc      	bne.n	8003d5c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	b004      	add	sp, #16
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b084      	sub	sp, #16
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003dd8:	e028      	b.n	8003e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68b9      	ldr	r1, [r7, #8]
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f000 f82f 	bl	8003e44 <I2C_IsAcknowledgeFailed>
 8003de6:	1e03      	subs	r3, r0, #0
 8003de8:	d001      	beq.n	8003dee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	e026      	b.n	8003e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dee:	f7fe ffdb 	bl	8002da8 <HAL_GetTick>
 8003df2:	0002      	movs	r2, r0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	429a      	cmp	r2, r3
 8003dfc:	d302      	bcc.n	8003e04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d113      	bne.n	8003e2c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	2220      	movs	r2, #32
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2241      	movs	r2, #65	; 0x41
 8003e14:	2120      	movs	r1, #32
 8003e16:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2242      	movs	r2, #66	; 0x42
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2240      	movs	r2, #64	; 0x40
 8003e24:	2100      	movs	r1, #0
 8003e26:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e007      	b.n	8003e3c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	2220      	movs	r2, #32
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d1cf      	bne.n	8003dda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b004      	add	sp, #16
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2210      	movs	r2, #16
 8003e58:	4013      	ands	r3, r2
 8003e5a:	2b10      	cmp	r3, #16
 8003e5c:	d164      	bne.n	8003f28 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685a      	ldr	r2, [r3, #4]
 8003e64:	2380      	movs	r3, #128	; 0x80
 8003e66:	049b      	lsls	r3, r3, #18
 8003e68:	401a      	ands	r2, r3
 8003e6a:	2380      	movs	r3, #128	; 0x80
 8003e6c:	049b      	lsls	r3, r3, #18
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d02b      	beq.n	8003eca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2180      	movs	r1, #128	; 0x80
 8003e7e:	01c9      	lsls	r1, r1, #7
 8003e80:	430a      	orrs	r2, r1
 8003e82:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003e84:	e021      	b.n	8003eca <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	3301      	adds	r3, #1
 8003e8a:	d01e      	beq.n	8003eca <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e8c:	f7fe ff8c 	bl	8002da8 <HAL_GetTick>
 8003e90:	0002      	movs	r2, r0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <I2C_IsAcknowledgeFailed+0x5e>
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d113      	bne.n	8003eca <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	2220      	movs	r2, #32
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2241      	movs	r2, #65	; 0x41
 8003eb2:	2120      	movs	r1, #32
 8003eb4:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2242      	movs	r2, #66	; 0x42
 8003eba:	2100      	movs	r1, #0
 8003ebc:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2240      	movs	r2, #64	; 0x40
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e02f      	b.n	8003f2a <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2220      	movs	r2, #32
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d1d6      	bne.n	8003e86 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	2210      	movs	r2, #16
 8003ede:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2220      	movs	r2, #32
 8003ee6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	0018      	movs	r0, r3
 8003eec:	f7ff fece 	bl	8003c8c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	685a      	ldr	r2, [r3, #4]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	490e      	ldr	r1, [pc, #56]	; (8003f34 <I2C_IsAcknowledgeFailed+0xf0>)
 8003efc:	400a      	ands	r2, r1
 8003efe:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f04:	2204      	movs	r2, #4
 8003f06:	431a      	orrs	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2241      	movs	r2, #65	; 0x41
 8003f10:	2120      	movs	r1, #32
 8003f12:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2242      	movs	r2, #66	; 0x42
 8003f18:	2100      	movs	r1, #0
 8003f1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2240      	movs	r2, #64	; 0x40
 8003f20:	2100      	movs	r1, #0
 8003f22:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e000      	b.n	8003f2a <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	0018      	movs	r0, r3
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b004      	add	sp, #16
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	46c0      	nop			; (mov r8, r8)
 8003f34:	fe00e800 	.word	0xfe00e800

08003f38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003f38:	b590      	push	{r4, r7, lr}
 8003f3a:	b085      	sub	sp, #20
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	0008      	movs	r0, r1
 8003f42:	0011      	movs	r1, r2
 8003f44:	607b      	str	r3, [r7, #4]
 8003f46:	240a      	movs	r4, #10
 8003f48:	193b      	adds	r3, r7, r4
 8003f4a:	1c02      	adds	r2, r0, #0
 8003f4c:	801a      	strh	r2, [r3, #0]
 8003f4e:	2009      	movs	r0, #9
 8003f50:	183b      	adds	r3, r7, r0
 8003f52:	1c0a      	adds	r2, r1, #0
 8003f54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	6a3a      	ldr	r2, [r7, #32]
 8003f5e:	0d51      	lsrs	r1, r2, #21
 8003f60:	2280      	movs	r2, #128	; 0x80
 8003f62:	00d2      	lsls	r2, r2, #3
 8003f64:	400a      	ands	r2, r1
 8003f66:	490e      	ldr	r1, [pc, #56]	; (8003fa0 <I2C_TransferConfig+0x68>)
 8003f68:	430a      	orrs	r2, r1
 8003f6a:	43d2      	mvns	r2, r2
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	0011      	movs	r1, r2
 8003f70:	193b      	adds	r3, r7, r4
 8003f72:	881b      	ldrh	r3, [r3, #0]
 8003f74:	059b      	lsls	r3, r3, #22
 8003f76:	0d9a      	lsrs	r2, r3, #22
 8003f78:	183b      	adds	r3, r7, r0
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	0418      	lsls	r0, r3, #16
 8003f7e:	23ff      	movs	r3, #255	; 0xff
 8003f80:	041b      	lsls	r3, r3, #16
 8003f82:	4003      	ands	r3, r0
 8003f84:	431a      	orrs	r2, r3
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	431a      	orrs	r2, r3
 8003f8a:	6a3b      	ldr	r3, [r7, #32]
 8003f8c:	431a      	orrs	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8003f96:	46c0      	nop			; (mov r8, r8)
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	b005      	add	sp, #20
 8003f9c:	bd90      	pop	{r4, r7, pc}
 8003f9e:	46c0      	nop			; (mov r8, r8)
 8003fa0:	03ff63ff 	.word	0x03ff63ff

08003fa4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2241      	movs	r2, #65	; 0x41
 8003fb2:	5c9b      	ldrb	r3, [r3, r2]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d138      	bne.n	800402c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2240      	movs	r2, #64	; 0x40
 8003fbe:	5c9b      	ldrb	r3, [r3, r2]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e032      	b.n	800402e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2240      	movs	r2, #64	; 0x40
 8003fcc:	2101      	movs	r1, #1
 8003fce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2241      	movs	r2, #65	; 0x41
 8003fd4:	2124      	movs	r1, #36	; 0x24
 8003fd6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	438a      	bics	r2, r1
 8003fe6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4911      	ldr	r1, [pc, #68]	; (8004038 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6819      	ldr	r1, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	430a      	orrs	r2, r1
 8004006:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2101      	movs	r1, #1
 8004014:	430a      	orrs	r2, r1
 8004016:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2241      	movs	r2, #65	; 0x41
 800401c:	2120      	movs	r1, #32
 800401e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2240      	movs	r2, #64	; 0x40
 8004024:	2100      	movs	r1, #0
 8004026:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800402c:	2302      	movs	r3, #2
  }
}
 800402e:	0018      	movs	r0, r3
 8004030:	46bd      	mov	sp, r7
 8004032:	b002      	add	sp, #8
 8004034:	bd80      	pop	{r7, pc}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	ffffefff 	.word	0xffffefff

0800403c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2241      	movs	r2, #65	; 0x41
 800404a:	5c9b      	ldrb	r3, [r3, r2]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b20      	cmp	r3, #32
 8004050:	d139      	bne.n	80040c6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2240      	movs	r2, #64	; 0x40
 8004056:	5c9b      	ldrb	r3, [r3, r2]
 8004058:	2b01      	cmp	r3, #1
 800405a:	d101      	bne.n	8004060 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800405c:	2302      	movs	r3, #2
 800405e:	e033      	b.n	80040c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2240      	movs	r2, #64	; 0x40
 8004064:	2101      	movs	r1, #1
 8004066:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2241      	movs	r2, #65	; 0x41
 800406c:	2124      	movs	r1, #36	; 0x24
 800406e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2101      	movs	r1, #1
 800407c:	438a      	bics	r2, r1
 800407e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4a11      	ldr	r2, [pc, #68]	; (80040d0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800408c:	4013      	ands	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	021b      	lsls	r3, r3, #8
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68fa      	ldr	r2, [r7, #12]
 80040a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2101      	movs	r1, #1
 80040ae:	430a      	orrs	r2, r1
 80040b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2241      	movs	r2, #65	; 0x41
 80040b6:	2120      	movs	r1, #32
 80040b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2240      	movs	r2, #64	; 0x40
 80040be:	2100      	movs	r1, #0
 80040c0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80040c2:	2300      	movs	r3, #0
 80040c4:	e000      	b.n	80040c8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80040c6:	2302      	movs	r3, #2
  }
}
 80040c8:	0018      	movs	r0, r3
 80040ca:	46bd      	mov	sp, r7
 80040cc:	b004      	add	sp, #16
 80040ce:	bd80      	pop	{r7, pc}
 80040d0:	fffff0ff 	.word	0xfffff0ff

080040d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040d4:	b5b0      	push	{r4, r5, r7, lr}
 80040d6:	b08a      	sub	sp, #40	; 0x28
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d102      	bne.n	80040e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	f000 fb6c 	bl	80047c0 <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040e8:	4bc8      	ldr	r3, [pc, #800]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	220c      	movs	r2, #12
 80040ee:	4013      	ands	r3, r2
 80040f0:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040f2:	4bc6      	ldr	r3, [pc, #792]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80040f4:	68da      	ldr	r2, [r3, #12]
 80040f6:	2380      	movs	r3, #128	; 0x80
 80040f8:	025b      	lsls	r3, r3, #9
 80040fa:	4013      	ands	r3, r2
 80040fc:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	2201      	movs	r2, #1
 8004104:	4013      	ands	r3, r2
 8004106:	d100      	bne.n	800410a <HAL_RCC_OscConfig+0x36>
 8004108:	e07d      	b.n	8004206 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d007      	beq.n	8004120 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004110:	69fb      	ldr	r3, [r7, #28]
 8004112:	2b0c      	cmp	r3, #12
 8004114:	d112      	bne.n	800413c <HAL_RCC_OscConfig+0x68>
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	2380      	movs	r3, #128	; 0x80
 800411a:	025b      	lsls	r3, r3, #9
 800411c:	429a      	cmp	r2, r3
 800411e:	d10d      	bne.n	800413c <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	4bba      	ldr	r3, [pc, #744]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	2380      	movs	r3, #128	; 0x80
 8004126:	029b      	lsls	r3, r3, #10
 8004128:	4013      	ands	r3, r2
 800412a:	d100      	bne.n	800412e <HAL_RCC_OscConfig+0x5a>
 800412c:	e06a      	b.n	8004204 <HAL_RCC_OscConfig+0x130>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d166      	bne.n	8004204 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	f000 fb42 	bl	80047c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	2380      	movs	r3, #128	; 0x80
 8004142:	025b      	lsls	r3, r3, #9
 8004144:	429a      	cmp	r2, r3
 8004146:	d107      	bne.n	8004158 <HAL_RCC_OscConfig+0x84>
 8004148:	4bb0      	ldr	r3, [pc, #704]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	4baf      	ldr	r3, [pc, #700]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800414e:	2180      	movs	r1, #128	; 0x80
 8004150:	0249      	lsls	r1, r1, #9
 8004152:	430a      	orrs	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e027      	b.n	80041a8 <HAL_RCC_OscConfig+0xd4>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	23a0      	movs	r3, #160	; 0xa0
 800415e:	02db      	lsls	r3, r3, #11
 8004160:	429a      	cmp	r2, r3
 8004162:	d10e      	bne.n	8004182 <HAL_RCC_OscConfig+0xae>
 8004164:	4ba9      	ldr	r3, [pc, #676]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	4ba8      	ldr	r3, [pc, #672]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800416a:	2180      	movs	r1, #128	; 0x80
 800416c:	02c9      	lsls	r1, r1, #11
 800416e:	430a      	orrs	r2, r1
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	4ba6      	ldr	r3, [pc, #664]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4ba5      	ldr	r3, [pc, #660]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004178:	2180      	movs	r1, #128	; 0x80
 800417a:	0249      	lsls	r1, r1, #9
 800417c:	430a      	orrs	r2, r1
 800417e:	601a      	str	r2, [r3, #0]
 8004180:	e012      	b.n	80041a8 <HAL_RCC_OscConfig+0xd4>
 8004182:	4ba2      	ldr	r3, [pc, #648]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	4ba1      	ldr	r3, [pc, #644]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004188:	49a1      	ldr	r1, [pc, #644]	; (8004410 <HAL_RCC_OscConfig+0x33c>)
 800418a:	400a      	ands	r2, r1
 800418c:	601a      	str	r2, [r3, #0]
 800418e:	4b9f      	ldr	r3, [pc, #636]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	025b      	lsls	r3, r3, #9
 8004196:	4013      	ands	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4b9b      	ldr	r3, [pc, #620]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	4b9a      	ldr	r3, [pc, #616]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80041a2:	499c      	ldr	r1, [pc, #624]	; (8004414 <HAL_RCC_OscConfig+0x340>)
 80041a4:	400a      	ands	r2, r1
 80041a6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d014      	beq.n	80041da <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b0:	f7fe fdfa 	bl	8002da8 <HAL_GetTick>
 80041b4:	0003      	movs	r3, r0
 80041b6:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041b8:	e008      	b.n	80041cc <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041ba:	f7fe fdf5 	bl	8002da8 <HAL_GetTick>
 80041be:	0002      	movs	r2, r0
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	2b64      	cmp	r3, #100	; 0x64
 80041c6:	d901      	bls.n	80041cc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80041c8:	2303      	movs	r3, #3
 80041ca:	e2f9      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80041cc:	4b8f      	ldr	r3, [pc, #572]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	2380      	movs	r3, #128	; 0x80
 80041d2:	029b      	lsls	r3, r3, #10
 80041d4:	4013      	ands	r3, r2
 80041d6:	d0f0      	beq.n	80041ba <HAL_RCC_OscConfig+0xe6>
 80041d8:	e015      	b.n	8004206 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041da:	f7fe fde5 	bl	8002da8 <HAL_GetTick>
 80041de:	0003      	movs	r3, r0
 80041e0:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e4:	f7fe fde0 	bl	8002da8 <HAL_GetTick>
 80041e8:	0002      	movs	r2, r0
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	; 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e2e4      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80041f6:	4b85      	ldr	r3, [pc, #532]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	2380      	movs	r3, #128	; 0x80
 80041fc:	029b      	lsls	r3, r3, #10
 80041fe:	4013      	ands	r3, r2
 8004200:	d1f0      	bne.n	80041e4 <HAL_RCC_OscConfig+0x110>
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004204:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2202      	movs	r2, #2
 800420c:	4013      	ands	r3, r2
 800420e:	d100      	bne.n	8004212 <HAL_RCC_OscConfig+0x13e>
 8004210:	e099      	b.n	8004346 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8004218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800421a:	2220      	movs	r2, #32
 800421c:	4013      	ands	r3, r2
 800421e:	d009      	beq.n	8004234 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 8004220:	4b7a      	ldr	r3, [pc, #488]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	4b79      	ldr	r3, [pc, #484]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004226:	2120      	movs	r1, #32
 8004228:	430a      	orrs	r2, r1
 800422a:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	2220      	movs	r2, #32
 8004230:	4393      	bics	r3, r2
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	2b04      	cmp	r3, #4
 8004238:	d005      	beq.n	8004246 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	2b0c      	cmp	r3, #12
 800423e:	d13e      	bne.n	80042be <HAL_RCC_OscConfig+0x1ea>
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d13b      	bne.n	80042be <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8004246:	4b71      	ldr	r3, [pc, #452]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2204      	movs	r2, #4
 800424c:	4013      	ands	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_RCC_OscConfig+0x186>
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e2b2      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425a:	4b6c      	ldr	r3, [pc, #432]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	4a6e      	ldr	r2, [pc, #440]	; (8004418 <HAL_RCC_OscConfig+0x344>)
 8004260:	4013      	ands	r3, r2
 8004262:	0019      	movs	r1, r3
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	021a      	lsls	r2, r3, #8
 800426a:	4b68      	ldr	r3, [pc, #416]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800426c:	430a      	orrs	r2, r1
 800426e:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8004270:	4b66      	ldr	r3, [pc, #408]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2209      	movs	r2, #9
 8004276:	4393      	bics	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	4b64      	ldr	r3, [pc, #400]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800427c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427e:	430a      	orrs	r2, r1
 8004280:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004282:	f000 fbf9 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 8004286:	0001      	movs	r1, r0
 8004288:	4b60      	ldr	r3, [pc, #384]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	220f      	movs	r2, #15
 8004290:	4013      	ands	r3, r2
 8004292:	4a62      	ldr	r2, [pc, #392]	; (800441c <HAL_RCC_OscConfig+0x348>)
 8004294:	5cd3      	ldrb	r3, [r2, r3]
 8004296:	000a      	movs	r2, r1
 8004298:	40da      	lsrs	r2, r3
 800429a:	4b61      	ldr	r3, [pc, #388]	; (8004420 <HAL_RCC_OscConfig+0x34c>)
 800429c:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800429e:	4b61      	ldr	r3, [pc, #388]	; (8004424 <HAL_RCC_OscConfig+0x350>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2513      	movs	r5, #19
 80042a4:	197c      	adds	r4, r7, r5
 80042a6:	0018      	movs	r0, r3
 80042a8:	f7fe fd38 	bl	8002d1c <HAL_InitTick>
 80042ac:	0003      	movs	r3, r0
 80042ae:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80042b0:	197b      	adds	r3, r7, r5
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d046      	beq.n	8004346 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 80042b8:	197b      	adds	r3, r7, r5
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	e280      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80042be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d027      	beq.n	8004314 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80042c4:	4b51      	ldr	r3, [pc, #324]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2209      	movs	r2, #9
 80042ca:	4393      	bics	r3, r2
 80042cc:	0019      	movs	r1, r3
 80042ce:	4b4f      	ldr	r3, [pc, #316]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80042d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d2:	430a      	orrs	r2, r1
 80042d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042d6:	f7fe fd67 	bl	8002da8 <HAL_GetTick>
 80042da:	0003      	movs	r3, r0
 80042dc:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042de:	e008      	b.n	80042f2 <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042e0:	f7fe fd62 	bl	8002da8 <HAL_GetTick>
 80042e4:	0002      	movs	r2, r0
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d901      	bls.n	80042f2 <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e266      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80042f2:	4b46      	ldr	r3, [pc, #280]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	2204      	movs	r2, #4
 80042f8:	4013      	ands	r3, r2
 80042fa:	d0f1      	beq.n	80042e0 <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fc:	4b43      	ldr	r3, [pc, #268]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	4a45      	ldr	r2, [pc, #276]	; (8004418 <HAL_RCC_OscConfig+0x344>)
 8004302:	4013      	ands	r3, r2
 8004304:	0019      	movs	r1, r3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	021a      	lsls	r2, r3, #8
 800430c:	4b3f      	ldr	r3, [pc, #252]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800430e:	430a      	orrs	r2, r1
 8004310:	605a      	str	r2, [r3, #4]
 8004312:	e018      	b.n	8004346 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004314:	4b3d      	ldr	r3, [pc, #244]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	4b3c      	ldr	r3, [pc, #240]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800431a:	2101      	movs	r1, #1
 800431c:	438a      	bics	r2, r1
 800431e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004320:	f7fe fd42 	bl	8002da8 <HAL_GetTick>
 8004324:	0003      	movs	r3, r0
 8004326:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800432a:	f7fe fd3d 	bl	8002da8 <HAL_GetTick>
 800432e:	0002      	movs	r2, r0
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e241      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800433c:	4b33      	ldr	r3, [pc, #204]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2204      	movs	r2, #4
 8004342:	4013      	ands	r3, r2
 8004344:	d1f1      	bne.n	800432a <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2210      	movs	r2, #16
 800434c:	4013      	ands	r3, r2
 800434e:	d100      	bne.n	8004352 <HAL_RCC_OscConfig+0x27e>
 8004350:	e0a1      	b.n	8004496 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004352:	69fb      	ldr	r3, [r7, #28]
 8004354:	2b00      	cmp	r3, #0
 8004356:	d140      	bne.n	80043da <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004358:	4b2c      	ldr	r3, [pc, #176]	; (800440c <HAL_RCC_OscConfig+0x338>)
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	2380      	movs	r3, #128	; 0x80
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	4013      	ands	r3, r2
 8004362:	d005      	beq.n	8004370 <HAL_RCC_OscConfig+0x29c>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	e227      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004370:	4b26      	ldr	r3, [pc, #152]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	4a2c      	ldr	r2, [pc, #176]	; (8004428 <HAL_RCC_OscConfig+0x354>)
 8004376:	4013      	ands	r3, r2
 8004378:	0019      	movs	r1, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1a      	ldr	r2, [r3, #32]
 800437e:	4b23      	ldr	r3, [pc, #140]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004380:	430a      	orrs	r2, r1
 8004382:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004384:	4b21      	ldr	r3, [pc, #132]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	021b      	lsls	r3, r3, #8
 800438a:	0a19      	lsrs	r1, r3, #8
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	061a      	lsls	r2, r3, #24
 8004392:	4b1e      	ldr	r3, [pc, #120]	; (800440c <HAL_RCC_OscConfig+0x338>)
 8004394:	430a      	orrs	r2, r1
 8004396:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	0b5b      	lsrs	r3, r3, #13
 800439e:	3301      	adds	r3, #1
 80043a0:	2280      	movs	r2, #128	; 0x80
 80043a2:	0212      	lsls	r2, r2, #8
 80043a4:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80043a6:	4b19      	ldr	r3, [pc, #100]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	210f      	movs	r1, #15
 80043ae:	400b      	ands	r3, r1
 80043b0:	491a      	ldr	r1, [pc, #104]	; (800441c <HAL_RCC_OscConfig+0x348>)
 80043b2:	5ccb      	ldrb	r3, [r1, r3]
 80043b4:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80043b6:	4b1a      	ldr	r3, [pc, #104]	; (8004420 <HAL_RCC_OscConfig+0x34c>)
 80043b8:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80043ba:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <HAL_RCC_OscConfig+0x350>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2513      	movs	r5, #19
 80043c0:	197c      	adds	r4, r7, r5
 80043c2:	0018      	movs	r0, r3
 80043c4:	f7fe fcaa 	bl	8002d1c <HAL_InitTick>
 80043c8:	0003      	movs	r3, r0
 80043ca:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80043cc:	197b      	adds	r3, r7, r5
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d060      	beq.n	8004496 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 80043d4:	197b      	adds	r3, r7, r5
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	e1f2      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d03f      	beq.n	8004462 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_OscConfig+0x338>)
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	0049      	lsls	r1, r1, #1
 80043ec:	430a      	orrs	r2, r1
 80043ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fe fcda 	bl	8002da8 <HAL_GetTick>
 80043f4:	0003      	movs	r3, r0
 80043f6:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80043f8:	e018      	b.n	800442c <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043fa:	f7fe fcd5 	bl	8002da8 <HAL_GetTick>
 80043fe:	0002      	movs	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d911      	bls.n	800442c <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e1d9      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
 800440c:	40021000 	.word	0x40021000
 8004410:	fffeffff 	.word	0xfffeffff
 8004414:	fffbffff 	.word	0xfffbffff
 8004418:	ffffe0ff 	.word	0xffffe0ff
 800441c:	08008fec 	.word	0x08008fec
 8004420:	20000008 	.word	0x20000008
 8004424:	2000000c 	.word	0x2000000c
 8004428:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800442c:	4bc9      	ldr	r3, [pc, #804]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	2380      	movs	r3, #128	; 0x80
 8004432:	009b      	lsls	r3, r3, #2
 8004434:	4013      	ands	r3, r2
 8004436:	d0e0      	beq.n	80043fa <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004438:	4bc6      	ldr	r3, [pc, #792]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	4ac6      	ldr	r2, [pc, #792]	; (8004758 <HAL_RCC_OscConfig+0x684>)
 800443e:	4013      	ands	r3, r2
 8004440:	0019      	movs	r1, r3
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1a      	ldr	r2, [r3, #32]
 8004446:	4bc3      	ldr	r3, [pc, #780]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004448:	430a      	orrs	r2, r1
 800444a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800444c:	4bc1      	ldr	r3, [pc, #772]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	0a19      	lsrs	r1, r3, #8
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	061a      	lsls	r2, r3, #24
 800445a:	4bbe      	ldr	r3, [pc, #760]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 800445c:	430a      	orrs	r2, r1
 800445e:	605a      	str	r2, [r3, #4]
 8004460:	e019      	b.n	8004496 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004462:	4bbc      	ldr	r3, [pc, #752]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	4bbb      	ldr	r3, [pc, #748]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004468:	49bc      	ldr	r1, [pc, #752]	; (800475c <HAL_RCC_OscConfig+0x688>)
 800446a:	400a      	ands	r2, r1
 800446c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800446e:	f7fe fc9b 	bl	8002da8 <HAL_GetTick>
 8004472:	0003      	movs	r3, r0
 8004474:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004478:	f7fe fc96 	bl	8002da8 <HAL_GetTick>
 800447c:	0002      	movs	r2, r0
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e19a      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800448a:	4bb2      	ldr	r3, [pc, #712]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	2380      	movs	r3, #128	; 0x80
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	4013      	ands	r3, r2
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2208      	movs	r2, #8
 800449c:	4013      	ands	r3, r2
 800449e:	d036      	beq.n	800450e <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	695b      	ldr	r3, [r3, #20]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d019      	beq.n	80044dc <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80044a8:	4baa      	ldr	r3, [pc, #680]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80044aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044ac:	4ba9      	ldr	r3, [pc, #676]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80044ae:	2101      	movs	r1, #1
 80044b0:	430a      	orrs	r2, r1
 80044b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b4:	f7fe fc78 	bl	8002da8 <HAL_GetTick>
 80044b8:	0003      	movs	r3, r0
 80044ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044be:	f7fe fc73 	bl	8002da8 <HAL_GetTick>
 80044c2:	0002      	movs	r2, r0
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e177      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80044d0:	4ba0      	ldr	r3, [pc, #640]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80044d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d4:	2202      	movs	r2, #2
 80044d6:	4013      	ands	r3, r2
 80044d8:	d0f1      	beq.n	80044be <HAL_RCC_OscConfig+0x3ea>
 80044da:	e018      	b.n	800450e <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044dc:	4b9d      	ldr	r3, [pc, #628]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80044de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80044e0:	4b9c      	ldr	r3, [pc, #624]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80044e2:	2101      	movs	r1, #1
 80044e4:	438a      	bics	r2, r1
 80044e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e8:	f7fe fc5e 	bl	8002da8 <HAL_GetTick>
 80044ec:	0003      	movs	r3, r0
 80044ee:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80044f0:	e008      	b.n	8004504 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80044f2:	f7fe fc59 	bl	8002da8 <HAL_GetTick>
 80044f6:	0002      	movs	r2, r0
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	2b02      	cmp	r3, #2
 80044fe:	d901      	bls.n	8004504 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 8004500:	2303      	movs	r3, #3
 8004502:	e15d      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004504:	4b93      	ldr	r3, [pc, #588]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004508:	2202      	movs	r2, #2
 800450a:	4013      	ands	r3, r2
 800450c:	d1f1      	bne.n	80044f2 <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2204      	movs	r2, #4
 8004514:	4013      	ands	r3, r2
 8004516:	d100      	bne.n	800451a <HAL_RCC_OscConfig+0x446>
 8004518:	e0ae      	b.n	8004678 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800451a:	2023      	movs	r0, #35	; 0x23
 800451c:	183b      	adds	r3, r7, r0
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004522:	4b8c      	ldr	r3, [pc, #560]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	055b      	lsls	r3, r3, #21
 800452a:	4013      	ands	r3, r2
 800452c:	d109      	bne.n	8004542 <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800452e:	4b89      	ldr	r3, [pc, #548]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004532:	4b88      	ldr	r3, [pc, #544]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004534:	2180      	movs	r1, #128	; 0x80
 8004536:	0549      	lsls	r1, r1, #21
 8004538:	430a      	orrs	r2, r1
 800453a:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800453c:	183b      	adds	r3, r7, r0
 800453e:	2201      	movs	r2, #1
 8004540:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004542:	4b87      	ldr	r3, [pc, #540]	; (8004760 <HAL_RCC_OscConfig+0x68c>)
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	2380      	movs	r3, #128	; 0x80
 8004548:	005b      	lsls	r3, r3, #1
 800454a:	4013      	ands	r3, r2
 800454c:	d11a      	bne.n	8004584 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800454e:	4b84      	ldr	r3, [pc, #528]	; (8004760 <HAL_RCC_OscConfig+0x68c>)
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	4b83      	ldr	r3, [pc, #524]	; (8004760 <HAL_RCC_OscConfig+0x68c>)
 8004554:	2180      	movs	r1, #128	; 0x80
 8004556:	0049      	lsls	r1, r1, #1
 8004558:	430a      	orrs	r2, r1
 800455a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800455c:	f7fe fc24 	bl	8002da8 <HAL_GetTick>
 8004560:	0003      	movs	r3, r0
 8004562:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004564:	e008      	b.n	8004578 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004566:	f7fe fc1f 	bl	8002da8 <HAL_GetTick>
 800456a:	0002      	movs	r2, r0
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	2b64      	cmp	r3, #100	; 0x64
 8004572:	d901      	bls.n	8004578 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8004574:	2303      	movs	r3, #3
 8004576:	e123      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004578:	4b79      	ldr	r3, [pc, #484]	; (8004760 <HAL_RCC_OscConfig+0x68c>)
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	2380      	movs	r3, #128	; 0x80
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	4013      	ands	r3, r2
 8004582:	d0f0      	beq.n	8004566 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	2380      	movs	r3, #128	; 0x80
 800458a:	005b      	lsls	r3, r3, #1
 800458c:	429a      	cmp	r2, r3
 800458e:	d107      	bne.n	80045a0 <HAL_RCC_OscConfig+0x4cc>
 8004590:	4b70      	ldr	r3, [pc, #448]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004592:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004594:	4b6f      	ldr	r3, [pc, #444]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004596:	2180      	movs	r1, #128	; 0x80
 8004598:	0049      	lsls	r1, r1, #1
 800459a:	430a      	orrs	r2, r1
 800459c:	651a      	str	r2, [r3, #80]	; 0x50
 800459e:	e031      	b.n	8004604 <HAL_RCC_OscConfig+0x530>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d10c      	bne.n	80045c2 <HAL_RCC_OscConfig+0x4ee>
 80045a8:	4b6a      	ldr	r3, [pc, #424]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045ac:	4b69      	ldr	r3, [pc, #420]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045ae:	496b      	ldr	r1, [pc, #428]	; (800475c <HAL_RCC_OscConfig+0x688>)
 80045b0:	400a      	ands	r2, r1
 80045b2:	651a      	str	r2, [r3, #80]	; 0x50
 80045b4:	4b67      	ldr	r3, [pc, #412]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045b8:	4b66      	ldr	r3, [pc, #408]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045ba:	496a      	ldr	r1, [pc, #424]	; (8004764 <HAL_RCC_OscConfig+0x690>)
 80045bc:	400a      	ands	r2, r1
 80045be:	651a      	str	r2, [r3, #80]	; 0x50
 80045c0:	e020      	b.n	8004604 <HAL_RCC_OscConfig+0x530>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	23a0      	movs	r3, #160	; 0xa0
 80045c8:	00db      	lsls	r3, r3, #3
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d10e      	bne.n	80045ec <HAL_RCC_OscConfig+0x518>
 80045ce:	4b61      	ldr	r3, [pc, #388]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045d2:	4b60      	ldr	r3, [pc, #384]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045d4:	2180      	movs	r1, #128	; 0x80
 80045d6:	00c9      	lsls	r1, r1, #3
 80045d8:	430a      	orrs	r2, r1
 80045da:	651a      	str	r2, [r3, #80]	; 0x50
 80045dc:	4b5d      	ldr	r3, [pc, #372]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045e0:	4b5c      	ldr	r3, [pc, #368]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045e2:	2180      	movs	r1, #128	; 0x80
 80045e4:	0049      	lsls	r1, r1, #1
 80045e6:	430a      	orrs	r2, r1
 80045e8:	651a      	str	r2, [r3, #80]	; 0x50
 80045ea:	e00b      	b.n	8004604 <HAL_RCC_OscConfig+0x530>
 80045ec:	4b59      	ldr	r3, [pc, #356]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045f0:	4b58      	ldr	r3, [pc, #352]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045f2:	495a      	ldr	r1, [pc, #360]	; (800475c <HAL_RCC_OscConfig+0x688>)
 80045f4:	400a      	ands	r2, r1
 80045f6:	651a      	str	r2, [r3, #80]	; 0x50
 80045f8:	4b56      	ldr	r3, [pc, #344]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045fc:	4b55      	ldr	r3, [pc, #340]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80045fe:	4959      	ldr	r1, [pc, #356]	; (8004764 <HAL_RCC_OscConfig+0x690>)
 8004600:	400a      	ands	r2, r1
 8004602:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d015      	beq.n	8004638 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800460c:	f7fe fbcc 	bl	8002da8 <HAL_GetTick>
 8004610:	0003      	movs	r3, r0
 8004612:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004614:	e009      	b.n	800462a <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fe fbc7 	bl	8002da8 <HAL_GetTick>
 800461a:	0002      	movs	r2, r0
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	4a51      	ldr	r2, [pc, #324]	; (8004768 <HAL_RCC_OscConfig+0x694>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e0ca      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800462a:	4b4a      	ldr	r3, [pc, #296]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 800462c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800462e:	2380      	movs	r3, #128	; 0x80
 8004630:	009b      	lsls	r3, r3, #2
 8004632:	4013      	ands	r3, r2
 8004634:	d0ef      	beq.n	8004616 <HAL_RCC_OscConfig+0x542>
 8004636:	e014      	b.n	8004662 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004638:	f7fe fbb6 	bl	8002da8 <HAL_GetTick>
 800463c:	0003      	movs	r3, r0
 800463e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004640:	e009      	b.n	8004656 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004642:	f7fe fbb1 	bl	8002da8 <HAL_GetTick>
 8004646:	0002      	movs	r2, r0
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	1ad3      	subs	r3, r2, r3
 800464c:	4a46      	ldr	r2, [pc, #280]	; (8004768 <HAL_RCC_OscConfig+0x694>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d901      	bls.n	8004656 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 8004652:	2303      	movs	r3, #3
 8004654:	e0b4      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004656:	4b3f      	ldr	r3, [pc, #252]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004658:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800465a:	2380      	movs	r3, #128	; 0x80
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4013      	ands	r3, r2
 8004660:	d1ef      	bne.n	8004642 <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004662:	2323      	movs	r3, #35	; 0x23
 8004664:	18fb      	adds	r3, r7, r3
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	2b01      	cmp	r3, #1
 800466a:	d105      	bne.n	8004678 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800466c:	4b39      	ldr	r3, [pc, #228]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 800466e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004670:	4b38      	ldr	r3, [pc, #224]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004672:	493e      	ldr	r1, [pc, #248]	; (800476c <HAL_RCC_OscConfig+0x698>)
 8004674:	400a      	ands	r2, r1
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	2b00      	cmp	r3, #0
 800467e:	d100      	bne.n	8004682 <HAL_RCC_OscConfig+0x5ae>
 8004680:	e09d      	b.n	80047be <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	2b0c      	cmp	r3, #12
 8004686:	d100      	bne.n	800468a <HAL_RCC_OscConfig+0x5b6>
 8004688:	e076      	b.n	8004778 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	2b02      	cmp	r3, #2
 8004690:	d145      	bne.n	800471e <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004692:	4b30      	ldr	r3, [pc, #192]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b2f      	ldr	r3, [pc, #188]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004698:	4935      	ldr	r1, [pc, #212]	; (8004770 <HAL_RCC_OscConfig+0x69c>)
 800469a:	400a      	ands	r2, r1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800469e:	f7fe fb83 	bl	8002da8 <HAL_GetTick>
 80046a2:	0003      	movs	r3, r0
 80046a4:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046a8:	f7fe fb7e 	bl	8002da8 <HAL_GetTick>
 80046ac:	0002      	movs	r2, r0
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e082      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80046ba:	4b26      	ldr	r3, [pc, #152]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	2380      	movs	r3, #128	; 0x80
 80046c0:	049b      	lsls	r3, r3, #18
 80046c2:	4013      	ands	r3, r2
 80046c4:	d1f0      	bne.n	80046a8 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80046c6:	4b23      	ldr	r3, [pc, #140]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	4a2a      	ldr	r2, [pc, #168]	; (8004774 <HAL_RCC_OscConfig+0x6a0>)
 80046cc:	4013      	ands	r3, r2
 80046ce:	0019      	movs	r1, r3
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	431a      	orrs	r2, r3
 80046e0:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80046e2:	430a      	orrs	r2, r1
 80046e4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046e6:	4b1b      	ldr	r3, [pc, #108]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b1a      	ldr	r3, [pc, #104]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 80046ec:	2180      	movs	r1, #128	; 0x80
 80046ee:	0449      	lsls	r1, r1, #17
 80046f0:	430a      	orrs	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f4:	f7fe fb58 	bl	8002da8 <HAL_GetTick>
 80046f8:	0003      	movs	r3, r0
 80046fa:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80046fc:	e008      	b.n	8004710 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046fe:	f7fe fb53 	bl	8002da8 <HAL_GetTick>
 8004702:	0002      	movs	r2, r0
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e057      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8004710:	4b10      	ldr	r3, [pc, #64]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	049b      	lsls	r3, r3, #18
 8004718:	4013      	ands	r3, r2
 800471a:	d0f0      	beq.n	80046fe <HAL_RCC_OscConfig+0x62a>
 800471c:	e04f      	b.n	80047be <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471e:	4b0d      	ldr	r3, [pc, #52]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b0c      	ldr	r3, [pc, #48]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004724:	4912      	ldr	r1, [pc, #72]	; (8004770 <HAL_RCC_OscConfig+0x69c>)
 8004726:	400a      	ands	r2, r1
 8004728:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472a:	f7fe fb3d 	bl	8002da8 <HAL_GetTick>
 800472e:	0003      	movs	r3, r0
 8004730:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004734:	f7fe fb38 	bl	8002da8 <HAL_GetTick>
 8004738:	0002      	movs	r2, r0
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e03c      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8004746:	4b03      	ldr	r3, [pc, #12]	; (8004754 <HAL_RCC_OscConfig+0x680>)
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	2380      	movs	r3, #128	; 0x80
 800474c:	049b      	lsls	r3, r3, #18
 800474e:	4013      	ands	r3, r2
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x660>
 8004752:	e034      	b.n	80047be <HAL_RCC_OscConfig+0x6ea>
 8004754:	40021000 	.word	0x40021000
 8004758:	ffff1fff 	.word	0xffff1fff
 800475c:	fffffeff 	.word	0xfffffeff
 8004760:	40007000 	.word	0x40007000
 8004764:	fffffbff 	.word	0xfffffbff
 8004768:	00001388 	.word	0x00001388
 800476c:	efffffff 	.word	0xefffffff
 8004770:	feffffff 	.word	0xfeffffff
 8004774:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800477c:	2b01      	cmp	r3, #1
 800477e:	d101      	bne.n	8004784 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e01d      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004784:	4b10      	ldr	r3, [pc, #64]	; (80047c8 <HAL_RCC_OscConfig+0x6f4>)
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800478a:	69ba      	ldr	r2, [r7, #24]
 800478c:	2380      	movs	r3, #128	; 0x80
 800478e:	025b      	lsls	r3, r3, #9
 8004790:	401a      	ands	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004796:	429a      	cmp	r2, r3
 8004798:	d10f      	bne.n	80047ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	23f0      	movs	r3, #240	; 0xf0
 800479e:	039b      	lsls	r3, r3, #14
 80047a0:	401a      	ands	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d107      	bne.n	80047ba <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80047aa:	69ba      	ldr	r2, [r7, #24]
 80047ac:	23c0      	movs	r3, #192	; 0xc0
 80047ae:	041b      	lsls	r3, r3, #16
 80047b0:	401a      	ands	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d001      	beq.n	80047be <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 80047ba:	2301      	movs	r3, #1
 80047bc:	e000      	b.n	80047c0 <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	0018      	movs	r0, r3
 80047c2:	46bd      	mov	sp, r7
 80047c4:	b00a      	add	sp, #40	; 0x28
 80047c6:	bdb0      	pop	{r4, r5, r7, pc}
 80047c8:	40021000 	.word	0x40021000

080047cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047cc:	b5b0      	push	{r4, r5, r7, lr}
 80047ce:	b084      	sub	sp, #16
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047dc:	2301      	movs	r3, #1
 80047de:	e128      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047e0:	4b96      	ldr	r3, [pc, #600]	; (8004a3c <HAL_RCC_ClockConfig+0x270>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2201      	movs	r2, #1
 80047e6:	4013      	ands	r3, r2
 80047e8:	683a      	ldr	r2, [r7, #0]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d91e      	bls.n	800482c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ee:	4b93      	ldr	r3, [pc, #588]	; (8004a3c <HAL_RCC_ClockConfig+0x270>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2201      	movs	r2, #1
 80047f4:	4393      	bics	r3, r2
 80047f6:	0019      	movs	r1, r3
 80047f8:	4b90      	ldr	r3, [pc, #576]	; (8004a3c <HAL_RCC_ClockConfig+0x270>)
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	430a      	orrs	r2, r1
 80047fe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004800:	f7fe fad2 	bl	8002da8 <HAL_GetTick>
 8004804:	0003      	movs	r3, r0
 8004806:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004808:	e009      	b.n	800481e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800480a:	f7fe facd 	bl	8002da8 <HAL_GetTick>
 800480e:	0002      	movs	r2, r0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	4a8a      	ldr	r2, [pc, #552]	; (8004a40 <HAL_RCC_ClockConfig+0x274>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d901      	bls.n	800481e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e109      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800481e:	4b87      	ldr	r3, [pc, #540]	; (8004a3c <HAL_RCC_ClockConfig+0x270>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	4013      	ands	r3, r2
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	429a      	cmp	r2, r3
 800482a:	d1ee      	bne.n	800480a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2202      	movs	r2, #2
 8004832:	4013      	ands	r3, r2
 8004834:	d009      	beq.n	800484a <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004836:	4b83      	ldr	r3, [pc, #524]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	22f0      	movs	r2, #240	; 0xf0
 800483c:	4393      	bics	r3, r2
 800483e:	0019      	movs	r1, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	689a      	ldr	r2, [r3, #8]
 8004844:	4b7f      	ldr	r3, [pc, #508]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 8004846:	430a      	orrs	r2, r1
 8004848:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2201      	movs	r2, #1
 8004850:	4013      	ands	r3, r2
 8004852:	d100      	bne.n	8004856 <HAL_RCC_ClockConfig+0x8a>
 8004854:	e089      	b.n	800496a <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800485e:	4b79      	ldr	r3, [pc, #484]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	2380      	movs	r3, #128	; 0x80
 8004864:	029b      	lsls	r3, r3, #10
 8004866:	4013      	ands	r3, r2
 8004868:	d120      	bne.n	80048ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e0e1      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b03      	cmp	r3, #3
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004876:	4b73      	ldr	r3, [pc, #460]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	2380      	movs	r3, #128	; 0x80
 800487c:	049b      	lsls	r3, r3, #18
 800487e:	4013      	ands	r3, r2
 8004880:	d114      	bne.n	80048ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e0d5      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2b01      	cmp	r3, #1
 800488c:	d106      	bne.n	800489c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800488e:	4b6d      	ldr	r3, [pc, #436]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	2204      	movs	r2, #4
 8004894:	4013      	ands	r3, r2
 8004896:	d109      	bne.n	80048ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	e0ca      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800489c:	4b69      	ldr	r3, [pc, #420]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	2380      	movs	r3, #128	; 0x80
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	4013      	ands	r3, r2
 80048a6:	d101      	bne.n	80048ac <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e0c2      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048ac:	4b65      	ldr	r3, [pc, #404]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	2203      	movs	r2, #3
 80048b2:	4393      	bics	r3, r2
 80048b4:	0019      	movs	r1, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685a      	ldr	r2, [r3, #4]
 80048ba:	4b62      	ldr	r3, [pc, #392]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 80048bc:	430a      	orrs	r2, r1
 80048be:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048c0:	f7fe fa72 	bl	8002da8 <HAL_GetTick>
 80048c4:	0003      	movs	r3, r0
 80048c6:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b02      	cmp	r3, #2
 80048ce:	d111      	bne.n	80048f4 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048d0:	e009      	b.n	80048e6 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048d2:	f7fe fa69 	bl	8002da8 <HAL_GetTick>
 80048d6:	0002      	movs	r2, r0
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	4a58      	ldr	r2, [pc, #352]	; (8004a40 <HAL_RCC_ClockConfig+0x274>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d901      	bls.n	80048e6 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80048e2:	2303      	movs	r3, #3
 80048e4:	e0a5      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80048e6:	4b57      	ldr	r3, [pc, #348]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	220c      	movs	r2, #12
 80048ec:	4013      	ands	r3, r2
 80048ee:	2b08      	cmp	r3, #8
 80048f0:	d1ef      	bne.n	80048d2 <HAL_RCC_ClockConfig+0x106>
 80048f2:	e03a      	b.n	800496a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d111      	bne.n	8004920 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048fc:	e009      	b.n	8004912 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048fe:	f7fe fa53 	bl	8002da8 <HAL_GetTick>
 8004902:	0002      	movs	r2, r0
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	1ad3      	subs	r3, r2, r3
 8004908:	4a4d      	ldr	r2, [pc, #308]	; (8004a40 <HAL_RCC_ClockConfig+0x274>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d901      	bls.n	8004912 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800490e:	2303      	movs	r3, #3
 8004910:	e08f      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004912:	4b4c      	ldr	r3, [pc, #304]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	220c      	movs	r2, #12
 8004918:	4013      	ands	r3, r2
 800491a:	2b0c      	cmp	r3, #12
 800491c:	d1ef      	bne.n	80048fe <HAL_RCC_ClockConfig+0x132>
 800491e:	e024      	b.n	800496a <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	2b01      	cmp	r3, #1
 8004926:	d11b      	bne.n	8004960 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004928:	e009      	b.n	800493e <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800492a:	f7fe fa3d 	bl	8002da8 <HAL_GetTick>
 800492e:	0002      	movs	r2, r0
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	4a42      	ldr	r2, [pc, #264]	; (8004a40 <HAL_RCC_ClockConfig+0x274>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d901      	bls.n	800493e <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e079      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800493e:	4b41      	ldr	r3, [pc, #260]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	220c      	movs	r2, #12
 8004944:	4013      	ands	r3, r2
 8004946:	2b04      	cmp	r3, #4
 8004948:	d1ef      	bne.n	800492a <HAL_RCC_ClockConfig+0x15e>
 800494a:	e00e      	b.n	800496a <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800494c:	f7fe fa2c 	bl	8002da8 <HAL_GetTick>
 8004950:	0002      	movs	r2, r0
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	4a3a      	ldr	r2, [pc, #232]	; (8004a40 <HAL_RCC_ClockConfig+0x274>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d901      	bls.n	8004960 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e068      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8004960:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 8004962:	68db      	ldr	r3, [r3, #12]
 8004964:	220c      	movs	r2, #12
 8004966:	4013      	ands	r3, r2
 8004968:	d1f0      	bne.n	800494c <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800496a:	4b34      	ldr	r3, [pc, #208]	; (8004a3c <HAL_RCC_ClockConfig+0x270>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	2201      	movs	r2, #1
 8004970:	4013      	ands	r3, r2
 8004972:	683a      	ldr	r2, [r7, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d21e      	bcs.n	80049b6 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004978:	4b30      	ldr	r3, [pc, #192]	; (8004a3c <HAL_RCC_ClockConfig+0x270>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2201      	movs	r2, #1
 800497e:	4393      	bics	r3, r2
 8004980:	0019      	movs	r1, r3
 8004982:	4b2e      	ldr	r3, [pc, #184]	; (8004a3c <HAL_RCC_ClockConfig+0x270>)
 8004984:	683a      	ldr	r2, [r7, #0]
 8004986:	430a      	orrs	r2, r1
 8004988:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800498a:	f7fe fa0d 	bl	8002da8 <HAL_GetTick>
 800498e:	0003      	movs	r3, r0
 8004990:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004992:	e009      	b.n	80049a8 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004994:	f7fe fa08 	bl	8002da8 <HAL_GetTick>
 8004998:	0002      	movs	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	4a28      	ldr	r2, [pc, #160]	; (8004a40 <HAL_RCC_ClockConfig+0x274>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d901      	bls.n	80049a8 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80049a4:	2303      	movs	r3, #3
 80049a6:	e044      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049a8:	4b24      	ldr	r3, [pc, #144]	; (8004a3c <HAL_RCC_ClockConfig+0x270>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2201      	movs	r2, #1
 80049ae:	4013      	ands	r3, r2
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	429a      	cmp	r2, r3
 80049b4:	d1ee      	bne.n	8004994 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2204      	movs	r2, #4
 80049bc:	4013      	ands	r3, r2
 80049be:	d009      	beq.n	80049d4 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049c0:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 80049c2:	68db      	ldr	r3, [r3, #12]
 80049c4:	4a20      	ldr	r2, [pc, #128]	; (8004a48 <HAL_RCC_ClockConfig+0x27c>)
 80049c6:	4013      	ands	r3, r2
 80049c8:	0019      	movs	r1, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 80049d0:	430a      	orrs	r2, r1
 80049d2:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2208      	movs	r2, #8
 80049da:	4013      	ands	r3, r2
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049de:	4b19      	ldr	r3, [pc, #100]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 80049e0:	68db      	ldr	r3, [r3, #12]
 80049e2:	4a1a      	ldr	r2, [pc, #104]	; (8004a4c <HAL_RCC_ClockConfig+0x280>)
 80049e4:	4013      	ands	r3, r2
 80049e6:	0019      	movs	r1, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	691b      	ldr	r3, [r3, #16]
 80049ec:	00da      	lsls	r2, r3, #3
 80049ee:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 80049f0:	430a      	orrs	r2, r1
 80049f2:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80049f4:	f000 f840 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 80049f8:	0001      	movs	r1, r0
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_RCC_ClockConfig+0x278>)
 80049fc:	68db      	ldr	r3, [r3, #12]
 80049fe:	091b      	lsrs	r3, r3, #4
 8004a00:	220f      	movs	r2, #15
 8004a02:	4013      	ands	r3, r2
 8004a04:	4a12      	ldr	r2, [pc, #72]	; (8004a50 <HAL_RCC_ClockConfig+0x284>)
 8004a06:	5cd3      	ldrb	r3, [r2, r3]
 8004a08:	000a      	movs	r2, r1
 8004a0a:	40da      	lsrs	r2, r3
 8004a0c:	4b11      	ldr	r3, [pc, #68]	; (8004a54 <HAL_RCC_ClockConfig+0x288>)
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004a10:	4b11      	ldr	r3, [pc, #68]	; (8004a58 <HAL_RCC_ClockConfig+0x28c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	250b      	movs	r5, #11
 8004a16:	197c      	adds	r4, r7, r5
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f7fe f97f 	bl	8002d1c <HAL_InitTick>
 8004a1e:	0003      	movs	r3, r0
 8004a20:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8004a22:	197b      	adds	r3, r7, r5
 8004a24:	781b      	ldrb	r3, [r3, #0]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d002      	beq.n	8004a30 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8004a2a:	197b      	adds	r3, r7, r5
 8004a2c:	781b      	ldrb	r3, [r3, #0]
 8004a2e:	e000      	b.n	8004a32 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	0018      	movs	r0, r3
 8004a34:	46bd      	mov	sp, r7
 8004a36:	b004      	add	sp, #16
 8004a38:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	40022000 	.word	0x40022000
 8004a40:	00001388 	.word	0x00001388
 8004a44:	40021000 	.word	0x40021000
 8004a48:	fffff8ff 	.word	0xfffff8ff
 8004a4c:	ffffc7ff 	.word	0xffffc7ff
 8004a50:	08008fec 	.word	0x08008fec
 8004a54:	20000008 	.word	0x20000008
 8004a58:	2000000c 	.word	0x2000000c

08004a5c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M0+ NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8004a60:	4b04      	ldr	r3, [pc, #16]	; (8004a74 <HAL_RCC_EnableCSS+0x18>)
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	4b03      	ldr	r3, [pc, #12]	; (8004a74 <HAL_RCC_EnableCSS+0x18>)
 8004a66:	2180      	movs	r1, #128	; 0x80
 8004a68:	0309      	lsls	r1, r1, #12
 8004a6a:	430a      	orrs	r2, r1
 8004a6c:	601a      	str	r2, [r3, #0]
}
 8004a6e:	46c0      	nop			; (mov r8, r8)
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40021000 	.word	0x40021000

08004a78 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a78:	b5b0      	push	{r4, r5, r7, lr}
 8004a7a:	b08e      	sub	sp, #56	; 0x38
 8004a7c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8004a7e:	4b4c      	ldr	r3, [pc, #304]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a86:	230c      	movs	r3, #12
 8004a88:	4013      	ands	r3, r2
 8004a8a:	2b0c      	cmp	r3, #12
 8004a8c:	d014      	beq.n	8004ab8 <HAL_RCC_GetSysClockFreq+0x40>
 8004a8e:	d900      	bls.n	8004a92 <HAL_RCC_GetSysClockFreq+0x1a>
 8004a90:	e07b      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x112>
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d002      	beq.n	8004a9c <HAL_RCC_GetSysClockFreq+0x24>
 8004a96:	2b08      	cmp	r3, #8
 8004a98:	d00b      	beq.n	8004ab2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a9a:	e076      	b.n	8004b8a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004a9c:	4b44      	ldr	r3, [pc, #272]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	2210      	movs	r2, #16
 8004aa2:	4013      	ands	r3, r2
 8004aa4:	d002      	beq.n	8004aac <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8004aa6:	4b43      	ldr	r3, [pc, #268]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004aa8:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8004aaa:	e07c      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8004aac:	4b42      	ldr	r3, [pc, #264]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004aae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ab0:	e079      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ab2:	4b41      	ldr	r3, [pc, #260]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004ab4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ab6:	e076      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aba:	0c9a      	lsrs	r2, r3, #18
 8004abc:	230f      	movs	r3, #15
 8004abe:	401a      	ands	r2, r3
 8004ac0:	4b3e      	ldr	r3, [pc, #248]	; (8004bbc <HAL_RCC_GetSysClockFreq+0x144>)
 8004ac2:	5c9b      	ldrb	r3, [r3, r2]
 8004ac4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8004ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ac8:	0d9a      	lsrs	r2, r3, #22
 8004aca:	2303      	movs	r3, #3
 8004acc:	4013      	ands	r3, r2
 8004ace:	3301      	adds	r3, #1
 8004ad0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ad2:	4b37      	ldr	r3, [pc, #220]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	2380      	movs	r3, #128	; 0x80
 8004ad8:	025b      	lsls	r3, r3, #9
 8004ada:	4013      	ands	r3, r2
 8004adc:	d01a      	beq.n	8004b14 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ae0:	61bb      	str	r3, [r7, #24]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
 8004ae6:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004ae8:	2300      	movs	r3, #0
 8004aea:	69b8      	ldr	r0, [r7, #24]
 8004aec:	69f9      	ldr	r1, [r7, #28]
 8004aee:	f7fb fbc9 	bl	8000284 <__aeabi_lmul>
 8004af2:	0002      	movs	r2, r0
 8004af4:	000b      	movs	r3, r1
 8004af6:	0010      	movs	r0, r2
 8004af8:	0019      	movs	r1, r3
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	613b      	str	r3, [r7, #16]
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	f7fb fb9d 	bl	8000244 <__aeabi_uldivmod>
 8004b0a:	0002      	movs	r2, r0
 8004b0c:	000b      	movs	r3, r1
 8004b0e:	0013      	movs	r3, r2
 8004b10:	637b      	str	r3, [r7, #52]	; 0x34
 8004b12:	e037      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8004b14:	4b26      	ldr	r3, [pc, #152]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	2210      	movs	r2, #16
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	d01a      	beq.n	8004b54 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8004b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b20:	60bb      	str	r3, [r7, #8]
 8004b22:	2300      	movs	r3, #0
 8004b24:	60fb      	str	r3, [r7, #12]
 8004b26:	4a23      	ldr	r2, [pc, #140]	; (8004bb4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8004b28:	2300      	movs	r3, #0
 8004b2a:	68b8      	ldr	r0, [r7, #8]
 8004b2c:	68f9      	ldr	r1, [r7, #12]
 8004b2e:	f7fb fba9 	bl	8000284 <__aeabi_lmul>
 8004b32:	0002      	movs	r2, r0
 8004b34:	000b      	movs	r3, r1
 8004b36:	0010      	movs	r0, r2
 8004b38:	0019      	movs	r1, r3
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	603b      	str	r3, [r7, #0]
 8004b3e:	2300      	movs	r3, #0
 8004b40:	607b      	str	r3, [r7, #4]
 8004b42:	683a      	ldr	r2, [r7, #0]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f7fb fb7d 	bl	8000244 <__aeabi_uldivmod>
 8004b4a:	0002      	movs	r2, r0
 8004b4c:	000b      	movs	r3, r1
 8004b4e:	0013      	movs	r3, r2
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
 8004b52:	e017      	b.n	8004b84 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	0018      	movs	r0, r3
 8004b58:	2300      	movs	r3, #0
 8004b5a:	0019      	movs	r1, r3
 8004b5c:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <HAL_RCC_GetSysClockFreq+0x140>)
 8004b5e:	2300      	movs	r3, #0
 8004b60:	f7fb fb90 	bl	8000284 <__aeabi_lmul>
 8004b64:	0002      	movs	r2, r0
 8004b66:	000b      	movs	r3, r1
 8004b68:	0010      	movs	r0, r2
 8004b6a:	0019      	movs	r1, r3
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	001c      	movs	r4, r3
 8004b70:	2300      	movs	r3, #0
 8004b72:	001d      	movs	r5, r3
 8004b74:	0022      	movs	r2, r4
 8004b76:	002b      	movs	r3, r5
 8004b78:	f7fb fb64 	bl	8000244 <__aeabi_uldivmod>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	000b      	movs	r3, r1
 8004b80:	0013      	movs	r3, r2
 8004b82:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8004b84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004b88:	e00d      	b.n	8004ba6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_GetSysClockFreq+0x138>)
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	0b5b      	lsrs	r3, r3, #13
 8004b90:	2207      	movs	r2, #7
 8004b92:	4013      	ands	r3, r2
 8004b94:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	2280      	movs	r2, #128	; 0x80
 8004b9c:	0212      	lsls	r2, r2, #8
 8004b9e:	409a      	lsls	r2, r3
 8004ba0:	0013      	movs	r3, r2
 8004ba2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004ba4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004ba8:	0018      	movs	r0, r3
 8004baa:	46bd      	mov	sp, r7
 8004bac:	b00e      	add	sp, #56	; 0x38
 8004bae:	bdb0      	pop	{r4, r5, r7, pc}
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	003d0900 	.word	0x003d0900
 8004bb8:	00f42400 	.word	0x00f42400
 8004bbc:	08009004 	.word	0x08009004

08004bc0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004bc4:	4b02      	ldr	r3, [pc, #8]	; (8004bd0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
}
 8004bc8:	0018      	movs	r0, r3
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	46c0      	nop			; (mov r8, r8)
 8004bd0:	20000008 	.word	0x20000008

08004bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004bd8:	f7ff fff2 	bl	8004bc0 <HAL_RCC_GetHCLKFreq>
 8004bdc:	0001      	movs	r1, r0
 8004bde:	4b06      	ldr	r3, [pc, #24]	; (8004bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	0a1b      	lsrs	r3, r3, #8
 8004be4:	2207      	movs	r2, #7
 8004be6:	4013      	ands	r3, r2
 8004be8:	4a04      	ldr	r2, [pc, #16]	; (8004bfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004bea:	5cd3      	ldrb	r3, [r2, r3]
 8004bec:	40d9      	lsrs	r1, r3
 8004bee:	000b      	movs	r3, r1
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	40021000 	.word	0x40021000
 8004bfc:	08008ffc 	.word	0x08008ffc

08004c00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c04:	f7ff ffdc 	bl	8004bc0 <HAL_RCC_GetHCLKFreq>
 8004c08:	0001      	movs	r1, r0
 8004c0a:	4b06      	ldr	r3, [pc, #24]	; (8004c24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	0adb      	lsrs	r3, r3, #11
 8004c10:	2207      	movs	r2, #7
 8004c12:	4013      	ands	r3, r2
 8004c14:	4a04      	ldr	r2, [pc, #16]	; (8004c28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004c16:	5cd3      	ldrb	r3, [r2, r3]
 8004c18:	40d9      	lsrs	r1, r3
 8004c1a:	000b      	movs	r3, r1
}
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}
 8004c22:	46c0      	nop			; (mov r8, r8)
 8004c24:	40021000 	.word	0x40021000
 8004c28:	08008ffc 	.word	0x08008ffc

08004c2c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004c30:	4b08      	ldr	r3, [pc, #32]	; (8004c54 <HAL_RCC_NMI_IRQHandler+0x28>)
 8004c32:	695a      	ldr	r2, [r3, #20]
 8004c34:	2380      	movs	r3, #128	; 0x80
 8004c36:	005b      	lsls	r3, r3, #1
 8004c38:	401a      	ands	r2, r3
 8004c3a:	2380      	movs	r3, #128	; 0x80
 8004c3c:	005b      	lsls	r3, r3, #1
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d105      	bne.n	8004c4e <HAL_RCC_NMI_IRQHandler+0x22>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004c42:	f000 f809 	bl	8004c58 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004c46:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <HAL_RCC_NMI_IRQHandler+0x28>)
 8004c48:	2280      	movs	r2, #128	; 0x80
 8004c4a:	0052      	lsls	r2, r2, #1
 8004c4c:	619a      	str	r2, [r3, #24]
  }
}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	40021000 	.word	0x40021000

08004c58 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8004c5c:	46c0      	nop			; (mov r8, r8)
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}
	...

08004c64 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b086      	sub	sp, #24
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004c6c:	2017      	movs	r0, #23
 8004c6e:	183b      	adds	r3, r7, r0
 8004c70:	2200      	movs	r2, #0
 8004c72:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2220      	movs	r2, #32
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d100      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004c7e:	e0c2      	b.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c80:	4b91      	ldr	r3, [pc, #580]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c84:	2380      	movs	r3, #128	; 0x80
 8004c86:	055b      	lsls	r3, r3, #21
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d109      	bne.n	8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8c:	4b8e      	ldr	r3, [pc, #568]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c90:	4b8d      	ldr	r3, [pc, #564]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c92:	2180      	movs	r1, #128	; 0x80
 8004c94:	0549      	lsls	r1, r1, #21
 8004c96:	430a      	orrs	r2, r1
 8004c98:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004c9a:	183b      	adds	r3, r7, r0
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca0:	4b8a      	ldr	r3, [pc, #552]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ca2:	681a      	ldr	r2, [r3, #0]
 8004ca4:	2380      	movs	r3, #128	; 0x80
 8004ca6:	005b      	lsls	r3, r3, #1
 8004ca8:	4013      	ands	r3, r2
 8004caa:	d11a      	bne.n	8004ce2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cac:	4b87      	ldr	r3, [pc, #540]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	4b86      	ldr	r3, [pc, #536]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cb2:	2180      	movs	r1, #128	; 0x80
 8004cb4:	0049      	lsls	r1, r1, #1
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cba:	f7fe f875 	bl	8002da8 <HAL_GetTick>
 8004cbe:	0003      	movs	r3, r0
 8004cc0:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc4:	f7fe f870 	bl	8002da8 <HAL_GetTick>
 8004cc8:	0002      	movs	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b64      	cmp	r3, #100	; 0x64
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e0f3      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x25a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd6:	4b7d      	ldr	r3, [pc, #500]	; (8004ecc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	2380      	movs	r3, #128	; 0x80
 8004cdc:	005b      	lsls	r3, r3, #1
 8004cde:	4013      	ands	r3, r2
 8004ce0:	d0f0      	beq.n	8004cc4 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8004ce2:	4b79      	ldr	r3, [pc, #484]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	23c0      	movs	r3, #192	; 0xc0
 8004ce8:	039b      	lsls	r3, r3, #14
 8004cea:	4013      	ands	r3, r2
 8004cec:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	23c0      	movs	r3, #192	; 0xc0
 8004cf4:	039b      	lsls	r3, r3, #14
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d013      	beq.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685a      	ldr	r2, [r3, #4]
 8004d02:	23c0      	movs	r3, #192	; 0xc0
 8004d04:	029b      	lsls	r3, r3, #10
 8004d06:	401a      	ands	r2, r3
 8004d08:	23c0      	movs	r3, #192	; 0xc0
 8004d0a:	029b      	lsls	r3, r3, #10
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d10a      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004d10:	4b6d      	ldr	r3, [pc, #436]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	2380      	movs	r3, #128	; 0x80
 8004d16:	029b      	lsls	r3, r3, #10
 8004d18:	401a      	ands	r2, r3
 8004d1a:	2380      	movs	r3, #128	; 0x80
 8004d1c:	029b      	lsls	r3, r3, #10
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d101      	bne.n	8004d26 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0cb      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x25a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8004d26:	4b68      	ldr	r3, [pc, #416]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d28:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d2a:	23c0      	movs	r3, #192	; 0xc0
 8004d2c:	029b      	lsls	r3, r3, #10
 8004d2e:	4013      	ands	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d03b      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685a      	ldr	r2, [r3, #4]
 8004d3c:	23c0      	movs	r3, #192	; 0xc0
 8004d3e:	029b      	lsls	r3, r3, #10
 8004d40:	4013      	ands	r3, r2
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d033      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	4013      	ands	r3, r2
 8004d50:	d02e      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8004d52:	4b5d      	ldr	r3, [pc, #372]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	4a5e      	ldr	r2, [pc, #376]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004d58:	4013      	ands	r3, r2
 8004d5a:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d5c:	4b5a      	ldr	r3, [pc, #360]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d5e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d60:	4b59      	ldr	r3, [pc, #356]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d62:	2180      	movs	r1, #128	; 0x80
 8004d64:	0309      	lsls	r1, r1, #12
 8004d66:	430a      	orrs	r2, r1
 8004d68:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d6a:	4b57      	ldr	r3, [pc, #348]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d6e:	4b56      	ldr	r3, [pc, #344]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d70:	4958      	ldr	r1, [pc, #352]	; (8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004d72:	400a      	ands	r2, r1
 8004d74:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8004d76:	4b54      	ldr	r3, [pc, #336]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004d7c:	68fa      	ldr	r2, [r7, #12]
 8004d7e:	2380      	movs	r3, #128	; 0x80
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	4013      	ands	r3, r2
 8004d84:	d014      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d86:	f7fe f80f 	bl	8002da8 <HAL_GetTick>
 8004d8a:	0003      	movs	r3, r0
 8004d8c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d8e:	e009      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d90:	f7fe f80a 	bl	8002da8 <HAL_GetTick>
 8004d94:	0002      	movs	r2, r0
 8004d96:	693b      	ldr	r3, [r7, #16]
 8004d98:	1ad3      	subs	r3, r2, r3
 8004d9a:	4a4f      	ldr	r2, [pc, #316]	; (8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d901      	bls.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004da0:	2303      	movs	r3, #3
 8004da2:	e08c      	b.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x25a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004da4:	4b48      	ldr	r3, [pc, #288]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004da6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004da8:	2380      	movs	r3, #128	; 0x80
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4013      	ands	r3, r2
 8004dae:	d0ef      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	23c0      	movs	r3, #192	; 0xc0
 8004db6:	029b      	lsls	r3, r3, #10
 8004db8:	401a      	ands	r2, r3
 8004dba:	23c0      	movs	r3, #192	; 0xc0
 8004dbc:	029b      	lsls	r3, r3, #10
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCCEx_PeriphCLKConfig+0x178>
 8004dc2:	4b41      	ldr	r3, [pc, #260]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a45      	ldr	r2, [pc, #276]	; (8004edc <HAL_RCCEx_PeriphCLKConfig+0x278>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	0019      	movs	r1, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	23c0      	movs	r3, #192	; 0xc0
 8004dd2:	039b      	lsls	r3, r3, #14
 8004dd4:	401a      	ands	r2, r3
 8004dd6:	4b3c      	ldr	r3, [pc, #240]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	4b3a      	ldr	r3, [pc, #232]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dde:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	23c0      	movs	r3, #192	; 0xc0
 8004de6:	029b      	lsls	r3, r3, #10
 8004de8:	401a      	ands	r2, r3
 8004dea:	4b37      	ldr	r3, [pc, #220]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dec:	430a      	orrs	r2, r1
 8004dee:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004df0:	2317      	movs	r3, #23
 8004df2:	18fb      	adds	r3, r7, r3
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d105      	bne.n	8004e06 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfa:	4b33      	ldr	r3, [pc, #204]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfe:	4b32      	ldr	r3, [pc, #200]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e00:	4937      	ldr	r1, [pc, #220]	; (8004ee0 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8004e02:	400a      	ands	r2, r1
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	4013      	ands	r3, r2
 8004e0e:	d009      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e10:	4b2d      	ldr	r3, [pc, #180]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e14:	2203      	movs	r2, #3
 8004e16:	4393      	bics	r3, r2
 8004e18:	0019      	movs	r1, r3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	689a      	ldr	r2, [r3, #8]
 8004e1e:	4b2a      	ldr	r3, [pc, #168]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e20:	430a      	orrs	r2, r1
 8004e22:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	4013      	ands	r3, r2
 8004e2c:	d009      	beq.n	8004e42 <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e2e:	4b26      	ldr	r3, [pc, #152]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	220c      	movs	r2, #12
 8004e34:	4393      	bics	r3, r2
 8004e36:	0019      	movs	r1, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	68da      	ldr	r2, [r3, #12]
 8004e3c:	4b22      	ldr	r3, [pc, #136]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e3e:	430a      	orrs	r2, r1
 8004e40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2204      	movs	r2, #4
 8004e48:	4013      	ands	r3, r2
 8004e4a:	d009      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e4c:	4b1e      	ldr	r3, [pc, #120]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e50:	4a24      	ldr	r2, [pc, #144]	; (8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004e52:	4013      	ands	r3, r2
 8004e54:	0019      	movs	r1, r3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	4b1b      	ldr	r3, [pc, #108]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2208      	movs	r2, #8
 8004e66:	4013      	ands	r3, r2
 8004e68:	d009      	beq.n	8004e7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e6a:	4b17      	ldr	r3, [pc, #92]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	0019      	movs	r1, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	695a      	ldr	r2, [r3, #20]
 8004e78:	4b13      	ldr	r3, [pc, #76]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e7a:	430a      	orrs	r2, r1
 8004e7c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	2380      	movs	r3, #128	; 0x80
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	4013      	ands	r3, r2
 8004e88:	d009      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e8a:	4b0f      	ldr	r3, [pc, #60]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e8e:	4a10      	ldr	r2, [pc, #64]	; (8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004e90:	4013      	ands	r3, r2
 8004e92:	0019      	movs	r1, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	699a      	ldr	r2, [r3, #24]
 8004e98:	4b0b      	ldr	r3, [pc, #44]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004e9a:	430a      	orrs	r2, r1
 8004e9c:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2280      	movs	r2, #128	; 0x80
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	d009      	beq.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8004ea8:	4b07      	ldr	r3, [pc, #28]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eac:	4a0f      	ldr	r2, [pc, #60]	; (8004eec <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004eae:	4013      	ands	r3, r2
 8004eb0:	0019      	movs	r1, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	69da      	ldr	r2, [r3, #28]
 8004eb6:	4b04      	ldr	r3, [pc, #16]	; (8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	0018      	movs	r0, r3
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	b006      	add	sp, #24
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	46c0      	nop			; (mov r8, r8)
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	40007000 	.word	0x40007000
 8004ed0:	fffcffff 	.word	0xfffcffff
 8004ed4:	fff7ffff 	.word	0xfff7ffff
 8004ed8:	00001388 	.word	0x00001388
 8004edc:	ffcfffff 	.word	0xffcfffff
 8004ee0:	efffffff 	.word	0xefffffff
 8004ee4:	fffff3ff 	.word	0xfffff3ff
 8004ee8:	ffffcfff 	.word	0xffffcfff
 8004eec:	fff3ffff 	.word	0xfff3ffff

08004ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e083      	b.n	800500a <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	2382      	movs	r3, #130	; 0x82
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d009      	beq.n	8004f2a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	61da      	str	r2, [r3, #28]
 8004f1c:	e005      	b.n	8004f2a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2251      	movs	r2, #81	; 0x51
 8004f34:	5c9b      	ldrb	r3, [r3, r2]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2250      	movs	r2, #80	; 0x50
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7fd fda8 	bl	8002a9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2251      	movs	r2, #81	; 0x51
 8004f50:	2102      	movs	r1, #2
 8004f52:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2140      	movs	r1, #64	; 0x40
 8004f60:	438a      	bics	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	2382      	movs	r3, #130	; 0x82
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	401a      	ands	r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6899      	ldr	r1, [r3, #8]
 8004f72:	2384      	movs	r3, #132	; 0x84
 8004f74:	021b      	lsls	r3, r3, #8
 8004f76:	400b      	ands	r3, r1
 8004f78:	431a      	orrs	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68d9      	ldr	r1, [r3, #12]
 8004f7e:	2380      	movs	r3, #128	; 0x80
 8004f80:	011b      	lsls	r3, r3, #4
 8004f82:	400b      	ands	r3, r1
 8004f84:	431a      	orrs	r2, r3
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	691b      	ldr	r3, [r3, #16]
 8004f8a:	2102      	movs	r1, #2
 8004f8c:	400b      	ands	r3, r1
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	2101      	movs	r1, #1
 8004f96:	400b      	ands	r3, r1
 8004f98:	431a      	orrs	r2, r3
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6999      	ldr	r1, [r3, #24]
 8004f9e:	2380      	movs	r3, #128	; 0x80
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	400b      	ands	r3, r1
 8004fa4:	431a      	orrs	r2, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	2138      	movs	r1, #56	; 0x38
 8004fac:	400b      	ands	r3, r1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	2180      	movs	r1, #128	; 0x80
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	0011      	movs	r1, r2
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fc0:	2380      	movs	r3, #128	; 0x80
 8004fc2:	019b      	lsls	r3, r3, #6
 8004fc4:	401a      	ands	r2, r3
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	430a      	orrs	r2, r1
 8004fcc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	699b      	ldr	r3, [r3, #24]
 8004fd2:	0c1b      	lsrs	r3, r3, #16
 8004fd4:	2204      	movs	r2, #4
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	0019      	movs	r1, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fde:	2210      	movs	r2, #16
 8004fe0:	401a      	ands	r2, r3
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	69da      	ldr	r2, [r3, #28]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4907      	ldr	r1, [pc, #28]	; (8005014 <HAL_SPI_Init+0x124>)
 8004ff6:	400a      	ands	r2, r1
 8004ff8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2251      	movs	r2, #81	; 0x51
 8005004:	2101      	movs	r1, #1
 8005006:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005008:	2300      	movs	r3, #0
}
 800500a:	0018      	movs	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	b002      	add	sp, #8
 8005010:	bd80      	pop	{r7, pc}
 8005012:	46c0      	nop			; (mov r8, r8)
 8005014:	fffff7ff 	.word	0xfffff7ff

08005018 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	603b      	str	r3, [r7, #0]
 8005024:	1dbb      	adds	r3, r7, #6
 8005026:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005028:	231f      	movs	r3, #31
 800502a:	18fb      	adds	r3, r7, r3
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2250      	movs	r2, #80	; 0x50
 8005034:	5c9b      	ldrb	r3, [r3, r2]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_SPI_Transmit+0x26>
 800503a:	2302      	movs	r3, #2
 800503c:	e13e      	b.n	80052bc <HAL_SPI_Transmit+0x2a4>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2250      	movs	r2, #80	; 0x50
 8005042:	2101      	movs	r1, #1
 8005044:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005046:	f7fd feaf 	bl	8002da8 <HAL_GetTick>
 800504a:	0003      	movs	r3, r0
 800504c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800504e:	2316      	movs	r3, #22
 8005050:	18fb      	adds	r3, r7, r3
 8005052:	1dba      	adds	r2, r7, #6
 8005054:	8812      	ldrh	r2, [r2, #0]
 8005056:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2251      	movs	r2, #81	; 0x51
 800505c:	5c9b      	ldrb	r3, [r3, r2]
 800505e:	b2db      	uxtb	r3, r3
 8005060:	2b01      	cmp	r3, #1
 8005062:	d004      	beq.n	800506e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8005064:	231f      	movs	r3, #31
 8005066:	18fb      	adds	r3, r7, r3
 8005068:	2202      	movs	r2, #2
 800506a:	701a      	strb	r2, [r3, #0]
    goto error;
 800506c:	e11b      	b.n	80052a6 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d003      	beq.n	800507c <HAL_SPI_Transmit+0x64>
 8005074:	1dbb      	adds	r3, r7, #6
 8005076:	881b      	ldrh	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d104      	bne.n	8005086 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800507c:	231f      	movs	r3, #31
 800507e:	18fb      	adds	r3, r7, r3
 8005080:	2201      	movs	r2, #1
 8005082:	701a      	strb	r2, [r3, #0]
    goto error;
 8005084:	e10f      	b.n	80052a6 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2251      	movs	r2, #81	; 0x51
 800508a:	2103      	movs	r1, #3
 800508c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	1dba      	adds	r2, r7, #6
 800509e:	8812      	ldrh	r2, [r2, #0]
 80050a0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	1dba      	adds	r2, r7, #6
 80050a6:	8812      	ldrh	r2, [r2, #0]
 80050a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	2200      	movs	r2, #0
 80050ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2200      	movs	r2, #0
 80050ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	689a      	ldr	r2, [r3, #8]
 80050cc:	2380      	movs	r3, #128	; 0x80
 80050ce:	021b      	lsls	r3, r3, #8
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d110      	bne.n	80050f6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681a      	ldr	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	2140      	movs	r1, #64	; 0x40
 80050e0:	438a      	bics	r2, r1
 80050e2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2180      	movs	r1, #128	; 0x80
 80050f0:	01c9      	lsls	r1, r1, #7
 80050f2:	430a      	orrs	r2, r1
 80050f4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2240      	movs	r2, #64	; 0x40
 80050fe:	4013      	ands	r3, r2
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d007      	beq.n	8005114 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2140      	movs	r1, #64	; 0x40
 8005110:	430a      	orrs	r2, r1
 8005112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68da      	ldr	r2, [r3, #12]
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	429a      	cmp	r2, r3
 800511e:	d14e      	bne.n	80051be <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d004      	beq.n	8005132 <HAL_SPI_Transmit+0x11a>
 8005128:	2316      	movs	r3, #22
 800512a:	18fb      	adds	r3, r7, r3
 800512c:	881b      	ldrh	r3, [r3, #0]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d13f      	bne.n	80051b2 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005136:	881a      	ldrh	r2, [r3, #0]
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005142:	1c9a      	adds	r2, r3, #2
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800514c:	b29b      	uxth	r3, r3
 800514e:	3b01      	subs	r3, #1
 8005150:	b29a      	uxth	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005156:	e02c      	b.n	80051b2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	2202      	movs	r2, #2
 8005160:	4013      	ands	r3, r2
 8005162:	2b02      	cmp	r3, #2
 8005164:	d112      	bne.n	800518c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516a:	881a      	ldrh	r2, [r3, #0]
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005176:	1c9a      	adds	r2, r3, #2
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005180:	b29b      	uxth	r3, r3
 8005182:	3b01      	subs	r3, #1
 8005184:	b29a      	uxth	r2, r3
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	86da      	strh	r2, [r3, #54]	; 0x36
 800518a:	e012      	b.n	80051b2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800518c:	f7fd fe0c 	bl	8002da8 <HAL_GetTick>
 8005190:	0002      	movs	r2, r0
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	683a      	ldr	r2, [r7, #0]
 8005198:	429a      	cmp	r2, r3
 800519a:	d802      	bhi.n	80051a2 <HAL_SPI_Transmit+0x18a>
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	3301      	adds	r3, #1
 80051a0:	d102      	bne.n	80051a8 <HAL_SPI_Transmit+0x190>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d104      	bne.n	80051b2 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80051a8:	231f      	movs	r3, #31
 80051aa:	18fb      	adds	r3, r7, r3
 80051ac:	2203      	movs	r2, #3
 80051ae:	701a      	strb	r2, [r3, #0]
          goto error;
 80051b0:	e079      	b.n	80052a6 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1cd      	bne.n	8005158 <HAL_SPI_Transmit+0x140>
 80051bc:	e04f      	b.n	800525e <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d004      	beq.n	80051d0 <HAL_SPI_Transmit+0x1b8>
 80051c6:	2316      	movs	r3, #22
 80051c8:	18fb      	adds	r3, r7, r3
 80051ca:	881b      	ldrh	r3, [r3, #0]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d141      	bne.n	8005254 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	7812      	ldrb	r2, [r2, #0]
 80051dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e2:	1c5a      	adds	r2, r3, #1
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80051f6:	e02d      	b.n	8005254 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	2202      	movs	r2, #2
 8005200:	4013      	ands	r3, r2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d113      	bne.n	800522e <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	330c      	adds	r3, #12
 8005210:	7812      	ldrb	r2, [r2, #0]
 8005212:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005218:	1c5a      	adds	r2, r3, #1
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005222:	b29b      	uxth	r3, r3
 8005224:	3b01      	subs	r3, #1
 8005226:	b29a      	uxth	r2, r3
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	86da      	strh	r2, [r3, #54]	; 0x36
 800522c:	e012      	b.n	8005254 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800522e:	f7fd fdbb 	bl	8002da8 <HAL_GetTick>
 8005232:	0002      	movs	r2, r0
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	683a      	ldr	r2, [r7, #0]
 800523a:	429a      	cmp	r2, r3
 800523c:	d802      	bhi.n	8005244 <HAL_SPI_Transmit+0x22c>
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	3301      	adds	r3, #1
 8005242:	d102      	bne.n	800524a <HAL_SPI_Transmit+0x232>
 8005244:	683b      	ldr	r3, [r7, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d104      	bne.n	8005254 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800524a:	231f      	movs	r3, #31
 800524c:	18fb      	adds	r3, r7, r3
 800524e:	2203      	movs	r2, #3
 8005250:	701a      	strb	r2, [r3, #0]
          goto error;
 8005252:	e028      	b.n	80052a6 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1cc      	bne.n	80051f8 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	6839      	ldr	r1, [r7, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	0018      	movs	r0, r3
 8005266:	f000 fc07 	bl	8005a78 <SPI_EndRxTxTransaction>
 800526a:	1e03      	subs	r3, r0, #0
 800526c:	d002      	beq.n	8005274 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2220      	movs	r2, #32
 8005272:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800527c:	2300      	movs	r3, #0
 800527e:	613b      	str	r3, [r7, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	689b      	ldr	r3, [r3, #8]
 800528e:	613b      	str	r3, [r7, #16]
 8005290:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800529a:	231f      	movs	r3, #31
 800529c:	18fb      	adds	r3, r7, r3
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e000      	b.n	80052a6 <HAL_SPI_Transmit+0x28e>
  }

error:
 80052a4:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2251      	movs	r2, #81	; 0x51
 80052aa:	2101      	movs	r1, #1
 80052ac:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	2250      	movs	r2, #80	; 0x50
 80052b2:	2100      	movs	r1, #0
 80052b4:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80052b6:	231f      	movs	r3, #31
 80052b8:	18fb      	adds	r3, r7, r3
 80052ba:	781b      	ldrb	r3, [r3, #0]
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b008      	add	sp, #32
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b089      	sub	sp, #36	; 0x24
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	60b9      	str	r1, [r7, #8]
 80052ce:	603b      	str	r3, [r7, #0]
 80052d0:	1dbb      	adds	r3, r7, #6
 80052d2:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80052d4:	2317      	movs	r3, #23
 80052d6:	18fb      	adds	r3, r7, r3
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	685a      	ldr	r2, [r3, #4]
 80052e0:	2382      	movs	r3, #130	; 0x82
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d113      	bne.n	8005310 <HAL_SPI_Receive+0x4c>
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10f      	bne.n	8005310 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2251      	movs	r2, #81	; 0x51
 80052f4:	2104      	movs	r1, #4
 80052f6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80052f8:	1dbb      	adds	r3, r7, #6
 80052fa:	881c      	ldrh	r4, [r3, #0]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	68b9      	ldr	r1, [r7, #8]
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	0023      	movs	r3, r4
 8005308:	f000 f902 	bl	8005510 <HAL_SPI_TransmitReceive>
 800530c:	0003      	movs	r3, r0
 800530e:	e0f9      	b.n	8005504 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	2250      	movs	r2, #80	; 0x50
 8005314:	5c9b      	ldrb	r3, [r3, r2]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_SPI_Receive+0x5a>
 800531a:	2302      	movs	r3, #2
 800531c:	e0f2      	b.n	8005504 <HAL_SPI_Receive+0x240>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2250      	movs	r2, #80	; 0x50
 8005322:	2101      	movs	r1, #1
 8005324:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005326:	f7fd fd3f 	bl	8002da8 <HAL_GetTick>
 800532a:	0003      	movs	r3, r0
 800532c:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	2251      	movs	r2, #81	; 0x51
 8005332:	5c9b      	ldrb	r3, [r3, r2]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b01      	cmp	r3, #1
 8005338:	d004      	beq.n	8005344 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800533a:	2317      	movs	r3, #23
 800533c:	18fb      	adds	r3, r7, r3
 800533e:	2202      	movs	r2, #2
 8005340:	701a      	strb	r2, [r3, #0]
    goto error;
 8005342:	e0d4      	b.n	80054ee <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_SPI_Receive+0x8e>
 800534a:	1dbb      	adds	r3, r7, #6
 800534c:	881b      	ldrh	r3, [r3, #0]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d104      	bne.n	800535c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8005352:	2317      	movs	r3, #23
 8005354:	18fb      	adds	r3, r7, r3
 8005356:	2201      	movs	r2, #1
 8005358:	701a      	strb	r2, [r3, #0]
    goto error;
 800535a:	e0c8      	b.n	80054ee <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2251      	movs	r2, #81	; 0x51
 8005360:	2104      	movs	r1, #4
 8005362:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	68ba      	ldr	r2, [r7, #8]
 800536e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1dba      	adds	r2, r7, #6
 8005374:	8812      	ldrh	r2, [r2, #0]
 8005376:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1dba      	adds	r2, r7, #6
 800537c:	8812      	ldrh	r2, [r2, #0]
 800537e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	2200      	movs	r2, #0
 8005384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	689a      	ldr	r2, [r3, #8]
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	021b      	lsls	r3, r3, #8
 80053a6:	429a      	cmp	r2, r3
 80053a8:	d10f      	bne.n	80053ca <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	2140      	movs	r1, #64	; 0x40
 80053b6:	438a      	bics	r2, r1
 80053b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4951      	ldr	r1, [pc, #324]	; (800550c <HAL_SPI_Receive+0x248>)
 80053c6:	400a      	ands	r2, r1
 80053c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2240      	movs	r2, #64	; 0x40
 80053d2:	4013      	ands	r3, r2
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d007      	beq.n	80053e8 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2140      	movs	r1, #64	; 0x40
 80053e4:	430a      	orrs	r2, r1
 80053e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d164      	bne.n	80054ba <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80053f0:	e02f      	b.n	8005452 <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	2201      	movs	r2, #1
 80053fa:	4013      	ands	r3, r2
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d115      	bne.n	800542c <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	330c      	adds	r3, #12
 8005406:	001a      	movs	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800540c:	7812      	ldrb	r2, [r2, #0]
 800540e:	b2d2      	uxtb	r2, r2
 8005410:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	87da      	strh	r2, [r3, #62]	; 0x3e
 800542a:	e012      	b.n	8005452 <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800542c:	f7fd fcbc 	bl	8002da8 <HAL_GetTick>
 8005430:	0002      	movs	r2, r0
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d802      	bhi.n	8005442 <HAL_SPI_Receive+0x17e>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	3301      	adds	r3, #1
 8005440:	d102      	bne.n	8005448 <HAL_SPI_Receive+0x184>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d104      	bne.n	8005452 <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8005448:	2317      	movs	r3, #23
 800544a:	18fb      	adds	r3, r7, r3
 800544c:	2203      	movs	r2, #3
 800544e:	701a      	strb	r2, [r3, #0]
          goto error;
 8005450:	e04d      	b.n	80054ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005456:	b29b      	uxth	r3, r3
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1ca      	bne.n	80053f2 <HAL_SPI_Receive+0x12e>
 800545c:	e032      	b.n	80054c4 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	2201      	movs	r2, #1
 8005466:	4013      	ands	r3, r2
 8005468:	2b01      	cmp	r3, #1
 800546a:	d113      	bne.n	8005494 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68da      	ldr	r2, [r3, #12]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	b292      	uxth	r2, r2
 8005478:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547e:	1c9a      	adds	r2, r3, #2
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005488:	b29b      	uxth	r3, r3
 800548a:	3b01      	subs	r3, #1
 800548c:	b29a      	uxth	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005492:	e012      	b.n	80054ba <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005494:	f7fd fc88 	bl	8002da8 <HAL_GetTick>
 8005498:	0002      	movs	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	683a      	ldr	r2, [r7, #0]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d802      	bhi.n	80054aa <HAL_SPI_Receive+0x1e6>
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	3301      	adds	r3, #1
 80054a8:	d102      	bne.n	80054b0 <HAL_SPI_Receive+0x1ec>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d104      	bne.n	80054ba <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80054b0:	2317      	movs	r3, #23
 80054b2:	18fb      	adds	r3, r7, r3
 80054b4:	2203      	movs	r2, #3
 80054b6:	701a      	strb	r2, [r3, #0]
          goto error;
 80054b8:	e019      	b.n	80054ee <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d1cc      	bne.n	800545e <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80054c4:	693a      	ldr	r2, [r7, #16]
 80054c6:	6839      	ldr	r1, [r7, #0]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	0018      	movs	r0, r3
 80054cc:	f000 fa6a 	bl	80059a4 <SPI_EndRxTransaction>
 80054d0:	1e03      	subs	r3, r0, #0
 80054d2:	d002      	beq.n	80054da <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2220      	movs	r2, #32
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 80054e2:	2317      	movs	r3, #23
 80054e4:	18fb      	adds	r3, r7, r3
 80054e6:	2201      	movs	r2, #1
 80054e8:	701a      	strb	r2, [r3, #0]
 80054ea:	e000      	b.n	80054ee <HAL_SPI_Receive+0x22a>
  }

error :
 80054ec:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2251      	movs	r2, #81	; 0x51
 80054f2:	2101      	movs	r1, #1
 80054f4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	2250      	movs	r2, #80	; 0x50
 80054fa:	2100      	movs	r1, #0
 80054fc:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80054fe:	2317      	movs	r3, #23
 8005500:	18fb      	adds	r3, r7, r3
 8005502:	781b      	ldrb	r3, [r3, #0]
}
 8005504:	0018      	movs	r0, r3
 8005506:	46bd      	mov	sp, r7
 8005508:	b007      	add	sp, #28
 800550a:	bd90      	pop	{r4, r7, pc}
 800550c:	ffffbfff 	.word	0xffffbfff

08005510 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b08c      	sub	sp, #48	; 0x30
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
 800551c:	001a      	movs	r2, r3
 800551e:	1cbb      	adds	r3, r7, #2
 8005520:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005522:	2301      	movs	r3, #1
 8005524:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005526:	232b      	movs	r3, #43	; 0x2b
 8005528:	18fb      	adds	r3, r7, r3
 800552a:	2200      	movs	r2, #0
 800552c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2250      	movs	r2, #80	; 0x50
 8005532:	5c9b      	ldrb	r3, [r3, r2]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d101      	bne.n	800553c <HAL_SPI_TransmitReceive+0x2c>
 8005538:	2302      	movs	r3, #2
 800553a:	e1a0      	b.n	800587e <HAL_SPI_TransmitReceive+0x36e>
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2250      	movs	r2, #80	; 0x50
 8005540:	2101      	movs	r1, #1
 8005542:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005544:	f7fd fc30 	bl	8002da8 <HAL_GetTick>
 8005548:	0003      	movs	r3, r0
 800554a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800554c:	2023      	movs	r0, #35	; 0x23
 800554e:	183b      	adds	r3, r7, r0
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	2151      	movs	r1, #81	; 0x51
 8005554:	5c52      	ldrb	r2, [r2, r1]
 8005556:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800555e:	231a      	movs	r3, #26
 8005560:	18fb      	adds	r3, r7, r3
 8005562:	1cba      	adds	r2, r7, #2
 8005564:	8812      	ldrh	r2, [r2, #0]
 8005566:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005568:	183b      	adds	r3, r7, r0
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	2b01      	cmp	r3, #1
 800556e:	d011      	beq.n	8005594 <HAL_SPI_TransmitReceive+0x84>
 8005570:	69fa      	ldr	r2, [r7, #28]
 8005572:	2382      	movs	r3, #130	; 0x82
 8005574:	005b      	lsls	r3, r3, #1
 8005576:	429a      	cmp	r2, r3
 8005578:	d107      	bne.n	800558a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d103      	bne.n	800558a <HAL_SPI_TransmitReceive+0x7a>
 8005582:	183b      	adds	r3, r7, r0
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	2b04      	cmp	r3, #4
 8005588:	d004      	beq.n	8005594 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800558a:	232b      	movs	r3, #43	; 0x2b
 800558c:	18fb      	adds	r3, r7, r3
 800558e:	2202      	movs	r2, #2
 8005590:	701a      	strb	r2, [r3, #0]
    goto error;
 8005592:	e169      	b.n	8005868 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d006      	beq.n	80055a8 <HAL_SPI_TransmitReceive+0x98>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d003      	beq.n	80055a8 <HAL_SPI_TransmitReceive+0x98>
 80055a0:	1cbb      	adds	r3, r7, #2
 80055a2:	881b      	ldrh	r3, [r3, #0]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d104      	bne.n	80055b2 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 80055a8:	232b      	movs	r3, #43	; 0x2b
 80055aa:	18fb      	adds	r3, r7, r3
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
    goto error;
 80055b0:	e15a      	b.n	8005868 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2251      	movs	r2, #81	; 0x51
 80055b6:	5c9b      	ldrb	r3, [r3, r2]
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b04      	cmp	r3, #4
 80055bc:	d003      	beq.n	80055c6 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2251      	movs	r2, #81	; 0x51
 80055c2:	2105      	movs	r1, #5
 80055c4:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1cba      	adds	r2, r7, #2
 80055d6:	8812      	ldrh	r2, [r2, #0]
 80055d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1cba      	adds	r2, r7, #2
 80055de:	8812      	ldrh	r2, [r2, #0]
 80055e0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	68ba      	ldr	r2, [r7, #8]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	1cba      	adds	r2, r7, #2
 80055ec:	8812      	ldrh	r2, [r2, #0]
 80055ee:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	1cba      	adds	r2, r7, #2
 80055f4:	8812      	ldrh	r2, [r2, #0]
 80055f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2200      	movs	r2, #0
 8005602:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2240      	movs	r2, #64	; 0x40
 800560c:	4013      	ands	r3, r2
 800560e:	2b40      	cmp	r3, #64	; 0x40
 8005610:	d007      	beq.n	8005622 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2140      	movs	r1, #64	; 0x40
 800561e:	430a      	orrs	r2, r1
 8005620:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	68da      	ldr	r2, [r3, #12]
 8005626:	2380      	movs	r3, #128	; 0x80
 8005628:	011b      	lsls	r3, r3, #4
 800562a:	429a      	cmp	r2, r3
 800562c:	d000      	beq.n	8005630 <HAL_SPI_TransmitReceive+0x120>
 800562e:	e07a      	b.n	8005726 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d004      	beq.n	8005642 <HAL_SPI_TransmitReceive+0x132>
 8005638:	231a      	movs	r3, #26
 800563a:	18fb      	adds	r3, r7, r3
 800563c:	881b      	ldrh	r3, [r3, #0]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d166      	bne.n	8005710 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005646:	881a      	ldrh	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005652:	1c9a      	adds	r2, r3, #2
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005666:	e053      	b.n	8005710 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2202      	movs	r2, #2
 8005670:	4013      	ands	r3, r2
 8005672:	2b02      	cmp	r3, #2
 8005674:	d11b      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x19e>
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800567a:	b29b      	uxth	r3, r3
 800567c:	2b00      	cmp	r3, #0
 800567e:	d016      	beq.n	80056ae <HAL_SPI_TransmitReceive+0x19e>
 8005680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005682:	2b01      	cmp	r3, #1
 8005684:	d113      	bne.n	80056ae <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568a:	881a      	ldrh	r2, [r3, #0]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005696:	1c9a      	adds	r2, r3, #2
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	3b01      	subs	r3, #1
 80056a4:	b29a      	uxth	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2201      	movs	r2, #1
 80056b6:	4013      	ands	r3, r2
 80056b8:	2b01      	cmp	r3, #1
 80056ba:	d119      	bne.n	80056f0 <HAL_SPI_TransmitReceive+0x1e0>
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d014      	beq.n	80056f0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68da      	ldr	r2, [r3, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	b292      	uxth	r2, r2
 80056d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	1c9a      	adds	r2, r3, #2
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	3b01      	subs	r3, #1
 80056e6:	b29a      	uxth	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80056ec:	2301      	movs	r3, #1
 80056ee:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80056f0:	f7fd fb5a 	bl	8002da8 <HAL_GetTick>
 80056f4:	0002      	movs	r2, r0
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	1ad3      	subs	r3, r2, r3
 80056fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d807      	bhi.n	8005710 <HAL_SPI_TransmitReceive+0x200>
 8005700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005702:	3301      	adds	r3, #1
 8005704:	d004      	beq.n	8005710 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8005706:	232b      	movs	r3, #43	; 0x2b
 8005708:	18fb      	adds	r3, r7, r3
 800570a:	2203      	movs	r2, #3
 800570c:	701a      	strb	r2, [r3, #0]
        goto error;
 800570e:	e0ab      	b.n	8005868 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d1a6      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x158>
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800571e:	b29b      	uxth	r3, r3
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1a1      	bne.n	8005668 <HAL_SPI_TransmitReceive+0x158>
 8005724:	e07f      	b.n	8005826 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d005      	beq.n	800573a <HAL_SPI_TransmitReceive+0x22a>
 800572e:	231a      	movs	r3, #26
 8005730:	18fb      	adds	r3, r7, r3
 8005732:	881b      	ldrh	r3, [r3, #0]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d000      	beq.n	800573a <HAL_SPI_TransmitReceive+0x22a>
 8005738:	e06b      	b.n	8005812 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	330c      	adds	r3, #12
 8005744:	7812      	ldrb	r2, [r2, #0]
 8005746:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574c:	1c5a      	adds	r2, r3, #1
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005756:	b29b      	uxth	r3, r3
 8005758:	3b01      	subs	r3, #1
 800575a:	b29a      	uxth	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005760:	e057      	b.n	8005812 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	2202      	movs	r2, #2
 800576a:	4013      	ands	r3, r2
 800576c:	2b02      	cmp	r3, #2
 800576e:	d11c      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x29a>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005774:	b29b      	uxth	r3, r3
 8005776:	2b00      	cmp	r3, #0
 8005778:	d017      	beq.n	80057aa <HAL_SPI_TransmitReceive+0x29a>
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d114      	bne.n	80057aa <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	330c      	adds	r3, #12
 800578a:	7812      	ldrb	r2, [r2, #0]
 800578c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005792:	1c5a      	adds	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800579c:	b29b      	uxth	r3, r3
 800579e:	3b01      	subs	r3, #1
 80057a0:	b29a      	uxth	r2, r3
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80057a6:	2300      	movs	r3, #0
 80057a8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	2201      	movs	r2, #1
 80057b2:	4013      	ands	r3, r2
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d119      	bne.n	80057ec <HAL_SPI_TransmitReceive+0x2dc>
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d014      	beq.n	80057ec <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	68da      	ldr	r2, [r3, #12]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057cc:	b2d2      	uxtb	r2, r2
 80057ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d4:	1c5a      	adds	r2, r3, #1
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057e8:	2301      	movs	r3, #1
 80057ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80057ec:	f7fd fadc 	bl	8002da8 <HAL_GetTick>
 80057f0:	0002      	movs	r2, r0
 80057f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80057f8:	429a      	cmp	r2, r3
 80057fa:	d802      	bhi.n	8005802 <HAL_SPI_TransmitReceive+0x2f2>
 80057fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057fe:	3301      	adds	r3, #1
 8005800:	d102      	bne.n	8005808 <HAL_SPI_TransmitReceive+0x2f8>
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	d104      	bne.n	8005812 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8005808:	232b      	movs	r3, #43	; 0x2b
 800580a:	18fb      	adds	r3, r7, r3
 800580c:	2203      	movs	r2, #3
 800580e:	701a      	strb	r2, [r3, #0]
        goto error;
 8005810:	e02a      	b.n	8005868 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005816:	b29b      	uxth	r3, r3
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1a2      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x252>
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005820:	b29b      	uxth	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d19d      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005828:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	0018      	movs	r0, r3
 800582e:	f000 f923 	bl	8005a78 <SPI_EndRxTxTransaction>
 8005832:	1e03      	subs	r3, r0, #0
 8005834:	d007      	beq.n	8005846 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8005836:	232b      	movs	r3, #43	; 0x2b
 8005838:	18fb      	adds	r3, r7, r3
 800583a:	2201      	movs	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2220      	movs	r2, #32
 8005842:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8005844:	e010      	b.n	8005868 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d10b      	bne.n	8005866 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	617b      	str	r3, [r7, #20]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	617b      	str	r3, [r7, #20]
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	e000      	b.n	8005868 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8005866:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2251      	movs	r2, #81	; 0x51
 800586c:	2101      	movs	r1, #1
 800586e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2250      	movs	r2, #80	; 0x50
 8005874:	2100      	movs	r1, #0
 8005876:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005878:	232b      	movs	r3, #43	; 0x2b
 800587a:	18fb      	adds	r3, r7, r3
 800587c:	781b      	ldrb	r3, [r3, #0]
}
 800587e:	0018      	movs	r0, r3
 8005880:	46bd      	mov	sp, r7
 8005882:	b00c      	add	sp, #48	; 0x30
 8005884:	bd80      	pop	{r7, pc}
	...

08005888 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b088      	sub	sp, #32
 800588c:	af00      	add	r7, sp, #0
 800588e:	60f8      	str	r0, [r7, #12]
 8005890:	60b9      	str	r1, [r7, #8]
 8005892:	603b      	str	r3, [r7, #0]
 8005894:	1dfb      	adds	r3, r7, #7
 8005896:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005898:	f7fd fa86 	bl	8002da8 <HAL_GetTick>
 800589c:	0002      	movs	r2, r0
 800589e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a0:	1a9b      	subs	r3, r3, r2
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	18d3      	adds	r3, r2, r3
 80058a6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058a8:	f7fd fa7e 	bl	8002da8 <HAL_GetTick>
 80058ac:	0003      	movs	r3, r0
 80058ae:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058b0:	4b3a      	ldr	r3, [pc, #232]	; (800599c <SPI_WaitFlagStateUntilTimeout+0x114>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	015b      	lsls	r3, r3, #5
 80058b6:	0d1b      	lsrs	r3, r3, #20
 80058b8:	69fa      	ldr	r2, [r7, #28]
 80058ba:	4353      	muls	r3, r2
 80058bc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058be:	e058      	b.n	8005972 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	3301      	adds	r3, #1
 80058c4:	d055      	beq.n	8005972 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058c6:	f7fd fa6f 	bl	8002da8 <HAL_GetTick>
 80058ca:	0002      	movs	r2, r0
 80058cc:	69bb      	ldr	r3, [r7, #24]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	69fa      	ldr	r2, [r7, #28]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d902      	bls.n	80058dc <SPI_WaitFlagStateUntilTimeout+0x54>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d142      	bne.n	8005962 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685a      	ldr	r2, [r3, #4]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	21e0      	movs	r1, #224	; 0xe0
 80058e8:	438a      	bics	r2, r1
 80058ea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	685a      	ldr	r2, [r3, #4]
 80058f0:	2382      	movs	r3, #130	; 0x82
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d113      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x98>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689a      	ldr	r2, [r3, #8]
 80058fc:	2380      	movs	r3, #128	; 0x80
 80058fe:	021b      	lsls	r3, r3, #8
 8005900:	429a      	cmp	r2, r3
 8005902:	d005      	beq.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	689a      	ldr	r2, [r3, #8]
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	429a      	cmp	r2, r3
 800590e:	d107      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2140      	movs	r1, #64	; 0x40
 800591c:	438a      	bics	r2, r1
 800591e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005924:	2380      	movs	r3, #128	; 0x80
 8005926:	019b      	lsls	r3, r3, #6
 8005928:	429a      	cmp	r2, r3
 800592a:	d110      	bne.n	800594e <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681a      	ldr	r2, [r3, #0]
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	491a      	ldr	r1, [pc, #104]	; (80059a0 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8005938:	400a      	ands	r2, r1
 800593a:	601a      	str	r2, [r3, #0]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	0189      	lsls	r1, r1, #6
 800594a:	430a      	orrs	r2, r1
 800594c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2251      	movs	r2, #81	; 0x51
 8005952:	2101      	movs	r1, #1
 8005954:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	2250      	movs	r2, #80	; 0x50
 800595a:	2100      	movs	r1, #0
 800595c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800595e:	2303      	movs	r3, #3
 8005960:	e017      	b.n	8005992 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d101      	bne.n	800596c <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005968:	2300      	movs	r3, #0
 800596a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	3b01      	subs	r3, #1
 8005970:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	4013      	ands	r3, r2
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	425a      	negs	r2, r3
 8005982:	4153      	adcs	r3, r2
 8005984:	b2db      	uxtb	r3, r3
 8005986:	001a      	movs	r2, r3
 8005988:	1dfb      	adds	r3, r7, #7
 800598a:	781b      	ldrb	r3, [r3, #0]
 800598c:	429a      	cmp	r2, r3
 800598e:	d197      	bne.n	80058c0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	0018      	movs	r0, r3
 8005994:	46bd      	mov	sp, r7
 8005996:	b008      	add	sp, #32
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			; (mov r8, r8)
 800599c:	20000008 	.word	0x20000008
 80059a0:	ffffdfff 	.word	0xffffdfff

080059a4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af02      	add	r7, sp, #8
 80059aa:	60f8      	str	r0, [r7, #12]
 80059ac:	60b9      	str	r1, [r7, #8]
 80059ae:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	2382      	movs	r3, #130	; 0x82
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d113      	bne.n	80059e4 <SPI_EndRxTransaction+0x40>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d005      	beq.n	80059d4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	2380      	movs	r3, #128	; 0x80
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d107      	bne.n	80059e4 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2140      	movs	r1, #64	; 0x40
 80059e0:	438a      	bics	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	685a      	ldr	r2, [r3, #4]
 80059e8:	2382      	movs	r3, #130	; 0x82
 80059ea:	005b      	lsls	r3, r3, #1
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d12b      	bne.n	8005a48 <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	689a      	ldr	r2, [r3, #8]
 80059f4:	2380      	movs	r3, #128	; 0x80
 80059f6:	00db      	lsls	r3, r3, #3
 80059f8:	429a      	cmp	r2, r3
 80059fa:	d012      	beq.n	8005a22 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	9300      	str	r3, [sp, #0]
 8005a04:	0013      	movs	r3, r2
 8005a06:	2200      	movs	r2, #0
 8005a08:	2180      	movs	r1, #128	; 0x80
 8005a0a:	f7ff ff3d 	bl	8005888 <SPI_WaitFlagStateUntilTimeout>
 8005a0e:	1e03      	subs	r3, r0, #0
 8005a10:	d02d      	beq.n	8005a6e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a16:	2220      	movs	r2, #32
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a1e:	2303      	movs	r3, #3
 8005a20:	e026      	b.n	8005a70 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a22:	68ba      	ldr	r2, [r7, #8]
 8005a24:	68f8      	ldr	r0, [r7, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	0013      	movs	r3, r2
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	2101      	movs	r1, #1
 8005a30:	f7ff ff2a 	bl	8005888 <SPI_WaitFlagStateUntilTimeout>
 8005a34:	1e03      	subs	r3, r0, #0
 8005a36:	d01a      	beq.n	8005a6e <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	431a      	orrs	r2, r3
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	e013      	b.n	8005a70 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	68f8      	ldr	r0, [r7, #12]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	0013      	movs	r3, r2
 8005a52:	2200      	movs	r2, #0
 8005a54:	2101      	movs	r1, #1
 8005a56:	f7ff ff17 	bl	8005888 <SPI_WaitFlagStateUntilTimeout>
 8005a5a:	1e03      	subs	r3, r0, #0
 8005a5c:	d007      	beq.n	8005a6e <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a62:	2220      	movs	r2, #32
 8005a64:	431a      	orrs	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	e000      	b.n	8005a70 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 8005a6e:	2300      	movs	r3, #0
}
 8005a70:	0018      	movs	r0, r3
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b004      	add	sp, #16
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b088      	sub	sp, #32
 8005a7c:	af02      	add	r7, sp, #8
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005a84:	4b1d      	ldr	r3, [pc, #116]	; (8005afc <SPI_EndRxTxTransaction+0x84>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	491d      	ldr	r1, [pc, #116]	; (8005b00 <SPI_EndRxTxTransaction+0x88>)
 8005a8a:	0018      	movs	r0, r3
 8005a8c:	f7fa fb4e 	bl	800012c <__udivsi3>
 8005a90:	0003      	movs	r3, r0
 8005a92:	001a      	movs	r2, r3
 8005a94:	0013      	movs	r3, r2
 8005a96:	015b      	lsls	r3, r3, #5
 8005a98:	1a9b      	subs	r3, r3, r2
 8005a9a:	009b      	lsls	r3, r3, #2
 8005a9c:	189b      	adds	r3, r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	685a      	ldr	r2, [r3, #4]
 8005aa6:	2382      	movs	r3, #130	; 0x82
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d112      	bne.n	8005ad4 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	0013      	movs	r3, r2
 8005ab8:	2200      	movs	r2, #0
 8005aba:	2180      	movs	r1, #128	; 0x80
 8005abc:	f7ff fee4 	bl	8005888 <SPI_WaitFlagStateUntilTimeout>
 8005ac0:	1e03      	subs	r3, r0, #0
 8005ac2:	d016      	beq.n	8005af2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ac8:	2220      	movs	r2, #32
 8005aca:	431a      	orrs	r2, r3
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e00f      	b.n	8005af4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	3b01      	subs	r3, #1
 8005ade:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	2280      	movs	r2, #128	; 0x80
 8005ae8:	4013      	ands	r3, r2
 8005aea:	2b80      	cmp	r3, #128	; 0x80
 8005aec:	d0f2      	beq.n	8005ad4 <SPI_EndRxTxTransaction+0x5c>
 8005aee:	e000      	b.n	8005af2 <SPI_EndRxTxTransaction+0x7a>
        break;
 8005af0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	b006      	add	sp, #24
 8005afa:	bd80      	pop	{r7, pc}
 8005afc:	20000008 	.word	0x20000008
 8005b00:	016e3600 	.word	0x016e3600

08005b04 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e044      	b.n	8005ba0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d107      	bne.n	8005b2e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2274      	movs	r2, #116	; 0x74
 8005b22:	2100      	movs	r1, #0
 8005b24:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	0018      	movs	r0, r3
 8005b2a:	f7fd f813 	bl	8002b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2224      	movs	r2, #36	; 0x24
 8005b32:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	2101      	movs	r1, #1
 8005b40:	438a      	bics	r2, r1
 8005b42:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	0018      	movs	r0, r3
 8005b48:	f000 f9c6 	bl	8005ed8 <UART_SetConfig>
 8005b4c:	0003      	movs	r3, r0
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d101      	bne.n	8005b56 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e024      	b.n	8005ba0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	0018      	movs	r0, r3
 8005b62:	f000 fc77 	bl	8006454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	490d      	ldr	r1, [pc, #52]	; (8005ba8 <HAL_UART_Init+0xa4>)
 8005b72:	400a      	ands	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689a      	ldr	r2, [r3, #8]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	212a      	movs	r1, #42	; 0x2a
 8005b82:	438a      	bics	r2, r1
 8005b84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2101      	movs	r1, #1
 8005b92:	430a      	orrs	r2, r1
 8005b94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	0018      	movs	r0, r3
 8005b9a:	f000 fd0f 	bl	80065bc <UART_CheckIdleState>
 8005b9e:	0003      	movs	r3, r0
}
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	b002      	add	sp, #8
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	ffffb7ff 	.word	0xffffb7ff

08005bac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b08a      	sub	sp, #40	; 0x28
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	603b      	str	r3, [r7, #0]
 8005bb8:	1dbb      	adds	r3, r7, #6
 8005bba:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005bc0:	2b20      	cmp	r3, #32
 8005bc2:	d000      	beq.n	8005bc6 <HAL_UART_Transmit+0x1a>
 8005bc4:	e095      	b.n	8005cf2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d003      	beq.n	8005bd4 <HAL_UART_Transmit+0x28>
 8005bcc:	1dbb      	adds	r3, r7, #6
 8005bce:	881b      	ldrh	r3, [r3, #0]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d101      	bne.n	8005bd8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e08d      	b.n	8005cf4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	689a      	ldr	r2, [r3, #8]
 8005bdc:	2380      	movs	r3, #128	; 0x80
 8005bde:	015b      	lsls	r3, r3, #5
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d109      	bne.n	8005bf8 <HAL_UART_Transmit+0x4c>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d105      	bne.n	8005bf8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	2201      	movs	r2, #1
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	d001      	beq.n	8005bf8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	e07d      	b.n	8005cf4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2274      	movs	r2, #116	; 0x74
 8005bfc:	5c9b      	ldrb	r3, [r3, r2]
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d101      	bne.n	8005c06 <HAL_UART_Transmit+0x5a>
 8005c02:	2302      	movs	r3, #2
 8005c04:	e076      	b.n	8005cf4 <HAL_UART_Transmit+0x148>
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2274      	movs	r2, #116	; 0x74
 8005c0a:	2101      	movs	r1, #1
 8005c0c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2280      	movs	r2, #128	; 0x80
 8005c12:	2100      	movs	r1, #0
 8005c14:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2221      	movs	r2, #33	; 0x21
 8005c1a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c1c:	f7fd f8c4 	bl	8002da8 <HAL_GetTick>
 8005c20:	0003      	movs	r3, r0
 8005c22:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1dba      	adds	r2, r7, #6
 8005c28:	2150      	movs	r1, #80	; 0x50
 8005c2a:	8812      	ldrh	r2, [r2, #0]
 8005c2c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1dba      	adds	r2, r7, #6
 8005c32:	2152      	movs	r1, #82	; 0x52
 8005c34:	8812      	ldrh	r2, [r2, #0]
 8005c36:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	689a      	ldr	r2, [r3, #8]
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	015b      	lsls	r3, r3, #5
 8005c40:	429a      	cmp	r2, r3
 8005c42:	d108      	bne.n	8005c56 <HAL_UART_Transmit+0xaa>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d104      	bne.n	8005c56 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	61bb      	str	r3, [r7, #24]
 8005c54:	e003      	b.n	8005c5e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2274      	movs	r2, #116	; 0x74
 8005c62:	2100      	movs	r1, #0
 8005c64:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005c66:	e02c      	b.n	8005cc2 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	9300      	str	r3, [sp, #0]
 8005c70:	0013      	movs	r3, r2
 8005c72:	2200      	movs	r2, #0
 8005c74:	2180      	movs	r1, #128	; 0x80
 8005c76:	f000 fce9 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 8005c7a:	1e03      	subs	r3, r0, #0
 8005c7c:	d001      	beq.n	8005c82 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e038      	b.n	8005cf4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	881b      	ldrh	r3, [r3, #0]
 8005c8c:	001a      	movs	r2, r3
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	05d2      	lsls	r2, r2, #23
 8005c94:	0dd2      	lsrs	r2, r2, #23
 8005c96:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e007      	b.n	8005cb0 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	781a      	ldrb	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	3301      	adds	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2252      	movs	r2, #82	; 0x52
 8005cb4:	5a9b      	ldrh	r3, [r3, r2]
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b299      	uxth	r1, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2252      	movs	r2, #82	; 0x52
 8005cc0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2252      	movs	r2, #82	; 0x52
 8005cc6:	5a9b      	ldrh	r3, [r3, r2]
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1cc      	bne.n	8005c68 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	9300      	str	r3, [sp, #0]
 8005cd6:	0013      	movs	r3, r2
 8005cd8:	2200      	movs	r2, #0
 8005cda:	2140      	movs	r1, #64	; 0x40
 8005cdc:	f000 fcb6 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 8005ce0:	1e03      	subs	r3, r0, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e005      	b.n	8005cf4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2220      	movs	r2, #32
 8005cec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e000      	b.n	8005cf4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8005cf2:	2302      	movs	r3, #2
  }
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b008      	add	sp, #32
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b08a      	sub	sp, #40	; 0x28
 8005d00:	af02      	add	r7, sp, #8
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	603b      	str	r3, [r7, #0]
 8005d08:	1dbb      	adds	r3, r7, #6
 8005d0a:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d10:	2b20      	cmp	r3, #32
 8005d12:	d000      	beq.n	8005d16 <HAL_UART_Receive+0x1a>
 8005d14:	e0d9      	b.n	8005eca <HAL_UART_Receive+0x1ce>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d003      	beq.n	8005d24 <HAL_UART_Receive+0x28>
 8005d1c:	1dbb      	adds	r3, r7, #6
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d101      	bne.n	8005d28 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8005d24:	2301      	movs	r3, #1
 8005d26:	e0d1      	b.n	8005ecc <HAL_UART_Receive+0x1d0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	689a      	ldr	r2, [r3, #8]
 8005d2c:	2380      	movs	r3, #128	; 0x80
 8005d2e:	015b      	lsls	r3, r3, #5
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d109      	bne.n	8005d48 <HAL_UART_Receive+0x4c>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <HAL_UART_Receive+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4013      	ands	r3, r2
 8005d42:	d001      	beq.n	8005d48 <HAL_UART_Receive+0x4c>
      {
        return  HAL_ERROR;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e0c1      	b.n	8005ecc <HAL_UART_Receive+0x1d0>
      }
    }

    __HAL_LOCK(huart);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	2274      	movs	r2, #116	; 0x74
 8005d4c:	5c9b      	ldrb	r3, [r3, r2]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d101      	bne.n	8005d56 <HAL_UART_Receive+0x5a>
 8005d52:	2302      	movs	r3, #2
 8005d54:	e0ba      	b.n	8005ecc <HAL_UART_Receive+0x1d0>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2274      	movs	r2, #116	; 0x74
 8005d5a:	2101      	movs	r1, #1
 8005d5c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2280      	movs	r2, #128	; 0x80
 8005d62:	2100      	movs	r1, #0
 8005d64:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2222      	movs	r2, #34	; 0x22
 8005d6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d72:	f7fd f819 	bl	8002da8 <HAL_GetTick>
 8005d76:	0003      	movs	r3, r0
 8005d78:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1dba      	adds	r2, r7, #6
 8005d7e:	2158      	movs	r1, #88	; 0x58
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1dba      	adds	r2, r7, #6
 8005d88:	215a      	movs	r1, #90	; 0x5a
 8005d8a:	8812      	ldrh	r2, [r2, #0]
 8005d8c:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	689a      	ldr	r2, [r3, #8]
 8005d92:	2380      	movs	r3, #128	; 0x80
 8005d94:	015b      	lsls	r3, r3, #5
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d10d      	bne.n	8005db6 <HAL_UART_Receive+0xba>
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	691b      	ldr	r3, [r3, #16]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d104      	bne.n	8005dac <HAL_UART_Receive+0xb0>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	225c      	movs	r2, #92	; 0x5c
 8005da6:	494b      	ldr	r1, [pc, #300]	; (8005ed4 <HAL_UART_Receive+0x1d8>)
 8005da8:	5299      	strh	r1, [r3, r2]
 8005daa:	e02e      	b.n	8005e0a <HAL_UART_Receive+0x10e>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	225c      	movs	r2, #92	; 0x5c
 8005db0:	21ff      	movs	r1, #255	; 0xff
 8005db2:	5299      	strh	r1, [r3, r2]
 8005db4:	e029      	b.n	8005e0a <HAL_UART_Receive+0x10e>
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10d      	bne.n	8005dda <HAL_UART_Receive+0xde>
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d104      	bne.n	8005dd0 <HAL_UART_Receive+0xd4>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	225c      	movs	r2, #92	; 0x5c
 8005dca:	21ff      	movs	r1, #255	; 0xff
 8005dcc:	5299      	strh	r1, [r3, r2]
 8005dce:	e01c      	b.n	8005e0a <HAL_UART_Receive+0x10e>
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	225c      	movs	r2, #92	; 0x5c
 8005dd4:	217f      	movs	r1, #127	; 0x7f
 8005dd6:	5299      	strh	r1, [r3, r2]
 8005dd8:	e017      	b.n	8005e0a <HAL_UART_Receive+0x10e>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	689a      	ldr	r2, [r3, #8]
 8005dde:	2380      	movs	r3, #128	; 0x80
 8005de0:	055b      	lsls	r3, r3, #21
 8005de2:	429a      	cmp	r2, r3
 8005de4:	d10d      	bne.n	8005e02 <HAL_UART_Receive+0x106>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	691b      	ldr	r3, [r3, #16]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d104      	bne.n	8005df8 <HAL_UART_Receive+0xfc>
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	225c      	movs	r2, #92	; 0x5c
 8005df2:	217f      	movs	r1, #127	; 0x7f
 8005df4:	5299      	strh	r1, [r3, r2]
 8005df6:	e008      	b.n	8005e0a <HAL_UART_Receive+0x10e>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	225c      	movs	r2, #92	; 0x5c
 8005dfc:	213f      	movs	r1, #63	; 0x3f
 8005dfe:	5299      	strh	r1, [r3, r2]
 8005e00:	e003      	b.n	8005e0a <HAL_UART_Receive+0x10e>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	225c      	movs	r2, #92	; 0x5c
 8005e06:	2100      	movs	r1, #0
 8005e08:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005e0a:	2312      	movs	r3, #18
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	215c      	movs	r1, #92	; 0x5c
 8005e12:	5a52      	ldrh	r2, [r2, r1]
 8005e14:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689a      	ldr	r2, [r3, #8]
 8005e1a:	2380      	movs	r3, #128	; 0x80
 8005e1c:	015b      	lsls	r3, r3, #5
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d108      	bne.n	8005e34 <HAL_UART_Receive+0x138>
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d104      	bne.n	8005e34 <HAL_UART_Receive+0x138>
    {
      pdata8bits  = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	61bb      	str	r3, [r7, #24]
 8005e32:	e003      	b.n	8005e3c <HAL_UART_Receive+0x140>
    }
    else
    {
      pdata8bits  = pData;
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2274      	movs	r2, #116	; 0x74
 8005e40:	2100      	movs	r1, #0
 8005e42:	5499      	strb	r1, [r3, r2]

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005e44:	e036      	b.n	8005eb4 <HAL_UART_Receive+0x1b8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005e46:	697a      	ldr	r2, [r7, #20]
 8005e48:	68f8      	ldr	r0, [r7, #12]
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	0013      	movs	r3, r2
 8005e50:	2200      	movs	r2, #0
 8005e52:	2120      	movs	r1, #32
 8005e54:	f000 fbfa 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 8005e58:	1e03      	subs	r3, r0, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_UART_Receive+0x164>
      {
        return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e035      	b.n	8005ecc <HAL_UART_Receive+0x1d0>
      }
      if (pdata8bits == NULL)
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d10e      	bne.n	8005e84 <HAL_UART_Receive+0x188>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	2212      	movs	r2, #18
 8005e70:	18ba      	adds	r2, r7, r2
 8005e72:	8812      	ldrh	r2, [r2, #0]
 8005e74:	4013      	ands	r3, r2
 8005e76:	b29a      	uxth	r2, r3
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e7c:	69bb      	ldr	r3, [r7, #24]
 8005e7e:	3302      	adds	r3, #2
 8005e80:	61bb      	str	r3, [r7, #24]
 8005e82:	e00e      	b.n	8005ea2 <HAL_UART_Receive+0x1a6>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2212      	movs	r2, #18
 8005e8e:	18ba      	adds	r2, r7, r2
 8005e90:	8812      	ldrh	r2, [r2, #0]
 8005e92:	b2d2      	uxtb	r2, r2
 8005e94:	4013      	ands	r3, r2
 8005e96:	b2da      	uxtb	r2, r3
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	225a      	movs	r2, #90	; 0x5a
 8005ea6:	5a9b      	ldrh	r3, [r3, r2]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b299      	uxth	r1, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	225a      	movs	r2, #90	; 0x5a
 8005eb2:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	225a      	movs	r2, #90	; 0x5a
 8005eb8:	5a9b      	ldrh	r3, [r3, r2]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1c2      	bne.n	8005e46 <HAL_UART_Receive+0x14a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2220      	movs	r2, #32
 8005ec4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	e000      	b.n	8005ecc <HAL_UART_Receive+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8005eca:	2302      	movs	r3, #2
  }
}
 8005ecc:	0018      	movs	r0, r3
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	b008      	add	sp, #32
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	000001ff 	.word	0x000001ff

08005ed8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ed8:	b5b0      	push	{r4, r5, r7, lr}
 8005eda:	b08e      	sub	sp, #56	; 0x38
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ee0:	231a      	movs	r3, #26
 8005ee2:	2218      	movs	r2, #24
 8005ee4:	4694      	mov	ip, r2
 8005ee6:	44bc      	add	ip, r7
 8005ee8:	4463      	add	r3, ip
 8005eea:	2200      	movs	r2, #0
 8005eec:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005eee:	69fb      	ldr	r3, [r7, #28]
 8005ef0:	689a      	ldr	r2, [r3, #8]
 8005ef2:	69fb      	ldr	r3, [r7, #28]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	431a      	orrs	r2, r3
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	695b      	ldr	r3, [r3, #20]
 8005efc:	431a      	orrs	r2, r3
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4ab0      	ldr	r2, [pc, #704]	; (80061d0 <UART_SetConfig+0x2f8>)
 8005f0e:	4013      	ands	r3, r2
 8005f10:	0019      	movs	r1, r3
 8005f12:	69fb      	ldr	r3, [r7, #28]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	4aac      	ldr	r2, [pc, #688]	; (80061d4 <UART_SetConfig+0x2fc>)
 8005f24:	4013      	ands	r3, r2
 8005f26:	0019      	movs	r1, r3
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	68da      	ldr	r2, [r3, #12]
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	430a      	orrs	r2, r1
 8005f32:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f3a:	69fb      	ldr	r3, [r7, #28]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4aa6      	ldr	r2, [pc, #664]	; (80061d8 <UART_SetConfig+0x300>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d004      	beq.n	8005f4e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f44:	69fb      	ldr	r3, [r7, #28]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	4aa1      	ldr	r2, [pc, #644]	; (80061dc <UART_SetConfig+0x304>)
 8005f56:	4013      	ands	r3, r2
 8005f58:	0019      	movs	r1, r3
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f60:	430a      	orrs	r2, r1
 8005f62:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f64:	69fb      	ldr	r3, [r7, #28]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a9d      	ldr	r2, [pc, #628]	; (80061e0 <UART_SetConfig+0x308>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d136      	bne.n	8005fdc <UART_SetConfig+0x104>
 8005f6e:	4b9d      	ldr	r3, [pc, #628]	; (80061e4 <UART_SetConfig+0x30c>)
 8005f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f72:	2203      	movs	r2, #3
 8005f74:	4013      	ands	r3, r2
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d020      	beq.n	8005fbc <UART_SetConfig+0xe4>
 8005f7a:	d827      	bhi.n	8005fcc <UART_SetConfig+0xf4>
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d00d      	beq.n	8005f9c <UART_SetConfig+0xc4>
 8005f80:	d824      	bhi.n	8005fcc <UART_SetConfig+0xf4>
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d002      	beq.n	8005f8c <UART_SetConfig+0xb4>
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d010      	beq.n	8005fac <UART_SetConfig+0xd4>
 8005f8a:	e01f      	b.n	8005fcc <UART_SetConfig+0xf4>
 8005f8c:	231b      	movs	r3, #27
 8005f8e:	2218      	movs	r2, #24
 8005f90:	4694      	mov	ip, r2
 8005f92:	44bc      	add	ip, r7
 8005f94:	4463      	add	r3, ip
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
 8005f9a:	e0c5      	b.n	8006128 <UART_SetConfig+0x250>
 8005f9c:	231b      	movs	r3, #27
 8005f9e:	2218      	movs	r2, #24
 8005fa0:	4694      	mov	ip, r2
 8005fa2:	44bc      	add	ip, r7
 8005fa4:	4463      	add	r3, ip
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	701a      	strb	r2, [r3, #0]
 8005faa:	e0bd      	b.n	8006128 <UART_SetConfig+0x250>
 8005fac:	231b      	movs	r3, #27
 8005fae:	2218      	movs	r2, #24
 8005fb0:	4694      	mov	ip, r2
 8005fb2:	44bc      	add	ip, r7
 8005fb4:	4463      	add	r3, ip
 8005fb6:	2204      	movs	r2, #4
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e0b5      	b.n	8006128 <UART_SetConfig+0x250>
 8005fbc:	231b      	movs	r3, #27
 8005fbe:	2218      	movs	r2, #24
 8005fc0:	4694      	mov	ip, r2
 8005fc2:	44bc      	add	ip, r7
 8005fc4:	4463      	add	r3, ip
 8005fc6:	2208      	movs	r2, #8
 8005fc8:	701a      	strb	r2, [r3, #0]
 8005fca:	e0ad      	b.n	8006128 <UART_SetConfig+0x250>
 8005fcc:	231b      	movs	r3, #27
 8005fce:	2218      	movs	r2, #24
 8005fd0:	4694      	mov	ip, r2
 8005fd2:	44bc      	add	ip, r7
 8005fd4:	4463      	add	r3, ip
 8005fd6:	2210      	movs	r2, #16
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	e0a5      	b.n	8006128 <UART_SetConfig+0x250>
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a81      	ldr	r2, [pc, #516]	; (80061e8 <UART_SetConfig+0x310>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d136      	bne.n	8006054 <UART_SetConfig+0x17c>
 8005fe6:	4b7f      	ldr	r3, [pc, #508]	; (80061e4 <UART_SetConfig+0x30c>)
 8005fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fea:	220c      	movs	r2, #12
 8005fec:	4013      	ands	r3, r2
 8005fee:	2b0c      	cmp	r3, #12
 8005ff0:	d020      	beq.n	8006034 <UART_SetConfig+0x15c>
 8005ff2:	d827      	bhi.n	8006044 <UART_SetConfig+0x16c>
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d00d      	beq.n	8006014 <UART_SetConfig+0x13c>
 8005ff8:	d824      	bhi.n	8006044 <UART_SetConfig+0x16c>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d002      	beq.n	8006004 <UART_SetConfig+0x12c>
 8005ffe:	2b04      	cmp	r3, #4
 8006000:	d010      	beq.n	8006024 <UART_SetConfig+0x14c>
 8006002:	e01f      	b.n	8006044 <UART_SetConfig+0x16c>
 8006004:	231b      	movs	r3, #27
 8006006:	2218      	movs	r2, #24
 8006008:	4694      	mov	ip, r2
 800600a:	44bc      	add	ip, r7
 800600c:	4463      	add	r3, ip
 800600e:	2200      	movs	r2, #0
 8006010:	701a      	strb	r2, [r3, #0]
 8006012:	e089      	b.n	8006128 <UART_SetConfig+0x250>
 8006014:	231b      	movs	r3, #27
 8006016:	2218      	movs	r2, #24
 8006018:	4694      	mov	ip, r2
 800601a:	44bc      	add	ip, r7
 800601c:	4463      	add	r3, ip
 800601e:	2202      	movs	r2, #2
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	e081      	b.n	8006128 <UART_SetConfig+0x250>
 8006024:	231b      	movs	r3, #27
 8006026:	2218      	movs	r2, #24
 8006028:	4694      	mov	ip, r2
 800602a:	44bc      	add	ip, r7
 800602c:	4463      	add	r3, ip
 800602e:	2204      	movs	r2, #4
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	e079      	b.n	8006128 <UART_SetConfig+0x250>
 8006034:	231b      	movs	r3, #27
 8006036:	2218      	movs	r2, #24
 8006038:	4694      	mov	ip, r2
 800603a:	44bc      	add	ip, r7
 800603c:	4463      	add	r3, ip
 800603e:	2208      	movs	r2, #8
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	e071      	b.n	8006128 <UART_SetConfig+0x250>
 8006044:	231b      	movs	r3, #27
 8006046:	2218      	movs	r2, #24
 8006048:	4694      	mov	ip, r2
 800604a:	44bc      	add	ip, r7
 800604c:	4463      	add	r3, ip
 800604e:	2210      	movs	r2, #16
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	e069      	b.n	8006128 <UART_SetConfig+0x250>
 8006054:	69fb      	ldr	r3, [r7, #28]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a64      	ldr	r2, [pc, #400]	; (80061ec <UART_SetConfig+0x314>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d107      	bne.n	800606e <UART_SetConfig+0x196>
 800605e:	231b      	movs	r3, #27
 8006060:	2218      	movs	r2, #24
 8006062:	4694      	mov	ip, r2
 8006064:	44bc      	add	ip, r7
 8006066:	4463      	add	r3, ip
 8006068:	2200      	movs	r2, #0
 800606a:	701a      	strb	r2, [r3, #0]
 800606c:	e05c      	b.n	8006128 <UART_SetConfig+0x250>
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	4a5f      	ldr	r2, [pc, #380]	; (80061f0 <UART_SetConfig+0x318>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d107      	bne.n	8006088 <UART_SetConfig+0x1b0>
 8006078:	231b      	movs	r3, #27
 800607a:	2218      	movs	r2, #24
 800607c:	4694      	mov	ip, r2
 800607e:	44bc      	add	ip, r7
 8006080:	4463      	add	r3, ip
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e04f      	b.n	8006128 <UART_SetConfig+0x250>
 8006088:	69fb      	ldr	r3, [r7, #28]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a52      	ldr	r2, [pc, #328]	; (80061d8 <UART_SetConfig+0x300>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d143      	bne.n	800611a <UART_SetConfig+0x242>
 8006092:	4b54      	ldr	r3, [pc, #336]	; (80061e4 <UART_SetConfig+0x30c>)
 8006094:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006096:	23c0      	movs	r3, #192	; 0xc0
 8006098:	011b      	lsls	r3, r3, #4
 800609a:	4013      	ands	r3, r2
 800609c:	22c0      	movs	r2, #192	; 0xc0
 800609e:	0112      	lsls	r2, r2, #4
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d02a      	beq.n	80060fa <UART_SetConfig+0x222>
 80060a4:	22c0      	movs	r2, #192	; 0xc0
 80060a6:	0112      	lsls	r2, r2, #4
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d82e      	bhi.n	800610a <UART_SetConfig+0x232>
 80060ac:	2280      	movs	r2, #128	; 0x80
 80060ae:	0112      	lsls	r2, r2, #4
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d012      	beq.n	80060da <UART_SetConfig+0x202>
 80060b4:	2280      	movs	r2, #128	; 0x80
 80060b6:	0112      	lsls	r2, r2, #4
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d826      	bhi.n	800610a <UART_SetConfig+0x232>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d004      	beq.n	80060ca <UART_SetConfig+0x1f2>
 80060c0:	2280      	movs	r2, #128	; 0x80
 80060c2:	00d2      	lsls	r2, r2, #3
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d010      	beq.n	80060ea <UART_SetConfig+0x212>
 80060c8:	e01f      	b.n	800610a <UART_SetConfig+0x232>
 80060ca:	231b      	movs	r3, #27
 80060cc:	2218      	movs	r2, #24
 80060ce:	4694      	mov	ip, r2
 80060d0:	44bc      	add	ip, r7
 80060d2:	4463      	add	r3, ip
 80060d4:	2200      	movs	r2, #0
 80060d6:	701a      	strb	r2, [r3, #0]
 80060d8:	e026      	b.n	8006128 <UART_SetConfig+0x250>
 80060da:	231b      	movs	r3, #27
 80060dc:	2218      	movs	r2, #24
 80060de:	4694      	mov	ip, r2
 80060e0:	44bc      	add	ip, r7
 80060e2:	4463      	add	r3, ip
 80060e4:	2202      	movs	r2, #2
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e01e      	b.n	8006128 <UART_SetConfig+0x250>
 80060ea:	231b      	movs	r3, #27
 80060ec:	2218      	movs	r2, #24
 80060ee:	4694      	mov	ip, r2
 80060f0:	44bc      	add	ip, r7
 80060f2:	4463      	add	r3, ip
 80060f4:	2204      	movs	r2, #4
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e016      	b.n	8006128 <UART_SetConfig+0x250>
 80060fa:	231b      	movs	r3, #27
 80060fc:	2218      	movs	r2, #24
 80060fe:	4694      	mov	ip, r2
 8006100:	44bc      	add	ip, r7
 8006102:	4463      	add	r3, ip
 8006104:	2208      	movs	r2, #8
 8006106:	701a      	strb	r2, [r3, #0]
 8006108:	e00e      	b.n	8006128 <UART_SetConfig+0x250>
 800610a:	231b      	movs	r3, #27
 800610c:	2218      	movs	r2, #24
 800610e:	4694      	mov	ip, r2
 8006110:	44bc      	add	ip, r7
 8006112:	4463      	add	r3, ip
 8006114:	2210      	movs	r2, #16
 8006116:	701a      	strb	r2, [r3, #0]
 8006118:	e006      	b.n	8006128 <UART_SetConfig+0x250>
 800611a:	231b      	movs	r3, #27
 800611c:	2218      	movs	r2, #24
 800611e:	4694      	mov	ip, r2
 8006120:	44bc      	add	ip, r7
 8006122:	4463      	add	r3, ip
 8006124:	2210      	movs	r2, #16
 8006126:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a2a      	ldr	r2, [pc, #168]	; (80061d8 <UART_SetConfig+0x300>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d000      	beq.n	8006134 <UART_SetConfig+0x25c>
 8006132:	e09e      	b.n	8006272 <UART_SetConfig+0x39a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006134:	231b      	movs	r3, #27
 8006136:	2218      	movs	r2, #24
 8006138:	4694      	mov	ip, r2
 800613a:	44bc      	add	ip, r7
 800613c:	4463      	add	r3, ip
 800613e:	781b      	ldrb	r3, [r3, #0]
 8006140:	2b08      	cmp	r3, #8
 8006142:	d01d      	beq.n	8006180 <UART_SetConfig+0x2a8>
 8006144:	dc20      	bgt.n	8006188 <UART_SetConfig+0x2b0>
 8006146:	2b04      	cmp	r3, #4
 8006148:	d015      	beq.n	8006176 <UART_SetConfig+0x29e>
 800614a:	dc1d      	bgt.n	8006188 <UART_SetConfig+0x2b0>
 800614c:	2b00      	cmp	r3, #0
 800614e:	d002      	beq.n	8006156 <UART_SetConfig+0x27e>
 8006150:	2b02      	cmp	r3, #2
 8006152:	d005      	beq.n	8006160 <UART_SetConfig+0x288>
 8006154:	e018      	b.n	8006188 <UART_SetConfig+0x2b0>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006156:	f7fe fd3d 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 800615a:	0003      	movs	r3, r0
 800615c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800615e:	e01d      	b.n	800619c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006160:	4b20      	ldr	r3, [pc, #128]	; (80061e4 <UART_SetConfig+0x30c>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2210      	movs	r2, #16
 8006166:	4013      	ands	r3, r2
 8006168:	d002      	beq.n	8006170 <UART_SetConfig+0x298>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800616a:	4b22      	ldr	r3, [pc, #136]	; (80061f4 <UART_SetConfig+0x31c>)
 800616c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800616e:	e015      	b.n	800619c <UART_SetConfig+0x2c4>
          pclk = (uint32_t) HSI_VALUE;
 8006170:	4b21      	ldr	r3, [pc, #132]	; (80061f8 <UART_SetConfig+0x320>)
 8006172:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006174:	e012      	b.n	800619c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006176:	f7fe fc7f 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 800617a:	0003      	movs	r3, r0
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800617e:	e00d      	b.n	800619c <UART_SetConfig+0x2c4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006180:	2380      	movs	r3, #128	; 0x80
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006186:	e009      	b.n	800619c <UART_SetConfig+0x2c4>
      default:
        pclk = 0U;
 8006188:	2300      	movs	r3, #0
 800618a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800618c:	231a      	movs	r3, #26
 800618e:	2218      	movs	r2, #24
 8006190:	4694      	mov	ip, r2
 8006192:	44bc      	add	ip, r7
 8006194:	4463      	add	r3, ip
 8006196:	2201      	movs	r2, #1
 8006198:	701a      	strb	r2, [r3, #0]
        break;
 800619a:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800619c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d100      	bne.n	80061a4 <UART_SetConfig+0x2cc>
 80061a2:	e13c      	b.n	800641e <UART_SetConfig+0x546>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	685a      	ldr	r2, [r3, #4]
 80061a8:	0013      	movs	r3, r2
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	189b      	adds	r3, r3, r2
 80061ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d305      	bcc.n	80061c0 <UART_SetConfig+0x2e8>
          (pclk > (4096U * huart->Init.BaudRate)))
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80061ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80061bc:	429a      	cmp	r2, r3
 80061be:	d91d      	bls.n	80061fc <UART_SetConfig+0x324>
      {
        ret = HAL_ERROR;
 80061c0:	231a      	movs	r3, #26
 80061c2:	2218      	movs	r2, #24
 80061c4:	4694      	mov	ip, r2
 80061c6:	44bc      	add	ip, r7
 80061c8:	4463      	add	r3, ip
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
 80061ce:	e126      	b.n	800641e <UART_SetConfig+0x546>
 80061d0:	efff69f3 	.word	0xefff69f3
 80061d4:	ffffcfff 	.word	0xffffcfff
 80061d8:	40004800 	.word	0x40004800
 80061dc:	fffff4ff 	.word	0xfffff4ff
 80061e0:	40013800 	.word	0x40013800
 80061e4:	40021000 	.word	0x40021000
 80061e8:	40004400 	.word	0x40004400
 80061ec:	40004c00 	.word	0x40004c00
 80061f0:	40005000 	.word	0x40005000
 80061f4:	003d0900 	.word	0x003d0900
 80061f8:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80061fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	2300      	movs	r3, #0
 8006202:	617b      	str	r3, [r7, #20]
 8006204:	6939      	ldr	r1, [r7, #16]
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	000b      	movs	r3, r1
 800620a:	0e1b      	lsrs	r3, r3, #24
 800620c:	0010      	movs	r0, r2
 800620e:	0205      	lsls	r5, r0, #8
 8006210:	431d      	orrs	r5, r3
 8006212:	000b      	movs	r3, r1
 8006214:	021c      	lsls	r4, r3, #8
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	685b      	ldr	r3, [r3, #4]
 800621a:	085b      	lsrs	r3, r3, #1
 800621c:	60bb      	str	r3, [r7, #8]
 800621e:	2300      	movs	r3, #0
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	68b8      	ldr	r0, [r7, #8]
 8006224:	68f9      	ldr	r1, [r7, #12]
 8006226:	1900      	adds	r0, r0, r4
 8006228:	4169      	adcs	r1, r5
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	685b      	ldr	r3, [r3, #4]
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	2300      	movs	r3, #0
 8006232:	607b      	str	r3, [r7, #4]
 8006234:	683a      	ldr	r2, [r7, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f7fa f804 	bl	8000244 <__aeabi_uldivmod>
 800623c:	0002      	movs	r2, r0
 800623e:	000b      	movs	r3, r1
 8006240:	0013      	movs	r3, r2
 8006242:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006244:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006246:	23c0      	movs	r3, #192	; 0xc0
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	429a      	cmp	r2, r3
 800624c:	d309      	bcc.n	8006262 <UART_SetConfig+0x38a>
 800624e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006250:	2380      	movs	r3, #128	; 0x80
 8006252:	035b      	lsls	r3, r3, #13
 8006254:	429a      	cmp	r2, r3
 8006256:	d204      	bcs.n	8006262 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800625e:	60da      	str	r2, [r3, #12]
 8006260:	e0dd      	b.n	800641e <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006262:	231a      	movs	r3, #26
 8006264:	2218      	movs	r2, #24
 8006266:	4694      	mov	ip, r2
 8006268:	44bc      	add	ip, r7
 800626a:	4463      	add	r3, ip
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e0d5      	b.n	800641e <UART_SetConfig+0x546>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006272:	69fb      	ldr	r3, [r7, #28]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	2380      	movs	r3, #128	; 0x80
 8006278:	021b      	lsls	r3, r3, #8
 800627a:	429a      	cmp	r2, r3
 800627c:	d000      	beq.n	8006280 <UART_SetConfig+0x3a8>
 800627e:	e074      	b.n	800636a <UART_SetConfig+0x492>
  {
    switch (clocksource)
 8006280:	231b      	movs	r3, #27
 8006282:	2218      	movs	r2, #24
 8006284:	4694      	mov	ip, r2
 8006286:	44bc      	add	ip, r7
 8006288:	4463      	add	r3, ip
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b08      	cmp	r3, #8
 800628e:	d822      	bhi.n	80062d6 <UART_SetConfig+0x3fe>
 8006290:	009a      	lsls	r2, r3, #2
 8006292:	4b6b      	ldr	r3, [pc, #428]	; (8006440 <UART_SetConfig+0x568>)
 8006294:	18d3      	adds	r3, r2, r3
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800629a:	f7fe fc9b 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 800629e:	0003      	movs	r3, r0
 80062a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062a2:	e022      	b.n	80062ea <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80062a4:	f7fe fcac 	bl	8004c00 <HAL_RCC_GetPCLK2Freq>
 80062a8:	0003      	movs	r3, r0
 80062aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062ac:	e01d      	b.n	80062ea <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062ae:	4b65      	ldr	r3, [pc, #404]	; (8006444 <UART_SetConfig+0x56c>)
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2210      	movs	r2, #16
 80062b4:	4013      	ands	r3, r2
 80062b6:	d002      	beq.n	80062be <UART_SetConfig+0x3e6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80062b8:	4b63      	ldr	r3, [pc, #396]	; (8006448 <UART_SetConfig+0x570>)
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062bc:	e015      	b.n	80062ea <UART_SetConfig+0x412>
          pclk = (uint32_t) HSI_VALUE;
 80062be:	4b63      	ldr	r3, [pc, #396]	; (800644c <UART_SetConfig+0x574>)
 80062c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062c2:	e012      	b.n	80062ea <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80062c4:	f7fe fbd8 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 80062c8:	0003      	movs	r3, r0
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062cc:	e00d      	b.n	80062ea <UART_SetConfig+0x412>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062ce:	2380      	movs	r3, #128	; 0x80
 80062d0:	021b      	lsls	r3, r3, #8
 80062d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80062d4:	e009      	b.n	80062ea <UART_SetConfig+0x412>
      default:
        pclk = 0U;
 80062d6:	2300      	movs	r3, #0
 80062d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80062da:	231a      	movs	r3, #26
 80062dc:	2218      	movs	r2, #24
 80062de:	4694      	mov	ip, r2
 80062e0:	44bc      	add	ip, r7
 80062e2:	4463      	add	r3, ip
 80062e4:	2201      	movs	r2, #1
 80062e6:	701a      	strb	r2, [r3, #0]
        break;
 80062e8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d100      	bne.n	80062f2 <UART_SetConfig+0x41a>
 80062f0:	e095      	b.n	800641e <UART_SetConfig+0x546>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80062f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062f4:	005a      	lsls	r2, r3, #1
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	085b      	lsrs	r3, r3, #1
 80062fc:	18d2      	adds	r2, r2, r3
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	0019      	movs	r1, r3
 8006304:	0010      	movs	r0, r2
 8006306:	f7f9 ff11 	bl	800012c <__udivsi3>
 800630a:	0003      	movs	r3, r0
 800630c:	b29b      	uxth	r3, r3
 800630e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006312:	2b0f      	cmp	r3, #15
 8006314:	d921      	bls.n	800635a <UART_SetConfig+0x482>
 8006316:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006318:	2380      	movs	r3, #128	; 0x80
 800631a:	025b      	lsls	r3, r3, #9
 800631c:	429a      	cmp	r2, r3
 800631e:	d21c      	bcs.n	800635a <UART_SetConfig+0x482>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006322:	b29a      	uxth	r2, r3
 8006324:	200e      	movs	r0, #14
 8006326:	2418      	movs	r4, #24
 8006328:	193b      	adds	r3, r7, r4
 800632a:	181b      	adds	r3, r3, r0
 800632c:	210f      	movs	r1, #15
 800632e:	438a      	bics	r2, r1
 8006330:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006334:	085b      	lsrs	r3, r3, #1
 8006336:	b29b      	uxth	r3, r3
 8006338:	2207      	movs	r2, #7
 800633a:	4013      	ands	r3, r2
 800633c:	b299      	uxth	r1, r3
 800633e:	193b      	adds	r3, r7, r4
 8006340:	181b      	adds	r3, r3, r0
 8006342:	193a      	adds	r2, r7, r4
 8006344:	1812      	adds	r2, r2, r0
 8006346:	8812      	ldrh	r2, [r2, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	193a      	adds	r2, r7, r4
 8006352:	1812      	adds	r2, r2, r0
 8006354:	8812      	ldrh	r2, [r2, #0]
 8006356:	60da      	str	r2, [r3, #12]
 8006358:	e061      	b.n	800641e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800635a:	231a      	movs	r3, #26
 800635c:	2218      	movs	r2, #24
 800635e:	4694      	mov	ip, r2
 8006360:	44bc      	add	ip, r7
 8006362:	4463      	add	r3, ip
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	e059      	b.n	800641e <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800636a:	231b      	movs	r3, #27
 800636c:	2218      	movs	r2, #24
 800636e:	4694      	mov	ip, r2
 8006370:	44bc      	add	ip, r7
 8006372:	4463      	add	r3, ip
 8006374:	781b      	ldrb	r3, [r3, #0]
 8006376:	2b08      	cmp	r3, #8
 8006378:	d822      	bhi.n	80063c0 <UART_SetConfig+0x4e8>
 800637a:	009a      	lsls	r2, r3, #2
 800637c:	4b34      	ldr	r3, [pc, #208]	; (8006450 <UART_SetConfig+0x578>)
 800637e:	18d3      	adds	r3, r2, r3
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006384:	f7fe fc26 	bl	8004bd4 <HAL_RCC_GetPCLK1Freq>
 8006388:	0003      	movs	r3, r0
 800638a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800638c:	e022      	b.n	80063d4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800638e:	f7fe fc37 	bl	8004c00 <HAL_RCC_GetPCLK2Freq>
 8006392:	0003      	movs	r3, r0
 8006394:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006396:	e01d      	b.n	80063d4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006398:	4b2a      	ldr	r3, [pc, #168]	; (8006444 <UART_SetConfig+0x56c>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2210      	movs	r2, #16
 800639e:	4013      	ands	r3, r2
 80063a0:	d002      	beq.n	80063a8 <UART_SetConfig+0x4d0>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80063a2:	4b29      	ldr	r3, [pc, #164]	; (8006448 <UART_SetConfig+0x570>)
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063a6:	e015      	b.n	80063d4 <UART_SetConfig+0x4fc>
          pclk = (uint32_t) HSI_VALUE;
 80063a8:	4b28      	ldr	r3, [pc, #160]	; (800644c <UART_SetConfig+0x574>)
 80063aa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063ac:	e012      	b.n	80063d4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ae:	f7fe fb63 	bl	8004a78 <HAL_RCC_GetSysClockFreq>
 80063b2:	0003      	movs	r3, r0
 80063b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063b6:	e00d      	b.n	80063d4 <UART_SetConfig+0x4fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063b8:	2380      	movs	r3, #128	; 0x80
 80063ba:	021b      	lsls	r3, r3, #8
 80063bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063be:	e009      	b.n	80063d4 <UART_SetConfig+0x4fc>
      default:
        pclk = 0U;
 80063c0:	2300      	movs	r3, #0
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80063c4:	231a      	movs	r3, #26
 80063c6:	2218      	movs	r2, #24
 80063c8:	4694      	mov	ip, r2
 80063ca:	44bc      	add	ip, r7
 80063cc:	4463      	add	r3, ip
 80063ce:	2201      	movs	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]
        break;
 80063d2:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80063d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d021      	beq.n	800641e <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	085a      	lsrs	r2, r3, #1
 80063e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063e2:	18d2      	adds	r2, r2, r3
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	0019      	movs	r1, r3
 80063ea:	0010      	movs	r0, r2
 80063ec:	f7f9 fe9e 	bl	800012c <__udivsi3>
 80063f0:	0003      	movs	r3, r0
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	2b0f      	cmp	r3, #15
 80063fa:	d909      	bls.n	8006410 <UART_SetConfig+0x538>
 80063fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063fe:	2380      	movs	r3, #128	; 0x80
 8006400:	025b      	lsls	r3, r3, #9
 8006402:	429a      	cmp	r2, r3
 8006404:	d204      	bcs.n	8006410 <UART_SetConfig+0x538>
      {
        huart->Instance->BRR = usartdiv;
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800640c:	60da      	str	r2, [r3, #12]
 800640e:	e006      	b.n	800641e <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006410:	231a      	movs	r3, #26
 8006412:	2218      	movs	r2, #24
 8006414:	4694      	mov	ip, r2
 8006416:	44bc      	add	ip, r7
 8006418:	4463      	add	r3, ip
 800641a:	2201      	movs	r2, #1
 800641c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800641e:	69fb      	ldr	r3, [r7, #28]
 8006420:	2200      	movs	r2, #0
 8006422:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2200      	movs	r2, #0
 8006428:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800642a:	231a      	movs	r3, #26
 800642c:	2218      	movs	r2, #24
 800642e:	4694      	mov	ip, r2
 8006430:	44bc      	add	ip, r7
 8006432:	4463      	add	r3, ip
 8006434:	781b      	ldrb	r3, [r3, #0]
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b00e      	add	sp, #56	; 0x38
 800643c:	bdb0      	pop	{r4, r5, r7, pc}
 800643e:	46c0      	nop			; (mov r8, r8)
 8006440:	08009010 	.word	0x08009010
 8006444:	40021000 	.word	0x40021000
 8006448:	003d0900 	.word	0x003d0900
 800644c:	00f42400 	.word	0x00f42400
 8006450:	08009034 	.word	0x08009034

08006454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006460:	2201      	movs	r2, #1
 8006462:	4013      	ands	r3, r2
 8006464:	d00b      	beq.n	800647e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	685b      	ldr	r3, [r3, #4]
 800646c:	4a4a      	ldr	r2, [pc, #296]	; (8006598 <UART_AdvFeatureConfig+0x144>)
 800646e:	4013      	ands	r3, r2
 8006470:	0019      	movs	r1, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	430a      	orrs	r2, r1
 800647c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	2202      	movs	r2, #2
 8006484:	4013      	ands	r3, r2
 8006486:	d00b      	beq.n	80064a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	4a43      	ldr	r2, [pc, #268]	; (800659c <UART_AdvFeatureConfig+0x148>)
 8006490:	4013      	ands	r3, r2
 8006492:	0019      	movs	r1, r3
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	430a      	orrs	r2, r1
 800649e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a4:	2204      	movs	r2, #4
 80064a6:	4013      	ands	r3, r2
 80064a8:	d00b      	beq.n	80064c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	4a3b      	ldr	r2, [pc, #236]	; (80065a0 <UART_AdvFeatureConfig+0x14c>)
 80064b2:	4013      	ands	r3, r2
 80064b4:	0019      	movs	r1, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	2208      	movs	r2, #8
 80064c8:	4013      	ands	r3, r2
 80064ca:	d00b      	beq.n	80064e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	4a34      	ldr	r2, [pc, #208]	; (80065a4 <UART_AdvFeatureConfig+0x150>)
 80064d4:	4013      	ands	r3, r2
 80064d6:	0019      	movs	r1, r3
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	430a      	orrs	r2, r1
 80064e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	2210      	movs	r2, #16
 80064ea:	4013      	ands	r3, r2
 80064ec:	d00b      	beq.n	8006506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	4a2c      	ldr	r2, [pc, #176]	; (80065a8 <UART_AdvFeatureConfig+0x154>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	0019      	movs	r1, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	430a      	orrs	r2, r1
 8006504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	2220      	movs	r2, #32
 800650c:	4013      	ands	r3, r2
 800650e:	d00b      	beq.n	8006528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	689b      	ldr	r3, [r3, #8]
 8006516:	4a25      	ldr	r2, [pc, #148]	; (80065ac <UART_AdvFeatureConfig+0x158>)
 8006518:	4013      	ands	r3, r2
 800651a:	0019      	movs	r1, r3
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	430a      	orrs	r2, r1
 8006526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	2240      	movs	r2, #64	; 0x40
 800652e:	4013      	ands	r3, r2
 8006530:	d01d      	beq.n	800656e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	4a1d      	ldr	r2, [pc, #116]	; (80065b0 <UART_AdvFeatureConfig+0x15c>)
 800653a:	4013      	ands	r3, r2
 800653c:	0019      	movs	r1, r3
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	430a      	orrs	r2, r1
 8006548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	035b      	lsls	r3, r3, #13
 8006552:	429a      	cmp	r2, r3
 8006554:	d10b      	bne.n	800656e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	4a15      	ldr	r2, [pc, #84]	; (80065b4 <UART_AdvFeatureConfig+0x160>)
 800655e:	4013      	ands	r3, r2
 8006560:	0019      	movs	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	430a      	orrs	r2, r1
 800656c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006572:	2280      	movs	r2, #128	; 0x80
 8006574:	4013      	ands	r3, r2
 8006576:	d00b      	beq.n	8006590 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	685b      	ldr	r3, [r3, #4]
 800657e:	4a0e      	ldr	r2, [pc, #56]	; (80065b8 <UART_AdvFeatureConfig+0x164>)
 8006580:	4013      	ands	r3, r2
 8006582:	0019      	movs	r1, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	430a      	orrs	r2, r1
 800658e:	605a      	str	r2, [r3, #4]
  }
}
 8006590:	46c0      	nop			; (mov r8, r8)
 8006592:	46bd      	mov	sp, r7
 8006594:	b002      	add	sp, #8
 8006596:	bd80      	pop	{r7, pc}
 8006598:	fffdffff 	.word	0xfffdffff
 800659c:	fffeffff 	.word	0xfffeffff
 80065a0:	fffbffff 	.word	0xfffbffff
 80065a4:	ffff7fff 	.word	0xffff7fff
 80065a8:	ffffefff 	.word	0xffffefff
 80065ac:	ffffdfff 	.word	0xffffdfff
 80065b0:	ffefffff 	.word	0xffefffff
 80065b4:	ff9fffff 	.word	0xff9fffff
 80065b8:	fff7ffff 	.word	0xfff7ffff

080065bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b086      	sub	sp, #24
 80065c0:	af02      	add	r7, sp, #8
 80065c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2280      	movs	r2, #128	; 0x80
 80065c8:	2100      	movs	r1, #0
 80065ca:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80065cc:	f7fc fbec 	bl	8002da8 <HAL_GetTick>
 80065d0:	0003      	movs	r3, r0
 80065d2:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2208      	movs	r2, #8
 80065dc:	4013      	ands	r3, r2
 80065de:	2b08      	cmp	r3, #8
 80065e0:	d10c      	bne.n	80065fc <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2280      	movs	r2, #128	; 0x80
 80065e6:	0391      	lsls	r1, r2, #14
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	4a17      	ldr	r2, [pc, #92]	; (8006648 <UART_CheckIdleState+0x8c>)
 80065ec:	9200      	str	r2, [sp, #0]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f000 f82c 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 80065f4:	1e03      	subs	r3, r0, #0
 80065f6:	d001      	beq.n	80065fc <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e021      	b.n	8006640 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2204      	movs	r2, #4
 8006604:	4013      	ands	r3, r2
 8006606:	2b04      	cmp	r3, #4
 8006608:	d10c      	bne.n	8006624 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	03d1      	lsls	r1, r2, #15
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	4a0d      	ldr	r2, [pc, #52]	; (8006648 <UART_CheckIdleState+0x8c>)
 8006614:	9200      	str	r2, [sp, #0]
 8006616:	2200      	movs	r2, #0
 8006618:	f000 f818 	bl	800664c <UART_WaitOnFlagUntilTimeout>
 800661c:	1e03      	subs	r3, r0, #0
 800661e:	d001      	beq.n	8006624 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006620:	2303      	movs	r3, #3
 8006622:	e00d      	b.n	8006640 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2220      	movs	r2, #32
 8006628:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2274      	movs	r2, #116	; 0x74
 800663a:	2100      	movs	r1, #0
 800663c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800663e:	2300      	movs	r3, #0
}
 8006640:	0018      	movs	r0, r3
 8006642:	46bd      	mov	sp, r7
 8006644:	b004      	add	sp, #16
 8006646:	bd80      	pop	{r7, pc}
 8006648:	01ffffff 	.word	0x01ffffff

0800664c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b094      	sub	sp, #80	; 0x50
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	1dfb      	adds	r3, r7, #7
 800665a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665c:	e0a3      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800665e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006660:	3301      	adds	r3, #1
 8006662:	d100      	bne.n	8006666 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006664:	e09f      	b.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006666:	f7fc fb9f 	bl	8002da8 <HAL_GetTick>
 800666a:	0002      	movs	r2, r0
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	1ad3      	subs	r3, r2, r3
 8006670:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006672:	429a      	cmp	r2, r3
 8006674:	d302      	bcc.n	800667c <UART_WaitOnFlagUntilTimeout+0x30>
 8006676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006678:	2b00      	cmp	r3, #0
 800667a:	d13d      	bne.n	80066f8 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800667c:	f3ef 8310 	mrs	r3, PRIMASK
 8006680:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006682:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
 8006686:	2301      	movs	r3, #1
 8006688:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800668a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800668c:	f383 8810 	msr	PRIMASK, r3
}
 8006690:	46c0      	nop			; (mov r8, r8)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	494c      	ldr	r1, [pc, #304]	; (80067d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 800669e:	400a      	ands	r2, r1
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	f383 8810 	msr	PRIMASK, r3
}
 80066ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ae:	f3ef 8310 	mrs	r3, PRIMASK
 80066b2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80066b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b6:	643b      	str	r3, [r7, #64]	; 0x40
 80066b8:	2301      	movs	r3, #1
 80066ba:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066be:	f383 8810 	msr	PRIMASK, r3
}
 80066c2:	46c0      	nop			; (mov r8, r8)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	2101      	movs	r1, #1
 80066d0:	438a      	bics	r2, r1
 80066d2:	609a      	str	r2, [r3, #8]
 80066d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066da:	f383 8810 	msr	PRIMASK, r3
}
 80066de:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2220      	movs	r2, #32
 80066e4:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2220      	movs	r2, #32
 80066ea:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2274      	movs	r2, #116	; 0x74
 80066f0:	2100      	movs	r1, #0
 80066f2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80066f4:	2303      	movs	r3, #3
 80066f6:	e067      	b.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2204      	movs	r2, #4
 8006700:	4013      	ands	r3, r2
 8006702:	d050      	beq.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	2380      	movs	r3, #128	; 0x80
 800670c:	011b      	lsls	r3, r3, #4
 800670e:	401a      	ands	r2, r3
 8006710:	2380      	movs	r3, #128	; 0x80
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	429a      	cmp	r2, r3
 8006716:	d146      	bne.n	80067a6 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	2280      	movs	r2, #128	; 0x80
 800671e:	0112      	lsls	r2, r2, #4
 8006720:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006722:	f3ef 8310 	mrs	r3, PRIMASK
 8006726:	613b      	str	r3, [r7, #16]
  return(result);
 8006728:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800672a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672c:	2301      	movs	r3, #1
 800672e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f383 8810 	msr	PRIMASK, r3
}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	4923      	ldr	r1, [pc, #140]	; (80067d0 <UART_WaitOnFlagUntilTimeout+0x184>)
 8006744:	400a      	ands	r2, r1
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800674a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800674c:	69bb      	ldr	r3, [r7, #24]
 800674e:	f383 8810 	msr	PRIMASK, r3
}
 8006752:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006754:	f3ef 8310 	mrs	r3, PRIMASK
 8006758:	61fb      	str	r3, [r7, #28]
  return(result);
 800675a:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800675c:	64bb      	str	r3, [r7, #72]	; 0x48
 800675e:	2301      	movs	r3, #1
 8006760:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006762:	6a3b      	ldr	r3, [r7, #32]
 8006764:	f383 8810 	msr	PRIMASK, r3
}
 8006768:	46c0      	nop			; (mov r8, r8)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689a      	ldr	r2, [r3, #8]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2101      	movs	r1, #1
 8006776:	438a      	bics	r2, r1
 8006778:	609a      	str	r2, [r3, #8]
 800677a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800677c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	f383 8810 	msr	PRIMASK, r3
}
 8006784:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2220      	movs	r2, #32
 800678a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	2220      	movs	r2, #32
 8006790:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2280      	movs	r2, #128	; 0x80
 8006796:	2120      	movs	r1, #32
 8006798:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	2274      	movs	r2, #116	; 0x74
 800679e:	2100      	movs	r1, #0
 80067a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80067a2:	2303      	movs	r3, #3
 80067a4:	e010      	b.n	80067c8 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	69db      	ldr	r3, [r3, #28]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	4013      	ands	r3, r2
 80067b0:	68ba      	ldr	r2, [r7, #8]
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	425a      	negs	r2, r3
 80067b6:	4153      	adcs	r3, r2
 80067b8:	b2db      	uxtb	r3, r3
 80067ba:	001a      	movs	r2, r3
 80067bc:	1dfb      	adds	r3, r7, #7
 80067be:	781b      	ldrb	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d100      	bne.n	80067c6 <UART_WaitOnFlagUntilTimeout+0x17a>
 80067c4:	e74b      	b.n	800665e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80067c6:	2300      	movs	r3, #0
}
 80067c8:	0018      	movs	r0, r3
 80067ca:	46bd      	mov	sp, r7
 80067cc:	b014      	add	sp, #80	; 0x50
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	fffffe5f 	.word	0xfffffe5f

080067d4 <__errno>:
 80067d4:	4b01      	ldr	r3, [pc, #4]	; (80067dc <__errno+0x8>)
 80067d6:	6818      	ldr	r0, [r3, #0]
 80067d8:	4770      	bx	lr
 80067da:	46c0      	nop			; (mov r8, r8)
 80067dc:	20000014 	.word	0x20000014

080067e0 <__libc_init_array>:
 80067e0:	b570      	push	{r4, r5, r6, lr}
 80067e2:	2600      	movs	r6, #0
 80067e4:	4d0c      	ldr	r5, [pc, #48]	; (8006818 <__libc_init_array+0x38>)
 80067e6:	4c0d      	ldr	r4, [pc, #52]	; (800681c <__libc_init_array+0x3c>)
 80067e8:	1b64      	subs	r4, r4, r5
 80067ea:	10a4      	asrs	r4, r4, #2
 80067ec:	42a6      	cmp	r6, r4
 80067ee:	d109      	bne.n	8006804 <__libc_init_array+0x24>
 80067f0:	2600      	movs	r6, #0
 80067f2:	f001 f943 	bl	8007a7c <_init>
 80067f6:	4d0a      	ldr	r5, [pc, #40]	; (8006820 <__libc_init_array+0x40>)
 80067f8:	4c0a      	ldr	r4, [pc, #40]	; (8006824 <__libc_init_array+0x44>)
 80067fa:	1b64      	subs	r4, r4, r5
 80067fc:	10a4      	asrs	r4, r4, #2
 80067fe:	42a6      	cmp	r6, r4
 8006800:	d105      	bne.n	800680e <__libc_init_array+0x2e>
 8006802:	bd70      	pop	{r4, r5, r6, pc}
 8006804:	00b3      	lsls	r3, r6, #2
 8006806:	58eb      	ldr	r3, [r5, r3]
 8006808:	4798      	blx	r3
 800680a:	3601      	adds	r6, #1
 800680c:	e7ee      	b.n	80067ec <__libc_init_array+0xc>
 800680e:	00b3      	lsls	r3, r6, #2
 8006810:	58eb      	ldr	r3, [r5, r3]
 8006812:	4798      	blx	r3
 8006814:	3601      	adds	r6, #1
 8006816:	e7f2      	b.n	80067fe <__libc_init_array+0x1e>
 8006818:	08009210 	.word	0x08009210
 800681c:	08009210 	.word	0x08009210
 8006820:	08009210 	.word	0x08009210
 8006824:	08009214 	.word	0x08009214

08006828 <memset>:
 8006828:	0003      	movs	r3, r0
 800682a:	1882      	adds	r2, r0, r2
 800682c:	4293      	cmp	r3, r2
 800682e:	d100      	bne.n	8006832 <memset+0xa>
 8006830:	4770      	bx	lr
 8006832:	7019      	strb	r1, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	e7f9      	b.n	800682c <memset+0x4>

08006838 <siprintf>:
 8006838:	b40e      	push	{r1, r2, r3}
 800683a:	b500      	push	{lr}
 800683c:	490b      	ldr	r1, [pc, #44]	; (800686c <siprintf+0x34>)
 800683e:	b09c      	sub	sp, #112	; 0x70
 8006840:	ab1d      	add	r3, sp, #116	; 0x74
 8006842:	9002      	str	r0, [sp, #8]
 8006844:	9006      	str	r0, [sp, #24]
 8006846:	9107      	str	r1, [sp, #28]
 8006848:	9104      	str	r1, [sp, #16]
 800684a:	4809      	ldr	r0, [pc, #36]	; (8006870 <siprintf+0x38>)
 800684c:	4909      	ldr	r1, [pc, #36]	; (8006874 <siprintf+0x3c>)
 800684e:	cb04      	ldmia	r3!, {r2}
 8006850:	9105      	str	r1, [sp, #20]
 8006852:	6800      	ldr	r0, [r0, #0]
 8006854:	a902      	add	r1, sp, #8
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	f000 f89a 	bl	8006990 <_svfiprintf_r>
 800685c:	2300      	movs	r3, #0
 800685e:	9a02      	ldr	r2, [sp, #8]
 8006860:	7013      	strb	r3, [r2, #0]
 8006862:	b01c      	add	sp, #112	; 0x70
 8006864:	bc08      	pop	{r3}
 8006866:	b003      	add	sp, #12
 8006868:	4718      	bx	r3
 800686a:	46c0      	nop			; (mov r8, r8)
 800686c:	7fffffff 	.word	0x7fffffff
 8006870:	20000014 	.word	0x20000014
 8006874:	ffff0208 	.word	0xffff0208

08006878 <siscanf>:
 8006878:	b40e      	push	{r1, r2, r3}
 800687a:	b530      	push	{r4, r5, lr}
 800687c:	2381      	movs	r3, #129	; 0x81
 800687e:	b09c      	sub	sp, #112	; 0x70
 8006880:	466a      	mov	r2, sp
 8006882:	ac1f      	add	r4, sp, #124	; 0x7c
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	cc20      	ldmia	r4!, {r5}
 8006888:	8293      	strh	r3, [r2, #20]
 800688a:	9002      	str	r0, [sp, #8]
 800688c:	9006      	str	r0, [sp, #24]
 800688e:	f7f9 fc3b 	bl	8000108 <strlen>
 8006892:	4b0b      	ldr	r3, [pc, #44]	; (80068c0 <siscanf+0x48>)
 8006894:	466a      	mov	r2, sp
 8006896:	930b      	str	r3, [sp, #44]	; 0x2c
 8006898:	2300      	movs	r3, #0
 800689a:	9003      	str	r0, [sp, #12]
 800689c:	9007      	str	r0, [sp, #28]
 800689e:	4809      	ldr	r0, [pc, #36]	; (80068c4 <siscanf+0x4c>)
 80068a0:	930f      	str	r3, [sp, #60]	; 0x3c
 80068a2:	9314      	str	r3, [sp, #80]	; 0x50
 80068a4:	3b01      	subs	r3, #1
 80068a6:	82d3      	strh	r3, [r2, #22]
 80068a8:	a902      	add	r1, sp, #8
 80068aa:	0023      	movs	r3, r4
 80068ac:	002a      	movs	r2, r5
 80068ae:	6800      	ldr	r0, [r0, #0]
 80068b0:	9401      	str	r4, [sp, #4]
 80068b2:	f000 f9c9 	bl	8006c48 <__ssvfiscanf_r>
 80068b6:	b01c      	add	sp, #112	; 0x70
 80068b8:	bc30      	pop	{r4, r5}
 80068ba:	bc08      	pop	{r3}
 80068bc:	b003      	add	sp, #12
 80068be:	4718      	bx	r3
 80068c0:	080068c9 	.word	0x080068c9
 80068c4:	20000014 	.word	0x20000014

080068c8 <__seofread>:
 80068c8:	2000      	movs	r0, #0
 80068ca:	4770      	bx	lr

080068cc <__ssputs_r>:
 80068cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068ce:	688e      	ldr	r6, [r1, #8]
 80068d0:	b085      	sub	sp, #20
 80068d2:	0007      	movs	r7, r0
 80068d4:	000c      	movs	r4, r1
 80068d6:	9203      	str	r2, [sp, #12]
 80068d8:	9301      	str	r3, [sp, #4]
 80068da:	429e      	cmp	r6, r3
 80068dc:	d83c      	bhi.n	8006958 <__ssputs_r+0x8c>
 80068de:	2390      	movs	r3, #144	; 0x90
 80068e0:	898a      	ldrh	r2, [r1, #12]
 80068e2:	00db      	lsls	r3, r3, #3
 80068e4:	421a      	tst	r2, r3
 80068e6:	d034      	beq.n	8006952 <__ssputs_r+0x86>
 80068e8:	2503      	movs	r5, #3
 80068ea:	6909      	ldr	r1, [r1, #16]
 80068ec:	6823      	ldr	r3, [r4, #0]
 80068ee:	1a5b      	subs	r3, r3, r1
 80068f0:	9302      	str	r3, [sp, #8]
 80068f2:	6963      	ldr	r3, [r4, #20]
 80068f4:	9802      	ldr	r0, [sp, #8]
 80068f6:	435d      	muls	r5, r3
 80068f8:	0feb      	lsrs	r3, r5, #31
 80068fa:	195d      	adds	r5, r3, r5
 80068fc:	9b01      	ldr	r3, [sp, #4]
 80068fe:	106d      	asrs	r5, r5, #1
 8006900:	3301      	adds	r3, #1
 8006902:	181b      	adds	r3, r3, r0
 8006904:	42ab      	cmp	r3, r5
 8006906:	d900      	bls.n	800690a <__ssputs_r+0x3e>
 8006908:	001d      	movs	r5, r3
 800690a:	0553      	lsls	r3, r2, #21
 800690c:	d532      	bpl.n	8006974 <__ssputs_r+0xa8>
 800690e:	0029      	movs	r1, r5
 8006910:	0038      	movs	r0, r7
 8006912:	f001 f805 	bl	8007920 <_malloc_r>
 8006916:	1e06      	subs	r6, r0, #0
 8006918:	d109      	bne.n	800692e <__ssputs_r+0x62>
 800691a:	230c      	movs	r3, #12
 800691c:	603b      	str	r3, [r7, #0]
 800691e:	2340      	movs	r3, #64	; 0x40
 8006920:	2001      	movs	r0, #1
 8006922:	89a2      	ldrh	r2, [r4, #12]
 8006924:	4240      	negs	r0, r0
 8006926:	4313      	orrs	r3, r2
 8006928:	81a3      	strh	r3, [r4, #12]
 800692a:	b005      	add	sp, #20
 800692c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800692e:	9a02      	ldr	r2, [sp, #8]
 8006930:	6921      	ldr	r1, [r4, #16]
 8006932:	f000 ff8e 	bl	8007852 <memcpy>
 8006936:	89a3      	ldrh	r3, [r4, #12]
 8006938:	4a14      	ldr	r2, [pc, #80]	; (800698c <__ssputs_r+0xc0>)
 800693a:	401a      	ands	r2, r3
 800693c:	2380      	movs	r3, #128	; 0x80
 800693e:	4313      	orrs	r3, r2
 8006940:	81a3      	strh	r3, [r4, #12]
 8006942:	9b02      	ldr	r3, [sp, #8]
 8006944:	6126      	str	r6, [r4, #16]
 8006946:	18f6      	adds	r6, r6, r3
 8006948:	6026      	str	r6, [r4, #0]
 800694a:	6165      	str	r5, [r4, #20]
 800694c:	9e01      	ldr	r6, [sp, #4]
 800694e:	1aed      	subs	r5, r5, r3
 8006950:	60a5      	str	r5, [r4, #8]
 8006952:	9b01      	ldr	r3, [sp, #4]
 8006954:	429e      	cmp	r6, r3
 8006956:	d900      	bls.n	800695a <__ssputs_r+0x8e>
 8006958:	9e01      	ldr	r6, [sp, #4]
 800695a:	0032      	movs	r2, r6
 800695c:	9903      	ldr	r1, [sp, #12]
 800695e:	6820      	ldr	r0, [r4, #0]
 8006960:	f000 ff80 	bl	8007864 <memmove>
 8006964:	68a3      	ldr	r3, [r4, #8]
 8006966:	2000      	movs	r0, #0
 8006968:	1b9b      	subs	r3, r3, r6
 800696a:	60a3      	str	r3, [r4, #8]
 800696c:	6823      	ldr	r3, [r4, #0]
 800696e:	199e      	adds	r6, r3, r6
 8006970:	6026      	str	r6, [r4, #0]
 8006972:	e7da      	b.n	800692a <__ssputs_r+0x5e>
 8006974:	002a      	movs	r2, r5
 8006976:	0038      	movs	r0, r7
 8006978:	f001 f830 	bl	80079dc <_realloc_r>
 800697c:	1e06      	subs	r6, r0, #0
 800697e:	d1e0      	bne.n	8006942 <__ssputs_r+0x76>
 8006980:	0038      	movs	r0, r7
 8006982:	6921      	ldr	r1, [r4, #16]
 8006984:	f000 ff82 	bl	800788c <_free_r>
 8006988:	e7c7      	b.n	800691a <__ssputs_r+0x4e>
 800698a:	46c0      	nop			; (mov r8, r8)
 800698c:	fffffb7f 	.word	0xfffffb7f

08006990 <_svfiprintf_r>:
 8006990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006992:	b0a1      	sub	sp, #132	; 0x84
 8006994:	9003      	str	r0, [sp, #12]
 8006996:	001d      	movs	r5, r3
 8006998:	898b      	ldrh	r3, [r1, #12]
 800699a:	000f      	movs	r7, r1
 800699c:	0016      	movs	r6, r2
 800699e:	061b      	lsls	r3, r3, #24
 80069a0:	d511      	bpl.n	80069c6 <_svfiprintf_r+0x36>
 80069a2:	690b      	ldr	r3, [r1, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d10e      	bne.n	80069c6 <_svfiprintf_r+0x36>
 80069a8:	2140      	movs	r1, #64	; 0x40
 80069aa:	f000 ffb9 	bl	8007920 <_malloc_r>
 80069ae:	6038      	str	r0, [r7, #0]
 80069b0:	6138      	str	r0, [r7, #16]
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d105      	bne.n	80069c2 <_svfiprintf_r+0x32>
 80069b6:	230c      	movs	r3, #12
 80069b8:	9a03      	ldr	r2, [sp, #12]
 80069ba:	3801      	subs	r0, #1
 80069bc:	6013      	str	r3, [r2, #0]
 80069be:	b021      	add	sp, #132	; 0x84
 80069c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069c2:	2340      	movs	r3, #64	; 0x40
 80069c4:	617b      	str	r3, [r7, #20]
 80069c6:	2300      	movs	r3, #0
 80069c8:	ac08      	add	r4, sp, #32
 80069ca:	6163      	str	r3, [r4, #20]
 80069cc:	3320      	adds	r3, #32
 80069ce:	7663      	strb	r3, [r4, #25]
 80069d0:	3310      	adds	r3, #16
 80069d2:	76a3      	strb	r3, [r4, #26]
 80069d4:	9507      	str	r5, [sp, #28]
 80069d6:	0035      	movs	r5, r6
 80069d8:	782b      	ldrb	r3, [r5, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <_svfiprintf_r+0x52>
 80069de:	2b25      	cmp	r3, #37	; 0x25
 80069e0:	d147      	bne.n	8006a72 <_svfiprintf_r+0xe2>
 80069e2:	1bab      	subs	r3, r5, r6
 80069e4:	9305      	str	r3, [sp, #20]
 80069e6:	42b5      	cmp	r5, r6
 80069e8:	d00c      	beq.n	8006a04 <_svfiprintf_r+0x74>
 80069ea:	0032      	movs	r2, r6
 80069ec:	0039      	movs	r1, r7
 80069ee:	9803      	ldr	r0, [sp, #12]
 80069f0:	f7ff ff6c 	bl	80068cc <__ssputs_r>
 80069f4:	1c43      	adds	r3, r0, #1
 80069f6:	d100      	bne.n	80069fa <_svfiprintf_r+0x6a>
 80069f8:	e0ae      	b.n	8006b58 <_svfiprintf_r+0x1c8>
 80069fa:	6962      	ldr	r2, [r4, #20]
 80069fc:	9b05      	ldr	r3, [sp, #20]
 80069fe:	4694      	mov	ip, r2
 8006a00:	4463      	add	r3, ip
 8006a02:	6163      	str	r3, [r4, #20]
 8006a04:	782b      	ldrb	r3, [r5, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d100      	bne.n	8006a0c <_svfiprintf_r+0x7c>
 8006a0a:	e0a5      	b.n	8006b58 <_svfiprintf_r+0x1c8>
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	2300      	movs	r3, #0
 8006a10:	4252      	negs	r2, r2
 8006a12:	6062      	str	r2, [r4, #4]
 8006a14:	a904      	add	r1, sp, #16
 8006a16:	3254      	adds	r2, #84	; 0x54
 8006a18:	1852      	adds	r2, r2, r1
 8006a1a:	1c6e      	adds	r6, r5, #1
 8006a1c:	6023      	str	r3, [r4, #0]
 8006a1e:	60e3      	str	r3, [r4, #12]
 8006a20:	60a3      	str	r3, [r4, #8]
 8006a22:	7013      	strb	r3, [r2, #0]
 8006a24:	65a3      	str	r3, [r4, #88]	; 0x58
 8006a26:	2205      	movs	r2, #5
 8006a28:	7831      	ldrb	r1, [r6, #0]
 8006a2a:	4854      	ldr	r0, [pc, #336]	; (8006b7c <_svfiprintf_r+0x1ec>)
 8006a2c:	f000 ff06 	bl	800783c <memchr>
 8006a30:	1c75      	adds	r5, r6, #1
 8006a32:	2800      	cmp	r0, #0
 8006a34:	d11f      	bne.n	8006a76 <_svfiprintf_r+0xe6>
 8006a36:	6822      	ldr	r2, [r4, #0]
 8006a38:	06d3      	lsls	r3, r2, #27
 8006a3a:	d504      	bpl.n	8006a46 <_svfiprintf_r+0xb6>
 8006a3c:	2353      	movs	r3, #83	; 0x53
 8006a3e:	a904      	add	r1, sp, #16
 8006a40:	185b      	adds	r3, r3, r1
 8006a42:	2120      	movs	r1, #32
 8006a44:	7019      	strb	r1, [r3, #0]
 8006a46:	0713      	lsls	r3, r2, #28
 8006a48:	d504      	bpl.n	8006a54 <_svfiprintf_r+0xc4>
 8006a4a:	2353      	movs	r3, #83	; 0x53
 8006a4c:	a904      	add	r1, sp, #16
 8006a4e:	185b      	adds	r3, r3, r1
 8006a50:	212b      	movs	r1, #43	; 0x2b
 8006a52:	7019      	strb	r1, [r3, #0]
 8006a54:	7833      	ldrb	r3, [r6, #0]
 8006a56:	2b2a      	cmp	r3, #42	; 0x2a
 8006a58:	d016      	beq.n	8006a88 <_svfiprintf_r+0xf8>
 8006a5a:	0035      	movs	r5, r6
 8006a5c:	2100      	movs	r1, #0
 8006a5e:	200a      	movs	r0, #10
 8006a60:	68e3      	ldr	r3, [r4, #12]
 8006a62:	782a      	ldrb	r2, [r5, #0]
 8006a64:	1c6e      	adds	r6, r5, #1
 8006a66:	3a30      	subs	r2, #48	; 0x30
 8006a68:	2a09      	cmp	r2, #9
 8006a6a:	d94e      	bls.n	8006b0a <_svfiprintf_r+0x17a>
 8006a6c:	2900      	cmp	r1, #0
 8006a6e:	d111      	bne.n	8006a94 <_svfiprintf_r+0x104>
 8006a70:	e017      	b.n	8006aa2 <_svfiprintf_r+0x112>
 8006a72:	3501      	adds	r5, #1
 8006a74:	e7b0      	b.n	80069d8 <_svfiprintf_r+0x48>
 8006a76:	4b41      	ldr	r3, [pc, #260]	; (8006b7c <_svfiprintf_r+0x1ec>)
 8006a78:	6822      	ldr	r2, [r4, #0]
 8006a7a:	1ac0      	subs	r0, r0, r3
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	4083      	lsls	r3, r0
 8006a80:	4313      	orrs	r3, r2
 8006a82:	002e      	movs	r6, r5
 8006a84:	6023      	str	r3, [r4, #0]
 8006a86:	e7ce      	b.n	8006a26 <_svfiprintf_r+0x96>
 8006a88:	9b07      	ldr	r3, [sp, #28]
 8006a8a:	1d19      	adds	r1, r3, #4
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	9107      	str	r1, [sp, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	db01      	blt.n	8006a98 <_svfiprintf_r+0x108>
 8006a94:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a96:	e004      	b.n	8006aa2 <_svfiprintf_r+0x112>
 8006a98:	425b      	negs	r3, r3
 8006a9a:	60e3      	str	r3, [r4, #12]
 8006a9c:	2302      	movs	r3, #2
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	6023      	str	r3, [r4, #0]
 8006aa2:	782b      	ldrb	r3, [r5, #0]
 8006aa4:	2b2e      	cmp	r3, #46	; 0x2e
 8006aa6:	d10a      	bne.n	8006abe <_svfiprintf_r+0x12e>
 8006aa8:	786b      	ldrb	r3, [r5, #1]
 8006aaa:	2b2a      	cmp	r3, #42	; 0x2a
 8006aac:	d135      	bne.n	8006b1a <_svfiprintf_r+0x18a>
 8006aae:	9b07      	ldr	r3, [sp, #28]
 8006ab0:	3502      	adds	r5, #2
 8006ab2:	1d1a      	adds	r2, r3, #4
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	9207      	str	r2, [sp, #28]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	db2b      	blt.n	8006b14 <_svfiprintf_r+0x184>
 8006abc:	9309      	str	r3, [sp, #36]	; 0x24
 8006abe:	4e30      	ldr	r6, [pc, #192]	; (8006b80 <_svfiprintf_r+0x1f0>)
 8006ac0:	2203      	movs	r2, #3
 8006ac2:	0030      	movs	r0, r6
 8006ac4:	7829      	ldrb	r1, [r5, #0]
 8006ac6:	f000 feb9 	bl	800783c <memchr>
 8006aca:	2800      	cmp	r0, #0
 8006acc:	d006      	beq.n	8006adc <_svfiprintf_r+0x14c>
 8006ace:	2340      	movs	r3, #64	; 0x40
 8006ad0:	1b80      	subs	r0, r0, r6
 8006ad2:	4083      	lsls	r3, r0
 8006ad4:	6822      	ldr	r2, [r4, #0]
 8006ad6:	3501      	adds	r5, #1
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	7829      	ldrb	r1, [r5, #0]
 8006ade:	2206      	movs	r2, #6
 8006ae0:	4828      	ldr	r0, [pc, #160]	; (8006b84 <_svfiprintf_r+0x1f4>)
 8006ae2:	1c6e      	adds	r6, r5, #1
 8006ae4:	7621      	strb	r1, [r4, #24]
 8006ae6:	f000 fea9 	bl	800783c <memchr>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d03c      	beq.n	8006b68 <_svfiprintf_r+0x1d8>
 8006aee:	4b26      	ldr	r3, [pc, #152]	; (8006b88 <_svfiprintf_r+0x1f8>)
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d125      	bne.n	8006b40 <_svfiprintf_r+0x1b0>
 8006af4:	2207      	movs	r2, #7
 8006af6:	9b07      	ldr	r3, [sp, #28]
 8006af8:	3307      	adds	r3, #7
 8006afa:	4393      	bics	r3, r2
 8006afc:	3308      	adds	r3, #8
 8006afe:	9307      	str	r3, [sp, #28]
 8006b00:	6963      	ldr	r3, [r4, #20]
 8006b02:	9a04      	ldr	r2, [sp, #16]
 8006b04:	189b      	adds	r3, r3, r2
 8006b06:	6163      	str	r3, [r4, #20]
 8006b08:	e765      	b.n	80069d6 <_svfiprintf_r+0x46>
 8006b0a:	4343      	muls	r3, r0
 8006b0c:	0035      	movs	r5, r6
 8006b0e:	2101      	movs	r1, #1
 8006b10:	189b      	adds	r3, r3, r2
 8006b12:	e7a6      	b.n	8006a62 <_svfiprintf_r+0xd2>
 8006b14:	2301      	movs	r3, #1
 8006b16:	425b      	negs	r3, r3
 8006b18:	e7d0      	b.n	8006abc <_svfiprintf_r+0x12c>
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	200a      	movs	r0, #10
 8006b1e:	001a      	movs	r2, r3
 8006b20:	3501      	adds	r5, #1
 8006b22:	6063      	str	r3, [r4, #4]
 8006b24:	7829      	ldrb	r1, [r5, #0]
 8006b26:	1c6e      	adds	r6, r5, #1
 8006b28:	3930      	subs	r1, #48	; 0x30
 8006b2a:	2909      	cmp	r1, #9
 8006b2c:	d903      	bls.n	8006b36 <_svfiprintf_r+0x1a6>
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d0c5      	beq.n	8006abe <_svfiprintf_r+0x12e>
 8006b32:	9209      	str	r2, [sp, #36]	; 0x24
 8006b34:	e7c3      	b.n	8006abe <_svfiprintf_r+0x12e>
 8006b36:	4342      	muls	r2, r0
 8006b38:	0035      	movs	r5, r6
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	1852      	adds	r2, r2, r1
 8006b3e:	e7f1      	b.n	8006b24 <_svfiprintf_r+0x194>
 8006b40:	ab07      	add	r3, sp, #28
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	003a      	movs	r2, r7
 8006b46:	0021      	movs	r1, r4
 8006b48:	4b10      	ldr	r3, [pc, #64]	; (8006b8c <_svfiprintf_r+0x1fc>)
 8006b4a:	9803      	ldr	r0, [sp, #12]
 8006b4c:	e000      	b.n	8006b50 <_svfiprintf_r+0x1c0>
 8006b4e:	bf00      	nop
 8006b50:	9004      	str	r0, [sp, #16]
 8006b52:	9b04      	ldr	r3, [sp, #16]
 8006b54:	3301      	adds	r3, #1
 8006b56:	d1d3      	bne.n	8006b00 <_svfiprintf_r+0x170>
 8006b58:	89bb      	ldrh	r3, [r7, #12]
 8006b5a:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006b5c:	065b      	lsls	r3, r3, #25
 8006b5e:	d400      	bmi.n	8006b62 <_svfiprintf_r+0x1d2>
 8006b60:	e72d      	b.n	80069be <_svfiprintf_r+0x2e>
 8006b62:	2001      	movs	r0, #1
 8006b64:	4240      	negs	r0, r0
 8006b66:	e72a      	b.n	80069be <_svfiprintf_r+0x2e>
 8006b68:	ab07      	add	r3, sp, #28
 8006b6a:	9300      	str	r3, [sp, #0]
 8006b6c:	003a      	movs	r2, r7
 8006b6e:	0021      	movs	r1, r4
 8006b70:	4b06      	ldr	r3, [pc, #24]	; (8006b8c <_svfiprintf_r+0x1fc>)
 8006b72:	9803      	ldr	r0, [sp, #12]
 8006b74:	f000 fa50 	bl	8007018 <_printf_i>
 8006b78:	e7ea      	b.n	8006b50 <_svfiprintf_r+0x1c0>
 8006b7a:	46c0      	nop			; (mov r8, r8)
 8006b7c:	08009159 	.word	0x08009159
 8006b80:	0800915f 	.word	0x0800915f
 8006b84:	08009163 	.word	0x08009163
 8006b88:	00000000 	.word	0x00000000
 8006b8c:	080068cd 	.word	0x080068cd

08006b90 <_sungetc_r>:
 8006b90:	b570      	push	{r4, r5, r6, lr}
 8006b92:	0014      	movs	r4, r2
 8006b94:	1c4b      	adds	r3, r1, #1
 8006b96:	d103      	bne.n	8006ba0 <_sungetc_r+0x10>
 8006b98:	2501      	movs	r5, #1
 8006b9a:	426d      	negs	r5, r5
 8006b9c:	0028      	movs	r0, r5
 8006b9e:	bd70      	pop	{r4, r5, r6, pc}
 8006ba0:	8993      	ldrh	r3, [r2, #12]
 8006ba2:	2220      	movs	r2, #32
 8006ba4:	4393      	bics	r3, r2
 8006ba6:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006ba8:	81a3      	strh	r3, [r4, #12]
 8006baa:	b2ce      	uxtb	r6, r1
 8006bac:	6863      	ldr	r3, [r4, #4]
 8006bae:	b2cd      	uxtb	r5, r1
 8006bb0:	2a00      	cmp	r2, #0
 8006bb2:	d010      	beq.n	8006bd6 <_sungetc_r+0x46>
 8006bb4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006bb6:	429a      	cmp	r2, r3
 8006bb8:	dd07      	ble.n	8006bca <_sungetc_r+0x3a>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	6023      	str	r3, [r4, #0]
 8006bc0:	701e      	strb	r6, [r3, #0]
 8006bc2:	6863      	ldr	r3, [r4, #4]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	6063      	str	r3, [r4, #4]
 8006bc8:	e7e8      	b.n	8006b9c <_sungetc_r+0xc>
 8006bca:	0021      	movs	r1, r4
 8006bcc:	f000 fdf6 	bl	80077bc <__submore>
 8006bd0:	2800      	cmp	r0, #0
 8006bd2:	d0f2      	beq.n	8006bba <_sungetc_r+0x2a>
 8006bd4:	e7e0      	b.n	8006b98 <_sungetc_r+0x8>
 8006bd6:	6921      	ldr	r1, [r4, #16]
 8006bd8:	6822      	ldr	r2, [r4, #0]
 8006bda:	2900      	cmp	r1, #0
 8006bdc:	d007      	beq.n	8006bee <_sungetc_r+0x5e>
 8006bde:	4291      	cmp	r1, r2
 8006be0:	d205      	bcs.n	8006bee <_sungetc_r+0x5e>
 8006be2:	1e51      	subs	r1, r2, #1
 8006be4:	7808      	ldrb	r0, [r1, #0]
 8006be6:	42a8      	cmp	r0, r5
 8006be8:	d101      	bne.n	8006bee <_sungetc_r+0x5e>
 8006bea:	6021      	str	r1, [r4, #0]
 8006bec:	e7ea      	b.n	8006bc4 <_sungetc_r+0x34>
 8006bee:	6423      	str	r3, [r4, #64]	; 0x40
 8006bf0:	0023      	movs	r3, r4
 8006bf2:	3344      	adds	r3, #68	; 0x44
 8006bf4:	6363      	str	r3, [r4, #52]	; 0x34
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	63a3      	str	r3, [r4, #56]	; 0x38
 8006bfa:	0023      	movs	r3, r4
 8006bfc:	3346      	adds	r3, #70	; 0x46
 8006bfe:	63e2      	str	r2, [r4, #60]	; 0x3c
 8006c00:	701e      	strb	r6, [r3, #0]
 8006c02:	6023      	str	r3, [r4, #0]
 8006c04:	2301      	movs	r3, #1
 8006c06:	e7de      	b.n	8006bc6 <_sungetc_r+0x36>

08006c08 <__ssrefill_r>:
 8006c08:	b510      	push	{r4, lr}
 8006c0a:	000c      	movs	r4, r1
 8006c0c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006c0e:	2900      	cmp	r1, #0
 8006c10:	d00e      	beq.n	8006c30 <__ssrefill_r+0x28>
 8006c12:	0023      	movs	r3, r4
 8006c14:	3344      	adds	r3, #68	; 0x44
 8006c16:	4299      	cmp	r1, r3
 8006c18:	d001      	beq.n	8006c1e <__ssrefill_r+0x16>
 8006c1a:	f000 fe37 	bl	800788c <_free_r>
 8006c1e:	2000      	movs	r0, #0
 8006c20:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006c22:	6360      	str	r0, [r4, #52]	; 0x34
 8006c24:	6063      	str	r3, [r4, #4]
 8006c26:	4283      	cmp	r3, r0
 8006c28:	d002      	beq.n	8006c30 <__ssrefill_r+0x28>
 8006c2a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006c2c:	6023      	str	r3, [r4, #0]
 8006c2e:	bd10      	pop	{r4, pc}
 8006c30:	6923      	ldr	r3, [r4, #16]
 8006c32:	2001      	movs	r0, #1
 8006c34:	6023      	str	r3, [r4, #0]
 8006c36:	2300      	movs	r3, #0
 8006c38:	89a2      	ldrh	r2, [r4, #12]
 8006c3a:	6063      	str	r3, [r4, #4]
 8006c3c:	3320      	adds	r3, #32
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	81a3      	strh	r3, [r4, #12]
 8006c42:	4240      	negs	r0, r0
 8006c44:	e7f3      	b.n	8006c2e <__ssrefill_r+0x26>
	...

08006c48 <__ssvfiscanf_r>:
 8006c48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c4a:	4cb5      	ldr	r4, [pc, #724]	; (8006f20 <__ssvfiscanf_r+0x2d8>)
 8006c4c:	0005      	movs	r5, r0
 8006c4e:	44a5      	add	sp, r4
 8006c50:	000c      	movs	r4, r1
 8006c52:	2100      	movs	r1, #0
 8006c54:	9148      	str	r1, [sp, #288]	; 0x120
 8006c56:	9149      	str	r1, [sp, #292]	; 0x124
 8006c58:	a905      	add	r1, sp, #20
 8006c5a:	914a      	str	r1, [sp, #296]	; 0x128
 8006c5c:	21be      	movs	r1, #190	; 0xbe
 8006c5e:	48b1      	ldr	r0, [pc, #708]	; (8006f24 <__ssvfiscanf_r+0x2dc>)
 8006c60:	0049      	lsls	r1, r1, #1
 8006c62:	ae45      	add	r6, sp, #276	; 0x114
 8006c64:	5070      	str	r0, [r6, r1]
 8006c66:	48b0      	ldr	r0, [pc, #704]	; (8006f28 <__ssvfiscanf_r+0x2e0>)
 8006c68:	3104      	adds	r1, #4
 8006c6a:	ae45      	add	r6, sp, #276	; 0x114
 8006c6c:	5070      	str	r0, [r6, r1]
 8006c6e:	9304      	str	r3, [sp, #16]
 8006c70:	9101      	str	r1, [sp, #4]
 8006c72:	7813      	ldrb	r3, [r2, #0]
 8006c74:	9300      	str	r3, [sp, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d100      	bne.n	8006c7c <__ssvfiscanf_r+0x34>
 8006c7a:	e14f      	b.n	8006f1c <__ssvfiscanf_r+0x2d4>
 8006c7c:	4fab      	ldr	r7, [pc, #684]	; (8006f2c <__ssvfiscanf_r+0x2e4>)
 8006c7e:	2008      	movs	r0, #8
 8006c80:	5cf9      	ldrb	r1, [r7, r3]
 8006c82:	2308      	movs	r3, #8
 8006c84:	1c56      	adds	r6, r2, #1
 8006c86:	400b      	ands	r3, r1
 8006c88:	4201      	tst	r1, r0
 8006c8a:	d01e      	beq.n	8006cca <__ssvfiscanf_r+0x82>
 8006c8c:	6863      	ldr	r3, [r4, #4]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	dd11      	ble.n	8006cb6 <__ssvfiscanf_r+0x6e>
 8006c92:	2108      	movs	r1, #8
 8006c94:	6823      	ldr	r3, [r4, #0]
 8006c96:	781a      	ldrb	r2, [r3, #0]
 8006c98:	5cba      	ldrb	r2, [r7, r2]
 8006c9a:	420a      	tst	r2, r1
 8006c9c:	d101      	bne.n	8006ca2 <__ssvfiscanf_r+0x5a>
 8006c9e:	0032      	movs	r2, r6
 8006ca0:	e7e7      	b.n	8006c72 <__ssvfiscanf_r+0x2a>
 8006ca2:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	9200      	str	r2, [sp, #0]
 8006ca8:	3201      	adds	r2, #1
 8006caa:	9249      	str	r2, [sp, #292]	; 0x124
 8006cac:	6862      	ldr	r2, [r4, #4]
 8006cae:	6023      	str	r3, [r4, #0]
 8006cb0:	3a01      	subs	r2, #1
 8006cb2:	6062      	str	r2, [r4, #4]
 8006cb4:	e7ea      	b.n	8006c8c <__ssvfiscanf_r+0x44>
 8006cb6:	9a01      	ldr	r2, [sp, #4]
 8006cb8:	ab45      	add	r3, sp, #276	; 0x114
 8006cba:	589b      	ldr	r3, [r3, r2]
 8006cbc:	0021      	movs	r1, r4
 8006cbe:	0028      	movs	r0, r5
 8006cc0:	9300      	str	r3, [sp, #0]
 8006cc2:	4798      	blx	r3
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	d0e4      	beq.n	8006c92 <__ssvfiscanf_r+0x4a>
 8006cc8:	e7e9      	b.n	8006c9e <__ssvfiscanf_r+0x56>
 8006cca:	9900      	ldr	r1, [sp, #0]
 8006ccc:	2925      	cmp	r1, #37	; 0x25
 8006cce:	d164      	bne.n	8006d9a <__ssvfiscanf_r+0x152>
 8006cd0:	9347      	str	r3, [sp, #284]	; 0x11c
 8006cd2:	9345      	str	r3, [sp, #276]	; 0x114
 8006cd4:	7853      	ldrb	r3, [r2, #1]
 8006cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd8:	d102      	bne.n	8006ce0 <__ssvfiscanf_r+0x98>
 8006cda:	3b1a      	subs	r3, #26
 8006cdc:	9345      	str	r3, [sp, #276]	; 0x114
 8006cde:	1c96      	adds	r6, r2, #2
 8006ce0:	0037      	movs	r7, r6
 8006ce2:	200a      	movs	r0, #10
 8006ce4:	7839      	ldrb	r1, [r7, #0]
 8006ce6:	1c7b      	adds	r3, r7, #1
 8006ce8:	9302      	str	r3, [sp, #8]
 8006cea:	000b      	movs	r3, r1
 8006cec:	3b30      	subs	r3, #48	; 0x30
 8006cee:	2b09      	cmp	r3, #9
 8006cf0:	d91f      	bls.n	8006d32 <__ssvfiscanf_r+0xea>
 8006cf2:	4e8f      	ldr	r6, [pc, #572]	; (8006f30 <__ssvfiscanf_r+0x2e8>)
 8006cf4:	2203      	movs	r2, #3
 8006cf6:	0030      	movs	r0, r6
 8006cf8:	f000 fda0 	bl	800783c <memchr>
 8006cfc:	2800      	cmp	r0, #0
 8006cfe:	d007      	beq.n	8006d10 <__ssvfiscanf_r+0xc8>
 8006d00:	2301      	movs	r3, #1
 8006d02:	1b80      	subs	r0, r0, r6
 8006d04:	4083      	lsls	r3, r0
 8006d06:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006d08:	9f02      	ldr	r7, [sp, #8]
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	9203      	str	r2, [sp, #12]
 8006d0e:	9345      	str	r3, [sp, #276]	; 0x114
 8006d10:	783b      	ldrb	r3, [r7, #0]
 8006d12:	1c7e      	adds	r6, r7, #1
 8006d14:	2b78      	cmp	r3, #120	; 0x78
 8006d16:	d807      	bhi.n	8006d28 <__ssvfiscanf_r+0xe0>
 8006d18:	2b57      	cmp	r3, #87	; 0x57
 8006d1a:	d812      	bhi.n	8006d42 <__ssvfiscanf_r+0xfa>
 8006d1c:	2b25      	cmp	r3, #37	; 0x25
 8006d1e:	d03c      	beq.n	8006d9a <__ssvfiscanf_r+0x152>
 8006d20:	d836      	bhi.n	8006d90 <__ssvfiscanf_r+0x148>
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d100      	bne.n	8006d28 <__ssvfiscanf_r+0xe0>
 8006d26:	e0f6      	b.n	8006f16 <__ssvfiscanf_r+0x2ce>
 8006d28:	2303      	movs	r3, #3
 8006d2a:	934b      	str	r3, [sp, #300]	; 0x12c
 8006d2c:	3307      	adds	r3, #7
 8006d2e:	9346      	str	r3, [sp, #280]	; 0x118
 8006d30:	e076      	b.n	8006e20 <__ssvfiscanf_r+0x1d8>
 8006d32:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006d34:	9f02      	ldr	r7, [sp, #8]
 8006d36:	9303      	str	r3, [sp, #12]
 8006d38:	4343      	muls	r3, r0
 8006d3a:	3b30      	subs	r3, #48	; 0x30
 8006d3c:	185b      	adds	r3, r3, r1
 8006d3e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006d40:	e7d0      	b.n	8006ce4 <__ssvfiscanf_r+0x9c>
 8006d42:	0018      	movs	r0, r3
 8006d44:	3858      	subs	r0, #88	; 0x58
 8006d46:	2820      	cmp	r0, #32
 8006d48:	d8ee      	bhi.n	8006d28 <__ssvfiscanf_r+0xe0>
 8006d4a:	f7f9 f9e5 	bl	8000118 <__gnu_thumb1_case_shi>
 8006d4e:	0051      	.short	0x0051
 8006d50:	ffedffed 	.word	0xffedffed
 8006d54:	ffed0086 	.word	0xffed0086
 8006d58:	ffedffed 	.word	0xffedffed
 8006d5c:	ffedffed 	.word	0xffedffed
 8006d60:	ffedffed 	.word	0xffedffed
 8006d64:	00600093 	.word	0x00600093
 8006d68:	00240024 	.word	0x00240024
 8006d6c:	ffed0024 	.word	0xffed0024
 8006d70:	ffed0062 	.word	0xffed0062
 8006d74:	ffedffed 	.word	0xffedffed
 8006d78:	009dffed 	.word	0x009dffed
 8006d7c:	004b0065 	.word	0x004b0065
 8006d80:	ffedffed 	.word	0xffedffed
 8006d84:	ffed009b 	.word	0xffed009b
 8006d88:	ffed0060 	.word	0xffed0060
 8006d8c:	0051ffed 	.word	0x0051ffed
 8006d90:	3b45      	subs	r3, #69	; 0x45
 8006d92:	2b02      	cmp	r3, #2
 8006d94:	d8c8      	bhi.n	8006d28 <__ssvfiscanf_r+0xe0>
 8006d96:	2305      	movs	r3, #5
 8006d98:	e041      	b.n	8006e1e <__ssvfiscanf_r+0x1d6>
 8006d9a:	6863      	ldr	r3, [r4, #4]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dd0f      	ble.n	8006dc0 <__ssvfiscanf_r+0x178>
 8006da0:	6823      	ldr	r3, [r4, #0]
 8006da2:	9900      	ldr	r1, [sp, #0]
 8006da4:	781a      	ldrb	r2, [r3, #0]
 8006da6:	428a      	cmp	r2, r1
 8006da8:	d000      	beq.n	8006dac <__ssvfiscanf_r+0x164>
 8006daa:	e0b7      	b.n	8006f1c <__ssvfiscanf_r+0x2d4>
 8006dac:	3301      	adds	r3, #1
 8006dae:	6862      	ldr	r2, [r4, #4]
 8006db0:	6023      	str	r3, [r4, #0]
 8006db2:	9b49      	ldr	r3, [sp, #292]	; 0x124
 8006db4:	3a01      	subs	r2, #1
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	3301      	adds	r3, #1
 8006dba:	6062      	str	r2, [r4, #4]
 8006dbc:	9349      	str	r3, [sp, #292]	; 0x124
 8006dbe:	e76e      	b.n	8006c9e <__ssvfiscanf_r+0x56>
 8006dc0:	9a01      	ldr	r2, [sp, #4]
 8006dc2:	ab45      	add	r3, sp, #276	; 0x114
 8006dc4:	589b      	ldr	r3, [r3, r2]
 8006dc6:	0021      	movs	r1, r4
 8006dc8:	0028      	movs	r0, r5
 8006dca:	9302      	str	r3, [sp, #8]
 8006dcc:	4798      	blx	r3
 8006dce:	2800      	cmp	r0, #0
 8006dd0:	d0e6      	beq.n	8006da0 <__ssvfiscanf_r+0x158>
 8006dd2:	9848      	ldr	r0, [sp, #288]	; 0x120
 8006dd4:	2800      	cmp	r0, #0
 8006dd6:	d000      	beq.n	8006dda <__ssvfiscanf_r+0x192>
 8006dd8:	e099      	b.n	8006f0e <__ssvfiscanf_r+0x2c6>
 8006dda:	3801      	subs	r0, #1
 8006ddc:	23a7      	movs	r3, #167	; 0xa7
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	449d      	add	sp, r3
 8006de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006de4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006de6:	9200      	str	r2, [sp, #0]
 8006de8:	2220      	movs	r2, #32
 8006dea:	9900      	ldr	r1, [sp, #0]
 8006dec:	430a      	orrs	r2, r1
 8006dee:	9245      	str	r2, [sp, #276]	; 0x114
 8006df0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006df2:	9200      	str	r2, [sp, #0]
 8006df4:	2280      	movs	r2, #128	; 0x80
 8006df6:	9900      	ldr	r1, [sp, #0]
 8006df8:	0092      	lsls	r2, r2, #2
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	9245      	str	r2, [sp, #276]	; 0x114
 8006dfe:	2210      	movs	r2, #16
 8006e00:	9246      	str	r2, [sp, #280]	; 0x118
 8006e02:	226e      	movs	r2, #110	; 0x6e
 8006e04:	429a      	cmp	r2, r3
 8006e06:	419b      	sbcs	r3, r3
 8006e08:	425b      	negs	r3, r3
 8006e0a:	3303      	adds	r3, #3
 8006e0c:	e007      	b.n	8006e1e <__ssvfiscanf_r+0x1d6>
 8006e0e:	220a      	movs	r2, #10
 8006e10:	e7f6      	b.n	8006e00 <__ssvfiscanf_r+0x1b8>
 8006e12:	2300      	movs	r3, #0
 8006e14:	9346      	str	r3, [sp, #280]	; 0x118
 8006e16:	e7f8      	b.n	8006e0a <__ssvfiscanf_r+0x1c2>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	9346      	str	r3, [sp, #280]	; 0x118
 8006e1c:	3b04      	subs	r3, #4
 8006e1e:	934b      	str	r3, [sp, #300]	; 0x12c
 8006e20:	6863      	ldr	r3, [r4, #4]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	dd3f      	ble.n	8006ea6 <__ssvfiscanf_r+0x25e>
 8006e26:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006e28:	9300      	str	r3, [sp, #0]
 8006e2a:	065b      	lsls	r3, r3, #25
 8006e2c:	d406      	bmi.n	8006e3c <__ssvfiscanf_r+0x1f4>
 8006e2e:	6823      	ldr	r3, [r4, #0]
 8006e30:	493e      	ldr	r1, [pc, #248]	; (8006f2c <__ssvfiscanf_r+0x2e4>)
 8006e32:	781a      	ldrb	r2, [r3, #0]
 8006e34:	5c8a      	ldrb	r2, [r1, r2]
 8006e36:	2108      	movs	r1, #8
 8006e38:	420a      	tst	r2, r1
 8006e3a:	d13e      	bne.n	8006eba <__ssvfiscanf_r+0x272>
 8006e3c:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8006e3e:	2b02      	cmp	r3, #2
 8006e40:	dc51      	bgt.n	8006ee6 <__ssvfiscanf_r+0x29e>
 8006e42:	0022      	movs	r2, r4
 8006e44:	0028      	movs	r0, r5
 8006e46:	ab04      	add	r3, sp, #16
 8006e48:	a945      	add	r1, sp, #276	; 0x114
 8006e4a:	f000 f9f7 	bl	800723c <_scanf_chars>
 8006e4e:	2801      	cmp	r0, #1
 8006e50:	d064      	beq.n	8006f1c <__ssvfiscanf_r+0x2d4>
 8006e52:	2802      	cmp	r0, #2
 8006e54:	d000      	beq.n	8006e58 <__ssvfiscanf_r+0x210>
 8006e56:	e722      	b.n	8006c9e <__ssvfiscanf_r+0x56>
 8006e58:	e7bb      	b.n	8006dd2 <__ssvfiscanf_r+0x18a>
 8006e5a:	0031      	movs	r1, r6
 8006e5c:	a805      	add	r0, sp, #20
 8006e5e:	f000 fb4f 	bl	8007500 <__sccl>
 8006e62:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006e64:	0006      	movs	r6, r0
 8006e66:	9300      	str	r3, [sp, #0]
 8006e68:	2340      	movs	r3, #64	; 0x40
 8006e6a:	9a00      	ldr	r2, [sp, #0]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	9345      	str	r3, [sp, #276]	; 0x114
 8006e70:	2301      	movs	r3, #1
 8006e72:	e7d4      	b.n	8006e1e <__ssvfiscanf_r+0x1d6>
 8006e74:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	2340      	movs	r3, #64	; 0x40
 8006e7a:	9a00      	ldr	r2, [sp, #0]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	9345      	str	r3, [sp, #276]	; 0x114
 8006e80:	2300      	movs	r3, #0
 8006e82:	e7cc      	b.n	8006e1e <__ssvfiscanf_r+0x1d6>
 8006e84:	2302      	movs	r3, #2
 8006e86:	e7ca      	b.n	8006e1e <__ssvfiscanf_r+0x1d6>
 8006e88:	9845      	ldr	r0, [sp, #276]	; 0x114
 8006e8a:	06c3      	lsls	r3, r0, #27
 8006e8c:	d500      	bpl.n	8006e90 <__ssvfiscanf_r+0x248>
 8006e8e:	e706      	b.n	8006c9e <__ssvfiscanf_r+0x56>
 8006e90:	9b04      	ldr	r3, [sp, #16]
 8006e92:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8006e94:	1d19      	adds	r1, r3, #4
 8006e96:	9104      	str	r1, [sp, #16]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	07c7      	lsls	r7, r0, #31
 8006e9c:	d501      	bpl.n	8006ea2 <__ssvfiscanf_r+0x25a>
 8006e9e:	801a      	strh	r2, [r3, #0]
 8006ea0:	e6fd      	b.n	8006c9e <__ssvfiscanf_r+0x56>
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	e6fb      	b.n	8006c9e <__ssvfiscanf_r+0x56>
 8006ea6:	9a01      	ldr	r2, [sp, #4]
 8006ea8:	ab45      	add	r3, sp, #276	; 0x114
 8006eaa:	589b      	ldr	r3, [r3, r2]
 8006eac:	0021      	movs	r1, r4
 8006eae:	0028      	movs	r0, r5
 8006eb0:	9300      	str	r3, [sp, #0]
 8006eb2:	4798      	blx	r3
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d0b6      	beq.n	8006e26 <__ssvfiscanf_r+0x1de>
 8006eb8:	e78b      	b.n	8006dd2 <__ssvfiscanf_r+0x18a>
 8006eba:	9a49      	ldr	r2, [sp, #292]	; 0x124
 8006ebc:	9200      	str	r2, [sp, #0]
 8006ebe:	3201      	adds	r2, #1
 8006ec0:	9249      	str	r2, [sp, #292]	; 0x124
 8006ec2:	6862      	ldr	r2, [r4, #4]
 8006ec4:	3a01      	subs	r2, #1
 8006ec6:	6062      	str	r2, [r4, #4]
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	dd02      	ble.n	8006ed2 <__ssvfiscanf_r+0x28a>
 8006ecc:	3301      	adds	r3, #1
 8006ece:	6023      	str	r3, [r4, #0]
 8006ed0:	e7ad      	b.n	8006e2e <__ssvfiscanf_r+0x1e6>
 8006ed2:	9a01      	ldr	r2, [sp, #4]
 8006ed4:	ab45      	add	r3, sp, #276	; 0x114
 8006ed6:	589b      	ldr	r3, [r3, r2]
 8006ed8:	0021      	movs	r1, r4
 8006eda:	0028      	movs	r0, r5
 8006edc:	9300      	str	r3, [sp, #0]
 8006ede:	4798      	blx	r3
 8006ee0:	2800      	cmp	r0, #0
 8006ee2:	d0a4      	beq.n	8006e2e <__ssvfiscanf_r+0x1e6>
 8006ee4:	e775      	b.n	8006dd2 <__ssvfiscanf_r+0x18a>
 8006ee6:	2b04      	cmp	r3, #4
 8006ee8:	dc06      	bgt.n	8006ef8 <__ssvfiscanf_r+0x2b0>
 8006eea:	0022      	movs	r2, r4
 8006eec:	0028      	movs	r0, r5
 8006eee:	ab04      	add	r3, sp, #16
 8006ef0:	a945      	add	r1, sp, #276	; 0x114
 8006ef2:	f000 fa01 	bl	80072f8 <_scanf_i>
 8006ef6:	e7aa      	b.n	8006e4e <__ssvfiscanf_r+0x206>
 8006ef8:	4b0e      	ldr	r3, [pc, #56]	; (8006f34 <__ssvfiscanf_r+0x2ec>)
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d100      	bne.n	8006f00 <__ssvfiscanf_r+0x2b8>
 8006efe:	e6ce      	b.n	8006c9e <__ssvfiscanf_r+0x56>
 8006f00:	0022      	movs	r2, r4
 8006f02:	0028      	movs	r0, r5
 8006f04:	ab04      	add	r3, sp, #16
 8006f06:	a945      	add	r1, sp, #276	; 0x114
 8006f08:	e000      	b.n	8006f0c <__ssvfiscanf_r+0x2c4>
 8006f0a:	bf00      	nop
 8006f0c:	e79f      	b.n	8006e4e <__ssvfiscanf_r+0x206>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	065b      	lsls	r3, r3, #25
 8006f12:	d400      	bmi.n	8006f16 <__ssvfiscanf_r+0x2ce>
 8006f14:	e762      	b.n	8006ddc <__ssvfiscanf_r+0x194>
 8006f16:	2001      	movs	r0, #1
 8006f18:	4240      	negs	r0, r0
 8006f1a:	e75f      	b.n	8006ddc <__ssvfiscanf_r+0x194>
 8006f1c:	9848      	ldr	r0, [sp, #288]	; 0x120
 8006f1e:	e75d      	b.n	8006ddc <__ssvfiscanf_r+0x194>
 8006f20:	fffffd64 	.word	0xfffffd64
 8006f24:	08006b91 	.word	0x08006b91
 8006f28:	08006c09 	.word	0x08006c09
 8006f2c:	08009059 	.word	0x08009059
 8006f30:	0800915f 	.word	0x0800915f
 8006f34:	00000000 	.word	0x00000000

08006f38 <_printf_common>:
 8006f38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f3a:	0015      	movs	r5, r2
 8006f3c:	9301      	str	r3, [sp, #4]
 8006f3e:	688a      	ldr	r2, [r1, #8]
 8006f40:	690b      	ldr	r3, [r1, #16]
 8006f42:	000c      	movs	r4, r1
 8006f44:	9000      	str	r0, [sp, #0]
 8006f46:	4293      	cmp	r3, r2
 8006f48:	da00      	bge.n	8006f4c <_printf_common+0x14>
 8006f4a:	0013      	movs	r3, r2
 8006f4c:	0022      	movs	r2, r4
 8006f4e:	602b      	str	r3, [r5, #0]
 8006f50:	3243      	adds	r2, #67	; 0x43
 8006f52:	7812      	ldrb	r2, [r2, #0]
 8006f54:	2a00      	cmp	r2, #0
 8006f56:	d001      	beq.n	8006f5c <_printf_common+0x24>
 8006f58:	3301      	adds	r3, #1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	069b      	lsls	r3, r3, #26
 8006f60:	d502      	bpl.n	8006f68 <_printf_common+0x30>
 8006f62:	682b      	ldr	r3, [r5, #0]
 8006f64:	3302      	adds	r3, #2
 8006f66:	602b      	str	r3, [r5, #0]
 8006f68:	6822      	ldr	r2, [r4, #0]
 8006f6a:	2306      	movs	r3, #6
 8006f6c:	0017      	movs	r7, r2
 8006f6e:	401f      	ands	r7, r3
 8006f70:	421a      	tst	r2, r3
 8006f72:	d027      	beq.n	8006fc4 <_printf_common+0x8c>
 8006f74:	0023      	movs	r3, r4
 8006f76:	3343      	adds	r3, #67	; 0x43
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	1e5a      	subs	r2, r3, #1
 8006f7c:	4193      	sbcs	r3, r2
 8006f7e:	6822      	ldr	r2, [r4, #0]
 8006f80:	0692      	lsls	r2, r2, #26
 8006f82:	d430      	bmi.n	8006fe6 <_printf_common+0xae>
 8006f84:	0022      	movs	r2, r4
 8006f86:	9901      	ldr	r1, [sp, #4]
 8006f88:	9800      	ldr	r0, [sp, #0]
 8006f8a:	9e08      	ldr	r6, [sp, #32]
 8006f8c:	3243      	adds	r2, #67	; 0x43
 8006f8e:	47b0      	blx	r6
 8006f90:	1c43      	adds	r3, r0, #1
 8006f92:	d025      	beq.n	8006fe0 <_printf_common+0xa8>
 8006f94:	2306      	movs	r3, #6
 8006f96:	6820      	ldr	r0, [r4, #0]
 8006f98:	682a      	ldr	r2, [r5, #0]
 8006f9a:	68e1      	ldr	r1, [r4, #12]
 8006f9c:	2500      	movs	r5, #0
 8006f9e:	4003      	ands	r3, r0
 8006fa0:	2b04      	cmp	r3, #4
 8006fa2:	d103      	bne.n	8006fac <_printf_common+0x74>
 8006fa4:	1a8d      	subs	r5, r1, r2
 8006fa6:	43eb      	mvns	r3, r5
 8006fa8:	17db      	asrs	r3, r3, #31
 8006faa:	401d      	ands	r5, r3
 8006fac:	68a3      	ldr	r3, [r4, #8]
 8006fae:	6922      	ldr	r2, [r4, #16]
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	dd01      	ble.n	8006fb8 <_printf_common+0x80>
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	18ed      	adds	r5, r5, r3
 8006fb8:	2700      	movs	r7, #0
 8006fba:	42bd      	cmp	r5, r7
 8006fbc:	d120      	bne.n	8007000 <_printf_common+0xc8>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e010      	b.n	8006fe4 <_printf_common+0xac>
 8006fc2:	3701      	adds	r7, #1
 8006fc4:	68e3      	ldr	r3, [r4, #12]
 8006fc6:	682a      	ldr	r2, [r5, #0]
 8006fc8:	1a9b      	subs	r3, r3, r2
 8006fca:	42bb      	cmp	r3, r7
 8006fcc:	ddd2      	ble.n	8006f74 <_printf_common+0x3c>
 8006fce:	0022      	movs	r2, r4
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	9901      	ldr	r1, [sp, #4]
 8006fd4:	9800      	ldr	r0, [sp, #0]
 8006fd6:	9e08      	ldr	r6, [sp, #32]
 8006fd8:	3219      	adds	r2, #25
 8006fda:	47b0      	blx	r6
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d1f0      	bne.n	8006fc2 <_printf_common+0x8a>
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	4240      	negs	r0, r0
 8006fe4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006fe6:	2030      	movs	r0, #48	; 0x30
 8006fe8:	18e1      	adds	r1, r4, r3
 8006fea:	3143      	adds	r1, #67	; 0x43
 8006fec:	7008      	strb	r0, [r1, #0]
 8006fee:	0021      	movs	r1, r4
 8006ff0:	1c5a      	adds	r2, r3, #1
 8006ff2:	3145      	adds	r1, #69	; 0x45
 8006ff4:	7809      	ldrb	r1, [r1, #0]
 8006ff6:	18a2      	adds	r2, r4, r2
 8006ff8:	3243      	adds	r2, #67	; 0x43
 8006ffa:	3302      	adds	r3, #2
 8006ffc:	7011      	strb	r1, [r2, #0]
 8006ffe:	e7c1      	b.n	8006f84 <_printf_common+0x4c>
 8007000:	0022      	movs	r2, r4
 8007002:	2301      	movs	r3, #1
 8007004:	9901      	ldr	r1, [sp, #4]
 8007006:	9800      	ldr	r0, [sp, #0]
 8007008:	9e08      	ldr	r6, [sp, #32]
 800700a:	321a      	adds	r2, #26
 800700c:	47b0      	blx	r6
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d0e6      	beq.n	8006fe0 <_printf_common+0xa8>
 8007012:	3701      	adds	r7, #1
 8007014:	e7d1      	b.n	8006fba <_printf_common+0x82>
	...

08007018 <_printf_i>:
 8007018:	b5f0      	push	{r4, r5, r6, r7, lr}
 800701a:	b08b      	sub	sp, #44	; 0x2c
 800701c:	9206      	str	r2, [sp, #24]
 800701e:	000a      	movs	r2, r1
 8007020:	3243      	adds	r2, #67	; 0x43
 8007022:	9307      	str	r3, [sp, #28]
 8007024:	9005      	str	r0, [sp, #20]
 8007026:	9204      	str	r2, [sp, #16]
 8007028:	7e0a      	ldrb	r2, [r1, #24]
 800702a:	000c      	movs	r4, r1
 800702c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800702e:	2a78      	cmp	r2, #120	; 0x78
 8007030:	d806      	bhi.n	8007040 <_printf_i+0x28>
 8007032:	2a62      	cmp	r2, #98	; 0x62
 8007034:	d808      	bhi.n	8007048 <_printf_i+0x30>
 8007036:	2a00      	cmp	r2, #0
 8007038:	d100      	bne.n	800703c <_printf_i+0x24>
 800703a:	e0c0      	b.n	80071be <_printf_i+0x1a6>
 800703c:	2a58      	cmp	r2, #88	; 0x58
 800703e:	d052      	beq.n	80070e6 <_printf_i+0xce>
 8007040:	0026      	movs	r6, r4
 8007042:	3642      	adds	r6, #66	; 0x42
 8007044:	7032      	strb	r2, [r6, #0]
 8007046:	e022      	b.n	800708e <_printf_i+0x76>
 8007048:	0010      	movs	r0, r2
 800704a:	3863      	subs	r0, #99	; 0x63
 800704c:	2815      	cmp	r0, #21
 800704e:	d8f7      	bhi.n	8007040 <_printf_i+0x28>
 8007050:	f7f9 f862 	bl	8000118 <__gnu_thumb1_case_shi>
 8007054:	001f0016 	.word	0x001f0016
 8007058:	fff6fff6 	.word	0xfff6fff6
 800705c:	fff6fff6 	.word	0xfff6fff6
 8007060:	fff6001f 	.word	0xfff6001f
 8007064:	fff6fff6 	.word	0xfff6fff6
 8007068:	00a8fff6 	.word	0x00a8fff6
 800706c:	009a0036 	.word	0x009a0036
 8007070:	fff6fff6 	.word	0xfff6fff6
 8007074:	fff600b9 	.word	0xfff600b9
 8007078:	fff60036 	.word	0xfff60036
 800707c:	009efff6 	.word	0x009efff6
 8007080:	0026      	movs	r6, r4
 8007082:	681a      	ldr	r2, [r3, #0]
 8007084:	3642      	adds	r6, #66	; 0x42
 8007086:	1d11      	adds	r1, r2, #4
 8007088:	6019      	str	r1, [r3, #0]
 800708a:	6813      	ldr	r3, [r2, #0]
 800708c:	7033      	strb	r3, [r6, #0]
 800708e:	2301      	movs	r3, #1
 8007090:	e0a7      	b.n	80071e2 <_printf_i+0x1ca>
 8007092:	6808      	ldr	r0, [r1, #0]
 8007094:	6819      	ldr	r1, [r3, #0]
 8007096:	1d0a      	adds	r2, r1, #4
 8007098:	0605      	lsls	r5, r0, #24
 800709a:	d50b      	bpl.n	80070b4 <_printf_i+0x9c>
 800709c:	680d      	ldr	r5, [r1, #0]
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	2d00      	cmp	r5, #0
 80070a2:	da03      	bge.n	80070ac <_printf_i+0x94>
 80070a4:	232d      	movs	r3, #45	; 0x2d
 80070a6:	9a04      	ldr	r2, [sp, #16]
 80070a8:	426d      	negs	r5, r5
 80070aa:	7013      	strb	r3, [r2, #0]
 80070ac:	4b61      	ldr	r3, [pc, #388]	; (8007234 <_printf_i+0x21c>)
 80070ae:	270a      	movs	r7, #10
 80070b0:	9303      	str	r3, [sp, #12]
 80070b2:	e032      	b.n	800711a <_printf_i+0x102>
 80070b4:	680d      	ldr	r5, [r1, #0]
 80070b6:	601a      	str	r2, [r3, #0]
 80070b8:	0641      	lsls	r1, r0, #25
 80070ba:	d5f1      	bpl.n	80070a0 <_printf_i+0x88>
 80070bc:	b22d      	sxth	r5, r5
 80070be:	e7ef      	b.n	80070a0 <_printf_i+0x88>
 80070c0:	680d      	ldr	r5, [r1, #0]
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	1d08      	adds	r0, r1, #4
 80070c6:	6018      	str	r0, [r3, #0]
 80070c8:	062e      	lsls	r6, r5, #24
 80070ca:	d501      	bpl.n	80070d0 <_printf_i+0xb8>
 80070cc:	680d      	ldr	r5, [r1, #0]
 80070ce:	e003      	b.n	80070d8 <_printf_i+0xc0>
 80070d0:	066d      	lsls	r5, r5, #25
 80070d2:	d5fb      	bpl.n	80070cc <_printf_i+0xb4>
 80070d4:	680d      	ldr	r5, [r1, #0]
 80070d6:	b2ad      	uxth	r5, r5
 80070d8:	4b56      	ldr	r3, [pc, #344]	; (8007234 <_printf_i+0x21c>)
 80070da:	270a      	movs	r7, #10
 80070dc:	9303      	str	r3, [sp, #12]
 80070de:	2a6f      	cmp	r2, #111	; 0x6f
 80070e0:	d117      	bne.n	8007112 <_printf_i+0xfa>
 80070e2:	2708      	movs	r7, #8
 80070e4:	e015      	b.n	8007112 <_printf_i+0xfa>
 80070e6:	3145      	adds	r1, #69	; 0x45
 80070e8:	700a      	strb	r2, [r1, #0]
 80070ea:	4a52      	ldr	r2, [pc, #328]	; (8007234 <_printf_i+0x21c>)
 80070ec:	9203      	str	r2, [sp, #12]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	6821      	ldr	r1, [r4, #0]
 80070f2:	ca20      	ldmia	r2!, {r5}
 80070f4:	601a      	str	r2, [r3, #0]
 80070f6:	0608      	lsls	r0, r1, #24
 80070f8:	d550      	bpl.n	800719c <_printf_i+0x184>
 80070fa:	07cb      	lsls	r3, r1, #31
 80070fc:	d502      	bpl.n	8007104 <_printf_i+0xec>
 80070fe:	2320      	movs	r3, #32
 8007100:	4319      	orrs	r1, r3
 8007102:	6021      	str	r1, [r4, #0]
 8007104:	2710      	movs	r7, #16
 8007106:	2d00      	cmp	r5, #0
 8007108:	d103      	bne.n	8007112 <_printf_i+0xfa>
 800710a:	2320      	movs	r3, #32
 800710c:	6822      	ldr	r2, [r4, #0]
 800710e:	439a      	bics	r2, r3
 8007110:	6022      	str	r2, [r4, #0]
 8007112:	0023      	movs	r3, r4
 8007114:	2200      	movs	r2, #0
 8007116:	3343      	adds	r3, #67	; 0x43
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	6863      	ldr	r3, [r4, #4]
 800711c:	60a3      	str	r3, [r4, #8]
 800711e:	2b00      	cmp	r3, #0
 8007120:	db03      	blt.n	800712a <_printf_i+0x112>
 8007122:	2204      	movs	r2, #4
 8007124:	6821      	ldr	r1, [r4, #0]
 8007126:	4391      	bics	r1, r2
 8007128:	6021      	str	r1, [r4, #0]
 800712a:	2d00      	cmp	r5, #0
 800712c:	d102      	bne.n	8007134 <_printf_i+0x11c>
 800712e:	9e04      	ldr	r6, [sp, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00c      	beq.n	800714e <_printf_i+0x136>
 8007134:	9e04      	ldr	r6, [sp, #16]
 8007136:	0028      	movs	r0, r5
 8007138:	0039      	movs	r1, r7
 800713a:	f7f9 f87d 	bl	8000238 <__aeabi_uidivmod>
 800713e:	9b03      	ldr	r3, [sp, #12]
 8007140:	3e01      	subs	r6, #1
 8007142:	5c5b      	ldrb	r3, [r3, r1]
 8007144:	7033      	strb	r3, [r6, #0]
 8007146:	002b      	movs	r3, r5
 8007148:	0005      	movs	r5, r0
 800714a:	429f      	cmp	r7, r3
 800714c:	d9f3      	bls.n	8007136 <_printf_i+0x11e>
 800714e:	2f08      	cmp	r7, #8
 8007150:	d109      	bne.n	8007166 <_printf_i+0x14e>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	07db      	lsls	r3, r3, #31
 8007156:	d506      	bpl.n	8007166 <_printf_i+0x14e>
 8007158:	6863      	ldr	r3, [r4, #4]
 800715a:	6922      	ldr	r2, [r4, #16]
 800715c:	4293      	cmp	r3, r2
 800715e:	dc02      	bgt.n	8007166 <_printf_i+0x14e>
 8007160:	2330      	movs	r3, #48	; 0x30
 8007162:	3e01      	subs	r6, #1
 8007164:	7033      	strb	r3, [r6, #0]
 8007166:	9b04      	ldr	r3, [sp, #16]
 8007168:	1b9b      	subs	r3, r3, r6
 800716a:	6123      	str	r3, [r4, #16]
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	0021      	movs	r1, r4
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	9805      	ldr	r0, [sp, #20]
 8007174:	9b06      	ldr	r3, [sp, #24]
 8007176:	aa09      	add	r2, sp, #36	; 0x24
 8007178:	f7ff fede 	bl	8006f38 <_printf_common>
 800717c:	1c43      	adds	r3, r0, #1
 800717e:	d135      	bne.n	80071ec <_printf_i+0x1d4>
 8007180:	2001      	movs	r0, #1
 8007182:	4240      	negs	r0, r0
 8007184:	b00b      	add	sp, #44	; 0x2c
 8007186:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007188:	2220      	movs	r2, #32
 800718a:	6809      	ldr	r1, [r1, #0]
 800718c:	430a      	orrs	r2, r1
 800718e:	6022      	str	r2, [r4, #0]
 8007190:	0022      	movs	r2, r4
 8007192:	2178      	movs	r1, #120	; 0x78
 8007194:	3245      	adds	r2, #69	; 0x45
 8007196:	7011      	strb	r1, [r2, #0]
 8007198:	4a27      	ldr	r2, [pc, #156]	; (8007238 <_printf_i+0x220>)
 800719a:	e7a7      	b.n	80070ec <_printf_i+0xd4>
 800719c:	0648      	lsls	r0, r1, #25
 800719e:	d5ac      	bpl.n	80070fa <_printf_i+0xe2>
 80071a0:	b2ad      	uxth	r5, r5
 80071a2:	e7aa      	b.n	80070fa <_printf_i+0xe2>
 80071a4:	681a      	ldr	r2, [r3, #0]
 80071a6:	680d      	ldr	r5, [r1, #0]
 80071a8:	1d10      	adds	r0, r2, #4
 80071aa:	6949      	ldr	r1, [r1, #20]
 80071ac:	6018      	str	r0, [r3, #0]
 80071ae:	6813      	ldr	r3, [r2, #0]
 80071b0:	062e      	lsls	r6, r5, #24
 80071b2:	d501      	bpl.n	80071b8 <_printf_i+0x1a0>
 80071b4:	6019      	str	r1, [r3, #0]
 80071b6:	e002      	b.n	80071be <_printf_i+0x1a6>
 80071b8:	066d      	lsls	r5, r5, #25
 80071ba:	d5fb      	bpl.n	80071b4 <_printf_i+0x19c>
 80071bc:	8019      	strh	r1, [r3, #0]
 80071be:	2300      	movs	r3, #0
 80071c0:	9e04      	ldr	r6, [sp, #16]
 80071c2:	6123      	str	r3, [r4, #16]
 80071c4:	e7d2      	b.n	800716c <_printf_i+0x154>
 80071c6:	681a      	ldr	r2, [r3, #0]
 80071c8:	1d11      	adds	r1, r2, #4
 80071ca:	6019      	str	r1, [r3, #0]
 80071cc:	6816      	ldr	r6, [r2, #0]
 80071ce:	2100      	movs	r1, #0
 80071d0:	0030      	movs	r0, r6
 80071d2:	6862      	ldr	r2, [r4, #4]
 80071d4:	f000 fb32 	bl	800783c <memchr>
 80071d8:	2800      	cmp	r0, #0
 80071da:	d001      	beq.n	80071e0 <_printf_i+0x1c8>
 80071dc:	1b80      	subs	r0, r0, r6
 80071de:	6060      	str	r0, [r4, #4]
 80071e0:	6863      	ldr	r3, [r4, #4]
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	2300      	movs	r3, #0
 80071e6:	9a04      	ldr	r2, [sp, #16]
 80071e8:	7013      	strb	r3, [r2, #0]
 80071ea:	e7bf      	b.n	800716c <_printf_i+0x154>
 80071ec:	6923      	ldr	r3, [r4, #16]
 80071ee:	0032      	movs	r2, r6
 80071f0:	9906      	ldr	r1, [sp, #24]
 80071f2:	9805      	ldr	r0, [sp, #20]
 80071f4:	9d07      	ldr	r5, [sp, #28]
 80071f6:	47a8      	blx	r5
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d0c1      	beq.n	8007180 <_printf_i+0x168>
 80071fc:	6823      	ldr	r3, [r4, #0]
 80071fe:	079b      	lsls	r3, r3, #30
 8007200:	d415      	bmi.n	800722e <_printf_i+0x216>
 8007202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007204:	68e0      	ldr	r0, [r4, #12]
 8007206:	4298      	cmp	r0, r3
 8007208:	dabc      	bge.n	8007184 <_printf_i+0x16c>
 800720a:	0018      	movs	r0, r3
 800720c:	e7ba      	b.n	8007184 <_printf_i+0x16c>
 800720e:	0022      	movs	r2, r4
 8007210:	2301      	movs	r3, #1
 8007212:	9906      	ldr	r1, [sp, #24]
 8007214:	9805      	ldr	r0, [sp, #20]
 8007216:	9e07      	ldr	r6, [sp, #28]
 8007218:	3219      	adds	r2, #25
 800721a:	47b0      	blx	r6
 800721c:	1c43      	adds	r3, r0, #1
 800721e:	d0af      	beq.n	8007180 <_printf_i+0x168>
 8007220:	3501      	adds	r5, #1
 8007222:	68e3      	ldr	r3, [r4, #12]
 8007224:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007226:	1a9b      	subs	r3, r3, r2
 8007228:	42ab      	cmp	r3, r5
 800722a:	dcf0      	bgt.n	800720e <_printf_i+0x1f6>
 800722c:	e7e9      	b.n	8007202 <_printf_i+0x1ea>
 800722e:	2500      	movs	r5, #0
 8007230:	e7f7      	b.n	8007222 <_printf_i+0x20a>
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	0800916a 	.word	0x0800916a
 8007238:	0800917b 	.word	0x0800917b

0800723c <_scanf_chars>:
 800723c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800723e:	0015      	movs	r5, r2
 8007240:	688a      	ldr	r2, [r1, #8]
 8007242:	000c      	movs	r4, r1
 8007244:	9001      	str	r0, [sp, #4]
 8007246:	2a00      	cmp	r2, #0
 8007248:	d105      	bne.n	8007256 <_scanf_chars+0x1a>
 800724a:	6989      	ldr	r1, [r1, #24]
 800724c:	3201      	adds	r2, #1
 800724e:	2900      	cmp	r1, #0
 8007250:	d000      	beq.n	8007254 <_scanf_chars+0x18>
 8007252:	3a02      	subs	r2, #2
 8007254:	60a2      	str	r2, [r4, #8]
 8007256:	6822      	ldr	r2, [r4, #0]
 8007258:	06d2      	lsls	r2, r2, #27
 800725a:	d403      	bmi.n	8007264 <_scanf_chars+0x28>
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	1d11      	adds	r1, r2, #4
 8007260:	6019      	str	r1, [r3, #0]
 8007262:	6817      	ldr	r7, [r2, #0]
 8007264:	2600      	movs	r6, #0
 8007266:	69a0      	ldr	r0, [r4, #24]
 8007268:	2800      	cmp	r0, #0
 800726a:	d013      	beq.n	8007294 <_scanf_chars+0x58>
 800726c:	2801      	cmp	r0, #1
 800726e:	d108      	bne.n	8007282 <_scanf_chars+0x46>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	6962      	ldr	r2, [r4, #20]
 8007274:	781b      	ldrb	r3, [r3, #0]
 8007276:	5cd3      	ldrb	r3, [r2, r3]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10b      	bne.n	8007294 <_scanf_chars+0x58>
 800727c:	2e00      	cmp	r6, #0
 800727e:	d127      	bne.n	80072d0 <_scanf_chars+0x94>
 8007280:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007282:	2802      	cmp	r0, #2
 8007284:	d124      	bne.n	80072d0 <_scanf_chars+0x94>
 8007286:	682b      	ldr	r3, [r5, #0]
 8007288:	4a1a      	ldr	r2, [pc, #104]	; (80072f4 <_scanf_chars+0xb8>)
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	5cd3      	ldrb	r3, [r2, r3]
 800728e:	2208      	movs	r2, #8
 8007290:	4213      	tst	r3, r2
 8007292:	d11d      	bne.n	80072d0 <_scanf_chars+0x94>
 8007294:	2210      	movs	r2, #16
 8007296:	6823      	ldr	r3, [r4, #0]
 8007298:	3601      	adds	r6, #1
 800729a:	4213      	tst	r3, r2
 800729c:	d103      	bne.n	80072a6 <_scanf_chars+0x6a>
 800729e:	682b      	ldr	r3, [r5, #0]
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	703b      	strb	r3, [r7, #0]
 80072a4:	3701      	adds	r7, #1
 80072a6:	682a      	ldr	r2, [r5, #0]
 80072a8:	686b      	ldr	r3, [r5, #4]
 80072aa:	3201      	adds	r2, #1
 80072ac:	602a      	str	r2, [r5, #0]
 80072ae:	68a2      	ldr	r2, [r4, #8]
 80072b0:	3b01      	subs	r3, #1
 80072b2:	3a01      	subs	r2, #1
 80072b4:	606b      	str	r3, [r5, #4]
 80072b6:	60a2      	str	r2, [r4, #8]
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	d009      	beq.n	80072d0 <_scanf_chars+0x94>
 80072bc:	2b00      	cmp	r3, #0
 80072be:	dcd2      	bgt.n	8007266 <_scanf_chars+0x2a>
 80072c0:	23c0      	movs	r3, #192	; 0xc0
 80072c2:	005b      	lsls	r3, r3, #1
 80072c4:	0029      	movs	r1, r5
 80072c6:	58e3      	ldr	r3, [r4, r3]
 80072c8:	9801      	ldr	r0, [sp, #4]
 80072ca:	4798      	blx	r3
 80072cc:	2800      	cmp	r0, #0
 80072ce:	d0ca      	beq.n	8007266 <_scanf_chars+0x2a>
 80072d0:	6822      	ldr	r2, [r4, #0]
 80072d2:	2310      	movs	r3, #16
 80072d4:	0011      	movs	r1, r2
 80072d6:	4019      	ands	r1, r3
 80072d8:	421a      	tst	r2, r3
 80072da:	d106      	bne.n	80072ea <_scanf_chars+0xae>
 80072dc:	68e3      	ldr	r3, [r4, #12]
 80072de:	3301      	adds	r3, #1
 80072e0:	60e3      	str	r3, [r4, #12]
 80072e2:	69a3      	ldr	r3, [r4, #24]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d000      	beq.n	80072ea <_scanf_chars+0xae>
 80072e8:	7039      	strb	r1, [r7, #0]
 80072ea:	6923      	ldr	r3, [r4, #16]
 80072ec:	2000      	movs	r0, #0
 80072ee:	199e      	adds	r6, r3, r6
 80072f0:	6126      	str	r6, [r4, #16]
 80072f2:	e7c5      	b.n	8007280 <_scanf_chars+0x44>
 80072f4:	08009059 	.word	0x08009059

080072f8 <_scanf_i>:
 80072f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072fa:	000c      	movs	r4, r1
 80072fc:	b08d      	sub	sp, #52	; 0x34
 80072fe:	9302      	str	r3, [sp, #8]
 8007300:	4b79      	ldr	r3, [pc, #484]	; (80074e8 <_scanf_i+0x1f0>)
 8007302:	0016      	movs	r6, r2
 8007304:	9005      	str	r0, [sp, #20]
 8007306:	aa09      	add	r2, sp, #36	; 0x24
 8007308:	cb23      	ldmia	r3!, {r0, r1, r5}
 800730a:	c223      	stmia	r2!, {r0, r1, r5}
 800730c:	4b77      	ldr	r3, [pc, #476]	; (80074ec <_scanf_i+0x1f4>)
 800730e:	9306      	str	r3, [sp, #24]
 8007310:	69a3      	ldr	r3, [r4, #24]
 8007312:	2b03      	cmp	r3, #3
 8007314:	d001      	beq.n	800731a <_scanf_i+0x22>
 8007316:	4b76      	ldr	r3, [pc, #472]	; (80074f0 <_scanf_i+0x1f8>)
 8007318:	9306      	str	r3, [sp, #24]
 800731a:	22ae      	movs	r2, #174	; 0xae
 800731c:	2000      	movs	r0, #0
 800731e:	68a3      	ldr	r3, [r4, #8]
 8007320:	0052      	lsls	r2, r2, #1
 8007322:	1e59      	subs	r1, r3, #1
 8007324:	9004      	str	r0, [sp, #16]
 8007326:	4291      	cmp	r1, r2
 8007328:	d905      	bls.n	8007336 <_scanf_i+0x3e>
 800732a:	3b5e      	subs	r3, #94	; 0x5e
 800732c:	3bff      	subs	r3, #255	; 0xff
 800732e:	9304      	str	r3, [sp, #16]
 8007330:	235e      	movs	r3, #94	; 0x5e
 8007332:	33ff      	adds	r3, #255	; 0xff
 8007334:	60a3      	str	r3, [r4, #8]
 8007336:	0023      	movs	r3, r4
 8007338:	331c      	adds	r3, #28
 800733a:	9301      	str	r3, [sp, #4]
 800733c:	23d0      	movs	r3, #208	; 0xd0
 800733e:	2700      	movs	r7, #0
 8007340:	6822      	ldr	r2, [r4, #0]
 8007342:	011b      	lsls	r3, r3, #4
 8007344:	4313      	orrs	r3, r2
 8007346:	6023      	str	r3, [r4, #0]
 8007348:	9b01      	ldr	r3, [sp, #4]
 800734a:	9303      	str	r3, [sp, #12]
 800734c:	6833      	ldr	r3, [r6, #0]
 800734e:	a809      	add	r0, sp, #36	; 0x24
 8007350:	7819      	ldrb	r1, [r3, #0]
 8007352:	00bb      	lsls	r3, r7, #2
 8007354:	2202      	movs	r2, #2
 8007356:	5818      	ldr	r0, [r3, r0]
 8007358:	f000 fa70 	bl	800783c <memchr>
 800735c:	2800      	cmp	r0, #0
 800735e:	d02b      	beq.n	80073b8 <_scanf_i+0xc0>
 8007360:	2f01      	cmp	r7, #1
 8007362:	d162      	bne.n	800742a <_scanf_i+0x132>
 8007364:	6863      	ldr	r3, [r4, #4]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d106      	bne.n	8007378 <_scanf_i+0x80>
 800736a:	3308      	adds	r3, #8
 800736c:	6822      	ldr	r2, [r4, #0]
 800736e:	6063      	str	r3, [r4, #4]
 8007370:	33f9      	adds	r3, #249	; 0xf9
 8007372:	33ff      	adds	r3, #255	; 0xff
 8007374:	4313      	orrs	r3, r2
 8007376:	6023      	str	r3, [r4, #0]
 8007378:	4b5e      	ldr	r3, [pc, #376]	; (80074f4 <_scanf_i+0x1fc>)
 800737a:	6822      	ldr	r2, [r4, #0]
 800737c:	4013      	ands	r3, r2
 800737e:	6023      	str	r3, [r4, #0]
 8007380:	68a3      	ldr	r3, [r4, #8]
 8007382:	1e5a      	subs	r2, r3, #1
 8007384:	60a2      	str	r2, [r4, #8]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d016      	beq.n	80073b8 <_scanf_i+0xc0>
 800738a:	6833      	ldr	r3, [r6, #0]
 800738c:	1c5a      	adds	r2, r3, #1
 800738e:	6032      	str	r2, [r6, #0]
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	9a03      	ldr	r2, [sp, #12]
 8007394:	7013      	strb	r3, [r2, #0]
 8007396:	6873      	ldr	r3, [r6, #4]
 8007398:	1c55      	adds	r5, r2, #1
 800739a:	3b01      	subs	r3, #1
 800739c:	6073      	str	r3, [r6, #4]
 800739e:	9503      	str	r5, [sp, #12]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	dc09      	bgt.n	80073b8 <_scanf_i+0xc0>
 80073a4:	23c0      	movs	r3, #192	; 0xc0
 80073a6:	005b      	lsls	r3, r3, #1
 80073a8:	58e3      	ldr	r3, [r4, r3]
 80073aa:	0031      	movs	r1, r6
 80073ac:	9805      	ldr	r0, [sp, #20]
 80073ae:	9307      	str	r3, [sp, #28]
 80073b0:	4798      	blx	r3
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d000      	beq.n	80073b8 <_scanf_i+0xc0>
 80073b6:	e081      	b.n	80074bc <_scanf_i+0x1c4>
 80073b8:	3701      	adds	r7, #1
 80073ba:	2f03      	cmp	r7, #3
 80073bc:	d1c6      	bne.n	800734c <_scanf_i+0x54>
 80073be:	6863      	ldr	r3, [r4, #4]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d101      	bne.n	80073c8 <_scanf_i+0xd0>
 80073c4:	330a      	adds	r3, #10
 80073c6:	6063      	str	r3, [r4, #4]
 80073c8:	2110      	movs	r1, #16
 80073ca:	2700      	movs	r7, #0
 80073cc:	6863      	ldr	r3, [r4, #4]
 80073ce:	6960      	ldr	r0, [r4, #20]
 80073d0:	1ac9      	subs	r1, r1, r3
 80073d2:	4b49      	ldr	r3, [pc, #292]	; (80074f8 <_scanf_i+0x200>)
 80073d4:	18c9      	adds	r1, r1, r3
 80073d6:	f000 f893 	bl	8007500 <__sccl>
 80073da:	9d03      	ldr	r5, [sp, #12]
 80073dc:	68a3      	ldr	r3, [r4, #8]
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	9303      	str	r3, [sp, #12]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d041      	beq.n	800746a <_scanf_i+0x172>
 80073e6:	6831      	ldr	r1, [r6, #0]
 80073e8:	6963      	ldr	r3, [r4, #20]
 80073ea:	7808      	ldrb	r0, [r1, #0]
 80073ec:	5c1b      	ldrb	r3, [r3, r0]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d03b      	beq.n	800746a <_scanf_i+0x172>
 80073f2:	2830      	cmp	r0, #48	; 0x30
 80073f4:	d129      	bne.n	800744a <_scanf_i+0x152>
 80073f6:	2380      	movs	r3, #128	; 0x80
 80073f8:	011b      	lsls	r3, r3, #4
 80073fa:	421a      	tst	r2, r3
 80073fc:	d025      	beq.n	800744a <_scanf_i+0x152>
 80073fe:	9b04      	ldr	r3, [sp, #16]
 8007400:	3701      	adds	r7, #1
 8007402:	2b00      	cmp	r3, #0
 8007404:	d005      	beq.n	8007412 <_scanf_i+0x11a>
 8007406:	001a      	movs	r2, r3
 8007408:	9b03      	ldr	r3, [sp, #12]
 800740a:	3a01      	subs	r2, #1
 800740c:	3301      	adds	r3, #1
 800740e:	9204      	str	r2, [sp, #16]
 8007410:	60a3      	str	r3, [r4, #8]
 8007412:	6873      	ldr	r3, [r6, #4]
 8007414:	3b01      	subs	r3, #1
 8007416:	6073      	str	r3, [r6, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	dd1d      	ble.n	8007458 <_scanf_i+0x160>
 800741c:	6833      	ldr	r3, [r6, #0]
 800741e:	3301      	adds	r3, #1
 8007420:	6033      	str	r3, [r6, #0]
 8007422:	68a3      	ldr	r3, [r4, #8]
 8007424:	3b01      	subs	r3, #1
 8007426:	60a3      	str	r3, [r4, #8]
 8007428:	e7d8      	b.n	80073dc <_scanf_i+0xe4>
 800742a:	2f02      	cmp	r7, #2
 800742c:	d1a8      	bne.n	8007380 <_scanf_i+0x88>
 800742e:	21c0      	movs	r1, #192	; 0xc0
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	6822      	ldr	r2, [r4, #0]
 8007434:	00c9      	lsls	r1, r1, #3
 8007436:	4011      	ands	r1, r2
 8007438:	009b      	lsls	r3, r3, #2
 800743a:	4299      	cmp	r1, r3
 800743c:	d1bf      	bne.n	80073be <_scanf_i+0xc6>
 800743e:	3bf1      	subs	r3, #241	; 0xf1
 8007440:	3bff      	subs	r3, #255	; 0xff
 8007442:	6063      	str	r3, [r4, #4]
 8007444:	33f0      	adds	r3, #240	; 0xf0
 8007446:	4313      	orrs	r3, r2
 8007448:	e799      	b.n	800737e <_scanf_i+0x86>
 800744a:	4b2c      	ldr	r3, [pc, #176]	; (80074fc <_scanf_i+0x204>)
 800744c:	4013      	ands	r3, r2
 800744e:	6023      	str	r3, [r4, #0]
 8007450:	780b      	ldrb	r3, [r1, #0]
 8007452:	702b      	strb	r3, [r5, #0]
 8007454:	3501      	adds	r5, #1
 8007456:	e7dc      	b.n	8007412 <_scanf_i+0x11a>
 8007458:	23c0      	movs	r3, #192	; 0xc0
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	58e3      	ldr	r3, [r4, r3]
 800745e:	0031      	movs	r1, r6
 8007460:	9805      	ldr	r0, [sp, #20]
 8007462:	9303      	str	r3, [sp, #12]
 8007464:	4798      	blx	r3
 8007466:	2800      	cmp	r0, #0
 8007468:	d0db      	beq.n	8007422 <_scanf_i+0x12a>
 800746a:	6823      	ldr	r3, [r4, #0]
 800746c:	05db      	lsls	r3, r3, #23
 800746e:	d50e      	bpl.n	800748e <_scanf_i+0x196>
 8007470:	9b01      	ldr	r3, [sp, #4]
 8007472:	429d      	cmp	r5, r3
 8007474:	d907      	bls.n	8007486 <_scanf_i+0x18e>
 8007476:	23be      	movs	r3, #190	; 0xbe
 8007478:	3d01      	subs	r5, #1
 800747a:	005b      	lsls	r3, r3, #1
 800747c:	0032      	movs	r2, r6
 800747e:	7829      	ldrb	r1, [r5, #0]
 8007480:	58e3      	ldr	r3, [r4, r3]
 8007482:	9805      	ldr	r0, [sp, #20]
 8007484:	4798      	blx	r3
 8007486:	9b01      	ldr	r3, [sp, #4]
 8007488:	2001      	movs	r0, #1
 800748a:	429d      	cmp	r5, r3
 800748c:	d029      	beq.n	80074e2 <_scanf_i+0x1ea>
 800748e:	6821      	ldr	r1, [r4, #0]
 8007490:	2310      	movs	r3, #16
 8007492:	000a      	movs	r2, r1
 8007494:	401a      	ands	r2, r3
 8007496:	4219      	tst	r1, r3
 8007498:	d11c      	bne.n	80074d4 <_scanf_i+0x1dc>
 800749a:	702a      	strb	r2, [r5, #0]
 800749c:	6863      	ldr	r3, [r4, #4]
 800749e:	9901      	ldr	r1, [sp, #4]
 80074a0:	9805      	ldr	r0, [sp, #20]
 80074a2:	9e06      	ldr	r6, [sp, #24]
 80074a4:	47b0      	blx	r6
 80074a6:	9b02      	ldr	r3, [sp, #8]
 80074a8:	6821      	ldr	r1, [r4, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	068a      	lsls	r2, r1, #26
 80074ae:	d507      	bpl.n	80074c0 <_scanf_i+0x1c8>
 80074b0:	1d1a      	adds	r2, r3, #4
 80074b2:	9902      	ldr	r1, [sp, #8]
 80074b4:	600a      	str	r2, [r1, #0]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6018      	str	r0, [r3, #0]
 80074ba:	e008      	b.n	80074ce <_scanf_i+0x1d6>
 80074bc:	2700      	movs	r7, #0
 80074be:	e7d4      	b.n	800746a <_scanf_i+0x172>
 80074c0:	1d1a      	adds	r2, r3, #4
 80074c2:	07ce      	lsls	r6, r1, #31
 80074c4:	d5f5      	bpl.n	80074b2 <_scanf_i+0x1ba>
 80074c6:	9902      	ldr	r1, [sp, #8]
 80074c8:	600a      	str	r2, [r1, #0]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	8018      	strh	r0, [r3, #0]
 80074ce:	68e3      	ldr	r3, [r4, #12]
 80074d0:	3301      	adds	r3, #1
 80074d2:	60e3      	str	r3, [r4, #12]
 80074d4:	2000      	movs	r0, #0
 80074d6:	9b01      	ldr	r3, [sp, #4]
 80074d8:	1aed      	subs	r5, r5, r3
 80074da:	6923      	ldr	r3, [r4, #16]
 80074dc:	19ef      	adds	r7, r5, r7
 80074de:	19df      	adds	r7, r3, r7
 80074e0:	6127      	str	r7, [r4, #16]
 80074e2:	b00d      	add	sp, #52	; 0x34
 80074e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074e6:	46c0      	nop			; (mov r8, r8)
 80074e8:	08008204 	.word	0x08008204
 80074ec:	08007695 	.word	0x08007695
 80074f0:	080077b5 	.word	0x080077b5
 80074f4:	fffffaff 	.word	0xfffffaff
 80074f8:	08009195 	.word	0x08009195
 80074fc:	fffff6ff 	.word	0xfffff6ff

08007500 <__sccl>:
 8007500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007502:	780b      	ldrb	r3, [r1, #0]
 8007504:	0004      	movs	r4, r0
 8007506:	2b5e      	cmp	r3, #94	; 0x5e
 8007508:	d00c      	beq.n	8007524 <__sccl+0x24>
 800750a:	1c48      	adds	r0, r1, #1
 800750c:	2100      	movs	r1, #0
 800750e:	0022      	movs	r2, r4
 8007510:	1c65      	adds	r5, r4, #1
 8007512:	35ff      	adds	r5, #255	; 0xff
 8007514:	7011      	strb	r1, [r2, #0]
 8007516:	3201      	adds	r2, #1
 8007518:	42aa      	cmp	r2, r5
 800751a:	d1fb      	bne.n	8007514 <__sccl+0x14>
 800751c:	2b00      	cmp	r3, #0
 800751e:	d105      	bne.n	800752c <__sccl+0x2c>
 8007520:	3801      	subs	r0, #1
 8007522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007524:	784b      	ldrb	r3, [r1, #1]
 8007526:	1c88      	adds	r0, r1, #2
 8007528:	2101      	movs	r1, #1
 800752a:	e7f0      	b.n	800750e <__sccl+0xe>
 800752c:	2201      	movs	r2, #1
 800752e:	262d      	movs	r6, #45	; 0x2d
 8007530:	4051      	eors	r1, r2
 8007532:	0002      	movs	r2, r0
 8007534:	54e1      	strb	r1, [r4, r3]
 8007536:	7815      	ldrb	r5, [r2, #0]
 8007538:	1c50      	adds	r0, r2, #1
 800753a:	2d2d      	cmp	r5, #45	; 0x2d
 800753c:	d009      	beq.n	8007552 <__sccl+0x52>
 800753e:	2d5d      	cmp	r5, #93	; 0x5d
 8007540:	d0ef      	beq.n	8007522 <__sccl+0x22>
 8007542:	2d00      	cmp	r5, #0
 8007544:	d101      	bne.n	800754a <__sccl+0x4a>
 8007546:	0010      	movs	r0, r2
 8007548:	e7eb      	b.n	8007522 <__sccl+0x22>
 800754a:	002b      	movs	r3, r5
 800754c:	e7f1      	b.n	8007532 <__sccl+0x32>
 800754e:	0033      	movs	r3, r6
 8007550:	e7ef      	b.n	8007532 <__sccl+0x32>
 8007552:	7855      	ldrb	r5, [r2, #1]
 8007554:	2d5d      	cmp	r5, #93	; 0x5d
 8007556:	d0fa      	beq.n	800754e <__sccl+0x4e>
 8007558:	42ab      	cmp	r3, r5
 800755a:	dcf8      	bgt.n	800754e <__sccl+0x4e>
 800755c:	0018      	movs	r0, r3
 800755e:	3202      	adds	r2, #2
 8007560:	3001      	adds	r0, #1
 8007562:	5421      	strb	r1, [r4, r0]
 8007564:	4285      	cmp	r5, r0
 8007566:	dcfb      	bgt.n	8007560 <__sccl+0x60>
 8007568:	2000      	movs	r0, #0
 800756a:	1c5f      	adds	r7, r3, #1
 800756c:	42ab      	cmp	r3, r5
 800756e:	da01      	bge.n	8007574 <__sccl+0x74>
 8007570:	1ae8      	subs	r0, r5, r3
 8007572:	3801      	subs	r0, #1
 8007574:	183b      	adds	r3, r7, r0
 8007576:	e7de      	b.n	8007536 <__sccl+0x36>

08007578 <_strtol_l.isra.0>:
 8007578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800757a:	b087      	sub	sp, #28
 800757c:	001e      	movs	r6, r3
 800757e:	9005      	str	r0, [sp, #20]
 8007580:	9101      	str	r1, [sp, #4]
 8007582:	9202      	str	r2, [sp, #8]
 8007584:	2b01      	cmp	r3, #1
 8007586:	d045      	beq.n	8007614 <_strtol_l.isra.0+0x9c>
 8007588:	0008      	movs	r0, r1
 800758a:	2b24      	cmp	r3, #36	; 0x24
 800758c:	d842      	bhi.n	8007614 <_strtol_l.isra.0+0x9c>
 800758e:	4b3f      	ldr	r3, [pc, #252]	; (800768c <_strtol_l.isra.0+0x114>)
 8007590:	2208      	movs	r2, #8
 8007592:	469c      	mov	ip, r3
 8007594:	0003      	movs	r3, r0
 8007596:	4661      	mov	r1, ip
 8007598:	781c      	ldrb	r4, [r3, #0]
 800759a:	1c45      	adds	r5, r0, #1
 800759c:	5d09      	ldrb	r1, [r1, r4]
 800759e:	0028      	movs	r0, r5
 80075a0:	000f      	movs	r7, r1
 80075a2:	4017      	ands	r7, r2
 80075a4:	4211      	tst	r1, r2
 80075a6:	d1f5      	bne.n	8007594 <_strtol_l.isra.0+0x1c>
 80075a8:	2c2d      	cmp	r4, #45	; 0x2d
 80075aa:	d13a      	bne.n	8007622 <_strtol_l.isra.0+0xaa>
 80075ac:	2701      	movs	r7, #1
 80075ae:	782c      	ldrb	r4, [r5, #0]
 80075b0:	1c9d      	adds	r5, r3, #2
 80075b2:	2e00      	cmp	r6, #0
 80075b4:	d065      	beq.n	8007682 <_strtol_l.isra.0+0x10a>
 80075b6:	2e10      	cmp	r6, #16
 80075b8:	d109      	bne.n	80075ce <_strtol_l.isra.0+0x56>
 80075ba:	2c30      	cmp	r4, #48	; 0x30
 80075bc:	d107      	bne.n	80075ce <_strtol_l.isra.0+0x56>
 80075be:	2220      	movs	r2, #32
 80075c0:	782b      	ldrb	r3, [r5, #0]
 80075c2:	4393      	bics	r3, r2
 80075c4:	2b58      	cmp	r3, #88	; 0x58
 80075c6:	d157      	bne.n	8007678 <_strtol_l.isra.0+0x100>
 80075c8:	2610      	movs	r6, #16
 80075ca:	786c      	ldrb	r4, [r5, #1]
 80075cc:	3502      	adds	r5, #2
 80075ce:	4b30      	ldr	r3, [pc, #192]	; (8007690 <_strtol_l.isra.0+0x118>)
 80075d0:	0031      	movs	r1, r6
 80075d2:	18fb      	adds	r3, r7, r3
 80075d4:	0018      	movs	r0, r3
 80075d6:	9303      	str	r3, [sp, #12]
 80075d8:	f7f8 fe2e 	bl	8000238 <__aeabi_uidivmod>
 80075dc:	2300      	movs	r3, #0
 80075de:	2201      	movs	r2, #1
 80075e0:	4684      	mov	ip, r0
 80075e2:	0018      	movs	r0, r3
 80075e4:	9104      	str	r1, [sp, #16]
 80075e6:	4252      	negs	r2, r2
 80075e8:	0021      	movs	r1, r4
 80075ea:	3930      	subs	r1, #48	; 0x30
 80075ec:	2909      	cmp	r1, #9
 80075ee:	d81d      	bhi.n	800762c <_strtol_l.isra.0+0xb4>
 80075f0:	000c      	movs	r4, r1
 80075f2:	42a6      	cmp	r6, r4
 80075f4:	dd28      	ble.n	8007648 <_strtol_l.isra.0+0xd0>
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	db24      	blt.n	8007644 <_strtol_l.isra.0+0xcc>
 80075fa:	0013      	movs	r3, r2
 80075fc:	4584      	cmp	ip, r0
 80075fe:	d306      	bcc.n	800760e <_strtol_l.isra.0+0x96>
 8007600:	d102      	bne.n	8007608 <_strtol_l.isra.0+0x90>
 8007602:	9904      	ldr	r1, [sp, #16]
 8007604:	42a1      	cmp	r1, r4
 8007606:	db02      	blt.n	800760e <_strtol_l.isra.0+0x96>
 8007608:	2301      	movs	r3, #1
 800760a:	4370      	muls	r0, r6
 800760c:	1820      	adds	r0, r4, r0
 800760e:	782c      	ldrb	r4, [r5, #0]
 8007610:	3501      	adds	r5, #1
 8007612:	e7e9      	b.n	80075e8 <_strtol_l.isra.0+0x70>
 8007614:	f7ff f8de 	bl	80067d4 <__errno>
 8007618:	2316      	movs	r3, #22
 800761a:	6003      	str	r3, [r0, #0]
 800761c:	2000      	movs	r0, #0
 800761e:	b007      	add	sp, #28
 8007620:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007622:	2c2b      	cmp	r4, #43	; 0x2b
 8007624:	d1c5      	bne.n	80075b2 <_strtol_l.isra.0+0x3a>
 8007626:	782c      	ldrb	r4, [r5, #0]
 8007628:	1c9d      	adds	r5, r3, #2
 800762a:	e7c2      	b.n	80075b2 <_strtol_l.isra.0+0x3a>
 800762c:	0021      	movs	r1, r4
 800762e:	3941      	subs	r1, #65	; 0x41
 8007630:	2919      	cmp	r1, #25
 8007632:	d801      	bhi.n	8007638 <_strtol_l.isra.0+0xc0>
 8007634:	3c37      	subs	r4, #55	; 0x37
 8007636:	e7dc      	b.n	80075f2 <_strtol_l.isra.0+0x7a>
 8007638:	0021      	movs	r1, r4
 800763a:	3961      	subs	r1, #97	; 0x61
 800763c:	2919      	cmp	r1, #25
 800763e:	d803      	bhi.n	8007648 <_strtol_l.isra.0+0xd0>
 8007640:	3c57      	subs	r4, #87	; 0x57
 8007642:	e7d6      	b.n	80075f2 <_strtol_l.isra.0+0x7a>
 8007644:	0013      	movs	r3, r2
 8007646:	e7e2      	b.n	800760e <_strtol_l.isra.0+0x96>
 8007648:	2b00      	cmp	r3, #0
 800764a:	da09      	bge.n	8007660 <_strtol_l.isra.0+0xe8>
 800764c:	2322      	movs	r3, #34	; 0x22
 800764e:	9a05      	ldr	r2, [sp, #20]
 8007650:	9803      	ldr	r0, [sp, #12]
 8007652:	6013      	str	r3, [r2, #0]
 8007654:	9b02      	ldr	r3, [sp, #8]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d0e1      	beq.n	800761e <_strtol_l.isra.0+0xa6>
 800765a:	1e6b      	subs	r3, r5, #1
 800765c:	9301      	str	r3, [sp, #4]
 800765e:	e007      	b.n	8007670 <_strtol_l.isra.0+0xf8>
 8007660:	2f00      	cmp	r7, #0
 8007662:	d000      	beq.n	8007666 <_strtol_l.isra.0+0xee>
 8007664:	4240      	negs	r0, r0
 8007666:	9a02      	ldr	r2, [sp, #8]
 8007668:	2a00      	cmp	r2, #0
 800766a:	d0d8      	beq.n	800761e <_strtol_l.isra.0+0xa6>
 800766c:	2b00      	cmp	r3, #0
 800766e:	d1f4      	bne.n	800765a <_strtol_l.isra.0+0xe2>
 8007670:	9b02      	ldr	r3, [sp, #8]
 8007672:	9a01      	ldr	r2, [sp, #4]
 8007674:	601a      	str	r2, [r3, #0]
 8007676:	e7d2      	b.n	800761e <_strtol_l.isra.0+0xa6>
 8007678:	2430      	movs	r4, #48	; 0x30
 800767a:	2e00      	cmp	r6, #0
 800767c:	d1a7      	bne.n	80075ce <_strtol_l.isra.0+0x56>
 800767e:	3608      	adds	r6, #8
 8007680:	e7a5      	b.n	80075ce <_strtol_l.isra.0+0x56>
 8007682:	2c30      	cmp	r4, #48	; 0x30
 8007684:	d09b      	beq.n	80075be <_strtol_l.isra.0+0x46>
 8007686:	260a      	movs	r6, #10
 8007688:	e7a1      	b.n	80075ce <_strtol_l.isra.0+0x56>
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	08009059 	.word	0x08009059
 8007690:	7fffffff 	.word	0x7fffffff

08007694 <_strtol_r>:
 8007694:	b510      	push	{r4, lr}
 8007696:	f7ff ff6f 	bl	8007578 <_strtol_l.isra.0>
 800769a:	bd10      	pop	{r4, pc}

0800769c <_strtoul_l.isra.0>:
 800769c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800769e:	001e      	movs	r6, r3
 80076a0:	4b43      	ldr	r3, [pc, #268]	; (80077b0 <_strtoul_l.isra.0+0x114>)
 80076a2:	b087      	sub	sp, #28
 80076a4:	000f      	movs	r7, r1
 80076a6:	9101      	str	r1, [sp, #4]
 80076a8:	469c      	mov	ip, r3
 80076aa:	2108      	movs	r1, #8
 80076ac:	9005      	str	r0, [sp, #20]
 80076ae:	9202      	str	r2, [sp, #8]
 80076b0:	003b      	movs	r3, r7
 80076b2:	4662      	mov	r2, ip
 80076b4:	781c      	ldrb	r4, [r3, #0]
 80076b6:	1c7d      	adds	r5, r7, #1
 80076b8:	5d10      	ldrb	r0, [r2, r4]
 80076ba:	002f      	movs	r7, r5
 80076bc:	0002      	movs	r2, r0
 80076be:	400a      	ands	r2, r1
 80076c0:	4208      	tst	r0, r1
 80076c2:	d1f5      	bne.n	80076b0 <_strtoul_l.isra.0+0x14>
 80076c4:	2c2d      	cmp	r4, #45	; 0x2d
 80076c6:	d13a      	bne.n	800773e <_strtoul_l.isra.0+0xa2>
 80076c8:	2701      	movs	r7, #1
 80076ca:	782c      	ldrb	r4, [r5, #0]
 80076cc:	1c9d      	adds	r5, r3, #2
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	d069      	beq.n	80077a6 <_strtoul_l.isra.0+0x10a>
 80076d2:	2e10      	cmp	r6, #16
 80076d4:	d109      	bne.n	80076ea <_strtoul_l.isra.0+0x4e>
 80076d6:	2c30      	cmp	r4, #48	; 0x30
 80076d8:	d107      	bne.n	80076ea <_strtoul_l.isra.0+0x4e>
 80076da:	2220      	movs	r2, #32
 80076dc:	782b      	ldrb	r3, [r5, #0]
 80076de:	4393      	bics	r3, r2
 80076e0:	2b58      	cmp	r3, #88	; 0x58
 80076e2:	d15b      	bne.n	800779c <_strtoul_l.isra.0+0x100>
 80076e4:	2610      	movs	r6, #16
 80076e6:	786c      	ldrb	r4, [r5, #1]
 80076e8:	3502      	adds	r5, #2
 80076ea:	2001      	movs	r0, #1
 80076ec:	0031      	movs	r1, r6
 80076ee:	4240      	negs	r0, r0
 80076f0:	f7f8 fd1c 	bl	800012c <__udivsi3>
 80076f4:	9003      	str	r0, [sp, #12]
 80076f6:	2001      	movs	r0, #1
 80076f8:	0031      	movs	r1, r6
 80076fa:	4240      	negs	r0, r0
 80076fc:	f7f8 fd9c 	bl	8000238 <__aeabi_uidivmod>
 8007700:	2300      	movs	r3, #0
 8007702:	9104      	str	r1, [sp, #16]
 8007704:	2101      	movs	r1, #1
 8007706:	2201      	movs	r2, #1
 8007708:	0018      	movs	r0, r3
 800770a:	468c      	mov	ip, r1
 800770c:	4252      	negs	r2, r2
 800770e:	0021      	movs	r1, r4
 8007710:	3930      	subs	r1, #48	; 0x30
 8007712:	2909      	cmp	r1, #9
 8007714:	d81a      	bhi.n	800774c <_strtoul_l.isra.0+0xb0>
 8007716:	000c      	movs	r4, r1
 8007718:	42a6      	cmp	r6, r4
 800771a:	dd25      	ble.n	8007768 <_strtoul_l.isra.0+0xcc>
 800771c:	2b00      	cmp	r3, #0
 800771e:	db21      	blt.n	8007764 <_strtoul_l.isra.0+0xc8>
 8007720:	9903      	ldr	r1, [sp, #12]
 8007722:	0013      	movs	r3, r2
 8007724:	4281      	cmp	r1, r0
 8007726:	d307      	bcc.n	8007738 <_strtoul_l.isra.0+0x9c>
 8007728:	d103      	bne.n	8007732 <_strtoul_l.isra.0+0x96>
 800772a:	9904      	ldr	r1, [sp, #16]
 800772c:	0013      	movs	r3, r2
 800772e:	42a1      	cmp	r1, r4
 8007730:	db02      	blt.n	8007738 <_strtoul_l.isra.0+0x9c>
 8007732:	4663      	mov	r3, ip
 8007734:	4370      	muls	r0, r6
 8007736:	1820      	adds	r0, r4, r0
 8007738:	782c      	ldrb	r4, [r5, #0]
 800773a:	3501      	adds	r5, #1
 800773c:	e7e7      	b.n	800770e <_strtoul_l.isra.0+0x72>
 800773e:	2c2b      	cmp	r4, #43	; 0x2b
 8007740:	d001      	beq.n	8007746 <_strtoul_l.isra.0+0xaa>
 8007742:	0017      	movs	r7, r2
 8007744:	e7c3      	b.n	80076ce <_strtoul_l.isra.0+0x32>
 8007746:	782c      	ldrb	r4, [r5, #0]
 8007748:	1c9d      	adds	r5, r3, #2
 800774a:	e7fa      	b.n	8007742 <_strtoul_l.isra.0+0xa6>
 800774c:	0021      	movs	r1, r4
 800774e:	3941      	subs	r1, #65	; 0x41
 8007750:	2919      	cmp	r1, #25
 8007752:	d801      	bhi.n	8007758 <_strtoul_l.isra.0+0xbc>
 8007754:	3c37      	subs	r4, #55	; 0x37
 8007756:	e7df      	b.n	8007718 <_strtoul_l.isra.0+0x7c>
 8007758:	0021      	movs	r1, r4
 800775a:	3961      	subs	r1, #97	; 0x61
 800775c:	2919      	cmp	r1, #25
 800775e:	d803      	bhi.n	8007768 <_strtoul_l.isra.0+0xcc>
 8007760:	3c57      	subs	r4, #87	; 0x57
 8007762:	e7d9      	b.n	8007718 <_strtoul_l.isra.0+0x7c>
 8007764:	0013      	movs	r3, r2
 8007766:	e7e7      	b.n	8007738 <_strtoul_l.isra.0+0x9c>
 8007768:	2b00      	cmp	r3, #0
 800776a:	da09      	bge.n	8007780 <_strtoul_l.isra.0+0xe4>
 800776c:	2322      	movs	r3, #34	; 0x22
 800776e:	2001      	movs	r0, #1
 8007770:	9a05      	ldr	r2, [sp, #20]
 8007772:	4240      	negs	r0, r0
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	9b02      	ldr	r3, [sp, #8]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d109      	bne.n	8007790 <_strtoul_l.isra.0+0xf4>
 800777c:	b007      	add	sp, #28
 800777e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007780:	2f00      	cmp	r7, #0
 8007782:	d000      	beq.n	8007786 <_strtoul_l.isra.0+0xea>
 8007784:	4240      	negs	r0, r0
 8007786:	9a02      	ldr	r2, [sp, #8]
 8007788:	2a00      	cmp	r2, #0
 800778a:	d0f7      	beq.n	800777c <_strtoul_l.isra.0+0xe0>
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <_strtoul_l.isra.0+0xf8>
 8007790:	1e6b      	subs	r3, r5, #1
 8007792:	9301      	str	r3, [sp, #4]
 8007794:	9b02      	ldr	r3, [sp, #8]
 8007796:	9a01      	ldr	r2, [sp, #4]
 8007798:	601a      	str	r2, [r3, #0]
 800779a:	e7ef      	b.n	800777c <_strtoul_l.isra.0+0xe0>
 800779c:	2430      	movs	r4, #48	; 0x30
 800779e:	2e00      	cmp	r6, #0
 80077a0:	d1a3      	bne.n	80076ea <_strtoul_l.isra.0+0x4e>
 80077a2:	3608      	adds	r6, #8
 80077a4:	e7a1      	b.n	80076ea <_strtoul_l.isra.0+0x4e>
 80077a6:	2c30      	cmp	r4, #48	; 0x30
 80077a8:	d097      	beq.n	80076da <_strtoul_l.isra.0+0x3e>
 80077aa:	260a      	movs	r6, #10
 80077ac:	e79d      	b.n	80076ea <_strtoul_l.isra.0+0x4e>
 80077ae:	46c0      	nop			; (mov r8, r8)
 80077b0:	08009059 	.word	0x08009059

080077b4 <_strtoul_r>:
 80077b4:	b510      	push	{r4, lr}
 80077b6:	f7ff ff71 	bl	800769c <_strtoul_l.isra.0>
 80077ba:	bd10      	pop	{r4, pc}

080077bc <__submore>:
 80077bc:	000b      	movs	r3, r1
 80077be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077c0:	6b4d      	ldr	r5, [r1, #52]	; 0x34
 80077c2:	3344      	adds	r3, #68	; 0x44
 80077c4:	000c      	movs	r4, r1
 80077c6:	429d      	cmp	r5, r3
 80077c8:	d11c      	bne.n	8007804 <__submore+0x48>
 80077ca:	2680      	movs	r6, #128	; 0x80
 80077cc:	00f6      	lsls	r6, r6, #3
 80077ce:	0031      	movs	r1, r6
 80077d0:	f000 f8a6 	bl	8007920 <_malloc_r>
 80077d4:	2800      	cmp	r0, #0
 80077d6:	d102      	bne.n	80077de <__submore+0x22>
 80077d8:	2001      	movs	r0, #1
 80077da:	4240      	negs	r0, r0
 80077dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80077de:	0023      	movs	r3, r4
 80077e0:	6360      	str	r0, [r4, #52]	; 0x34
 80077e2:	63a6      	str	r6, [r4, #56]	; 0x38
 80077e4:	3346      	adds	r3, #70	; 0x46
 80077e6:	781a      	ldrb	r2, [r3, #0]
 80077e8:	4b10      	ldr	r3, [pc, #64]	; (800782c <__submore+0x70>)
 80077ea:	54c2      	strb	r2, [r0, r3]
 80077ec:	0023      	movs	r3, r4
 80077ee:	3345      	adds	r3, #69	; 0x45
 80077f0:	781a      	ldrb	r2, [r3, #0]
 80077f2:	4b0f      	ldr	r3, [pc, #60]	; (8007830 <__submore+0x74>)
 80077f4:	54c2      	strb	r2, [r0, r3]
 80077f6:	782a      	ldrb	r2, [r5, #0]
 80077f8:	4b0e      	ldr	r3, [pc, #56]	; (8007834 <__submore+0x78>)
 80077fa:	54c2      	strb	r2, [r0, r3]
 80077fc:	18c0      	adds	r0, r0, r3
 80077fe:	6020      	str	r0, [r4, #0]
 8007800:	2000      	movs	r0, #0
 8007802:	e7eb      	b.n	80077dc <__submore+0x20>
 8007804:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 8007806:	0029      	movs	r1, r5
 8007808:	0073      	lsls	r3, r6, #1
 800780a:	001a      	movs	r2, r3
 800780c:	9301      	str	r3, [sp, #4]
 800780e:	f000 f8e5 	bl	80079dc <_realloc_r>
 8007812:	1e05      	subs	r5, r0, #0
 8007814:	d0e0      	beq.n	80077d8 <__submore+0x1c>
 8007816:	1987      	adds	r7, r0, r6
 8007818:	0001      	movs	r1, r0
 800781a:	0032      	movs	r2, r6
 800781c:	0038      	movs	r0, r7
 800781e:	f000 f818 	bl	8007852 <memcpy>
 8007822:	9b01      	ldr	r3, [sp, #4]
 8007824:	6027      	str	r7, [r4, #0]
 8007826:	6365      	str	r5, [r4, #52]	; 0x34
 8007828:	63a3      	str	r3, [r4, #56]	; 0x38
 800782a:	e7e9      	b.n	8007800 <__submore+0x44>
 800782c:	000003ff 	.word	0x000003ff
 8007830:	000003fe 	.word	0x000003fe
 8007834:	000003fd 	.word	0x000003fd

08007838 <__retarget_lock_acquire_recursive>:
 8007838:	4770      	bx	lr

0800783a <__retarget_lock_release_recursive>:
 800783a:	4770      	bx	lr

0800783c <memchr>:
 800783c:	b2c9      	uxtb	r1, r1
 800783e:	1882      	adds	r2, r0, r2
 8007840:	4290      	cmp	r0, r2
 8007842:	d101      	bne.n	8007848 <memchr+0xc>
 8007844:	2000      	movs	r0, #0
 8007846:	4770      	bx	lr
 8007848:	7803      	ldrb	r3, [r0, #0]
 800784a:	428b      	cmp	r3, r1
 800784c:	d0fb      	beq.n	8007846 <memchr+0xa>
 800784e:	3001      	adds	r0, #1
 8007850:	e7f6      	b.n	8007840 <memchr+0x4>

08007852 <memcpy>:
 8007852:	2300      	movs	r3, #0
 8007854:	b510      	push	{r4, lr}
 8007856:	429a      	cmp	r2, r3
 8007858:	d100      	bne.n	800785c <memcpy+0xa>
 800785a:	bd10      	pop	{r4, pc}
 800785c:	5ccc      	ldrb	r4, [r1, r3]
 800785e:	54c4      	strb	r4, [r0, r3]
 8007860:	3301      	adds	r3, #1
 8007862:	e7f8      	b.n	8007856 <memcpy+0x4>

08007864 <memmove>:
 8007864:	b510      	push	{r4, lr}
 8007866:	4288      	cmp	r0, r1
 8007868:	d902      	bls.n	8007870 <memmove+0xc>
 800786a:	188b      	adds	r3, r1, r2
 800786c:	4298      	cmp	r0, r3
 800786e:	d303      	bcc.n	8007878 <memmove+0x14>
 8007870:	2300      	movs	r3, #0
 8007872:	e007      	b.n	8007884 <memmove+0x20>
 8007874:	5c8b      	ldrb	r3, [r1, r2]
 8007876:	5483      	strb	r3, [r0, r2]
 8007878:	3a01      	subs	r2, #1
 800787a:	d2fb      	bcs.n	8007874 <memmove+0x10>
 800787c:	bd10      	pop	{r4, pc}
 800787e:	5ccc      	ldrb	r4, [r1, r3]
 8007880:	54c4      	strb	r4, [r0, r3]
 8007882:	3301      	adds	r3, #1
 8007884:	429a      	cmp	r2, r3
 8007886:	d1fa      	bne.n	800787e <memmove+0x1a>
 8007888:	e7f8      	b.n	800787c <memmove+0x18>
	...

0800788c <_free_r>:
 800788c:	b570      	push	{r4, r5, r6, lr}
 800788e:	0005      	movs	r5, r0
 8007890:	2900      	cmp	r1, #0
 8007892:	d010      	beq.n	80078b6 <_free_r+0x2a>
 8007894:	1f0c      	subs	r4, r1, #4
 8007896:	6823      	ldr	r3, [r4, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	da00      	bge.n	800789e <_free_r+0x12>
 800789c:	18e4      	adds	r4, r4, r3
 800789e:	0028      	movs	r0, r5
 80078a0:	f000 f8d4 	bl	8007a4c <__malloc_lock>
 80078a4:	4a1d      	ldr	r2, [pc, #116]	; (800791c <_free_r+0x90>)
 80078a6:	6813      	ldr	r3, [r2, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d105      	bne.n	80078b8 <_free_r+0x2c>
 80078ac:	6063      	str	r3, [r4, #4]
 80078ae:	6014      	str	r4, [r2, #0]
 80078b0:	0028      	movs	r0, r5
 80078b2:	f000 f8d3 	bl	8007a5c <__malloc_unlock>
 80078b6:	bd70      	pop	{r4, r5, r6, pc}
 80078b8:	42a3      	cmp	r3, r4
 80078ba:	d908      	bls.n	80078ce <_free_r+0x42>
 80078bc:	6821      	ldr	r1, [r4, #0]
 80078be:	1860      	adds	r0, r4, r1
 80078c0:	4283      	cmp	r3, r0
 80078c2:	d1f3      	bne.n	80078ac <_free_r+0x20>
 80078c4:	6818      	ldr	r0, [r3, #0]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	1841      	adds	r1, r0, r1
 80078ca:	6021      	str	r1, [r4, #0]
 80078cc:	e7ee      	b.n	80078ac <_free_r+0x20>
 80078ce:	001a      	movs	r2, r3
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d001      	beq.n	80078da <_free_r+0x4e>
 80078d6:	42a3      	cmp	r3, r4
 80078d8:	d9f9      	bls.n	80078ce <_free_r+0x42>
 80078da:	6811      	ldr	r1, [r2, #0]
 80078dc:	1850      	adds	r0, r2, r1
 80078de:	42a0      	cmp	r0, r4
 80078e0:	d10b      	bne.n	80078fa <_free_r+0x6e>
 80078e2:	6820      	ldr	r0, [r4, #0]
 80078e4:	1809      	adds	r1, r1, r0
 80078e6:	1850      	adds	r0, r2, r1
 80078e8:	6011      	str	r1, [r2, #0]
 80078ea:	4283      	cmp	r3, r0
 80078ec:	d1e0      	bne.n	80078b0 <_free_r+0x24>
 80078ee:	6818      	ldr	r0, [r3, #0]
 80078f0:	685b      	ldr	r3, [r3, #4]
 80078f2:	1841      	adds	r1, r0, r1
 80078f4:	6011      	str	r1, [r2, #0]
 80078f6:	6053      	str	r3, [r2, #4]
 80078f8:	e7da      	b.n	80078b0 <_free_r+0x24>
 80078fa:	42a0      	cmp	r0, r4
 80078fc:	d902      	bls.n	8007904 <_free_r+0x78>
 80078fe:	230c      	movs	r3, #12
 8007900:	602b      	str	r3, [r5, #0]
 8007902:	e7d5      	b.n	80078b0 <_free_r+0x24>
 8007904:	6821      	ldr	r1, [r4, #0]
 8007906:	1860      	adds	r0, r4, r1
 8007908:	4283      	cmp	r3, r0
 800790a:	d103      	bne.n	8007914 <_free_r+0x88>
 800790c:	6818      	ldr	r0, [r3, #0]
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	1841      	adds	r1, r0, r1
 8007912:	6021      	str	r1, [r4, #0]
 8007914:	6063      	str	r3, [r4, #4]
 8007916:	6054      	str	r4, [r2, #4]
 8007918:	e7ca      	b.n	80078b0 <_free_r+0x24>
 800791a:	46c0      	nop			; (mov r8, r8)
 800791c:	200000a4 	.word	0x200000a4

08007920 <_malloc_r>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	2303      	movs	r3, #3
 8007924:	1ccd      	adds	r5, r1, #3
 8007926:	439d      	bics	r5, r3
 8007928:	3508      	adds	r5, #8
 800792a:	0006      	movs	r6, r0
 800792c:	2d0c      	cmp	r5, #12
 800792e:	d21f      	bcs.n	8007970 <_malloc_r+0x50>
 8007930:	250c      	movs	r5, #12
 8007932:	42a9      	cmp	r1, r5
 8007934:	d81e      	bhi.n	8007974 <_malloc_r+0x54>
 8007936:	0030      	movs	r0, r6
 8007938:	f000 f888 	bl	8007a4c <__malloc_lock>
 800793c:	4925      	ldr	r1, [pc, #148]	; (80079d4 <_malloc_r+0xb4>)
 800793e:	680a      	ldr	r2, [r1, #0]
 8007940:	0014      	movs	r4, r2
 8007942:	2c00      	cmp	r4, #0
 8007944:	d11a      	bne.n	800797c <_malloc_r+0x5c>
 8007946:	4f24      	ldr	r7, [pc, #144]	; (80079d8 <_malloc_r+0xb8>)
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d104      	bne.n	8007958 <_malloc_r+0x38>
 800794e:	0021      	movs	r1, r4
 8007950:	0030      	movs	r0, r6
 8007952:	f000 f869 	bl	8007a28 <_sbrk_r>
 8007956:	6038      	str	r0, [r7, #0]
 8007958:	0029      	movs	r1, r5
 800795a:	0030      	movs	r0, r6
 800795c:	f000 f864 	bl	8007a28 <_sbrk_r>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d12b      	bne.n	80079bc <_malloc_r+0x9c>
 8007964:	230c      	movs	r3, #12
 8007966:	0030      	movs	r0, r6
 8007968:	6033      	str	r3, [r6, #0]
 800796a:	f000 f877 	bl	8007a5c <__malloc_unlock>
 800796e:	e003      	b.n	8007978 <_malloc_r+0x58>
 8007970:	2d00      	cmp	r5, #0
 8007972:	dade      	bge.n	8007932 <_malloc_r+0x12>
 8007974:	230c      	movs	r3, #12
 8007976:	6033      	str	r3, [r6, #0]
 8007978:	2000      	movs	r0, #0
 800797a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800797c:	6823      	ldr	r3, [r4, #0]
 800797e:	1b5b      	subs	r3, r3, r5
 8007980:	d419      	bmi.n	80079b6 <_malloc_r+0x96>
 8007982:	2b0b      	cmp	r3, #11
 8007984:	d903      	bls.n	800798e <_malloc_r+0x6e>
 8007986:	6023      	str	r3, [r4, #0]
 8007988:	18e4      	adds	r4, r4, r3
 800798a:	6025      	str	r5, [r4, #0]
 800798c:	e003      	b.n	8007996 <_malloc_r+0x76>
 800798e:	6863      	ldr	r3, [r4, #4]
 8007990:	42a2      	cmp	r2, r4
 8007992:	d10e      	bne.n	80079b2 <_malloc_r+0x92>
 8007994:	600b      	str	r3, [r1, #0]
 8007996:	0030      	movs	r0, r6
 8007998:	f000 f860 	bl	8007a5c <__malloc_unlock>
 800799c:	0020      	movs	r0, r4
 800799e:	2207      	movs	r2, #7
 80079a0:	300b      	adds	r0, #11
 80079a2:	1d23      	adds	r3, r4, #4
 80079a4:	4390      	bics	r0, r2
 80079a6:	1ac2      	subs	r2, r0, r3
 80079a8:	4298      	cmp	r0, r3
 80079aa:	d0e6      	beq.n	800797a <_malloc_r+0x5a>
 80079ac:	1a1b      	subs	r3, r3, r0
 80079ae:	50a3      	str	r3, [r4, r2]
 80079b0:	e7e3      	b.n	800797a <_malloc_r+0x5a>
 80079b2:	6053      	str	r3, [r2, #4]
 80079b4:	e7ef      	b.n	8007996 <_malloc_r+0x76>
 80079b6:	0022      	movs	r2, r4
 80079b8:	6864      	ldr	r4, [r4, #4]
 80079ba:	e7c2      	b.n	8007942 <_malloc_r+0x22>
 80079bc:	2303      	movs	r3, #3
 80079be:	1cc4      	adds	r4, r0, #3
 80079c0:	439c      	bics	r4, r3
 80079c2:	42a0      	cmp	r0, r4
 80079c4:	d0e1      	beq.n	800798a <_malloc_r+0x6a>
 80079c6:	1a21      	subs	r1, r4, r0
 80079c8:	0030      	movs	r0, r6
 80079ca:	f000 f82d 	bl	8007a28 <_sbrk_r>
 80079ce:	1c43      	adds	r3, r0, #1
 80079d0:	d1db      	bne.n	800798a <_malloc_r+0x6a>
 80079d2:	e7c7      	b.n	8007964 <_malloc_r+0x44>
 80079d4:	200000a4 	.word	0x200000a4
 80079d8:	200000a8 	.word	0x200000a8

080079dc <_realloc_r>:
 80079dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079de:	0007      	movs	r7, r0
 80079e0:	000d      	movs	r5, r1
 80079e2:	0016      	movs	r6, r2
 80079e4:	2900      	cmp	r1, #0
 80079e6:	d105      	bne.n	80079f4 <_realloc_r+0x18>
 80079e8:	0011      	movs	r1, r2
 80079ea:	f7ff ff99 	bl	8007920 <_malloc_r>
 80079ee:	0004      	movs	r4, r0
 80079f0:	0020      	movs	r0, r4
 80079f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d103      	bne.n	8007a00 <_realloc_r+0x24>
 80079f8:	f7ff ff48 	bl	800788c <_free_r>
 80079fc:	0034      	movs	r4, r6
 80079fe:	e7f7      	b.n	80079f0 <_realloc_r+0x14>
 8007a00:	f000 f834 	bl	8007a6c <_malloc_usable_size_r>
 8007a04:	002c      	movs	r4, r5
 8007a06:	42b0      	cmp	r0, r6
 8007a08:	d2f2      	bcs.n	80079f0 <_realloc_r+0x14>
 8007a0a:	0031      	movs	r1, r6
 8007a0c:	0038      	movs	r0, r7
 8007a0e:	f7ff ff87 	bl	8007920 <_malloc_r>
 8007a12:	1e04      	subs	r4, r0, #0
 8007a14:	d0ec      	beq.n	80079f0 <_realloc_r+0x14>
 8007a16:	0029      	movs	r1, r5
 8007a18:	0032      	movs	r2, r6
 8007a1a:	f7ff ff1a 	bl	8007852 <memcpy>
 8007a1e:	0029      	movs	r1, r5
 8007a20:	0038      	movs	r0, r7
 8007a22:	f7ff ff33 	bl	800788c <_free_r>
 8007a26:	e7e3      	b.n	80079f0 <_realloc_r+0x14>

08007a28 <_sbrk_r>:
 8007a28:	2300      	movs	r3, #0
 8007a2a:	b570      	push	{r4, r5, r6, lr}
 8007a2c:	4d06      	ldr	r5, [pc, #24]	; (8007a48 <_sbrk_r+0x20>)
 8007a2e:	0004      	movs	r4, r0
 8007a30:	0008      	movs	r0, r1
 8007a32:	602b      	str	r3, [r5, #0]
 8007a34:	f7fb f8ec 	bl	8002c10 <_sbrk>
 8007a38:	1c43      	adds	r3, r0, #1
 8007a3a:	d103      	bne.n	8007a44 <_sbrk_r+0x1c>
 8007a3c:	682b      	ldr	r3, [r5, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d000      	beq.n	8007a44 <_sbrk_r+0x1c>
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	bd70      	pop	{r4, r5, r6, pc}
 8007a46:	46c0      	nop			; (mov r8, r8)
 8007a48:	200001d8 	.word	0x200001d8

08007a4c <__malloc_lock>:
 8007a4c:	b510      	push	{r4, lr}
 8007a4e:	4802      	ldr	r0, [pc, #8]	; (8007a58 <__malloc_lock+0xc>)
 8007a50:	f7ff fef2 	bl	8007838 <__retarget_lock_acquire_recursive>
 8007a54:	bd10      	pop	{r4, pc}
 8007a56:	46c0      	nop			; (mov r8, r8)
 8007a58:	200001e0 	.word	0x200001e0

08007a5c <__malloc_unlock>:
 8007a5c:	b510      	push	{r4, lr}
 8007a5e:	4802      	ldr	r0, [pc, #8]	; (8007a68 <__malloc_unlock+0xc>)
 8007a60:	f7ff feeb 	bl	800783a <__retarget_lock_release_recursive>
 8007a64:	bd10      	pop	{r4, pc}
 8007a66:	46c0      	nop			; (mov r8, r8)
 8007a68:	200001e0 	.word	0x200001e0

08007a6c <_malloc_usable_size_r>:
 8007a6c:	1f0b      	subs	r3, r1, #4
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	1f18      	subs	r0, r3, #4
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	da01      	bge.n	8007a7a <_malloc_usable_size_r+0xe>
 8007a76:	580b      	ldr	r3, [r1, r0]
 8007a78:	18c0      	adds	r0, r0, r3
 8007a7a:	4770      	bx	lr

08007a7c <_init>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	46c0      	nop			; (mov r8, r8)
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr

08007a88 <_fini>:
 8007a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a8a:	46c0      	nop			; (mov r8, r8)
 8007a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a8e:	bc08      	pop	{r3}
 8007a90:	469e      	mov	lr, r3
 8007a92:	4770      	bx	lr
